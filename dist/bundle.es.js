var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key2, value26) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value: value26 }) : obj[key2] = value26;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
function makeMap(str, expectsLowerCase) {
  const map2 = Object.create(null);
  const list = str.split(",");
  for (let i2 = 0; i2 < list.length; i2++) {
    map2[list[i2]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value26) {
  return !!value26 || value26 === "";
}
function normalizeStyle(value26) {
  if (isArray$5(value26)) {
    const res = {};
    for (let i2 = 0; i2 < value26.length; i2++) {
      const item = value26[i2];
      const normalized = isString$4(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key2 in normalized) {
          res[key2] = normalized[key2];
        }
      }
    }
    return res;
  } else if (isString$4(value26)) {
    return value26;
  } else if (isObject$5(value26)) {
    return value26;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value26) {
  let res = "";
  if (isString$4(value26)) {
    res = value26;
  } else if (isArray$5(value26)) {
    for (let i2 = 0; i2 < value26.length; i2++) {
      const normalized = normalizeClass(value26[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$5(value26)) {
    for (const name2 in value26) {
      if (value26[name2]) {
        res += name2 + " ";
      }
    }
  }
  return res.trim();
}
const toDisplayString = (val) => {
  return val == null ? "" : isArray$5(val) || isObject$5(val) && (val.toString === objectToString$1 || !isFunction$4(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap$2(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key2, val2]) => {
        entries[`${key2} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet$2(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject$5(val) && !isArray$5(val) && !isPlainObject$2(val)) {
    return String(val);
  }
  return val;
};
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const onRE$1 = /^on[^a-z]/;
const isOn$1 = (key2) => onRE$1.test(key2);
const isModelListener = (key2) => key2.startsWith("onUpdate:");
const extend$2 = Object.assign;
const remove$1 = (arr, el) => {
  const i2 = arr.indexOf(el);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$e = Object.prototype.hasOwnProperty;
const hasOwn$1 = (val, key2) => hasOwnProperty$e.call(val, key2);
const isArray$5 = Array.isArray;
const isMap$2 = (val) => toTypeString(val) === "[object Map]";
const isSet$2 = (val) => toTypeString(val) === "[object Set]";
const isFunction$4 = (val) => typeof val === "function";
const isString$4 = (val) => typeof val === "string";
const isSymbol$1 = (val) => typeof val === "symbol";
const isObject$5 = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject$5(val) && isFunction$4(val.then) && isFunction$4(val.catch);
};
const objectToString$1 = Object.prototype.toString;
const toTypeString = (value26) => objectToString$1.call(value26);
const toRawType = (value26) => {
  return toTypeString(value26).slice(8, -1);
};
const isPlainObject$2 = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key2) => isString$4(key2) && key2 !== "NaN" && key2[0] !== "-" && "" + parseInt(key2, 10) === key2;
const isReservedProp = /* @__PURE__ */ makeMap(",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction$1 = (fn) => {
  const cache = Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
const camelizeRE$1 = /-(\w)/g;
const camelize$1 = cacheStringFunction$1((str) => {
  return str.replace(camelizeRE$1, (_2, c2) => c2 ? c2.toUpperCase() : "");
});
const hyphenateRE$1 = /\B([A-Z])/g;
const hyphenate$1 = cacheStringFunction$1((str) => str.replace(hyphenateRE$1, "-$1").toLowerCase());
const capitalize = cacheStringFunction$1((str) => str.charAt(0).toUpperCase() + str.slice(1));
const toHandlerKey = cacheStringFunction$1((str) => str ? `on${capitalize(str)}` : ``);
const hasChanged = (value26, oldValue) => !Object.is(value26, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](arg);
  }
};
const def = (obj, key2, value26) => {
  Object.defineProperty(obj, key2, {
    configurable: true,
    enumerable: false,
    value: value26
  });
};
const toNumber$1 = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
let activeEffectScope;
const effectScopeStack = [];
class EffectScope {
  constructor(detached = false) {
    this.active = true;
    this.effects = [];
    this.cleanups = [];
    if (!detached && activeEffectScope) {
      this.parent = activeEffectScope;
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
    }
  }
  run(fn) {
    if (this.active) {
      try {
        this.on();
        return fn();
      } finally {
        this.off();
      }
    }
  }
  on() {
    if (this.active) {
      effectScopeStack.push(this);
      activeEffectScope = this;
    }
  }
  off() {
    if (this.active) {
      effectScopeStack.pop();
      activeEffectScope = effectScopeStack[effectScopeStack.length - 1];
    }
  }
  stop(fromParent) {
    if (this.active) {
      this.effects.forEach((e2) => e2.stop());
      this.cleanups.forEach((cleanup) => cleanup());
      if (this.scopes) {
        this.scopes.forEach((e2) => e2.stop(true));
      }
      if (this.parent && !fromParent) {
        const last2 = this.parent.scopes.pop();
        if (last2 && last2 !== this) {
          this.parent.scopes[this.index] = last2;
          last2.index = this.index;
        }
      }
      this.active = false;
    }
  }
}
function recordEffectScope(effect, scope) {
  scope = scope || activeEffectScope;
  if (scope && scope.active) {
    scope.effects.push(effect);
  }
}
const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect) => {
  const { deps } = effect;
  if (deps.length) {
    let ptr = 0;
    for (let i2 = 0; i2 < deps.length; i2++) {
      const dep = deps[i2];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap = new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
const effectStack = [];
let activeEffect;
const ITERATE_KEY = Symbol("");
const MAP_KEY_ITERATE_KEY = Symbol("");
class ReactiveEffect {
  constructor(fn, scheduler = null, scope) {
    this.fn = fn;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    if (!effectStack.includes(this)) {
      try {
        effectStack.push(activeEffect = this);
        enableTracking();
        trackOpBit = 1 << ++effectTrackDepth;
        if (effectTrackDepth <= maxMarkerBits) {
          initDepMarkers(this);
        } else {
          cleanupEffect(this);
        }
        return this.fn();
      } finally {
        if (effectTrackDepth <= maxMarkerBits) {
          finalizeDepMarkers(this);
        }
        trackOpBit = 1 << --effectTrackDepth;
        resetTracking();
        effectStack.pop();
        const n2 = effectStack.length;
        activeEffect = n2 > 0 ? effectStack[n2 - 1] : void 0;
      }
    }
  }
  stop() {
    if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect) {
  const { deps } = effect;
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].delete(effect);
    }
    deps.length = 0;
  }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function enableTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = true;
}
function resetTracking() {
  const last2 = trackStack.pop();
  shouldTrack = last2 === void 0 ? true : last2;
}
function track(target, type3, key2) {
  if (!isTracking()) {
    return;
  }
  let depsMap = targetMap.get(target);
  if (!depsMap) {
    targetMap.set(target, depsMap = new Map());
  }
  let dep = depsMap.get(key2);
  if (!dep) {
    depsMap.set(key2, dep = createDep());
  }
  trackEffects(dep);
}
function isTracking() {
  return shouldTrack && activeEffect !== void 0;
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
  }
}
function trigger$1(target, type3, key2, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type3 === "clear") {
    deps = [...depsMap.values()];
  } else if (key2 === "length" && isArray$5(target)) {
    depsMap.forEach((dep, key3) => {
      if (key3 === "length" || key3 >= newValue) {
        deps.push(dep);
      }
    });
  } else {
    if (key2 !== void 0) {
      deps.push(depsMap.get(key2));
    }
    switch (type3) {
      case "add":
        if (!isArray$5(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap$2(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key2)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$5(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap$2(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap$2(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  for (const effect of isArray$5(dep) ? dep : [...dep]) {
    if (effect !== activeEffect || effect.allowRecurse) {
      if (effect.scheduler) {
        effect.scheduler();
      } else {
        effect.run();
      }
    }
  }
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key2) => Symbol[key2]).filter(isSymbol$1));
const get$3 = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key2) => {
    instrumentations[key2] = function(...args) {
      const arr = toRaw(this);
      for (let i2 = 0, l2 = this.length; i2 < l2; i2++) {
        track(arr, "get", i2 + "");
      }
      const res = arr[key2](...args);
      if (res === -1 || res === false) {
        return arr[key2](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key2) => {
    instrumentations[key2] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key2].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key2, receiver) {
    if (key2 === "__v_isReactive") {
      return !isReadonly2;
    } else if (key2 === "__v_isReadonly") {
      return isReadonly2;
    } else if (key2 === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray$5(target);
    if (!isReadonly2 && targetIsArray && hasOwn$1(arrayInstrumentations, key2)) {
      return Reflect.get(arrayInstrumentations, key2, receiver);
    }
    const res = Reflect.get(target, key2, receiver);
    if (isSymbol$1(key2) ? builtInSymbols.has(key2) : isNonTrackableKeys(key2)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key2);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      const shouldUnwrap = !targetIsArray || !isIntegerKey(key2);
      return shouldUnwrap ? res.value : res;
    }
    if (isObject$5(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set$2 = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key2, value26, receiver) {
    let oldValue = target[key2];
    if (!shallow) {
      value26 = toRaw(value26);
      oldValue = toRaw(oldValue);
      if (!isArray$5(target) && isRef(oldValue) && !isRef(value26)) {
        oldValue.value = value26;
        return true;
      }
    }
    const hadKey = isArray$5(target) && isIntegerKey(key2) ? Number(key2) < target.length : hasOwn$1(target, key2);
    const result = Reflect.set(target, key2, value26, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger$1(target, "add", key2, value26);
      } else if (hasChanged(value26, oldValue)) {
        trigger$1(target, "set", key2, value26);
      }
    }
    return result;
  };
}
function deleteProperty(target, key2) {
  const hadKey = hasOwn$1(target, key2);
  target[key2];
  const result = Reflect.deleteProperty(target, key2);
  if (result && hadKey) {
    trigger$1(target, "delete", key2, void 0);
  }
  return result;
}
function has(target, key2) {
  const result = Reflect.has(target, key2);
  if (!isSymbol$1(key2) || !builtInSymbols.has(key2)) {
    track(target, "has", key2);
  }
  return result;
}
function ownKeys$3(target) {
  track(target, "iterate", isArray$5(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
const mutableHandlers = {
  get: get$3,
  set: set$2,
  deleteProperty,
  has,
  ownKeys: ownKeys$3
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target, key2) {
    return true;
  },
  deleteProperty(target, key2) {
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ extend$2({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
const toShallow = (value26) => value26;
const getProto = (v2) => Reflect.getPrototypeOf(v2);
function get$1$2(target, key2, isReadonly2 = false, isShallow = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key2);
  if (key2 !== rawKey) {
    !isReadonly2 && track(rawTarget, "get", key2);
  }
  !isReadonly2 && track(rawTarget, "get", rawKey);
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key2)) {
    return wrap(target.get(key2));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key2);
  }
}
function has$1(key2, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key2);
  if (key2 !== rawKey) {
    !isReadonly2 && track(rawTarget, "has", key2);
  }
  !isReadonly2 && track(rawTarget, "has", rawKey);
  return key2 === rawKey ? target.has(key2) : target.has(key2) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add$2(value26) {
  value26 = toRaw(value26);
  const target = toRaw(this);
  const proto2 = getProto(target);
  const hadKey = proto2.has.call(target, value26);
  if (!hadKey) {
    target.add(value26);
    trigger$1(target, "add", value26, value26);
  }
  return this;
}
function set$1$1(key2, value26) {
  value26 = toRaw(value26);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key2);
  if (!hadKey) {
    key2 = toRaw(key2);
    hadKey = has2.call(target, key2);
  }
  const oldValue = get2.call(target, key2);
  target.set(key2, value26);
  if (!hadKey) {
    trigger$1(target, "add", key2, value26);
  } else if (hasChanged(value26, oldValue)) {
    trigger$1(target, "set", key2, value26);
  }
  return this;
}
function deleteEntry(key2) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key2);
  if (!hadKey) {
    key2 = toRaw(key2);
    hadKey = has2.call(target, key2);
  }
  get2 ? get2.call(target, key2) : void 0;
  const result = target.delete(key2);
  if (hadKey) {
    trigger$1(target, "delete", key2, void 0);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const result = target.clear();
  if (hadItems) {
    trigger$1(target, "clear", void 0, void 0);
  }
  return result;
}
function createForEach(isReadonly2, isShallow) {
  return function forEach3(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value26, key2) => {
      return callback.call(thisArg, wrap(value26), wrap(key2), observed);
    });
  };
}
function createIterableMethod(method3, isReadonly2, isShallow) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap$2(rawTarget);
    const isPair = method3 === "entries" || method3 === Symbol.iterator && targetIsMap;
    const isKeyOnly = method3 === "keys" && targetIsMap;
    const innerIterator = target[method3](...args);
    const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const { value: value26, done } = innerIterator.next();
        return done ? { value: value26, done } : {
          value: isPair ? [wrap(value26[0]), wrap(value26[1])] : wrap(value26),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type3) {
  return function(...args) {
    return type3 === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key2) {
      return get$1$2(this, key2);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add: add$2,
    set: set$1$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key2) {
      return get$1$2(this, key2, false, true);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add: add$2,
    set: set$1$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key2) {
      return get$1$2(this, key2, true);
    },
    get size() {
      return size(this, true);
    },
    has(key2) {
      return has$1.call(this, key2, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key2) {
      return get$1$2(this, key2, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key2) {
      return has$1.call(this, key2, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method3) => {
    mutableInstrumentations2[method3] = createIterableMethod(method3, false, false);
    readonlyInstrumentations2[method3] = createIterableMethod(method3, true, false);
    shallowInstrumentations2[method3] = createIterableMethod(method3, false, true);
    shallowReadonlyInstrumentations2[method3] = createIterableMethod(method3, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key2, receiver) => {
    if (key2 === "__v_isReactive") {
      return !isReadonly2;
    } else if (key2 === "__v_isReadonly") {
      return isReadonly2;
    } else if (key2 === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn$1(instrumentations, key2) && key2 in target ? instrumentations : target, key2, receiver);
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value26) {
  return value26["__v_skip"] || !Object.isExtensible(value26) ? 0 : targetTypeMap(toRawType(value26));
}
function reactive(target) {
  if (target && target["__v_isReadonly"]) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$5(target)) {
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value26) {
  if (isReadonly(value26)) {
    return isReactive(value26["__v_raw"]);
  }
  return !!(value26 && value26["__v_isReactive"]);
}
function isReadonly(value26) {
  return !!(value26 && value26["__v_isReadonly"]);
}
function isProxy(value26) {
  return isReactive(value26) || isReadonly(value26);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value26) {
  def(value26, "__v_skip", true);
  return value26;
}
const toReactive = (value26) => isObject$5(value26) ? reactive(value26) : value26;
const toReadonly = (value26) => isObject$5(value26) ? readonly(value26) : value26;
function trackRefValue(ref2) {
  if (isTracking()) {
    ref2 = toRaw(ref2);
    if (!ref2.dep) {
      ref2.dep = createDep();
    }
    {
      trackEffects(ref2.dep);
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  if (ref2.dep) {
    {
      triggerEffects(ref2.dep);
    }
  }
}
function isRef(r2) {
  return Boolean(r2 && r2.__v_isRef === true);
}
function ref(value26) {
  return createRef$2(value26, false);
}
function shallowRef(value26) {
  return createRef$2(value26, true);
}
function createRef$2(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value26, _shallow) {
    this._shallow = _shallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = _shallow ? value26 : toRaw(value26);
    this._value = _shallow ? value26 : toReactive(value26);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    newVal = this._shallow ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = this._shallow ? newVal : toReactive(newVal);
      triggerRefValue(this);
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key2, receiver) => unref(Reflect.get(target, key2, receiver)),
  set: (target, key2, value26, receiver) => {
    const oldValue = target[key2];
    if (isRef(oldValue) && !isRef(value26)) {
      oldValue.value = value26;
      return true;
    } else {
      return Reflect.set(target, key2, value26, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class ObjectRefImpl {
  constructor(_object, _key) {
    this._object = _object;
    this._key = _key;
    this.__v_isRef = true;
  }
  get value() {
    return this._object[this._key];
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
}
function toRef(object3, key2) {
  const val = object3[key2];
  return isRef(val) ? val : new ObjectRefImpl(object3, key2);
}
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2) {
    this._setter = _setter;
    this.dep = void 0;
    this._dirty = true;
    this.__v_isRef = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
function computed(getterOrOptions, debugOptions) {
  let getter;
  let setter;
  const onlyGetter = isFunction$4(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter);
  return cRef;
}
Promise.resolve();
function emit$1(instance, event, ...rawArgs) {
  const props2 = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props2) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number: number3, trim: trim2 } = props2[modifiersKey] || EMPTY_OBJ;
    if (trim2) {
      args = rawArgs.map((a2) => a2.trim());
    } else if (number3) {
      args = rawArgs.map(toNumber$1);
    }
  }
  let handlerName;
  let handler8 = props2[handlerName = toHandlerKey(event)] || props2[handlerName = toHandlerKey(camelize$1(event))];
  if (!handler8 && isModelListener2) {
    handler8 = props2[handlerName = toHandlerKey(hyphenate$1(event))];
  }
  if (handler8) {
    callWithAsyncErrorHandling(handler8, instance, 6, args);
  }
  const onceHandler = props2[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached2 = cache.get(comp);
  if (cached2 !== void 0) {
    return cached2;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$4(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$2(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    cache.set(comp, null);
    return null;
  }
  if (isArray$5(raw)) {
    raw.forEach((key2) => normalized[key2] = null);
  } else {
    extend$2(normalized, raw);
  }
  cache.set(comp, normalized);
  return normalized;
}
function isEmitListener(options2, key2) {
  if (!options2 || !isOn$1(key2)) {
    return false;
  }
  key2 = key2.slice(2).replace(/Once$/, "");
  return hasOwn$1(options2, key2[0].toLowerCase() + key2.slice(1)) || hasOwn$1(options2, hyphenate$1(key2)) || hasOwn$1(options2, key2);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev3 = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev3;
}
function pushScopeId(id2) {
  currentScopeId = id2;
}
function popScopeId() {
  currentScopeId = null;
}
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn;
  if (fn._n) {
    return fn;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    const res = fn(...args);
    setCurrentRenderingInstance(prevInstance);
    if (renderFnWithContext._d) {
      setBlockTracking(1);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function markAttrsAccessed() {
}
function renderComponentRoot(instance) {
  const { type: Component, vnode, proxy, withProxy, props: props2, propsOptions: [propsOptions], slots, attrs, emit, render: render166, renderCache, data: data80, setupState, ctx, inheritAttrs } = instance;
  let result;
  let fallthroughAttrs;
  const prev3 = setCurrentRenderingInstance(instance);
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render166.call(proxyToUse, proxyToUse, renderCache, props2, setupState, data80, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render167 = Component;
      if (false)
        ;
      result = normalizeVNode(render167.length > 1 ? render167(props2, false ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit
      } : { attrs, slots, emit }) : render167(props2, null));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment$1);
  }
  let root2 = result;
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys2 = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root2;
    if (keys2.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys2.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
        }
        root2 = cloneVNode(root2, fallthroughAttrs);
      }
    }
  }
  if (vnode.dirs) {
    root2.dirs = root2.dirs ? root2.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    root2.transition = vnode.transition;
  }
  {
    result = root2;
  }
  setCurrentRenderingInstance(prev3);
  return result;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key2 in attrs) {
    if (key2 === "class" || key2 === "style" || isOn$1(key2)) {
      (res || (res = {}))[key2] = attrs[key2];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props2) => {
  const res = {};
  for (const key2 in attrs) {
    if (!isModelListener(key2) || !(key2.slice(9) in props2)) {
      res[key2] = attrs[key2];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key2 = dynamicProps[i2];
        if (nextProps[key2] !== prevProps[key2] && !isEmitListener(emits, key2)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key2 = nextKeys[i2];
    if (nextProps[key2] !== prevProps[key2] && !isEmitListener(emitsOptions, key2)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent: parent2 }, el) {
  while (parent2 && parent2.subTree === vnode) {
    (vnode = parent2.vnode).el = el;
    parent2 = parent2.parent;
  }
}
const isSuspense = (type3) => type3.__isSuspense;
function queueEffectWithSuspense(fn, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$5(fn)) {
      suspense.effects.push(...fn);
    } else {
      suspense.effects.push(fn);
    }
  } else {
    queuePostFlushCb(fn);
  }
}
function provide(key2, value26) {
  if (!currentInstance)
    ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key2] = value26;
  }
}
function inject(key2, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key2 in provides) {
      return provides[key2];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$4(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else
      ;
  }
}
function useTransitionState() {
  const state2 = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: new Map()
  };
  onMounted(() => {
    state2.isMounted = true;
  });
  onBeforeUnmount(() => {
    state2.isUnmounting = true;
  });
  return state2;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    onBeforeEnter: TransitionHookValidator,
    onEnter: TransitionHookValidator,
    onAfterEnter: TransitionHookValidator,
    onEnterCancelled: TransitionHookValidator,
    onBeforeLeave: TransitionHookValidator,
    onLeave: TransitionHookValidator,
    onAfterLeave: TransitionHookValidator,
    onLeaveCancelled: TransitionHookValidator,
    onBeforeAppear: TransitionHookValidator,
    onAppear: TransitionHookValidator,
    onAfterAppear: TransitionHookValidator,
    onAppearCancelled: TransitionHookValidator
  },
  setup(props2, { slots }) {
    const instance = getCurrentInstance();
    const state2 = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      const rawProps = toRaw(props2);
      const { mode: mode4 } = rawProps;
      const child = children[0];
      if (state2.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(innerChild, rawProps, state2, instance);
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key2 = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key2;
        } else if (key2 !== prevTransitionKey) {
          prevTransitionKey = key2;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment$1 && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state2, instance);
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode4 === "out-in") {
          state2.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state2.isLeaving = false;
            instance.update();
          };
          return emptyPlaceholder(child);
        } else if (mode4 === "in-out" && innerChild.type !== Comment$1) {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(state2, oldInnerChild);
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el._leaveCb = () => {
              earlyRemove();
              el._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state2, vnode) {
  const { leavingVNodes } = state2;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props2, state2, instance) {
  const { appear, mode: mode4, persisted = false, onBeforeEnter, onEnter: onEnter2, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave: onLeave2, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props2;
  const key2 = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state2, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(hook, instance, 9, args);
  };
  const hooks2 = {
    mode: mode4,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state2.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el._leaveCb) {
        el._leaveCb(true);
      }
      const leavingVNode = leavingVNodesCache[key2];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook2(hook, [el]);
    },
    enter(el) {
      let hook = onEnter2;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state2.isMounted) {
        if (appear) {
          hook = onAppear || onEnter2;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el]);
        } else {
          callHook2(afterHook, [el]);
        }
        if (hooks2.delayedLeave) {
          hooks2.delayedLeave();
        }
        el._enterCb = void 0;
      };
      if (hook) {
        hook(el, done);
        if (hook.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    leave(el, remove3) {
      const key3 = String(vnode.key);
      if (el._enterCb) {
        el._enterCb(true);
      }
      if (state2.isUnmounting) {
        return remove3();
      }
      callHook2(onBeforeLeave, [el]);
      let called = false;
      const done = el._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove3();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el]);
        } else {
          callHook2(onAfterLeave, [el]);
        }
        el._leaveCb = void 0;
        if (leavingVNodesCache[key3] === vnode) {
          delete leavingVNodesCache[key3];
        }
      };
      leavingVNodesCache[key3] = vnode;
      if (onLeave2) {
        onLeave2(el, done);
        if (onLeave2.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props2, state2, instance);
    }
  };
  return hooks2;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks2) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks2);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks2.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks2.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks2;
  }
}
function getTransitionRawChildren(children, keepComment = false) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren(child.children, keepComment));
    } else if (keepComment || child.type !== Comment$1) {
      ret.push(child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i2 = 0; i2 < ret.length; i2++) {
      ret[i2].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent(options2) {
  return isFunction$4(options2) ? { setup: options2, name: options2.name } : options2;
}
const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type3, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current2 = target;
    while (current2) {
      if (current2.isDeactivated) {
        return;
      }
      current2 = current2.parent;
    }
    hook();
  });
  injectHook(type3, wrappedHook, target);
  if (target) {
    let current2 = target.parent;
    while (current2 && current2.parent) {
      if (isKeepAlive(current2.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type3, target, current2);
      }
      current2 = current2.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type3, target, keepAliveRoot) {
  const injected = injectHook(type3, hook, keepAliveRoot, true);
  onUnmounted(() => {
    remove$1(keepAliveRoot[type3], injected);
  }, target);
}
function injectHook(type3, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks2 = target[type3] || (target[type3] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type3, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks2.unshift(wrappedHook);
    } else {
      hooks2.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, hook, target);
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options2 = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options2.beforeCreate) {
    callHook$1(options2.beforeCreate, instance, "bc");
  }
  const {
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    created: created26,
    beforeMount: beforeMount4,
    mounted: mounted45,
    beforeUpdate,
    updated: updated28,
    activated,
    deactivated: deactivated2,
    beforeDestroy,
    beforeUnmount: beforeUnmount32,
    destroyed,
    unmounted,
    render: render166,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    expose,
    inheritAttrs,
    components: components3,
    directives,
    filters
  } = options2;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key2 in methods) {
      const methodHandler = methods[key2];
      if (isFunction$4(methodHandler)) {
        {
          ctx[key2] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data80 = dataOptions.call(publicThis, publicThis);
    if (!isObject$5(data80))
      ;
    else {
      instance.data = reactive(data80);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key2 in computedOptions) {
      const opt = computedOptions[key2];
      const get2 = isFunction$4(opt) ? opt.bind(publicThis, publicThis) : isFunction$4(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set2 = !isFunction$4(opt) && isFunction$4(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c2 = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key2, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v2) => c2.value = v2
      });
    }
  }
  if (watchOptions) {
    for (const key2 in watchOptions) {
      createWatcher(watchOptions[key2], ctx, publicThis, key2);
    }
  }
  if (provideOptions) {
    const provides = isFunction$4(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key2) => {
      provide(key2, provides[key2]);
    });
  }
  if (created26) {
    callHook$1(created26, instance, "c");
  }
  function registerLifecycleHook(register3, hook) {
    if (isArray$5(hook)) {
      hook.forEach((_hook) => register3(_hook.bind(publicThis)));
    } else if (hook) {
      register3(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount4);
  registerLifecycleHook(onMounted, mounted45);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated28);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated2);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount32);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$5(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key2) => {
        Object.defineProperty(exposed, key2, {
          get: () => publicThis[key2],
          set: (val) => publicThis[key2] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render166 && instance.render === NOOP) {
    instance.render = render166;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components3)
    instance.components = components3;
  if (directives)
    instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
  if (isArray$5(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key2 in injectOptions) {
    const opt = injectOptions[key2];
    let injected;
    if (isObject$5(opt)) {
      if ("default" in opt) {
        injected = inject(opt.from || key2, opt.default, true);
      } else {
        injected = inject(opt.from || key2);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key2, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v2) => injected.value = v2
        });
      } else {
        ctx[key2] = injected;
      }
    } else {
      ctx[key2] = injected;
    }
  }
}
function callHook$1(hook, instance, type3) {
  callWithAsyncErrorHandling(isArray$5(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type3);
}
function createWatcher(raw, ctx, publicThis, key2) {
  const getter = key2.includes(".") ? createPathGetter(publicThis, key2) : () => publicThis[key2];
  if (isString$4(raw)) {
    const handler8 = ctx[raw];
    if (isFunction$4(handler8)) {
      watch(getter, handler8);
    }
  } else if (isFunction$4(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject$5(raw)) {
    if (isArray$5(raw)) {
      raw.forEach((r2) => createWatcher(r2, ctx, publicThis, key2));
    } else {
      const handler8 = isFunction$4(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$4(handler8)) {
        watch(getter, handler8, raw);
      }
    }
  } else
    ;
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;
  const cached2 = cache.get(base);
  let resolved;
  if (cached2) {
    resolved = cached2;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m2) => mergeOptions$1(resolved, m2, optionMergeStrategies, true));
    }
    mergeOptions$1(resolved, base, optionMergeStrategies);
  }
  cache.set(base, resolved);
  return resolved;
}
function mergeOptions$1(to2, from2, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from2;
  if (extendsOptions) {
    mergeOptions$1(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m2) => mergeOptions$1(to2, m2, strats, true));
  }
  for (const key2 in from2) {
    if (asMixin && key2 === "expose")
      ;
    else {
      const strat = internalOptionMergeStrats[key2] || strats && strats[key2];
      to2[key2] = strat ? strat(to2[key2], from2[key2]) : from2[key2];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeObjectOptions,
  emits: mergeObjectOptions,
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  watch: mergeWatchOptions,
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from2) {
  if (!from2) {
    return to2;
  }
  if (!to2) {
    return from2;
  }
  return function mergedDataFn() {
    return extend$2(isFunction$4(to2) ? to2.call(this, this) : to2, isFunction$4(from2) ? from2.call(this, this) : from2);
  };
}
function mergeInject(to2, from2) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from2));
}
function normalizeInject(raw) {
  if (isArray$5(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from2) {
  return to2 ? [...new Set([].concat(to2, from2))] : from2;
}
function mergeObjectOptions(to2, from2) {
  return to2 ? extend$2(extend$2(Object.create(null), to2), from2) : from2;
}
function mergeWatchOptions(to2, from2) {
  if (!to2)
    return from2;
  if (!from2)
    return to2;
  const merged = extend$2(Object.create(null), to2);
  for (const key2 in from2) {
    merged[key2] = mergeAsArray(to2[key2], from2[key2]);
  }
  return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props2 = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = Object.create(null);
  setFullProps(instance, rawProps, props2, attrs);
  for (const key2 in instance.propsOptions[0]) {
    if (!(key2 in props2)) {
      props2[key2] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props2 : shallowReactive(props2);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props2;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const { props: props2, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw(props2);
  const [options2] = instance.propsOptions;
  let hasAttrsChanged = false;
  if ((optimized || patchFlag > 0) && !(patchFlag & 16)) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key2 = propsToUpdate[i2];
        const value26 = rawProps[key2];
        if (options2) {
          if (hasOwn$1(attrs, key2)) {
            if (value26 !== attrs[key2]) {
              attrs[key2] = value26;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize$1(key2);
            props2[camelizedKey] = resolvePropValue$1(options2, rawCurrentProps, camelizedKey, value26, instance, false);
          }
        } else {
          if (value26 !== attrs[key2]) {
            attrs[key2] = value26;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props2, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key2 in rawCurrentProps) {
      if (!rawProps || !hasOwn$1(rawProps, key2) && ((kebabKey = hyphenate$1(key2)) === key2 || !hasOwn$1(rawProps, kebabKey))) {
        if (options2) {
          if (rawPrevProps && (rawPrevProps[key2] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
            props2[key2] = resolvePropValue$1(options2, rawCurrentProps, key2, void 0, instance, true);
          }
        } else {
          delete props2[key2];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key2 in attrs) {
        if (!rawProps || !hasOwn$1(rawProps, key2)) {
          delete attrs[key2];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger$1(instance, "set", "$attrs");
  }
}
function setFullProps(instance, rawProps, props2, attrs) {
  const [options2, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key2 in rawProps) {
      if (isReservedProp(key2)) {
        continue;
      }
      const value26 = rawProps[key2];
      let camelKey;
      if (options2 && hasOwn$1(options2, camelKey = camelize$1(key2))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props2[camelKey] = value26;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value26;
        }
      } else if (!isEmitListener(instance.emitsOptions, key2)) {
        if (value26 !== attrs[key2]) {
          attrs[key2] = value26;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props2);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key2 = needCastKeys[i2];
      props2[key2] = resolvePropValue$1(options2, rawCurrentProps, key2, castValues[key2], instance, !hasOwn$1(castValues, key2));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue$1(options2, props2, key2, value26, instance, isAbsent) {
  const opt = options2[key2];
  if (opt != null) {
    const hasDefault = hasOwn$1(opt, "default");
    if (hasDefault && value26 === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction$4(defaultValue)) {
        const { propsDefaults } = instance;
        if (key2 in propsDefaults) {
          value26 = propsDefaults[key2];
        } else {
          setCurrentInstance(instance);
          value26 = propsDefaults[key2] = defaultValue.call(null, props2);
          unsetCurrentInstance();
        }
      } else {
        value26 = defaultValue;
      }
    }
    if (opt[0]) {
      if (isAbsent && !hasDefault) {
        value26 = false;
      } else if (opt[1] && (value26 === "" || value26 === hyphenate$1(key2))) {
        value26 = true;
      }
    }
  }
  return value26;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.propsCache;
  const cached2 = cache.get(comp);
  if (cached2) {
    return cached2;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$4(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props2, keys2] = normalizePropsOptions(raw2, appContext, true);
      extend$2(normalized, props2);
      if (keys2)
        needCastKeys.push(...keys2);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    cache.set(comp, EMPTY_ARR);
    return EMPTY_ARR;
  }
  if (isArray$5(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      const normalizedKey = camelize$1(raw[i2]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key2 in raw) {
      const normalizedKey = camelize$1(key2);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key2];
        const prop = normalized[normalizedKey] = isArray$5(opt) || isFunction$4(opt) ? { type: opt } : opt;
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[0] = booleanIndex > -1;
          prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn$1(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  cache.set(comp, res);
  return res;
}
function validatePropName(key2) {
  if (key2[0] !== "$") {
    return true;
  }
  return false;
}
function getType(ctor) {
  const match5 = ctor && ctor.toString().match(/^\s*function (\w+)/);
  return match5 ? match5[1] : ctor === null ? "null" : "";
}
function isSameType(a2, b2) {
  return getType(a2) === getType(b2);
}
function getTypeIndex(type3, expectedTypes) {
  if (isArray$5(expectedTypes)) {
    return expectedTypes.findIndex((t2) => isSameType(t2, type3));
  } else if (isFunction$4(expectedTypes)) {
    return isSameType(expectedTypes, type3) ? 0 : -1;
  }
  return -1;
}
const isInternalKey = (key2) => key2[0] === "_" || key2 === "$stable";
const normalizeSlotValue = (value26) => isArray$5(value26) ? value26.map(normalizeVNode) : [normalizeVNode(value26)];
const normalizeSlot$1 = (key2, rawSlot, ctx) => {
  const normalized = withCtx((...args) => {
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key2 in rawSlots) {
    if (isInternalKey(key2))
      continue;
    const value26 = rawSlots[key2];
    if (isFunction$4(value26)) {
      slots[key2] = normalizeSlot$1(key2, value26, ctx);
    } else if (value26 != null) {
      const normalized = normalizeSlotValue(value26);
      slots[key2] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type3 = children._;
    if (type3) {
      instance.slots = toRaw(children);
      def(children, "_", type3);
    } else {
      normalizeObjectSlots(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type3 = children._;
    if (type3) {
      if (optimized && type3 === 1) {
        needDeletionCheck = false;
      } else {
        extend$2(slots, children);
        if (!optimized && type3 === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key2 in slots) {
      if (!isInternalKey(key2) && !(key2 in deletionComparisonTarget)) {
        delete slots[key2];
      }
    }
  }
};
function withDirectives(vnode, directives) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    return vnode;
  }
  const instance = internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i2 = 0; i2 < directives.length; i2++) {
    let [dir, value26, arg, modifiers = EMPTY_OBJ] = directives[i2];
    if (isFunction$4(dir)) {
      dir = {
        mounted: dir,
        updated: dir
      };
    }
    if (dir.deep) {
      traverse(value26);
    }
    bindings.push({
      dir,
      instance,
      value: value26,
      oldValue: void 0,
      arg,
      modifiers
    });
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name2) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name2];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: Object.create(null),
    optionsCache: new WeakMap(),
    propsCache: new WeakMap(),
    emitsCache: new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render166, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (rootProps != null && !isObject$5(rootProps)) {
      rootProps = null;
    }
    const context2 = createAppContext();
    const installedPlugins = new Set();
    let isMounted = false;
    const app = context2.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context2,
      _instance: null,
      version: version$3,
      get config() {
        return context2.config;
      },
      set config(v2) {
      },
      use(plugin, ...options2) {
        if (installedPlugins.has(plugin))
          ;
        else if (plugin && isFunction$4(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options2);
        } else if (isFunction$4(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options2);
        } else
          ;
        return app;
      },
      mixin(mixin) {
        {
          if (!context2.mixins.includes(mixin)) {
            context2.mixins.push(mixin);
          }
        }
        return app;
      },
      component(name2, component) {
        if (!component) {
          return context2.components[name2];
        }
        context2.components[name2] = component;
        return app;
      },
      directive(name2, directive) {
        if (!directive) {
          return context2.directives[name2];
        }
        context2.directives[name2] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context2;
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render166(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          return getExposeProxy(vnode.component) || vnode.component.proxy;
        }
      },
      unmount() {
        if (isMounted) {
          render166(null, app._container);
          delete app._container.__vue_app__;
        }
      },
      provide(key2, value26) {
        context2.provides[key2] = value26;
        return app;
      }
    };
    return app;
  };
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options2) {
  return baseCreateRenderer(options2);
}
function baseCreateRenderer(options2, createHydrationFns) {
  const target = getGlobalThis();
  target.__VUE__ = true;
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options2;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type: type3, ref: ref2, shapeFlag } = n2;
    switch (type3) {
      case Text$2:
        processText(n1, n2, container, anchor);
        break;
      case Comment$1:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type3.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type3.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else
          ;
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next3;
    while (el && el !== anchor) {
      next3 = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next3;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next3;
    while (el && el !== anchor) {
      next3 = hostNextSibling(el);
      hostRemove(el);
      el = next3;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { type: type3, props: props2, shapeFlag, transition, patchFlag, dirs } = vnode;
    if (vnode.el && hostCloneNode !== void 0 && patchFlag === -1) {
      el = vnode.el = hostCloneNode(vnode.el);
    } else {
      el = vnode.el = hostCreateElement(vnode.type, isSVG, props2 && props2.is, props2);
      if (shapeFlag & 8) {
        hostSetElementText(el, vnode.children);
      } else if (shapeFlag & 16) {
        mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type3 !== "foreignObject", slotScopeIds, optimized);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      if (props2) {
        for (const key2 in props2) {
          if (key2 !== "value" && !isReservedProp(key2)) {
            hostPatchProp(el, key2, null, props2[key2], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
        if ("value" in props2) {
          hostPatchProp(el, "value", null, props2.value);
        }
        if (vnodeHook = props2.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
      }
      setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props2 && props2.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      const child = children[i2] = optimized ? cloneIfMounted(children[i2]) : normalizeVNode(children[i2]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
    } else if (!optimized) {
      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key2 = propsToUpdate[i2];
            const prev3 = oldProps[key2];
            const next3 = newProps[key2];
            if (next3 !== prev3 || key2 === "value") {
              hostPatchProp(el, key2, prev3, next3, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = oldVNode.el && (oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : fallbackContainer;
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      for (const key2 in newProps) {
        if (isReservedProp(key2))
          continue;
        const next3 = newProps[key2];
        const prev3 = oldProps[key2];
        if (next3 !== prev3 && key2 !== "value") {
          hostPatchProp(el, key2, prev3, next3, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if (oldProps !== EMPTY_OBJ) {
        for (const key2 in oldProps) {
          if (!isReservedProp(key2) && !(key2 in newProps)) {
            hostPatchProp(el, key2, oldProps[key2], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
          traverseStaticChildren(n1, n2, true);
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment$1);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.component = n1.component;
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props: props2 } = initialVNode;
        const { bm, m: m2, parent: parent2 } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        effect.allowRecurse = false;
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props2 && props2.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent2, initialVNode);
        }
        effect.allowRecurse = true;
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(el, instance.subTree, instance, parentSuspense, null);
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(() => !instance.isUnmounted && hydrateSubTree());
          } else {
            hydrateSubTree();
          }
        } else {
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props2 && props2.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent2, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let { next: next3, bu, u: u2, parent: parent2, vnode } = instance;
        let originNext = next3;
        let vnodeHook;
        effect.allowRecurse = false;
        if (next3) {
          next3.el = vnode.el;
          updateComponentPreRender(instance, next3, optimized);
        } else {
          next3 = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next3.props && next3.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent2, next3, vnode);
        }
        effect.allowRecurse = true;
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(prevTree, nextTree, hostParentNode(prevTree.el), getNextHostNode(prevTree), instance, parentSuspense, isSVG);
        next3.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u2) {
          queuePostRenderEffect(u2, parentSuspense);
        }
        if (vnodeHook = next3.props && next3.props.onVnodeUpdated) {
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent2, next3, vnode), parentSuspense);
        }
      }
    };
    const effect = new ReactiveEffect(componentUpdateFn, () => queueJob(instance.update), instance.scope);
    const update = instance.update = effect.run.bind(effect);
    update.id = instance.uid;
    effect.allowRecurse = update.allowRecurse = true;
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(void 0, instance.update);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      patch(c1[i2], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(null, c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s2 = i2;
      const keyToNewIndexMap = new Map();
      for (i2 = s2; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++)
        newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s2; j2 <= e2; j2++) {
            if (newIndexToOldIndexMap[j2 - s2] === 0 && isSameVNodeType(prevChild, c2[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j2 = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s2 + i2;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved) {
          if (j2 < 0 || i2 !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type: type3, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type3.move(vnode, container, anchor, internals);
      return;
    }
    if (type3 === Fragment) {
      hostInsert(el, container, anchor);
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type3 === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove4 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove4();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove4, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type: type3, props: props2, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props2 && props2.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && (type3 !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type3 === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove3(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props2 && props2.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove3 = (vnode) => {
    const { type: type3, el, anchor, transition } = vnode;
    if (type3 === Fragment) {
      removeFragment(el, anchor);
      return;
    }
    if (type3 === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next3;
    while (cur !== end) {
      next3 = hostNextSibling(cur);
      hostRemove(cur);
      cur = next3;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render166 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove3,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options2
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render: render166,
    hydrate,
    createApp: createAppAPI(render166, hydrate)
  };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$5(rawRef)) {
    rawRef.forEach((r2, i2) => setRef(r2, oldRawRef && (isArray$5(oldRawRef) ? oldRawRef[i2] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value26 = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$4(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn$1(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isString$4(ref2)) {
    const doSet = () => {
      {
        refs[ref2] = value26;
      }
      if (hasOwn$1(setupState, ref2)) {
        setupState[ref2] = value26;
      }
    };
    if (value26) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isRef(ref2)) {
    const doSet = () => {
      ref2.value = value26;
    };
    if (value26) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isFunction$4(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value26, refs]);
  } else
    ;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$5(ch1) && isArray$5(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j2, u2, v2, c2;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i2] = j2;
        result.push(i2);
        continue;
      }
      u2 = 0;
      v2 = result.length - 1;
      while (u2 < v2) {
        c2 = u2 + v2 >> 1;
        if (arr[result[c2]] < arrI) {
          u2 = c2 + 1;
        } else {
          v2 = c2;
        }
      }
      if (arrI < arr[result[u2]]) {
        if (u2 > 0) {
          p2[i2] = result[u2 - 1];
        }
        result[u2] = i2;
      }
    }
  }
  u2 = result.length;
  v2 = result[u2 - 1];
  while (u2-- > 0) {
    result[u2] = v2;
    v2 = p2[v2];
  }
  return result;
}
const isTeleport = (type3) => type3.__isTeleport;
const isTeleportDisabled = (props2) => props2 && (props2.disabled || props2.disabled === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const resolveTarget = (props2, select2) => {
  const targetSelector = props2 && props2.to;
  if (isString$4(targetSelector)) {
    if (!select2) {
      return null;
    } else {
      const target = select2(targetSelector);
      return target;
    }
  } else {
    return targetSelector;
  }
};
const TeleportImpl = {
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
    const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (n1 == null) {
      const placeholder = n2.el = createText("");
      const mainAnchor = n2.anchor = createText("");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText("");
      if (target) {
        insert(targetAnchor, target);
        isSVG = isSVG || isTargetSVG(target);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      isSVG = isSVG || isTargetSVG(target);
      if (dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(n2, container, mainAnchor, internals, 1);
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
          if (nextTarget) {
            moveTeleport(n2, nextTarget, null, internals, 0);
          }
        } else if (wasDisabled) {
          moveTeleport(n2, target, targetAnchor, internals, 1);
        }
      }
    }
  },
  remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const { shapeFlag, children, anchor, targetAnchor, target, props: props2 } = vnode;
    if (target) {
      hostRemove(targetAnchor);
    }
    if (doRemove || !isTeleportDisabled(props2)) {
      hostRemove(anchor);
      if (shapeFlag & 16) {
        for (let i2 = 0; i2 < children.length; i2++) {
          const child = children[i2];
          unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
        }
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el, anchor, shapeFlag, children, props: props2 } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props2)) {
    if (shapeFlag & 16) {
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, parentAnchor, 2);
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
  const target = vnode.target = resolveTarget(vnode.props, querySelector);
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
      }
      target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
    }
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
const COMPONENTS = "components";
function resolveComponent(name2, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name2, true, maybeSelfReference) || name2;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
function resolveAsset(type3, name2, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type3 === COMPONENTS) {
      const selfName = getComponentName(Component);
      if (selfName && (selfName === name2 || selfName === camelize$1(name2) || selfName === capitalize(camelize$1(name2)))) {
        return Component;
      }
    }
    const res = resolve(instance[type3] || Component[type3], name2) || resolve(instance.appContext[type3], name2);
    if (!res && maybeSelfReference) {
      return Component;
    }
    return res;
  }
}
function resolve(registry, name2) {
  return registry && (registry[name2] || registry[camelize$1(name2)] || registry[capitalize(camelize$1(name2))]);
}
const Fragment = Symbol(void 0);
const Text$2 = Symbol(void 0);
const Comment$1 = Symbol(void 0);
const Static = Symbol(void 0);
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value26) {
  isBlockTreeEnabled += value26;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type3, props2, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(createBaseVNode(type3, props2, children, patchFlag, dynamicProps, shapeFlag, true));
}
function createBlock(type3, props2, children, patchFlag, dynamicProps) {
  return setupBlock(createVNode(type3, props2, children, patchFlag, dynamicProps, true));
}
function isVNode(value26) {
  return value26 ? value26.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key: key2 }) => key2 != null ? key2 : null;
const normalizeRef = ({ ref: ref2 }) => {
  return ref2 != null ? isString$4(ref2) || isRef(ref2) || isFunction$4(ref2) ? { i: currentRenderingInstance, r: ref2 } : ref2 : null;
};
function createBaseVNode(type3, props2 = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type3 === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type: type3,
    props: props2,
    key: props2 && normalizeKey(props2),
    ref: props2 && normalizeRef(props2),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type3.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$4(children) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6) && vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type3, props2 = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type3 || type3 === NULL_DYNAMIC_COMPONENT) {
    type3 = Comment$1;
  }
  if (isVNode(type3)) {
    const cloned = cloneVNode(type3, props2, true);
    if (children) {
      normalizeChildren(cloned, children);
    }
    return cloned;
  }
  if (isClassComponent(type3)) {
    type3 = type3.__vccOpts;
  }
  if (props2) {
    props2 = guardReactiveProps(props2);
    let { class: klass, style: style3 } = props2;
    if (klass && !isString$4(klass)) {
      props2.class = normalizeClass(klass);
    }
    if (isObject$5(style3)) {
      if (isProxy(style3) && !isArray$5(style3)) {
        style3 = extend$2({}, style3);
      }
      props2.style = normalizeStyle(style3);
    }
  }
  const shapeFlag = isString$4(type3) ? 1 : isSuspense(type3) ? 128 : isTeleport(type3) ? 64 : isObject$5(type3) ? 4 : isFunction$4(type3) ? 2 : 0;
  return createBaseVNode(type3, props2, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props2) {
  if (!props2)
    return null;
  return isProxy(props2) || InternalObjectKey in props2 ? extend$2({}, props2) : props2;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props: props2, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps$1(props2 || {}, extraProps) : props2;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray$5(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor
  };
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text$2, null, text, flag);
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment$1, null, text)) : createVNode(Comment$1, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment$1);
  } else if (isArray$5(child)) {
    return createVNode(Fragment, null, child.slice());
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text$2, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type3 = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$5(children)) {
    type3 = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type3 = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$4(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type3 = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type3 = 16;
      children = [createTextVNode(children)];
    } else {
      type3 = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type3;
}
function mergeProps$1(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key2 in toMerge) {
      if (key2 === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key2 === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn$1(key2)) {
        const existing = ret[key2];
        const incoming = toMerge[key2];
        if (existing !== incoming) {
          ret[key2] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key2 !== "") {
        ret[key2] = toMerge[key2];
      }
    }
  }
  return ret;
}
const getPublicInstance = (i2) => {
  if (!i2)
    return null;
  if (isStatefulComponent(i2))
    return getExposeProxy(i2) || i2.proxy;
  return getPublicInstance(i2.parent);
};
const publicPropertiesMap = extend$2(Object.create(null), {
  $: (i2) => i2,
  $el: (i2) => i2.vnode.el,
  $data: (i2) => i2.data,
  $props: (i2) => i2.props,
  $attrs: (i2) => i2.attrs,
  $slots: (i2) => i2.slots,
  $refs: (i2) => i2.refs,
  $parent: (i2) => getPublicInstance(i2.parent),
  $root: (i2) => getPublicInstance(i2.root),
  $emit: (i2) => i2.emit,
  $options: (i2) => resolveMergedOptions(i2),
  $forceUpdate: (i2) => () => queueJob(i2.update),
  $nextTick: (i2) => nextTick.bind(i2.proxy),
  $watch: (i2) => instanceWatch.bind(i2)
});
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key2) {
    const { ctx, setupState, data: data80, props: props2, accessCache, type: type3, appContext } = instance;
    let normalizedProps;
    if (key2[0] !== "$") {
      const n2 = accessCache[key2];
      if (n2 !== void 0) {
        switch (n2) {
          case 0:
            return setupState[key2];
          case 1:
            return data80[key2];
          case 3:
            return ctx[key2];
          case 2:
            return props2[key2];
        }
      } else if (setupState !== EMPTY_OBJ && hasOwn$1(setupState, key2)) {
        accessCache[key2] = 0;
        return setupState[key2];
      } else if (data80 !== EMPTY_OBJ && hasOwn$1(data80, key2)) {
        accessCache[key2] = 1;
        return data80[key2];
      } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn$1(normalizedProps, key2)) {
        accessCache[key2] = 2;
        return props2[key2];
      } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key2)) {
        accessCache[key2] = 3;
        return ctx[key2];
      } else if (shouldCacheAccess) {
        accessCache[key2] = 4;
      }
    }
    const publicGetter = publicPropertiesMap[key2];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key2 === "$attrs") {
        track(instance, "get", key2);
      }
      return publicGetter(instance);
    } else if ((cssModule = type3.__cssModules) && (cssModule = cssModule[key2])) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn$1(ctx, key2)) {
      accessCache[key2] = 3;
      return ctx[key2];
    } else if (globalProperties = appContext.config.globalProperties, hasOwn$1(globalProperties, key2)) {
      {
        return globalProperties[key2];
      }
    } else
      ;
  },
  set({ _: instance }, key2, value26) {
    const { data: data80, setupState, ctx } = instance;
    if (setupState !== EMPTY_OBJ && hasOwn$1(setupState, key2)) {
      setupState[key2] = value26;
    } else if (data80 !== EMPTY_OBJ && hasOwn$1(data80, key2)) {
      data80[key2] = value26;
    } else if (hasOwn$1(instance.props, key2)) {
      return false;
    }
    if (key2[0] === "$" && key2.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key2] = value26;
      }
    }
    return true;
  },
  has({ _: { data: data80, setupState, accessCache, ctx, appContext, propsOptions } }, key2) {
    let normalizedProps;
    return accessCache[key2] !== void 0 || data80 !== EMPTY_OBJ && hasOwn$1(data80, key2) || setupState !== EMPTY_OBJ && hasOwn$1(setupState, key2) || (normalizedProps = propsOptions[0]) && hasOwn$1(normalizedProps, key2) || hasOwn$1(ctx, key2) || hasOwn$1(publicPropertiesMap, key2) || hasOwn$1(appContext.config.globalProperties, key2);
  }
};
const emptyAppContext = createAppContext();
let uid$1$1 = 0;
function createComponentInstance(vnode, parent2, suspense) {
  const type3 = vnode.type;
  const appContext = (parent2 ? parent2.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$1$1++,
    vnode,
    type: type3,
    parent: parent2,
    appContext,
    root: null,
    next: null,
    subTree: null,
    update: null,
    scope: new EffectScope(true),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent2 ? parent2.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    components: null,
    directives: null,
    propsOptions: normalizePropsOptions(type3, appContext),
    emitsOptions: normalizeEmitsOptions(type3, appContext),
    emit: null,
    emitted: null,
    propsDefaults: EMPTY_OBJ,
    inheritAttrs: type3.inheritAttrs,
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent2 ? parent2.root : instance;
  instance.emit = emit$1.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance) => {
  currentInstance = instance;
  instance.scope.on();
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  currentInstance = null;
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props: props2, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props2, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  instance.accessCache = Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  const { setup: setup161 } = Component;
  if (setup161) {
    const setupContext = instance.setupContext = setup161.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(setup161, instance, 0, [instance.props, setupContext]);
    resetTracking();
    unsetCurrentInstance();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e2) => {
          handleError(e2, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction$4(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$5(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else
    ;
  finishComponentSetup(instance, isSSR);
}
let compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile && !Component.render) {
      const template = Component.template;
      if (template) {
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$2(extend$2({
          isCustomElement,
          delimiters
        }, compilerOptions), componentCompilerOptions);
        Component.render = compile(template, finalCompilerOptions);
      }
    }
    instance.render = Component.render || NOOP;
  }
  {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
}
function createAttrsProxy(instance) {
  return new Proxy(instance.attrs, {
    get(target, key2) {
      track(instance, "get", "$attrs");
      return target[key2];
    }
  });
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  let attrs;
  {
    return {
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key2) {
        if (key2 in target) {
          return target[key2];
        } else if (key2 in publicPropertiesMap) {
          return publicPropertiesMap[key2](instance);
        }
      }
    }));
  }
}
function getComponentName(Component) {
  return isFunction$4(Component) ? Component.displayName || Component.name : Component.name;
}
function isClassComponent(value26) {
  return isFunction$4(value26) && "__vccOpts" in value26;
}
function callWithErrorHandling(fn, instance, type3, args) {
  let res;
  try {
    res = args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type3);
  }
  return res;
}
function callWithAsyncErrorHandling(fn, instance, type3, args) {
  if (isFunction$4(fn)) {
    const res = callWithErrorHandling(fn, instance, type3, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type3);
      });
    }
    return res;
  }
  const values = [];
  for (let i2 = 0; i2 < fn.length; i2++) {
    values.push(callWithAsyncErrorHandling(fn[i2], instance, type3, args));
  }
  return values;
}
function handleError(err, instance, type3, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = type3;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type3, contextVNode, throwInDev);
}
function logError(err, type3, contextVNode, throwInDev = true) {
  {
    console.error(err);
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
function nextTick(fn) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
}
function findInsertionIndex(id2) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId(queue[middle]);
    middleJobId < id2 ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob(job) {
  if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i2 = queue.indexOf(job);
  if (i2 > flushIndex) {
    queue.splice(i2, 1);
  }
}
function queueCb(cb, activeQueue, pendingQueue, index2) {
  if (!isArray$5(cb)) {
    if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index2 + 1 : index2)) {
      pendingQueue.push(cb);
    }
  } else {
    pendingQueue.push(...cb);
  }
  queueFlush();
}
function queuePreFlushCb(cb) {
  queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
  queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
  if (pendingPreFlushCbs.length) {
    currentPreFlushParentJob = parentJob;
    activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
    pendingPreFlushCbs.length = 0;
    for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
      activePreFlushCbs[preFlushIndex]();
    }
    activePreFlushCbs = null;
    preFlushIndex = 0;
    currentPreFlushParentJob = null;
    flushPreFlushCbs(seen, parentJob);
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    activePostFlushCbs.sort((a2, b2) => getId(a2) - getId(b2));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  flushPreFlushCbs(seen);
  queue.sort((a2, b2) => getId(a2) - getId(b2));
  const check = NOOP;
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (false)
          ;
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs();
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
function watchEffect(effect, options2) {
  return doWatch(effect, null, options2);
}
const INITIAL_WATCHER_VALUE = {};
function watch(source2, cb, options2) {
  return doWatch(source2, cb, options2);
}
function doWatch(source2, cb, { immediate, deep, flush, onTrack, onTrigger: onTrigger2 } = EMPTY_OBJ) {
  const instance = currentInstance;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source2)) {
    getter = () => source2.value;
    forceTrigger = !!source2._shallow;
  } else if (isReactive(source2)) {
    getter = () => source2;
    deep = true;
  } else if (isArray$5(source2)) {
    isMultiSource = true;
    forceTrigger = source2.some(isReactive);
    getter = () => source2.map((s2) => {
      if (isRef(s2)) {
        return s2.value;
      } else if (isReactive(s2)) {
        return traverse(s2);
      } else if (isFunction$4(s2)) {
        return callWithErrorHandling(s2, instance, 2);
      } else
        ;
    });
  } else if (isFunction$4(source2)) {
    if (cb) {
      getter = () => callWithErrorHandling(source2, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(source2, instance, 3, [onInvalidate]);
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onInvalidate = (fn) => {
    cleanup = effect.onStop = () => {
      callWithErrorHandling(fn, instance, 4);
    };
  };
  if (isInSSRComponentSetup) {
    onInvalidate = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onInvalidate
      ]);
    }
    return NOOP;
  }
  let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect.active) {
      return;
    }
    if (cb) {
      const newValue = effect.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i2) => hasChanged(v2, oldValue[i2])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onInvalidate
        ]);
        oldValue = newValue;
      }
    } else {
      effect.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    scheduler = () => {
      if (!instance || instance.isMounted) {
        queuePreFlushCb(job);
      } else {
        job();
      }
    };
  }
  const effect = new ReactiveEffect(getter, scheduler);
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);
  } else {
    effect.run();
  }
  return () => {
    effect.stop();
    if (instance && instance.scope) {
      remove$1(instance.scope.effects, effect);
    }
  };
}
function instanceWatch(source2, value26, options2) {
  const publicThis = this.proxy;
  const getter = isString$4(source2) ? source2.includes(".") ? createPathGetter(publicThis, source2) : () => publicThis[source2] : source2.bind(publicThis, publicThis);
  let cb;
  if (isFunction$4(value26)) {
    cb = value26;
  } else {
    cb = value26.handler;
    options2 = value26;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options2);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path2) {
  const segments = path2.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
function traverse(value26, seen) {
  if (!isObject$5(value26) || value26["__v_skip"]) {
    return value26;
  }
  seen = seen || new Set();
  if (seen.has(value26)) {
    return value26;
  }
  seen.add(value26);
  if (isRef(value26)) {
    traverse(value26.value, seen);
  } else if (isArray$5(value26)) {
    for (let i2 = 0; i2 < value26.length; i2++) {
      traverse(value26[i2], seen);
    }
  } else if (isSet$2(value26) || isMap$2(value26)) {
    value26.forEach((v2) => {
      traverse(v2, seen);
    });
  } else if (isPlainObject$2(value26)) {
    for (const key2 in value26) {
      traverse(value26[key2], seen);
    }
  }
  return value26;
}
function h$2(type3, propsOrChildren, children) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject$5(propsOrChildren) && !isArray$5(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type3, null, [propsOrChildren]);
      }
      return createVNode(type3, propsOrChildren);
    } else {
      return createVNode(type3, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type3, propsOrChildren, children);
  }
}
const version$3 = "3.2.19";
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const staticTemplateCache = new Map();
const nodeOps = {
  insert: (child, parent2, anchor) => {
    parent2.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent2 = child.parentNode;
    if (parent2) {
      parent2.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is, props2) => {
    const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
    if (tag === "select" && props2 && props2.multiple != null) {
      el.setAttribute("multiple", props2.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id2) {
    el.setAttribute(id2, "");
  },
  cloneNode(el) {
    const cloned = el.cloneNode(true);
    if (`_value` in el) {
      cloned._value = el._value;
    }
    return cloned;
  },
  insertStaticContent(content, parent2, anchor, isSVG) {
    const before = anchor ? anchor.previousSibling : parent2.lastChild;
    let template = staticTemplateCache.get(content);
    if (!template) {
      const t2 = doc.createElement("template");
      t2.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      template = t2.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      staticTemplateCache.set(content, template);
    }
    parent2.insertBefore(template.cloneNode(true), anchor);
    return [
      before ? before.nextSibling : parent2.firstChild,
      anchor ? anchor.previousSibling : parent2.lastChild
    ];
  }
};
function patchClass(el, value26, isSVG) {
  const transitionClasses = el._vtc;
  if (transitionClasses) {
    value26 = (value26 ? [value26, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value26 == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value26);
  } else {
    el.className = value26;
  }
}
function patchStyle(el, prev3, next3) {
  const style3 = el.style;
  const currentDisplay = style3.display;
  if (!next3) {
    el.removeAttribute("style");
  } else if (isString$4(next3)) {
    if (prev3 !== next3) {
      style3.cssText = next3;
    }
  } else {
    for (const key2 in next3) {
      setStyle$1(style3, key2, next3[key2]);
    }
    if (prev3 && !isString$4(prev3)) {
      for (const key2 in prev3) {
        if (next3[key2] == null) {
          setStyle$1(style3, key2, "");
        }
      }
    }
  }
  if ("_vod" in el) {
    style3.display = currentDisplay;
  }
}
const importantRE = /\s*!important$/;
function setStyle$1(style3, name2, val) {
  if (isArray$5(val)) {
    val.forEach((v2) => setStyle$1(style3, name2, v2));
  } else {
    if (name2.startsWith("--")) {
      style3.setProperty(name2, val);
    } else {
      const prefixed = autoPrefix(style3, name2);
      if (importantRE.test(val)) {
        style3.setProperty(hyphenate$1(prefixed), val.replace(importantRE, ""), "important");
      } else {
        style3[prefixed] = val;
      }
    }
  }
}
const prefixes$1 = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style3, rawName) {
  const cached2 = prefixCache[rawName];
  if (cached2) {
    return cached2;
  }
  let name2 = camelize$1(rawName);
  if (name2 !== "filter" && name2 in style3) {
    return prefixCache[rawName] = name2;
  }
  name2 = capitalize(name2);
  for (let i2 = 0; i2 < prefixes$1.length; i2++) {
    const prefixed = prefixes$1[i2] + name2;
    if (prefixed in style3) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key2, value26, isSVG, instance) {
  if (isSVG && key2.startsWith("xlink:")) {
    if (value26 == null) {
      el.removeAttributeNS(xlinkNS, key2.slice(6, key2.length));
    } else {
      el.setAttributeNS(xlinkNS, key2, value26);
    }
  } else {
    const isBoolean = isSpecialBooleanAttr(key2);
    if (value26 == null || isBoolean && !includeBooleanAttr(value26)) {
      el.removeAttribute(key2);
    } else {
      el.setAttribute(key2, isBoolean ? "" : value26);
    }
  }
}
function patchDOMProp(el, key2, value26, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key2 === "innerHTML" || key2 === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key2] = value26 == null ? "" : value26;
    return;
  }
  if (key2 === "value" && el.tagName !== "PROGRESS") {
    el._value = value26;
    const newValue = value26 == null ? "" : value26;
    if (el.value !== newValue) {
      el.value = newValue;
    }
    if (value26 == null) {
      el.removeAttribute(key2);
    }
    return;
  }
  if (value26 === "" || value26 == null) {
    const type3 = typeof el[key2];
    if (type3 === "boolean") {
      el[key2] = includeBooleanAttr(value26);
      return;
    } else if (value26 == null && type3 === "string") {
      el[key2] = "";
      el.removeAttribute(key2);
      return;
    } else if (type3 === "number") {
      try {
        el[key2] = 0;
      } catch (_a) {
      }
      el.removeAttribute(key2);
      return;
    }
  }
  try {
    el[key2] = value26;
  } catch (e2) {
  }
}
let _getNow = Date.now;
let skipTimestampCheck = false;
if (typeof window !== "undefined") {
  if (_getNow() > document.createEvent("Event").timeStamp) {
    _getNow = () => performance.now();
  }
  const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
  skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);
}
let cachedNow = 0;
const p = Promise.resolve();
const reset = () => {
  cachedNow = 0;
};
const getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());
function addEventListener$3(el, event, handler8, options2) {
  el.addEventListener(event, handler8, options2);
}
function removeEventListener$2(el, event, handler8, options2) {
  el.removeEventListener(event, handler8, options2);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name2, options2] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener$3(el, name2, invoker, options2);
    } else if (existingInvoker) {
      removeEventListener$2(el, name2, existingInvoker, options2);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name2) {
  let options2;
  if (optionsModifierRE.test(name2)) {
    options2 = {};
    let m2;
    while (m2 = name2.match(optionsModifierRE)) {
      name2 = name2.slice(0, name2.length - m2[0].length);
      options2[m2[0].toLowerCase()] = true;
    }
  }
  return [hyphenate$1(name2.slice(2)), options2];
}
function createInvoker(initialValue, instance) {
  const invoker = (e2) => {
    const timeStamp = e2.timeStamp || _getNow();
    if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
      callWithAsyncErrorHandling(patchStopImmediatePropagation(e2, invoker.value), instance, 5, [e2]);
    }
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e2, value26) {
  if (isArray$5(value26)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop.call(e2);
      e2._stopped = true;
    };
    return value26.map((fn) => (e3) => !e3._stopped && fn(e3));
  } else {
    return value26;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key2, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key2 === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key2 === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn$1(key2)) {
    if (!isModelListener(key2)) {
      patchEvent(el, key2, prevValue, nextValue, parentComponent);
    }
  } else if (key2[0] === "." ? (key2 = key2.slice(1), true) : key2[0] === "^" ? (key2 = key2.slice(1), false) : shouldSetAsProp(el, key2, nextValue, isSVG)) {
    patchDOMProp(el, key2, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key2 === "true-value") {
      el._trueValue = nextValue;
    } else if (key2 === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key2, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key2, value26, isSVG) {
  if (isSVG) {
    if (key2 === "innerHTML" || key2 === "textContent") {
      return true;
    }
    if (key2 in el && nativeOnRE.test(key2) && isFunction$4(value26)) {
      return true;
    }
    return false;
  }
  if (key2 === "spellcheck" || key2 === "draggable") {
    return false;
  }
  if (key2 === "form") {
    return false;
  }
  if (key2 === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key2 === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key2) && isString$4(value26)) {
    return false;
  }
  return key2 in el;
}
const TRANSITION = "transition";
const ANIMATION = "animation";
const Transition$1 = (props2, { slots }) => h$2(BaseTransition, resolveTransitionProps(props2), slots);
Transition$1.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = Transition$1.props = /* @__PURE__ */ extend$2({}, BaseTransition.props, DOMTransitionPropsValidators);
const callHook = (hook, args = []) => {
  if (isArray$5(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray$5(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps3 = {};
  for (const key2 in rawProps) {
    if (!(key2 in DOMTransitionPropsValidators)) {
      baseProps3[key2] = rawProps[key2];
    }
  }
  if (rawProps.css === false) {
    return baseProps3;
  }
  const { name: name2 = "v", type: type3, duration: duration2, enterFromClass = `${name2}-enter-from`, enterActiveClass = `${name2}-enter-active`, enterToClass = `${name2}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name2}-leave-from`, leaveActiveClass = `${name2}-leave-active`, leaveToClass = `${name2}-leave-to` } = rawProps;
  const durations = normalizeDuration(duration2);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const { onBeforeEnter, onEnter: onEnter2, onEnterCancelled, onLeave: onLeave2, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter2, onAppearCancelled = onEnterCancelled } = baseProps3;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter2;
      const resolve2 = () => finishEnter(el, isAppear, done);
      callHook(hook, [el, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el, type3, enterDuration, resolve2);
        }
      });
    };
  };
  return extend$2(baseProps3, {
    onBeforeEnter(el) {
      callHook(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      const resolve2 = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      forceReflow();
      addTransitionClass(el, leaveActiveClass);
      nextFrame(() => {
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave2)) {
          whenTransitionEnds(el, type3, leaveDuration, resolve2);
        }
      });
      callHook(onLeave2, [el, resolve2]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      callHook(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      callHook(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration2) {
  if (duration2 == null) {
    return null;
  } else if (isObject$5(duration2)) {
    return [NumberOf(duration2.enter), NumberOf(duration2.leave)];
  } else {
    const n2 = NumberOf(duration2);
    return [n2, n2];
  }
}
function NumberOf(val) {
  const res = toNumber$1(val);
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el.classList.add(c2));
  (el._vtc || (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el.classList.remove(c2));
  const { _vtc } = el;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
  const id2 = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id2 === el._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type: type3, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type3) {
    return resolve2();
  }
  const endEvent = type3 + "end";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd3);
    resolveIfNotStale();
  };
  const onEnd3 = (e2) => {
    if (e2.target === el && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd3);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key2) => (styles[key2] || "").split(", ");
  const transitionDelays = getStyleProperties(TRANSITION + "Delay");
  const transitionDurations = getStyleProperties(TRANSITION + "Duration");
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(ANIMATION + "Delay");
  const animationDurations = getStyleProperties(ANIMATION + "Duration");
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type3 = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type3 = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type3 = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type3 = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type3 ? type3 === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type3 === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
  return {
    type: type3,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d2, i2) => toMs(d2) + toMs(delays[i2])));
}
function toMs(s2) {
  return Number(s2.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
const positionMap = new WeakMap();
const newPositionMap = new WeakMap();
const TransitionGroupImpl = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend$2({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props2, { slots }) {
    const instance = getCurrentInstance();
    const state2 = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props2.moveClass || `${props2.name || "v"}-move`;
      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c2) => {
        const el = c2.el;
        const style3 = el.style;
        addTransitionClass(el, moveClass);
        style3.transform = style3.webkitTransform = style3.transitionDuration = "";
        const cb = el._moveCb = (e2) => {
          if (e2 && e2.target !== el) {
            return;
          }
          if (!e2 || /transform$/.test(e2.propertyName)) {
            el.removeEventListener("transitionend", cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props2);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || Fragment;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (child.key != null) {
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state2, instance));
        }
      }
      if (prevChildren) {
        for (let i2 = 0; i2 < prevChildren.length; i2++) {
          const child = prevChildren[i2];
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state2, instance));
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
const TransitionGroup$1 = TransitionGroupImpl;
function callPendingCbs(c2) {
  const el = c2.el;
  if (el._moveCb) {
    el._moveCb();
  }
  if (el._enterCb) {
    el._enterCb();
  }
}
function recordPosition(c2) {
  newPositionMap.set(c2, c2.el.getBoundingClientRect());
}
function applyTranslation(c2) {
  const oldPos = positionMap.get(c2);
  const newPos = newPositionMap.get(c2);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s2 = c2.el.style;
    s2.transform = s2.webkitTransform = `translate(${dx}px,${dy}px)`;
    s2.transitionDuration = "0s";
    return c2;
  }
}
function hasCSSTransform(el, root2, moveClass) {
  const clone4 = el.cloneNode();
  if (el._vtc) {
    el._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c2) => c2 && clone4.classList.remove(c2));
    });
  }
  moveClass.split(/\s+/).forEach((c2) => c2 && clone4.classList.add(c2));
  clone4.style.display = "none";
  const container = root2.nodeType === 1 ? root2 : root2.parentNode;
  container.appendChild(clone4);
  const { hasTransform } = getTransitionInfo(clone4);
  container.removeChild(clone4);
  return hasTransform;
}
const vShow = {
  beforeMount(el, { value: value26 }, { transition }) {
    el._vod = el.style.display === "none" ? "" : el.style.display;
    if (transition && value26) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value26);
    }
  },
  mounted(el, { value: value26 }, { transition }) {
    if (transition && value26) {
      transition.enter(el);
    }
  },
  updated(el, { value: value26, oldValue }, { transition }) {
    if (!value26 === !oldValue)
      return;
    if (transition) {
      if (value26) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value26);
    }
  },
  beforeUnmount(el, { value: value26 }) {
    setDisplay(el, value26);
  }
};
function setDisplay(el, value26) {
  el.style.display = value26 ? el._vod : "none";
}
const rendererOptions = extend$2({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const render = (...args) => {
  ensureRenderer().render(...args);
};
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$4(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function normalizeContainer(container) {
  if (isString$4(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var index_umd = { exports: {} };
(function(module2, exports2) {
  (function(global2, factory) {
    factory(exports2);
  })(commonjsGlobal, function(exports3) {
    exports3.Channel = void 0;
    (function(Channel) {
      Channel["Broadcast"] = "Broadcast";
    })(exports3.Channel || (exports3.Channel = {}));
    exports3.LifecycleEvents = void 0;
    (function(LifecycleEvents) {
      LifecycleEvents["Installed"] = "installed";
      LifecycleEvents["Uninstalled"] = "uninstalled";
      LifecycleEvents["Registered"] = "registered";
      LifecycleEvents["Mounted"] = "mounted";
      LifecycleEvents["Unmounted"] = "unmounted";
    })(exports3.LifecycleEvents || (exports3.LifecycleEvents = {}));
    /*! *****************************************************************************
      Copyright (c) Microsoft Corporation.
    
      Permission to use, copy, modify, and/or distribute this software for any
      purpose with or without fee is hereby granted.
    
      THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
      REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
      INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
      LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
      OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.
      ***************************************************************************** */
    function __awaiter2(thisArg, _arguments, P2, generator2) {
      function adopt(value26) {
        return value26 instanceof P2 ? value26 : new P2(function(resolve2) {
          resolve2(value26);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value26) {
          try {
            step(generator2.next(value26));
          } catch (e2) {
            reject(e2);
          }
        }
        function rejected(value26) {
          try {
            step(generator2["throw"](value26));
          } catch (e2) {
            reject(e2);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
      });
    }
    class CommunicationChannel {
      constructor(channelName, timeout = 2e3) {
        this.listeners = [];
        this.name = channelName;
        this.timeout = timeout;
      }
      on(event, callback) {
        this.listeners.push({ event, callback, usages: Infinity });
      }
      once(event, callback) {
        this.listeners.push({ event, callback, usages: 1 });
      }
      emit(event, payload) {
        const eventListeners = this.listeners.filter((l2) => l2.event === event);
        eventListeners.forEach((listener) => {
          this.emit(`re:${listener.event}`, listener.callback(payload));
          return Object.assign(Object.assign({}, listener), { usages: listener.usages - 1 });
        });
        this.listeners = this.listeners.map((listener) => {
          return eventListeners.find((l2) => l2 === listener) ? Object.assign(Object.assign({}, listener), { usages: listener.usages - 1 }) : listener;
        }).filter((l2) => l2.usages > 0);
      }
      request(event, payload) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve2, reject) => {
            this.once(`re:${event}`, (response) => resolve2(response));
            this.emit(event, payload);
            setTimeout(() => {
              reject(new Error(`Timeout while waiting for response to ${event}`));
            }, this.timeout);
          });
        });
      }
    }
    const openCommunicationChannel = (channelName) => {
      if (!window.$channels)
        window.$channels = [];
      const channel = window.$channels.find(({ name: name2 }) => channelName === name2);
      if (channel)
        return channel;
      const newChannel = new CommunicationChannel(channelName);
      window.$channels.push(newChannel);
      return newChannel;
    };
    const createWatcher2 = (event, onlyOnce = false, channel = exports3.Channel.Broadcast) => {
      return (callback) => {
        openCommunicationChannel(channel)[onlyOnce ? "once" : "on"](event, (payload) => {
          callback(payload);
        });
      };
    };
    const onRegistered = createWatcher2(exports3.LifecycleEvents.Registered, true);
    const onInstalled = createWatcher2(exports3.LifecycleEvents.Installed);
    const onMounted2 = createWatcher2(exports3.LifecycleEvents.Mounted);
    const onUnmounted2 = createWatcher2(exports3.LifecycleEvents.Unmounted);
    const emitLifecycleEvent = (event, payload) => {
      openCommunicationChannel(exports3.Channel.Broadcast).emit(event, payload);
    };
    const REGISTER_TIMEOUT = 5e3;
    const createScriptElement = (host, id2, manifest) => {
      const script = document.createElement("script");
      script.id = id2;
      script.type = "module";
      script.crossOrigin = "";
      const appSrc = manifest["index.js"] || manifest["bundle.js"] || manifest["main.js"] || manifest["main.umd.min.js"];
      script.src = `${host}/${appSrc}?${Math.random()}`;
      return script;
    };
    const createStyleElement2 = (host, id2, manifest) => {
      const link = window.document.createElement("link");
      link.id = id2;
      const appSrc = manifest["style.css"] || manifest["main.css"];
      if (!appSrc)
        return null;
      link.rel = "stylesheet";
      link.href = `${host}/${appSrc}?${Math.random()}`;
      return link;
    };
    const installApp = (host, target = window.document.head) => __awaiter2(void 0, void 0, void 0, function* () {
      const id2 = Math.round(Math.random() * 1e5);
      const scriptId = `micro-frontend-js-${id2}`;
      const styleLinkId = `micro-frontend-css-${id2}`;
      if (target.querySelector(`#${scriptId}`)) {
        return Promise.reject(`App ${host} is aleady installed`);
      }
      const trimmedHost = host.endsWith("/") ? host.slice(0, -1) : host;
      const response = yield fetch(`${trimmedHost}/asset-manifest.json`);
      const manifest = yield response.json();
      const script = createScriptElement(trimmedHost, scriptId, manifest);
      const style3 = createStyleElement2(trimmedHost, styleLinkId, manifest);
      target.appendChild(script);
      if (style3)
        target.appendChild(style3);
      emitLifecycleEvent(exports3.LifecycleEvents.Installed, host);
      return new Promise((resolve2, reject) => {
        onRegistered((app) => {
          app.host = host;
          resolve2(app);
        });
        setTimeout(() => {
          reject(new Error("App was installed, but not registered"));
        }, REGISTER_TIMEOUT);
      });
    });
    const initializeRepository = () => {
      if (!window.$microApps)
        window.$microApps = [];
    };
    const getRegistry = () => window.$microApps;
    const findAppByHost = (host) => {
      return getRegistry().find((app) => app.host === host);
    };
    const findAppByName = (name2) => {
      return getRegistry().find((app) => app.name === name2);
    };
    const uninstallApp = (host) => {
      const registry = getRegistry();
      const index2 = registry.findIndex((app) => app.host === host);
      if (index2 === -1)
        throw new Error("App not found");
      registry.splice(index2, 1);
      emitLifecycleEvent(exports3.LifecycleEvents.Uninstalled, host);
    };
    const isParentApp = () => {
      return !!getRegistry();
    };
    const registerMicroApp = (microApp2) => {
      if (!isParentApp()) {
        console.warn("Parent App not found, registration is aborted");
        return;
      }
      const registry = getRegistry();
      registry.push(microApp2);
      emitLifecycleEvent(exports3.LifecycleEvents.Registered, microApp2);
    };
    const createVue3MicroApp = (name2, appFactory2) => {
      let app = null;
      let appContainer = null;
      const microApp2 = {
        name: name2,
        mount(container) {
          app = appFactory2();
          appContainer = container;
          console.log("Function: mount =>", container);
          app.mount(container);
          emitLifecycleEvent(exports3.LifecycleEvents.Mounted, microApp2);
        },
        unmount() {
          if (!app)
            return;
          console.log("Function: unmount =>", appContainer);
          app.unmount();
          app = null;
          appContainer = null;
          emitLifecycleEvent(exports3.LifecycleEvents.Unmounted, microApp2);
        },
        getApp() {
          return app;
        }
      };
      return microApp2;
    };
    const init = () => {
      initializeRepository();
    };
    exports3.createVue3MicroApp = createVue3MicroApp;
    exports3.emitLifecycleEvent = emitLifecycleEvent;
    exports3.findAppByHost = findAppByHost;
    exports3.findAppByName = findAppByName;
    exports3.getRegistry = getRegistry;
    exports3.init = init;
    exports3.initializeRepository = initializeRepository;
    exports3.installApp = installApp;
    exports3.isParentApp = isParentApp;
    exports3.onInstalled = onInstalled;
    exports3.onMounted = onMounted2;
    exports3.onRegistered = onRegistered;
    exports3.onUnmounted = onUnmounted2;
    exports3.openCommunicationChannel = openCommunicationChannel;
    exports3.registerMicroApp = registerMicroApp;
    exports3.uninstallApp = uninstallApp;
    Object.defineProperty(exports3, "__esModule", { value: true });
  });
})(index_umd, index_umd.exports);
function _defineProperty$U(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value: value26,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
function ownKeys$2(object3, enumerableOnly) {
  var keys2 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2$2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    i2 % 2 ? ownKeys$2(Object(source2), true).forEach(function(key2) {
      _defineProperty$U(target, key2, source2[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys$2(Object(source2)).forEach(function(key2) {
      Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
    });
  }
  return target;
}
function _extends$1() {
  _extends$1 = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source2 = arguments[i2];
      for (var key2 in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key2)) {
          target[key2] = source2[key2];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function e$1(e2, t2) {
  for (var n2 = 0; n2 < t2.length; n2++) {
    var r2 = t2[n2];
    r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e2, r2.key, r2);
  }
}
function t$1(t2, n2, r2) {
  return n2 && e$1(t2.prototype, n2), r2 && e$1(t2, r2), t2;
}
function n$1() {
  return (n$1 = Object.assign || function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var n2 = arguments[t2];
      for (var r2 in n2)
        Object.prototype.hasOwnProperty.call(n2, r2) && (e2[r2] = n2[r2]);
    }
    return e2;
  }).apply(this, arguments);
}
function r$1(e2, t2) {
  e2.prototype = Object.create(t2.prototype), e2.prototype.constructor = e2, e2.__proto__ = t2;
}
function i(e2, t2) {
  if (e2 == null)
    return {};
  var n2, r2, i2 = {}, o2 = Object.keys(e2);
  for (r2 = 0; r2 < o2.length; r2++)
    t2.indexOf(n2 = o2[r2]) >= 0 || (i2[n2] = e2[n2]);
  return i2;
}
function o(e2) {
  return ((t2 = e2) != null && typeof t2 == "object" && Array.isArray(t2) === false) == 1 && Object.prototype.toString.call(e2) === "[object Object]";
  var t2;
}
var u = Object.prototype, a = u.toString, f = u.hasOwnProperty, c = /^\s*function (\w+)/;
function l(e2) {
  var t2, n2 = (t2 = e2 == null ? void 0 : e2.type) !== null && t2 !== void 0 ? t2 : e2;
  if (n2) {
    var r2 = n2.toString().match(c);
    return r2 ? r2[1] : "";
  }
  return "";
}
var s = function(e2) {
  var t2, n2;
  return o(e2) !== false && typeof (t2 = e2.constructor) == "function" && o(n2 = t2.prototype) !== false && n2.hasOwnProperty("isPrototypeOf") !== false;
}, v = function(e2) {
  return e2;
}, y = v;
var d = function(e2, t2) {
  return f.call(e2, t2);
}, h$1 = Number.isInteger || function(e2) {
  return typeof e2 == "number" && isFinite(e2) && Math.floor(e2) === e2;
}, b = Array.isArray || function(e2) {
  return a.call(e2) === "[object Array]";
}, O = function(e2) {
  return a.call(e2) === "[object Function]";
}, g = function(e2) {
  return s(e2) && d(e2, "_vueTypes_name");
}, m = function(e2) {
  return s(e2) && (d(e2, "type") || ["_vueTypes_name", "validator", "default", "required"].some(function(t2) {
    return d(e2, t2);
  }));
};
function j(e2, t2) {
  return Object.defineProperty(e2.bind(t2), "__original", { value: e2 });
}
function _(e2, t2, n2) {
  var r2;
  n2 === void 0 && (n2 = false);
  var i2 = true, o2 = "";
  r2 = s(e2) ? e2 : { type: e2 };
  var u2 = g(r2) ? r2._vueTypes_name + " - " : "";
  if (m(r2) && r2.type !== null) {
    if (r2.type === void 0 || r2.type === true)
      return i2;
    if (!r2.required && t2 === void 0)
      return i2;
    b(r2.type) ? (i2 = r2.type.some(function(e3) {
      return _(e3, t2, true) === true;
    }), o2 = r2.type.map(function(e3) {
      return l(e3);
    }).join(" or ")) : i2 = (o2 = l(r2)) === "Array" ? b(t2) : o2 === "Object" ? s(t2) : o2 === "String" || o2 === "Number" || o2 === "Boolean" || o2 === "Function" ? function(e3) {
      if (e3 == null)
        return "";
      var t3 = e3.constructor.toString().match(c);
      return t3 ? t3[1] : "";
    }(t2) === o2 : t2 instanceof r2.type;
  }
  if (!i2) {
    var a2 = u2 + 'value "' + t2 + '" should be of type "' + o2 + '"';
    return n2 === false ? (y(a2), false) : a2;
  }
  if (d(r2, "validator") && O(r2.validator)) {
    var f2 = y, v2 = [];
    if (y = function(e3) {
      v2.push(e3);
    }, i2 = r2.validator(t2), y = f2, !i2) {
      var p2 = (v2.length > 1 ? "* " : "") + v2.join("\n* ");
      return v2.length = 0, n2 === false ? (y(p2), i2) : p2;
    }
  }
  return i2;
}
function T$2(e2, t2) {
  var n2 = Object.defineProperties(t2, { _vueTypes_name: { value: e2, writable: true }, isRequired: { get: function() {
    return this.required = true, this;
  } }, def: { value: function(e3) {
    return e3 !== void 0 || this.default ? O(e3) || _(this, e3, true) === true ? (this.default = b(e3) ? function() {
      return [].concat(e3);
    } : s(e3) ? function() {
      return Object.assign({}, e3);
    } : e3, this) : (y(this._vueTypes_name + ' - invalid default value: "' + e3 + '"'), this) : this;
  } } }), r2 = n2.validator;
  return O(r2) && (n2.validator = j(r2, n2)), n2;
}
function w(e2, t2) {
  var n2 = T$2(e2, t2);
  return Object.defineProperty(n2, "validate", { value: function(e3) {
    return O(this.validator) && y(this._vueTypes_name + " - calling .validate() will overwrite the current custom validator function. Validator info:\n" + JSON.stringify(this)), this.validator = j(e3, this), this;
  } });
}
function k(e2, t2, n2) {
  var r2, o2, u2 = (r2 = t2, o2 = {}, Object.getOwnPropertyNames(r2).forEach(function(e3) {
    o2[e3] = Object.getOwnPropertyDescriptor(r2, e3);
  }), Object.defineProperties({}, o2));
  if (u2._vueTypes_name = e2, !s(n2))
    return u2;
  var a2, f2, c2 = n2.validator, l2 = i(n2, ["validator"]);
  if (O(c2)) {
    var v2 = u2.validator;
    v2 && (v2 = (f2 = (a2 = v2).__original) !== null && f2 !== void 0 ? f2 : a2), u2.validator = j(v2 ? function(e3) {
      return v2.call(this, e3) && c2.call(this, e3);
    } : c2, u2);
  }
  return Object.assign(u2, l2);
}
function P(e2) {
  return e2.replace(/^(?!\s*$)/gm, "  ");
}
var x = function() {
  return w("any", {});
}, A = function() {
  return w("function", { type: Function });
}, E = function() {
  return w("boolean", { type: Boolean });
}, N = function() {
  return w("string", { type: String });
}, q = function() {
  return w("number", { type: Number });
}, S = function() {
  return w("array", { type: Array });
}, V = function() {
  return w("object", { type: Object });
}, F = function() {
  return T$2("integer", { type: Number, validator: function(e2) {
    return h$1(e2);
  } });
}, D = function() {
  return T$2("symbol", { validator: function(e2) {
    return typeof e2 == "symbol";
  } });
};
function L(e2, t2) {
  if (t2 === void 0 && (t2 = "custom validation failed"), typeof e2 != "function")
    throw new TypeError("[VueTypes error]: You must provide a function as argument");
  return T$2(e2.name || "<<anonymous function>>", { validator: function(n2) {
    var r2 = e2(n2);
    return r2 || y(this._vueTypes_name + " - " + t2), r2;
  } });
}
function Y(e2) {
  if (!b(e2))
    throw new TypeError("[VueTypes error]: You must provide an array as argument.");
  var t2 = 'oneOf - value should be one of "' + e2.join('", "') + '".', n2 = e2.reduce(function(e3, t3) {
    if (t3 != null) {
      var n3 = t3.constructor;
      e3.indexOf(n3) === -1 && e3.push(n3);
    }
    return e3;
  }, []);
  return T$2("oneOf", { type: n2.length > 0 ? n2 : void 0, validator: function(n3) {
    var r2 = e2.indexOf(n3) !== -1;
    return r2 || y(t2), r2;
  } });
}
function B(e2) {
  if (!b(e2))
    throw new TypeError("[VueTypes error]: You must provide an array as argument");
  for (var t2 = false, n2 = [], r2 = 0; r2 < e2.length; r2 += 1) {
    var i2 = e2[r2];
    if (m(i2)) {
      if (g(i2) && i2._vueTypes_name === "oneOf") {
        n2 = n2.concat(i2.type);
        continue;
      }
      if (O(i2.validator) && (t2 = true), i2.type !== true && i2.type) {
        n2 = n2.concat(i2.type);
        continue;
      }
    }
    n2.push(i2);
  }
  return n2 = n2.filter(function(e3, t3) {
    return n2.indexOf(e3) === t3;
  }), T$2("oneOfType", t2 ? { type: n2, validator: function(t3) {
    var n3 = [], r3 = e2.some(function(e3) {
      var r4 = _(g(e3) && e3._vueTypes_name === "oneOf" ? e3.type || null : e3, t3, true);
      return typeof r4 == "string" && n3.push(r4), r4 === true;
    });
    return r3 || y("oneOfType - provided value does not match any of the " + n3.length + " passed-in validators:\n" + P(n3.join("\n"))), r3;
  } } : { type: n2 });
}
function I(e2) {
  return T$2("arrayOf", { type: Array, validator: function(t2) {
    var n2, r2 = t2.every(function(t3) {
      return (n2 = _(e2, t3, true)) === true;
    });
    return r2 || y("arrayOf - value validation error:\n" + P(n2)), r2;
  } });
}
function J(e2) {
  return T$2("instanceOf", { type: e2 });
}
function M(e2) {
  return T$2("objectOf", { type: Object, validator: function(t2) {
    var n2, r2 = Object.keys(t2).every(function(r3) {
      return (n2 = _(e2, t2[r3], true)) === true;
    });
    return r2 || y("objectOf - value validation error:\n" + P(n2)), r2;
  } });
}
function R(e2) {
  var t2 = Object.keys(e2), n2 = t2.filter(function(t3) {
    var n3;
    return !!((n3 = e2[t3]) === null || n3 === void 0 ? void 0 : n3.required);
  }), r2 = T$2("shape", { type: Object, validator: function(r3) {
    var i2 = this;
    if (!s(r3))
      return false;
    var o2 = Object.keys(r3);
    if (n2.length > 0 && n2.some(function(e3) {
      return o2.indexOf(e3) === -1;
    })) {
      var u2 = n2.filter(function(e3) {
        return o2.indexOf(e3) === -1;
      });
      return y(u2.length === 1 ? 'shape - required property "' + u2[0] + '" is not defined.' : 'shape - required properties "' + u2.join('", "') + '" are not defined.'), false;
    }
    return o2.every(function(n3) {
      if (t2.indexOf(n3) === -1)
        return i2._vueTypes_isLoose === true || (y('shape - shape definition does not include a "' + n3 + '" property. Allowed keys: "' + t2.join('", "') + '".'), false);
      var o3 = _(e2[n3], r3[n3], true);
      return typeof o3 == "string" && y('shape - "' + n3 + '" property validation error:\n ' + P(o3)), o3 === true;
    });
  } });
  return Object.defineProperty(r2, "_vueTypes_isLoose", { writable: true, value: false }), Object.defineProperty(r2, "loose", { get: function() {
    return this._vueTypes_isLoose = true, this;
  } }), r2;
}
var $ = function() {
  function e2() {
  }
  return e2.extend = function(e3) {
    var t2 = this;
    if (b(e3))
      return e3.forEach(function(e4) {
        return t2.extend(e4);
      }), this;
    var n2 = e3.name, r2 = e3.validate, o2 = r2 !== void 0 && r2, u2 = e3.getter, a2 = u2 !== void 0 && u2, f2 = i(e3, ["name", "validate", "getter"]);
    if (d(this, n2))
      throw new TypeError('[VueTypes error]: Type "' + n2 + '" already defined');
    var c2, l2 = f2.type;
    return g(l2) ? (delete f2.type, Object.defineProperty(this, n2, a2 ? { get: function() {
      return k(n2, l2, f2);
    } } : { value: function() {
      var e4, t3 = k(n2, l2, f2);
      return t3.validator && (t3.validator = (e4 = t3.validator).bind.apply(e4, [t3].concat([].slice.call(arguments)))), t3;
    } })) : (c2 = a2 ? { get: function() {
      var e4 = Object.assign({}, f2);
      return o2 ? w(n2, e4) : T$2(n2, e4);
    }, enumerable: true } : { value: function() {
      var e4, t3, r3 = Object.assign({}, f2);
      return e4 = o2 ? w(n2, r3) : T$2(n2, r3), r3.validator && (e4.validator = (t3 = r3.validator).bind.apply(t3, [e4].concat([].slice.call(arguments)))), e4;
    }, enumerable: true }, Object.defineProperty(this, n2, c2));
  }, t$1(e2, null, [{ key: "any", get: function() {
    return x();
  } }, { key: "func", get: function() {
    return A().def(this.defaults.func);
  } }, { key: "bool", get: function() {
    return E().def(this.defaults.bool);
  } }, { key: "string", get: function() {
    return N().def(this.defaults.string);
  } }, { key: "number", get: function() {
    return q().def(this.defaults.number);
  } }, { key: "array", get: function() {
    return S().def(this.defaults.array);
  } }, { key: "object", get: function() {
    return V().def(this.defaults.object);
  } }, { key: "integer", get: function() {
    return F().def(this.defaults.integer);
  } }, { key: "symbol", get: function() {
    return D();
  } }]), e2;
}();
function z(e2) {
  var i2;
  return e2 === void 0 && (e2 = { func: function() {
  }, bool: true, string: "", number: 0, array: function() {
    return [];
  }, object: function() {
    return {};
  }, integer: 0 }), (i2 = function(i3) {
    function o2() {
      return i3.apply(this, arguments) || this;
    }
    return r$1(o2, i3), t$1(o2, null, [{ key: "sensibleDefaults", get: function() {
      return n$1({}, this.defaults);
    }, set: function(t2) {
      this.defaults = t2 !== false ? n$1({}, t2 !== true ? t2 : e2) : {};
    } }]), o2;
  }($)).defaults = n$1({}, e2), i2;
}
$.defaults = {}, $.custom = L, $.oneOf = Y, $.instanceOf = J, $.oneOfType = B, $.arrayOf = I, $.objectOf = M, $.shape = R, $.utils = { validate: function(e2, t2) {
  return _(t2, e2, true) === true;
}, toType: function(e2, t2, n2) {
  return n2 === void 0 && (n2 = false), n2 ? w(e2, t2) : T$2(e2, t2);
} };
(function(e2) {
  function t2() {
    return e2.apply(this, arguments) || this;
  }
  return r$1(t2, e2), t2;
})(z());
var PropTypes = z({
  func: void 0,
  bool: void 0,
  string: void 0,
  number: void 0,
  array: void 0,
  object: void 0,
  integer: void 0
});
PropTypes.extend([{
  name: "looseBool",
  getter: true,
  type: Boolean,
  default: void 0
}, {
  name: "style",
  getter: true,
  type: [String, Object],
  default: void 0
}, {
  name: "VNodeChild",
  getter: true,
  type: null
}]);
function withUndefined(type3) {
  type3.default = void 0;
  return type3;
}
var PropsTypes = PropTypes;
function _typeof$2(obj) {
  "@babel/helpers - typeof";
  return _typeof$2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$2(obj);
}
var isFunction$3 = function isFunction2(val) {
  return typeof val === "function";
};
var isArray$4 = Array.isArray;
var isString$3 = function isString2(val) {
  return typeof val === "string";
};
var isObject$4 = function isObject2(val) {
  return val !== null && _typeof$2(val) === "object";
};
var onRE = /^on[^a-z]/;
var isOn = function isOn2(key2) {
  return onRE.test(key2);
};
var cacheStringFunction = function cacheStringFunction2(fn) {
  var cache = Object.create(null);
  return function(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
var camelizeRE = /-(\w)/g;
var camelize = cacheStringFunction(function(str) {
  return str.replace(camelizeRE, function(_2, c2) {
    return c2 ? c2.toUpperCase() : "";
  });
});
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cacheStringFunction(function(str) {
  return str.replace(hyphenateRE, "-$1").toLowerCase();
});
var hasOwnProperty$d = Object.prototype.hasOwnProperty;
var hasOwn = function hasOwn2(val, key2) {
  return hasOwnProperty$d.call(val, key2);
};
function resolvePropValue(options2, props2, key2, value26) {
  var opt = options2[key2];
  if (opt != null) {
    var hasDefault = hasOwn(opt, "default");
    if (hasDefault && value26 === void 0) {
      var defaultValue = opt.default;
      value26 = opt.type !== Function && isFunction$3(defaultValue) ? defaultValue() : defaultValue;
    }
    if (opt.type === Boolean) {
      if (!hasOwn(props2, key2) && !hasDefault) {
        value26 = false;
      } else if (value26 === "") {
        value26 = true;
      }
    }
  }
  return value26;
}
function getDataAndAriaProps$1(props2) {
  return Object.keys(props2).reduce(function(memo, key2) {
    if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-") {
      memo[key2] = props2[key2];
    }
    return memo;
  }, {});
}
function classNames() {
  var classes4 = [];
  for (var i2 = 0; i2 < arguments.length; i2++) {
    var value26 = i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2];
    if (!value26)
      continue;
    if (isString$3(value26)) {
      classes4.push(value26);
    } else if (isArray$4(value26)) {
      for (var _i = 0; _i < value26.length; _i++) {
        var inner = classNames(value26[_i]);
        if (inner) {
          classes4.push(inner);
        }
      }
    } else if (isObject$4(value26)) {
      for (var name2 in value26) {
        if (value26[name2]) {
          classes4.push(name2);
        }
      }
    }
  }
  return classes4.join(" ");
}
function omit$2(obj, fields) {
  var shallowCopy = Object.assign({}, obj);
  for (var i2 = 0; i2 < fields.length; i2 += 1) {
    var key2 = fields[i2];
    delete shallowCopy[key2];
  }
  return shallowCopy;
}
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key2) {
    var result = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key2) {
        result = index2;
        return true;
      }
      return false;
    });
    return result;
  }
  return function() {
    function class_1() {
      this.__entries__ = [];
    }
    Object.defineProperty(class_1.prototype, "size", {
      get: function() {
        return this.__entries__.length;
      },
      enumerable: true,
      configurable: true
    });
    class_1.prototype.get = function(key2) {
      var index2 = getIndex(this.__entries__, key2);
      var entry = this.__entries__[index2];
      return entry && entry[1];
    };
    class_1.prototype.set = function(key2, value26) {
      var index2 = getIndex(this.__entries__, key2);
      if (~index2) {
        this.__entries__[index2][1] = value26;
      } else {
        this.__entries__.push([key2, value26]);
      }
    };
    class_1.prototype.delete = function(key2) {
      var entries = this.__entries__;
      var index2 = getIndex(entries, key2);
      if (~index2) {
        entries.splice(index2, 1);
      }
    };
    class_1.prototype.has = function(key2) {
      return !!~getIndex(this.__entries__, key2);
    };
    class_1.prototype.clear = function() {
      this.__entries__.splice(0);
    };
    class_1.prototype.forEach = function(callback, ctx) {
      if (ctx === void 0) {
        ctx = null;
      }
      for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
        var entry = _a[_i];
        callback.call(ctx, entry[1], entry[0]);
      }
    };
    return class_1;
  }();
}();
var isBrowser$1 = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle$1(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = function() {
  function ResizeObserverController2() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle$1(this.refresh.bind(this), REFRESH_DELAY);
  }
  ResizeObserverController2.prototype.addObserver = function(observer) {
    if (!~this.observers_.indexOf(observer)) {
      this.observers_.push(observer);
    }
    if (!this.connected_) {
      this.connect_();
    }
  };
  ResizeObserverController2.prototype.removeObserver = function(observer) {
    var observers2 = this.observers_;
    var index2 = observers2.indexOf(observer);
    if (~index2) {
      observers2.splice(index2, 1);
    }
    if (!observers2.length && this.connected_) {
      this.disconnect_();
    }
  };
  ResizeObserverController2.prototype.refresh = function() {
    var changesDetected = this.updateObservers_();
    if (changesDetected) {
      this.refresh();
    }
  };
  ResizeObserverController2.prototype.updateObservers_ = function() {
    var activeObservers = this.observers_.filter(function(observer) {
      return observer.gatherActive(), observer.hasActive();
    });
    activeObservers.forEach(function(observer) {
      return observer.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  ResizeObserverController2.prototype.connect_ = function() {
    if (!isBrowser$1 || this.connected_) {
      return;
    }
    document.addEventListener("transitionend", this.onTransitionEnd_);
    window.addEventListener("resize", this.refresh);
    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener("DOMSubtreeModified", this.refresh);
      this.mutationEventsAdded_ = true;
    }
    this.connected_ = true;
  };
  ResizeObserverController2.prototype.disconnect_ = function() {
    if (!isBrowser$1 || !this.connected_) {
      return;
    }
    document.removeEventListener("transitionend", this.onTransitionEnd_);
    window.removeEventListener("resize", this.refresh);
    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }
    if (this.mutationEventsAdded_) {
      document.removeEventListener("DOMSubtreeModified", this.refresh);
    }
    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
    var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
    var isReflowProperty = transitionKeys.some(function(key2) {
      return !!~propertyName.indexOf(key2);
    });
    if (isReflowProperty) {
      this.refresh();
    }
  };
  ResizeObserverController2.getInstance = function() {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController2();
    }
    return this.instance_;
  };
  ResizeObserverController2.instance_ = null;
  return ResizeObserverController2;
}();
var defineConfigurable = function(target, props2) {
  for (var _i = 0, _a = Object.keys(props2); _i < _a.length; _i++) {
    var key2 = _a[_i];
    Object.defineProperty(target, key2, {
      value: props2[key2],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};
var getWindowOf = function(target) {
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value26) {
  return parseFloat(value26) || 0;
}
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size2, position) {
    var value26 = styles["border-" + position + "-width"];
    return size2 + toFloat(value26);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value26 = styles["padding-" + position];
    paddings[position] = toFloat(value26);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  return function(target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
  };
}();
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser$1) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
  var x2 = _a.x, y2 = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x: x2,
    y: y2,
    width,
    height,
    top: y2,
    right: x2 + width,
    bottom: height + y2,
    left: x2
  });
  return rect;
}
function createRectInit(x2, y2, width, height) {
  return { x: x2, y: y2, width, height };
}
var ResizeObservation = function() {
  function ResizeObservation2(target) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target;
  }
  ResizeObservation2.prototype.isActive = function() {
    var rect = getContentRect(this.target);
    this.contentRect_ = rect;
    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
  };
  ResizeObservation2.prototype.broadcastRect = function() {
    var rect = this.contentRect_;
    this.broadcastWidth = rect.width;
    this.broadcastHeight = rect.height;
    return rect;
  };
  return ResizeObservation2;
}();
var ResizeObserverEntry = function() {
  function ResizeObserverEntry2(target, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);
    defineConfigurable(this, { target, contentRect });
  }
  return ResizeObserverEntry2;
}();
var ResizeObserverSPI = function() {
  function ResizeObserverSPI2(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();
    if (typeof callback !== "function") {
      throw new TypeError("The callback provided as parameter 1 is not a function.");
    }
    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  ResizeObserverSPI2.prototype.observe = function(target) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (observations.has(target)) {
      return;
    }
    observations.set(target, new ResizeObservation(target));
    this.controller_.addObserver(this);
    this.controller_.refresh();
  };
  ResizeObserverSPI2.prototype.unobserve = function(target) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target instanceof getWindowOf(target).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (!observations.has(target)) {
      return;
    }
    observations.delete(target);
    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  ResizeObserverSPI2.prototype.disconnect = function() {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  ResizeObserverSPI2.prototype.gatherActive = function() {
    var _this = this;
    this.clearActive();
    this.observations_.forEach(function(observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  ResizeObserverSPI2.prototype.broadcastActive = function() {
    if (!this.hasActive()) {
      return;
    }
    var ctx = this.callbackCtx_;
    var entries = this.activeObservations_.map(function(observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx, entries, ctx);
    this.clearActive();
  };
  ResizeObserverSPI2.prototype.clearActive = function() {
    this.activeObservations_.splice(0);
  };
  ResizeObserverSPI2.prototype.hasActive = function() {
    return this.activeObservations_.length > 0;
  };
  return ResizeObserverSPI2;
}();
var observers = typeof WeakMap !== "undefined" ? new WeakMap() : new MapShim();
var ResizeObserver$1 = function() {
  function ResizeObserver2(callback) {
    if (!(this instanceof ResizeObserver2)) {
      throw new TypeError("Cannot call a class as a function.");
    }
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer);
  }
  return ResizeObserver2;
}();
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method3) {
  ResizeObserver$1.prototype[method3] = function() {
    var _a;
    return (_a = observers.get(this))[method3].apply(_a, arguments);
  };
});
var index$D = function() {
  if (typeof global$1.ResizeObserver !== "undefined") {
    return global$1.ResizeObserver;
  }
  return ResizeObserver$1;
}();
var ResizeObserver$2 = index$D;
function _arrayWithHoles$2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit$2(arr, i2) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _unsupportedIterableToArray$2(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray$2(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$2(o2, minLen);
}
function _nonIterableRest$2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$2(arr, i2) {
  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i2) || _unsupportedIterableToArray$2(arr, i2) || _nonIterableRest$2();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$2(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread();
}
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal$1 = freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal$1 || freeSelf || Function("return this")();
var root$1 = root;
var Symbol$1 = root$1.Symbol;
var Symbol$2 = Symbol$1;
var objectProto$f = Object.prototype;
var hasOwnProperty$c = objectProto$f.hasOwnProperty;
var nativeObjectToString$1 = objectProto$f.toString;
var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;
function getRawTag(value26) {
  var isOwn = hasOwnProperty$c.call(value26, symToStringTag$1), tag = value26[symToStringTag$1];
  try {
    value26[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e2) {
  }
  var result = nativeObjectToString$1.call(value26);
  if (unmasked) {
    if (isOwn) {
      value26[symToStringTag$1] = tag;
    } else {
      delete value26[symToStringTag$1];
    }
  }
  return result;
}
var objectProto$e = Object.prototype;
var nativeObjectToString = objectProto$e.toString;
function objectToString(value26) {
  return nativeObjectToString.call(value26);
}
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;
function baseGetTag(value26) {
  if (value26 == null) {
    return value26 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value26) ? getRawTag(value26) : objectToString(value26);
}
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var getPrototype = overArg(Object.getPrototypeOf, Object);
var getPrototype$1 = getPrototype;
function isObjectLike(value26) {
  return value26 != null && typeof value26 == "object";
}
var objectTag$4 = "[object Object]";
var funcProto$2 = Function.prototype, objectProto$d = Object.prototype;
var funcToString$2 = funcProto$2.toString;
var hasOwnProperty$b = objectProto$d.hasOwnProperty;
var objectCtorString = funcToString$2.call(Object);
function isPlainObject$1(value26) {
  if (!isObjectLike(value26) || baseGetTag(value26) != objectTag$4) {
    return false;
  }
  var proto2 = getPrototype$1(value26);
  if (proto2 === null) {
    return true;
  }
  var Ctor = hasOwnProperty$b.call(proto2, "constructor") && proto2.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString;
}
var isValid$3 = function isValid2(value26) {
  return value26 !== void 0 && value26 !== null && value26 !== "";
};
var isValid$4 = isValid$3;
var splitAttrs = function splitAttrs2(attrs) {
  var allAttrs = Object.keys(attrs);
  var eventAttrs = {};
  var onEvents = {};
  var extraAttrs = {};
  for (var i2 = 0, l2 = allAttrs.length; i2 < l2; i2++) {
    var key2 = allAttrs[i2];
    if (isOn(key2)) {
      eventAttrs[key2[2].toLowerCase() + key2.slice(3)] = attrs[key2];
      onEvents[key2] = attrs[key2];
    } else {
      extraAttrs[key2] = attrs[key2];
    }
  }
  return {
    onEvents,
    events: eventAttrs,
    extraAttrs
  };
};
var parseStyleText = function parseStyleText2() {
  var cssText = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var camel = arguments.length > 1 ? arguments[1] : void 0;
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function(item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      if (tmp.length > 1) {
        var k2 = camel ? camelize(tmp[0].trim()) : tmp[0].trim();
        res[k2] = tmp[1].trim();
      }
    }
  });
  return res;
};
var hasProp = function hasProp2(instance, prop) {
  return prop in getOptionProps(instance);
};
var flattenChildren = function flattenChildren2() {
  var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var filterEmpty2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var temp = Array.isArray(children) ? children : [children];
  var res = [];
  temp.forEach(function(child) {
    if (Array.isArray(child)) {
      res.push.apply(res, _toConsumableArray(flattenChildren2(child, filterEmpty2)));
    } else if (child && child.type === Fragment) {
      res.push.apply(res, _toConsumableArray(flattenChildren2(child.children, filterEmpty2)));
    } else if (child && isVNode(child)) {
      if (filterEmpty2 && !isEmptyElement(child)) {
        res.push(child);
      } else if (!filterEmpty2) {
        res.push(child);
      }
    } else if (isValid$4(child)) {
      res.push(child);
    }
  });
  return res;
};
var getSlot = function getSlot2(self2) {
  var name2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "default";
  var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  if (isVNode(self2)) {
    if (self2.type === Fragment) {
      return name2 === "default" ? flattenChildren(self2.children) : [];
    } else if (self2.children && self2.children[name2]) {
      return flattenChildren(self2.children[name2](options2));
    } else {
      return [];
    }
  } else {
    var res = self2.$slots[name2] && self2.$slots[name2](options2);
    return flattenChildren(res);
  }
};
var findDOMNode = function findDOMNode2(instance) {
  var _a;
  var node = ((_a = instance === null || instance === void 0 ? void 0 : instance.vnode) === null || _a === void 0 ? void 0 : _a.el) || instance && (instance.$el || instance);
  while (node && !node.tagName) {
    node = node.nextSibling;
  }
  return node;
};
var getOptionProps = function getOptionProps2(instance) {
  var res = {};
  if (instance.$ && instance.$.vnode) {
    var props2 = instance.$.vnode.props || {};
    Object.keys(instance.$props).forEach(function(k2) {
      var v2 = instance.$props[k2];
      var hyphenateKey = hyphenate(k2);
      if (v2 !== void 0 || hyphenateKey in props2) {
        res[k2] = v2;
      }
    });
  } else if (isVNode(instance) && _typeof$2(instance.type) === "object") {
    var originProps = instance.props || {};
    var _props = {};
    Object.keys(originProps).forEach(function(key2) {
      _props[camelize(key2)] = originProps[key2];
    });
    var options2 = instance.type.props || {};
    Object.keys(options2).forEach(function(k2) {
      var v2 = resolvePropValue(options2, _props, k2, _props[k2]);
      if (v2 !== void 0 || k2 in _props) {
        res[k2] = v2;
      }
    });
  }
  return res;
};
var getComponent = function getComponent2(instance) {
  var prop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "default";
  var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : instance;
  var execute = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
  var com = void 0;
  if (instance.$) {
    var temp = instance[prop];
    if (temp !== void 0) {
      return typeof temp === "function" && execute ? temp(options2) : temp;
    } else {
      com = instance.$slots[prop];
      com = execute && com ? com(options2) : com;
    }
  } else if (isVNode(instance)) {
    var _temp = instance.props && instance.props[prop];
    if (_temp !== void 0 && instance.props !== null) {
      return typeof _temp === "function" && execute ? _temp(options2) : _temp;
    } else if (instance.type === Fragment) {
      com = instance.children;
    } else if (instance.children && instance.children[prop]) {
      com = instance.children[prop];
      com = execute && com ? com(options2) : com;
    }
  }
  if (Array.isArray(com)) {
    com = flattenChildren(com);
    com = com.length === 1 ? com[0] : com;
    com = com.length === 0 ? void 0 : com;
  }
  return com;
};
var getPropsData = function getPropsData2(ins) {
  var vnode = ins.$ ? ins.$ : ins;
  var res = {};
  var originProps = vnode.props || {};
  var props2 = {};
  Object.keys(originProps).forEach(function(key2) {
    props2[camelize(key2)] = originProps[key2];
  });
  var options2 = isPlainObject$1(vnode.type) ? vnode.type.props : {};
  options2 && Object.keys(options2).forEach(function(k2) {
    var v2 = resolvePropValue(options2, props2, k2, props2[k2]);
    if (k2 in props2) {
      res[k2] = v2;
    }
  });
  return _extends$1(_extends$1({}, props2), res);
};
var getKey$2 = function getKey2(ele) {
  var key2 = ele.key;
  return key2;
};
function getEvents() {
  var ele = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var on = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var props2 = {};
  if (ele.$) {
    props2 = _extends$1(_extends$1({}, props2), ele.$attrs);
  } else {
    props2 = _extends$1(_extends$1({}, props2), ele.props);
  }
  return splitAttrs(props2)[on ? "onEvents" : "events"];
}
function getClass(ele) {
  var props2 = (isVNode(ele) ? ele.props : ele.$attrs) || {};
  var tempCls = props2.class || {};
  var cls = {};
  if (typeof tempCls === "string") {
    tempCls.split(" ").forEach(function(c2) {
      cls[c2.trim()] = true;
    });
  } else if (Array.isArray(tempCls)) {
    classNames(tempCls).split(" ").forEach(function(c2) {
      cls[c2.trim()] = true;
    });
  } else {
    cls = _extends$1(_extends$1({}, cls), tempCls);
  }
  return cls;
}
function getStyle$1(ele, camel) {
  var props2 = (isVNode(ele) ? ele.props : ele.$attrs) || {};
  var style3 = props2.style || {};
  if (typeof style3 === "string") {
    style3 = parseStyleText(style3, camel);
  } else if (camel && style3) {
    var res = {};
    Object.keys(style3).forEach(function(k2) {
      return res[camelize(k2)] = style3[k2];
    });
    return res;
  }
  return style3;
}
function isEmptyContent(c2) {
  return c2 === void 0 || c2 === null || c2 === "" || Array.isArray(c2) && c2.length === 0;
}
function isEmptyElement(c2) {
  return c2 && (c2.type === Comment$1 || c2.type === Fragment && c2.children.length === 0 || c2.type === Text$2 && c2.children.trim() === "");
}
function isEmptySlot(c2) {
  return !c2 || c2().every(isEmptyElement);
}
function isStringElement(c2) {
  return c2 && c2.type === Text$2;
}
function filterEmpty() {
  var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var res = [];
  children.forEach(function(child) {
    if (Array.isArray(child)) {
      res.push.apply(res, _toConsumableArray(child));
    } else if (child.type === Fragment) {
      res.push.apply(res, _toConsumableArray(child.children));
    } else {
      res.push(child);
    }
  });
  return res.filter(function(c2) {
    return !isEmptyElement(c2);
  });
}
var initDefaultProps$2 = function initDefaultProps2(propTypes2, defaultProps2) {
  Object.keys(defaultProps2).forEach(function(k2) {
    if (propTypes2[k2]) {
      propTypes2[k2].def && (propTypes2[k2] = propTypes2[k2].def(defaultProps2[k2]));
    } else {
      throw new Error("not have ".concat(k2, " prop"));
    }
  });
  return propTypes2;
};
function mergeProps() {
  var args = [].slice.call(arguments, 0);
  var props2 = {};
  args.forEach(function() {
    var p2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    for (var _i = 0, _Object$entries = Object.entries(p2); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray$2(_Object$entries[_i], 2), k2 = _Object$entries$_i[0], v2 = _Object$entries$_i[1];
      props2[k2] = props2[k2] || {};
      if (isPlainObject$1(v2)) {
        _extends$1(props2[k2], v2);
      } else {
        props2[k2] = v2;
      }
    }
  });
  return props2;
}
function isValidElement(element) {
  return element && element.__v_isVNode && _typeof$2(element.type) !== "symbol";
}
function getPropsSlot(slots, props2) {
  var prop = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "default";
  var _a, _b;
  return (_a = props2[prop]) !== null && _a !== void 0 ? _a : (_b = slots[prop]) === null || _b === void 0 ? void 0 : _b.call(slots);
}
var hasProp$1 = hasProp;
var ResizeObserver = defineComponent({
  name: "ResizeObserver",
  props: {
    disabled: Boolean,
    onResize: Function
  },
  emits: ["resize"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var state2 = reactive({
      width: 0,
      height: 0,
      offsetHeight: 0,
      offsetWidth: 0
    });
    var currentElement = null;
    var resizeObserver = null;
    var destroyObserver = function destroyObserver2() {
      if (resizeObserver) {
        resizeObserver.disconnect();
        resizeObserver = null;
      }
    };
    var onResize = function onResize2(entries) {
      var onResize3 = props2.onResize;
      var target = entries[0].target;
      var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
      var offsetWidth = target.offsetWidth, offsetHeight = target.offsetHeight;
      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);
      if (state2.width !== fixedWidth || state2.height !== fixedHeight || state2.offsetWidth !== offsetWidth || state2.offsetHeight !== offsetHeight) {
        var size2 = {
          width: fixedWidth,
          height: fixedHeight,
          offsetWidth,
          offsetHeight
        };
        _extends$1(state2, size2);
        if (onResize3) {
          Promise.resolve().then(function() {
            onResize3(_extends$1(_extends$1({}, size2), {
              offsetWidth,
              offsetHeight
            }), target);
          });
        }
      }
    };
    var instance = getCurrentInstance();
    var registerObserver = function registerObserver2() {
      var disabled = props2.disabled;
      if (disabled) {
        destroyObserver();
        return;
      }
      var element = findDOMNode(instance);
      var elementChanged = element !== currentElement;
      if (elementChanged) {
        destroyObserver();
        currentElement = element;
      }
      if (!resizeObserver && element) {
        resizeObserver = new ResizeObserver$2(onResize);
        resizeObserver.observe(element);
      }
    };
    onMounted(function() {
      registerObserver();
    });
    onUpdated(function() {
      registerObserver();
    });
    onUnmounted(function() {
      destroyObserver();
    });
    watch(function() {
      return props2.disabled;
    }, function() {
      registerObserver();
    }, {
      flush: "post"
    });
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)[0];
    };
  }
});
function throttleByAnimationFrame(fn) {
  var requestId;
  var later = function later2(args) {
    return function() {
      requestId = null;
      fn.apply(void 0, _toConsumableArray(args));
    };
  };
  var throttled = function throttled2() {
    if (requestId == null) {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      requestId = requestAnimationFrame(later(args));
    }
  };
  throttled.cancel = function() {
    return cancelAnimationFrame(requestId);
  };
  return throttled;
}
var tuple = function tuple2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return args;
};
var tupleNum = function tupleNum2() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  return args;
};
var withInstall = function withInstall2(comp) {
  var c2 = comp;
  c2.install = function(app) {
    app.component(c2.displayName || c2.name, comp);
  };
  return comp;
};
var supportsPassive = false;
try {
  var opts = Object.defineProperty({}, "passive", {
    get: function get2() {
      supportsPassive = true;
    }
  });
  window.addEventListener("testPassive", null, opts);
  window.removeEventListener("testPassive", null, opts);
} catch (e2) {
}
var supportsPassive$1 = supportsPassive;
function addEventListenerWrap(target, eventType, cb, option) {
  if (target.addEventListener) {
    var opt = option;
    if (opt === void 0 && supportsPassive$1 && (eventType === "touchstart" || eventType === "touchmove" || eventType === "wheel")) {
      opt = {
        passive: false
      };
    }
    target.addEventListener(eventType, cb, opt);
  }
  return {
    remove: function remove3() {
      if (target.removeEventListener) {
        target.removeEventListener(eventType, cb);
      }
    }
  };
}
function getTargetRect(target) {
  return target !== window ? target.getBoundingClientRect() : {
    top: 0,
    bottom: window.innerHeight
  };
}
function getFixedTop(placeholderReact, targetRect, offsetTop) {
  if (offsetTop !== void 0 && targetRect.top > placeholderReact.top - offsetTop) {
    return "".concat(offsetTop + targetRect.top, "px");
  }
  return void 0;
}
function getFixedBottom(placeholderReact, targetRect, offsetBottom) {
  if (offsetBottom !== void 0 && targetRect.bottom < placeholderReact.bottom + offsetBottom) {
    var targetBottomOffset = window.innerHeight - targetRect.bottom;
    return "".concat(offsetBottom + targetBottomOffset, "px");
  }
  return void 0;
}
var TRIGGER_EVENTS = ["resize", "scroll", "touchstart", "touchmove", "touchend", "pageshow", "load"];
var observerEntities = [];
function addObserveTarget(target, affix) {
  if (!target)
    return;
  var entity = observerEntities.find(function(item) {
    return item.target === target;
  });
  if (entity) {
    entity.affixList.push(affix);
  } else {
    entity = {
      target,
      affixList: [affix],
      eventHandlers: {}
    };
    observerEntities.push(entity);
    TRIGGER_EVENTS.forEach(function(eventName) {
      entity.eventHandlers[eventName] = addEventListenerWrap(target, eventName, function() {
        entity.affixList.forEach(function(targetAffix) {
          var lazyUpdatePosition = targetAffix.exposed.lazyUpdatePosition;
          lazyUpdatePosition();
        }, (eventName === "touchstart" || eventName === "touchmove") && supportsPassive$1 ? {
          passive: true
        } : false);
      });
    });
  }
}
function removeObserveTarget(affix) {
  var observerEntity = observerEntities.find(function(oriObserverEntity) {
    var hasAffix = oriObserverEntity.affixList.some(function(item) {
      return item === affix;
    });
    if (hasAffix) {
      oriObserverEntity.affixList = oriObserverEntity.affixList.filter(function(item) {
        return item !== affix;
      });
    }
    return hasAffix;
  });
  if (observerEntity && observerEntity.affixList.length === 0) {
    observerEntities = observerEntities.filter(function(item) {
      return item !== observerEntity;
    });
    TRIGGER_EVENTS.forEach(function(eventName) {
      var handler8 = observerEntity.eventHandlers[eventName];
      if (handler8 && handler8.remove) {
        handler8.remove();
      }
    });
  }
}
var enUS$2 = {
  items_per_page: "/ page",
  jump_to: "Go to",
  jump_to_confirm: "confirm",
  page: "",
  prev_page: "Previous Page",
  next_page: "Next Page",
  prev_5: "Previous 5 Pages",
  next_5: "Next 5 Pages",
  prev_3: "Previous 3 Pages",
  next_3: "Next 3 Pages"
};
var enUs = {
  today: "Today",
  now: "Now",
  backToToday: "Back to today",
  ok: "Ok",
  clear: "Clear",
  month: "Month",
  year: "Year",
  timeSelect: "select time",
  dateSelect: "select date",
  weekSelect: "Choose a week",
  monthSelect: "Choose a month",
  yearSelect: "Choose a year",
  decadeSelect: "Choose a decade",
  yearFormat: "YYYY",
  dateFormat: "M/D/YYYY",
  dayFormat: "D",
  dateTimeFormat: "M/D/YYYY HH:mm:ss",
  monthBeforeYear: true,
  previousMonth: "Previous month (PageUp)",
  nextMonth: "Next month (PageDown)",
  previousYear: "Last year (Control + left)",
  nextYear: "Next year (Control + right)",
  previousDecade: "Last decade",
  nextDecade: "Next decade",
  previousCentury: "Last century",
  nextCentury: "Next century"
};
var locale$2 = {
  placeholder: "Select time"
};
var enUS$1 = locale$2;
var locale$1 = {
  lang: _extends$1({
    placeholder: "Select date",
    rangePlaceholder: ["Start date", "End date"]
  }, enUs),
  timePickerLocale: _extends$1({}, enUS$1)
};
var enUS = locale$1;
var typeTemplate$1 = "${label} is not a valid ${type}";
var defaultLocale = {
  locale: "en",
  Pagination: enUS$2,
  DatePicker: enUS,
  TimePicker: enUS$1,
  Calendar: enUS,
  global: {
    placeholder: "Please select"
  },
  Table: {
    filterTitle: "Filter menu",
    filterConfirm: "OK",
    filterReset: "Reset",
    filterEmptyText: "No filters",
    emptyText: "No data",
    selectAll: "Select current page",
    selectInvert: "Invert current page",
    selectNone: "Clear all data",
    selectionAll: "Select all data",
    sortTitle: "Sort",
    expand: "Expand row",
    collapse: "Collapse row",
    triggerDesc: "Click to sort descending",
    triggerAsc: "Click to sort ascending",
    cancelSort: "Click to cancel sorting"
  },
  Modal: {
    okText: "OK",
    cancelText: "Cancel",
    justOkText: "OK"
  },
  Popconfirm: {
    okText: "OK",
    cancelText: "Cancel"
  },
  Transfer: {
    titles: ["", ""],
    searchPlaceholder: "Search here",
    itemUnit: "item",
    itemsUnit: "items",
    remove: "Remove",
    selectCurrent: "Select current page",
    removeCurrent: "Remove current page",
    selectAll: "Select all data",
    removeAll: "Remove all data",
    selectInvert: "Invert current page"
  },
  Upload: {
    uploading: "Uploading...",
    removeFile: "Remove file",
    uploadError: "Upload error",
    previewFile: "Preview file",
    downloadFile: "Download file"
  },
  Empty: {
    description: "No Data"
  },
  Icon: {
    icon: "icon"
  },
  Text: {
    edit: "Edit",
    copy: "Copy",
    copied: "Copied",
    expand: "Expand"
  },
  PageHeader: {
    back: "Back"
  },
  Form: {
    optional: "(optional)",
    defaultValidateMessages: {
      default: "Field validation error for ${label}",
      required: "Please enter ${label}",
      enum: "${label} must be one of [${enum}]",
      whitespace: "${label} cannot be a blank character",
      date: {
        format: "${label} date format is invalid",
        parse: "${label} cannot be converted to a date",
        invalid: "${label} is an invalid date"
      },
      types: {
        string: typeTemplate$1,
        method: typeTemplate$1,
        array: typeTemplate$1,
        object: typeTemplate$1,
        number: typeTemplate$1,
        date: typeTemplate$1,
        boolean: typeTemplate$1,
        integer: typeTemplate$1,
        float: typeTemplate$1,
        regexp: typeTemplate$1,
        email: typeTemplate$1,
        url: typeTemplate$1,
        hex: typeTemplate$1
      },
      string: {
        len: "${label} must be ${len} characters",
        min: "${label} must be at least ${min} characters",
        max: "${label} must be up to ${max} characters",
        range: "${label} must be between ${min}-${max} characters"
      },
      number: {
        len: "${label} must be equal to ${len}",
        min: "${label} must be minimum ${min}",
        max: "${label} must be maximum ${max}",
        range: "${label} must be between ${min}-${max}"
      },
      array: {
        len: "Must be ${len} ${label}",
        min: "At least ${min} ${label}",
        max: "At most ${max} ${label}",
        range: "The amount of ${label} must be between ${min}-${max}"
      },
      pattern: {
        mismatch: "${label} does not match the pattern ${pattern}"
      }
    }
  },
  Image: {
    preview: "Preview"
  }
};
var LocaleReceiver = defineComponent({
  name: "LocaleReceiver",
  props: {
    componentName: PropsTypes.string,
    defaultLocale: {
      type: [Object, Function]
    },
    children: {
      type: Function
    }
  },
  setup: function setup2(props2, _ref) {
    var slots = _ref.slots;
    var localeData2 = inject("localeData", {});
    var locale2 = computed(function() {
      var _props$componentName = props2.componentName, componentName = _props$componentName === void 0 ? "global" : _props$componentName, defaultLocale$1 = props2.defaultLocale;
      var locale3 = defaultLocale$1 || defaultLocale[componentName || "global"];
      var antLocale = localeData2.antLocale;
      var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
      return _extends$1(_extends$1({}, typeof locale3 === "function" ? locale3() : locale3), localeFromContext || {});
    });
    var localeCode = computed(function() {
      var antLocale = localeData2.antLocale;
      var localeCode2 = antLocale && antLocale.locale;
      if (antLocale && antLocale.exist && !localeCode2) {
        return defaultLocale.locale;
      }
      return localeCode2;
    });
    return function() {
      var children = props2.children || slots.default;
      var antLocale = localeData2.antLocale;
      return children === null || children === void 0 ? void 0 : children(locale2.value, localeCode.value, antLocale);
    };
  }
});
function useLocaleReceiver(componentName, defaultLocale$1) {
  var localeData2 = inject("localeData", {});
  var componentLocale = computed(function() {
    var antLocale = localeData2.antLocale;
    var locale2 = defaultLocale$1 || defaultLocale[componentName || "global"];
    var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
    return _extends$1(_extends$1({}, typeof locale2 === "function" ? locale2() : locale2), localeFromContext || {});
  });
  return [componentLocale];
}
var Empty$2 = function Empty2() {
  var _inject = inject("configProvider", defaultConfigProvider), getPrefixCls2 = _inject.getPrefixCls;
  var prefixCls2 = getPrefixCls2("empty-img-default");
  return createVNode("svg", {
    "class": prefixCls2,
    "width": "184",
    "height": "152",
    "viewBox": "0 0 184 152"
  }, [createVNode("g", {
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("g", {
    "transform": "translate(24 31.67)"
  }, [createVNode("ellipse", {
    "class": "".concat(prefixCls2, "-ellipse"),
    "cx": "67.797",
    "cy": "106.89",
    "rx": "67.797",
    "ry": "12.668"
  }, null), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-1"),
    "d": "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
  }, null), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-2"),
    "d": "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
    "transform": "translate(13.56)"
  }, null), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-3"),
    "d": "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
  }, null), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-4"),
    "d": "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
  }, null)]), createVNode("path", {
    "class": "".concat(prefixCls2, "-path-5"),
    "d": "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
  }, null), createVNode("g", {
    "class": "".concat(prefixCls2, "-g"),
    "transform": "translate(149.65 15.383)"
  }, [createVNode("ellipse", {
    "cx": "20.654",
    "cy": "3.167",
    "rx": "2.849",
    "ry": "2.815"
  }, null), createVNode("path", {
    "d": "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
  }, null)])])]);
};
Empty$2.PRESENTED_IMAGE_DEFAULT = true;
var DefaultEmptyImg = Empty$2;
var Simple = function Simple2() {
  var _inject = inject("configProvider", defaultConfigProvider), getPrefixCls2 = _inject.getPrefixCls;
  var prefixCls2 = getPrefixCls2("empty-img-simple");
  return createVNode("svg", {
    "class": prefixCls2,
    "width": "64",
    "height": "41",
    "viewBox": "0 0 64 41"
  }, [createVNode("g", {
    "transform": "translate(0 1)",
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("ellipse", {
    "class": "".concat(prefixCls2, "-ellipse"),
    "fill": "#F5F5F5",
    "cx": "32",
    "cy": "33",
    "rx": "32",
    "ry": "7"
  }, null), createVNode("g", {
    "class": "".concat(prefixCls2, "-g"),
    "fill-rule": "nonzero",
    "stroke": "#D9D9D9"
  }, [createVNode("path", {
    "d": "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
  }, null), createVNode("path", {
    "d": "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
    "fill": "#FAFAFA",
    "class": "".concat(prefixCls2, "-path")
  }, null)])])]);
};
Simple.PRESENTED_IMAGE_SIMPLE = true;
var SimpleEmptyImg = Simple;
var __rest$X = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var defaultEmptyImg = createVNode(DefaultEmptyImg, null, null);
var simpleEmptyImg = createVNode(SimpleEmptyImg, null, null);
var Empty = function Empty3(props2, _ref) {
  var _ref$slots = _ref.slots, slots = _ref$slots === void 0 ? {} : _ref$slots, attrs = _ref.attrs;
  var _a;
  var configProvider = inject("configProvider", defaultConfigProvider);
  var getPrefixCls2 = configProvider.getPrefixCls, direction = configProvider.direction;
  var _b = _extends$1(_extends$1({}, props2), attrs), customizePrefixCls = _b.prefixCls, _b$image = _b.image, image = _b$image === void 0 ? defaultEmptyImg : _b$image, _b$description = _b.description, description2 = _b$description === void 0 ? ((_a = slots.description) === null || _a === void 0 ? void 0 : _a.call(slots)) || void 0 : _b$description, imageStyle = _b.imageStyle, _b$class = _b.class, className = _b$class === void 0 ? "" : _b$class, restProps = __rest$X(_b, ["prefixCls", "image", "description", "imageStyle", "class"]);
  return createVNode(LocaleReceiver, {
    "componentName": "Empty",
    "children": function children(locale2) {
      var _classNames;
      var prefixCls2 = getPrefixCls2("empty", customizePrefixCls);
      var des = typeof description2 !== "undefined" ? description2 : locale2.description;
      var alt = typeof des === "string" ? des : "empty";
      var imageNode = null;
      if (typeof image === "string") {
        imageNode = createVNode("img", {
          "alt": alt,
          "src": image
        }, null);
      } else {
        imageNode = image;
      }
      return createVNode("div", _objectSpread2$2({
        "class": classNames(prefixCls2, className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-normal"), image === simpleEmptyImg), _defineProperty$U(_classNames, "".concat(prefixCls2, "-rtl"), direction === "rtl"), _classNames))
      }, restProps), [createVNode("div", {
        "class": "".concat(prefixCls2, "-image"),
        "style": imageStyle
      }, [imageNode]), des && createVNode("p", {
        "class": "".concat(prefixCls2, "-description")
      }, [des]), slots.default && createVNode("div", {
        "class": "".concat(prefixCls2, "-footer")
      }, [filterEmpty(slots.default())])]);
    }
  }, null);
};
Empty.displayName = "AEmpty";
Empty.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
Empty.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;
Empty.inheritAttrs = false;
Empty.props = {
  prefixCls: PropsTypes.string,
  image: PropsTypes.any,
  description: PropsTypes.any,
  imageStyle: PropsTypes.object
};
var Empty$1 = withInstall(Empty);
var RenderEmpty = function RenderEmpty2(props2) {
  var configProvider = inject("configProvider", defaultConfigProvider);
  var renderHtml = function renderHtml2(componentName) {
    var getPrefixCls2 = configProvider.getPrefixCls;
    var prefix = getPrefixCls2("empty");
    switch (componentName) {
      case "Table":
      case "List":
        return createVNode(Empty$1, {
          "image": Empty$1.PRESENTED_IMAGE_SIMPLE
        }, null);
      case "Select":
      case "TreeSelect":
      case "Cascader":
      case "Transfer":
      case "Mentions":
        return createVNode(Empty$1, {
          "image": Empty$1.PRESENTED_IMAGE_SIMPLE,
          "class": "".concat(prefix, "-small")
        }, null);
      default:
        return createVNode(Empty$1, null, null);
    }
  };
  return renderHtml(props2.componentName);
};
function renderEmpty(componentName) {
  return createVNode(RenderEmpty, {
    "componentName": componentName
  }, null);
}
//! moment.js
//! version : 2.29.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var hookCallback;
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray$3(input) {
  return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
}
function isObject$3(input) {
  return input != null && Object.prototype.toString.call(input) === "[object Object]";
}
function hasOwnProp(a2, b2) {
  return Object.prototype.hasOwnProperty.call(a2, b2);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k2;
    for (k2 in obj) {
      if (hasOwnProp(obj, k2)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined$1(input) {
  return input === void 0;
}
function isNumber$2(input) {
  return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
}
function isDate$1(input) {
  return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
}
function map(arr, fn) {
  var res = [], i2;
  for (i2 = 0; i2 < arr.length; ++i2) {
    res.push(fn(arr[i2], i2));
  }
  return res;
}
function extend$1(a2, b2) {
  for (var i2 in b2) {
    if (hasOwnProp(b2, i2)) {
      a2[i2] = b2[i2];
    }
  }
  if (hasOwnProp(b2, "toString")) {
    a2.toString = b2.toString;
  }
  if (hasOwnProp(b2, "valueOf")) {
    a2.valueOf = b2.valueOf;
  }
  return a2;
}
function createUTC(input, format3, locale2, strict) {
  return createLocalOrUTC(input, format3, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m2) {
  if (m2._pf == null) {
    m2._pf = defaultParsingFlags();
  }
  return m2._pf;
}
var some;
if (Array.prototype.some) {
  some = Array.prototype.some;
} else {
  some = function(fun) {
    var t2 = Object(this), len = t2.length >>> 0, i2;
    for (i2 = 0; i2 < len; i2++) {
      if (i2 in t2 && fun.call(this, t2[i2], i2, t2)) {
        return true;
      }
    }
    return false;
  };
}
function isValid(m2) {
  if (m2._isValid == null) {
    var flags = getParsingFlags(m2), parsedParts = some.call(flags.parsedDateParts, function(i2) {
      return i2 != null;
    }), isNowValid = !isNaN(m2._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m2._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
    if (Object.isFrozen == null || !Object.isFrozen(m2)) {
      m2._isValid = isNowValid;
    } else {
      return isNowValid;
    }
  }
  return m2._isValid;
}
function createInvalid(flags) {
  var m2 = createUTC(NaN);
  if (flags != null) {
    extend$1(getParsingFlags(m2), flags);
  } else {
    getParsingFlags(m2).userInvalidated = true;
  }
  return m2;
}
var momentProperties = hooks.momentProperties = [], updateInProgress = false;
function copyConfig(to2, from2) {
  var i2, prop, val;
  if (!isUndefined$1(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined$1(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined$1(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined$1(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined$1(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined$1(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined$1(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined$1(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined$1(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined$1(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentProperties.length > 0) {
    for (i2 = 0; i2 < momentProperties.length; i2++) {
      prop = momentProperties[i2];
      val = from2[prop];
      if (!isUndefined$1(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config2) {
  copyConfig(this, config2);
  this._d = new Date(config2._d != null ? config2._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment$1(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn$1(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
    console.warn("Deprecation warning: " + msg);
  }
}
function deprecate(msg, fn) {
  var firstTime = true;
  return extend$1(function() {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [], arg, i2, key2;
      for (i2 = 0; i2 < arguments.length; i2++) {
        arg = "";
        if (typeof arguments[i2] === "object") {
          arg += "\n[" + i2 + "] ";
          for (key2 in arguments[0]) {
            if (hasOwnProp(arguments[0], key2)) {
              arg += key2 + ": " + arguments[0][key2] + ", ";
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i2];
        }
        args.push(arg);
      }
      warn$1(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
      firstTime = false;
    }
    return fn.apply(this, arguments);
  }, fn);
}
var deprecations = {};
function deprecateSimple(name2, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name2, msg);
  }
  if (!deprecations[name2]) {
    warn$1(msg);
    deprecations[name2] = true;
  }
}
hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;
function isFunction$2(input) {
  return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
}
function set(config2) {
  var prop, i2;
  for (i2 in config2) {
    if (hasOwnProp(config2, i2)) {
      prop = config2[i2];
      if (isFunction$2(prop)) {
        this[i2] = prop;
      } else {
        this["_" + i2] = prop;
      }
    }
  }
  this._config = config2;
  this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend$1({}, parentConfig), prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject$3(parentConfig[prop]) && isObject$3(childConfig[prop])) {
        res[prop] = {};
        extend$1(res[prop], parentConfig[prop]);
        extend$1(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$3(parentConfig[prop])) {
      res[prop] = extend$1({}, res[prop]);
    }
  }
  return res;
}
function Locale(config2) {
  if (config2 != null) {
    this.set(config2);
  }
}
var keys$1;
if (Object.keys) {
  keys$1 = Object.keys;
} else {
  keys$1 = function(obj) {
    var i2, res = [];
    for (i2 in obj) {
      if (hasOwnProp(obj, i2)) {
        res.push(i2);
      }
    }
    return res;
  };
}
var defaultCalendar = {
  sameDay: "[Today at] LT",
  nextDay: "[Tomorrow at] LT",
  nextWeek: "dddd [at] LT",
  lastDay: "[Yesterday at] LT",
  lastWeek: "[Last] dddd [at] LT",
  sameElse: "L"
};
function calendar(key2, mom, now2) {
  var output = this._calendar[key2] || this._calendar["sameElse"];
  return isFunction$2(output) ? output.call(mom, now2) : output;
}
function zeroFill(number3, targetLength, forceSign) {
  var absNumber = "" + Math.abs(number3), zerosToFill = targetLength - absNumber.length, sign2 = number3 >= 0;
  return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === "string") {
    func = function() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function() {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function() {
      return this.localeData().ordinal(func.apply(this, arguments), token2);
    };
  }
}
function removeFormattingTokens(input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|\]$/g, "");
  }
  return input.replace(/\\/g, "");
}
function makeFormatFunction(format3) {
  var array3 = format3.match(formattingTokens), i2, length;
  for (i2 = 0, length = array3.length; i2 < length; i2++) {
    if (formatTokenFunctions[array3[i2]]) {
      array3[i2] = formatTokenFunctions[array3[i2]];
    } else {
      array3[i2] = removeFormattingTokens(array3[i2]);
    }
  }
  return function(mom) {
    var output = "", i3;
    for (i3 = 0; i3 < length; i3++) {
      output += isFunction$2(array3[i3]) ? array3[i3].call(mom, format3) : array3[i3];
    }
    return output;
  };
}
function formatMoment(m2, format3) {
  if (!m2.isValid()) {
    return m2.localeData().invalidDate();
  }
  format3 = expandFormat(format3, m2.localeData());
  formatFunctions[format3] = formatFunctions[format3] || makeFormatFunction(format3);
  return formatFunctions[format3](m2);
}
function expandFormat(format3, locale2) {
  var i2 = 5;
  function replaceLongDateFormatTokens(input) {
    return locale2.longDateFormat(input) || input;
  }
  localFormattingTokens.lastIndex = 0;
  while (i2 >= 0 && localFormattingTokens.test(format3)) {
    format3 = format3.replace(localFormattingTokens, replaceLongDateFormatTokens);
    localFormattingTokens.lastIndex = 0;
    i2 -= 1;
  }
  return format3;
}
var defaultLongDateFormat = {
  LTS: "h:mm:ss A",
  LT: "h:mm A",
  L: "MM/DD/YYYY",
  LL: "MMMM D, YYYY",
  LLL: "MMMM D, YYYY h:mm A",
  LLLL: "dddd, MMMM D, YYYY h:mm A"
};
function longDateFormat(key2) {
  var format3 = this._longDateFormat[key2], formatUpper = this._longDateFormat[key2.toUpperCase()];
  if (format3 || !formatUpper) {
    return format3;
  }
  this._longDateFormat[key2] = formatUpper.match(formattingTokens).map(function(tok) {
    if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
      return tok.slice(1);
    }
    return tok;
  }).join("");
  return this._longDateFormat[key2];
}
var defaultInvalidDate = "Invalid date";
function invalidDate() {
  return this._invalidDate;
}
var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
function ordinal(number3) {
  return this._ordinal.replace("%d", number3);
}
var defaultRelativeTime = {
  future: "in %s",
  past: "%s ago",
  s: "a few seconds",
  ss: "%d seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  w: "a week",
  ww: "%d weeks",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};
function relativeTime(number3, withoutSuffix, string2, isFuture) {
  var output = this._relativeTime[string2];
  return isFunction$2(output) ? output(number3, withoutSuffix, string2, isFuture) : output.replace(/%d/i, number3);
}
function pastFuture(diff2, output) {
  var format3 = this._relativeTime[diff2 > 0 ? "future" : "past"];
  return isFunction$2(format3) ? format3(output) : format3.replace(/%s/i, output);
}
var aliases = {};
function addUnitAlias(unit, shorthand) {
  var lowerCase = unit.toLowerCase();
  aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
}
function normalizeUnits(units) {
  return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {}, normalizedProp, prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
var priorities = {};
function addUnitPriority(unit, priority) {
  priorities[unit] = priority;
}
function getPrioritizedUnits(unitsObj) {
  var units = [], u2;
  for (u2 in unitsObj) {
    if (hasOwnProp(unitsObj, u2)) {
      units.push({ unit: u2, priority: priorities[u2] });
    }
  }
  units.sort(function(a2, b2) {
    return a2.priority - b2.priority;
  });
  return units;
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function absFloor(number3) {
  if (number3 < 0) {
    return Math.ceil(number3) || 0;
  } else {
    return Math.floor(number3);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion, value26 = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value26 = absFloor(coercedNumber);
  }
  return value26;
}
function makeGetSet(unit, keepTime) {
  return function(value26) {
    if (value26 != null) {
      set$1(this, unit, value26);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get$1(this, unit);
    }
  };
}
function get$1(mom, unit) {
  return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
}
function set$1(mom, unit, value26) {
  if (mom.isValid() && !isNaN(value26)) {
    if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
      value26 = toInt(value26);
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value26, mom.month(), daysInMonth(value26, mom.month()));
    } else {
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value26);
    }
  }
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction$2(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value26) {
  if (typeof units === "object") {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units), i2;
    for (i2 = 0; i2 < prioritized.length; i2++) {
      this[prioritized[i2].unit](units[prioritized[i2].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction$2(this[units])) {
      return this[units](value26);
    }
  }
  return this;
}
var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
regexes = {};
function addRegexToken(token2, regex, strictRegex) {
  regexes[token2] = isFunction$2(regex) ? regex : function(isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex;
  };
}
function getParseRegexForToken(token2, config2) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config2._strict, config2._locale);
}
function unescapeFormat(s2) {
  return regexEscape(s2.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
    return p1 || p2 || p3 || p4;
  }));
}
function regexEscape(s2) {
  return s2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
var tokens = {};
function addParseToken(token2, callback) {
  var i2, func = callback;
  if (typeof token2 === "string") {
    token2 = [token2];
  }
  if (isNumber$2(callback)) {
    func = function(input, array3) {
      array3[callback] = toInt(input);
    };
  }
  for (i2 = 0; i2 < token2.length; i2++) {
    tokens[token2[i2]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function(input, array3, config2, token3) {
    config2._w = config2._w || {};
    callback(input, config2._w, config2, token3);
  });
}
function addTimeToArrayFromToken(token2, input, config2) {
  if (input != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input, config2._a, config2, token2);
  }
}
var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
function mod(n2, x2) {
  return (n2 % x2 + x2) % x2;
}
var indexOf$1;
if (Array.prototype.indexOf) {
  indexOf$1 = Array.prototype.indexOf;
} else {
  indexOf$1 = function(o2) {
    var i2;
    for (i2 = 0; i2 < this.length; ++i2) {
      if (this[i2] === o2) {
        return i2;
      }
    }
    return -1;
  };
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
addFormatToken("M", ["MM", 2], "Mo", function() {
  return this.month() + 1;
});
addFormatToken("MMM", 0, 0, function(format3) {
  return this.localeData().monthsShort(this, format3);
});
addFormatToken("MMMM", 0, 0, function(format3) {
  return this.localeData().months(this, format3);
});
addUnitAlias("month", "M");
addUnitPriority("month", 8);
addRegexToken("M", match1to2);
addRegexToken("MM", match1to2, match2);
addRegexToken("MMM", function(isStrict, locale2) {
  return locale2.monthsShortRegex(isStrict);
});
addRegexToken("MMMM", function(isStrict, locale2) {
  return locale2.monthsRegex(isStrict);
});
addParseToken(["M", "MM"], function(input, array3) {
  array3[MONTH] = toInt(input) - 1;
});
addParseToken(["MMM", "MMMM"], function(input, array3, config2, token2) {
  var month = config2._locale.monthsParse(input, token2, config2._strict);
  if (month != null) {
    array3[MONTH] = month;
  } else {
    getParsingFlags(config2).invalidMonth = input;
  }
});
var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
function localeMonths(m2, format3) {
  if (!m2) {
    return isArray$3(this._months) ? this._months : this._months["standalone"];
  }
  return isArray$3(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format3) ? "format" : "standalone"][m2.month()];
}
function localeMonthsShort(m2, format3) {
  if (!m2) {
    return isArray$3(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
  }
  return isArray$3(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format3) ? "format" : "standalone"][m2.month()];
}
function handleStrictParse(monthName, format3, strict) {
  var i2, ii, mom, llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i2 = 0; i2 < 12; ++i2) {
      mom = createUTC([2e3, i2]);
      this._shortMonthsParse[i2] = this.monthsShort(mom, "").toLocaleLowerCase();
      this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format3 === "MMM") {
      ii = indexOf$1.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf$1.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format3 === "MMM") {
      ii = indexOf$1.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf$1.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf$1.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf$1.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format3, strict) {
  var i2, mom, regex;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format3, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i2 = 0; i2 < 12; i2++) {
    mom = createUTC([2e3, i2]);
    if (strict && !this._longMonthsParse[i2]) {
      this._longMonthsParse[i2] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
      this._shortMonthsParse[i2] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
    }
    if (!strict && !this._monthsParse[i2]) {
      regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
      this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format3 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
      return i2;
    } else if (strict && format3 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
      return i2;
    } else if (!strict && this._monthsParse[i2].test(monthName)) {
      return i2;
    }
  }
}
function setMonth(mom, value26) {
  var dayOfMonth;
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value26 === "string") {
    if (/^\d+$/.test(value26)) {
      value26 = toInt(value26);
    } else {
      value26 = mom.localeData().monthsParse(value26);
      if (!isNumber$2(value26)) {
        return mom;
      }
    }
  }
  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value26));
  mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value26, dayOfMonth);
  return mom;
}
function getSetMonth(value26) {
  if (value26 != null) {
    setMonth(this, value26);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get$1(this, "Month");
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsShortRegex")) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsRegex")) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a2, b2) {
    return b2.length - a2.length;
  }
  var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
  for (i2 = 0; i2 < 12; i2++) {
    mom = createUTC([2e3, i2]);
    shortPieces.push(this.monthsShort(mom, ""));
    longPieces.push(this.months(mom, ""));
    mixedPieces.push(this.months(mom, ""));
    mixedPieces.push(this.monthsShort(mom, ""));
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  for (i2 = 0; i2 < 12; i2++) {
    shortPieces[i2] = regexEscape(shortPieces[i2]);
    longPieces[i2] = regexEscape(longPieces[i2]);
  }
  for (i2 = 0; i2 < 24; i2++) {
    mixedPieces[i2] = regexEscape(mixedPieces[i2]);
  }
  this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
  this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
}
addFormatToken("Y", 0, 0, function() {
  var y2 = this.year();
  return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
});
addFormatToken(0, ["YY", 2], 0, function() {
  return this.year() % 100;
});
addFormatToken(0, ["YYYY", 4], 0, "year");
addFormatToken(0, ["YYYYY", 5], 0, "year");
addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
addUnitAlias("year", "y");
addUnitPriority("year", 1);
addRegexToken("Y", matchSigned);
addRegexToken("YY", match1to2, match2);
addRegexToken("YYYY", match1to4, match4);
addRegexToken("YYYYY", match1to6, match6);
addRegexToken("YYYYYY", match1to6, match6);
addParseToken(["YYYYY", "YYYYYY"], YEAR);
addParseToken("YYYY", function(input, array3) {
  array3[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken("YY", function(input, array3) {
  array3[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken("Y", function(input, array3) {
  array3[YEAR] = parseInt(input, 10);
});
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
hooks.parseTwoDigitYear = function(input) {
  return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
};
var getSetYear = makeGetSet("FullYear", true);
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function createDate(y2, m2, d2, h2, M2, s2, ms) {
  var date3;
  if (y2 < 100 && y2 >= 0) {
    date3 = new Date(y2 + 400, m2, d2, h2, M2, s2, ms);
    if (isFinite(date3.getFullYear())) {
      date3.setFullYear(y2);
    }
  } else {
    date3 = new Date(y2, m2, d2, h2, M2, s2, ms);
  }
  return date3;
}
function createUTCDate(y2) {
  var date3, args;
  if (y2 < 100 && y2 >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y2 + 400;
    date3 = new Date(Date.UTC.apply(null, args));
    if (isFinite(date3.getUTCFullYear())) {
      date3.setUTCFullYear(y2);
    }
  } else {
    date3 = new Date(Date.UTC.apply(null, arguments));
  }
  return date3;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
addFormatToken("w", ["ww", 2], "wo", "week");
addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
addUnitAlias("week", "w");
addUnitAlias("isoWeek", "W");
addUnitPriority("week", 5);
addUnitPriority("isoWeek", 5);
addRegexToken("w", match1to2);
addRegexToken("ww", match1to2, match2);
addRegexToken("W", match1to2);
addRegexToken("WW", match1to2, match2);
addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config2, token2) {
  week[token2.substr(0, 1)] = toInt(input);
});
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
var defaultLocaleWeek = {
  dow: 0,
  doy: 6
};
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input) {
  var week = this.localeData().week(this);
  return input == null ? week : this.add((input - week) * 7, "d");
}
function getSetISOWeek(input) {
  var week = weekOfYear(this, 1, 4).week;
  return input == null ? week : this.add((input - week) * 7, "d");
}
addFormatToken("d", 0, "do", "day");
addFormatToken("dd", 0, 0, function(format3) {
  return this.localeData().weekdaysMin(this, format3);
});
addFormatToken("ddd", 0, 0, function(format3) {
  return this.localeData().weekdaysShort(this, format3);
});
addFormatToken("dddd", 0, 0, function(format3) {
  return this.localeData().weekdays(this, format3);
});
addFormatToken("e", 0, 0, "weekday");
addFormatToken("E", 0, 0, "isoWeekday");
addUnitAlias("day", "d");
addUnitAlias("weekday", "e");
addUnitAlias("isoWeekday", "E");
addUnitPriority("day", 11);
addUnitPriority("weekday", 11);
addUnitPriority("isoWeekday", 11);
addRegexToken("d", match1to2);
addRegexToken("e", match1to2);
addRegexToken("E", match1to2);
addRegexToken("dd", function(isStrict, locale2) {
  return locale2.weekdaysMinRegex(isStrict);
});
addRegexToken("ddd", function(isStrict, locale2) {
  return locale2.weekdaysShortRegex(isStrict);
});
addRegexToken("dddd", function(isStrict, locale2) {
  return locale2.weekdaysRegex(isStrict);
});
addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config2, token2) {
  var weekday = config2._locale.weekdaysParse(input, token2, config2._strict);
  if (weekday != null) {
    week.d = weekday;
  } else {
    getParsingFlags(config2).invalidWeekday = input;
  }
});
addWeekParseToken(["d", "e", "E"], function(input, week, config2, token2) {
  week[token2] = toInt(input);
});
function parseWeekday(input, locale2) {
  if (typeof input !== "string") {
    return input;
  }
  if (!isNaN(input)) {
    return parseInt(input, 10);
  }
  input = locale2.weekdaysParse(input);
  if (typeof input === "number") {
    return input;
  }
  return null;
}
function parseIsoWeekday(input, locale2) {
  if (typeof input === "string") {
    return locale2.weekdaysParse(input) % 7 || 7;
  }
  return isNaN(input) ? null : input;
}
function shiftWeekdays(ws, n2) {
  return ws.slice(n2, 7).concat(ws.slice(0, n2));
}
var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
function localeWeekdays(m2, format3) {
  var weekdays = isArray$3(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format3) ? "format" : "standalone"];
  return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
}
function localeWeekdaysShort(m2) {
  return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m2) {
  return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format3, strict) {
  var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i2 = 0; i2 < 7; ++i2) {
      mom = createUTC([2e3, 1]).day(i2);
      this._minWeekdaysParse[i2] = this.weekdaysMin(mom, "").toLocaleLowerCase();
      this._shortWeekdaysParse[i2] = this.weekdaysShort(mom, "").toLocaleLowerCase();
      this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format3 === "dddd") {
      ii = indexOf$1.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format3 === "ddd") {
      ii = indexOf$1.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf$1.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format3 === "dddd") {
      ii = indexOf$1.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf$1.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf$1.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format3 === "ddd") {
      ii = indexOf$1.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf$1.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf$1.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf$1.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf$1.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf$1.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format3, strict) {
  var i2, mom, regex;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format3, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i2 = 0; i2 < 7; i2++) {
    mom = createUTC([2e3, 1]).day(i2);
    if (strict && !this._fullWeekdaysParse[i2]) {
      this._fullWeekdaysParse[i2] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
      this._shortWeekdaysParse[i2] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
      this._minWeekdaysParse[i2] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
    }
    if (!this._weekdaysParse[i2]) {
      regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
      this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format3 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
      return i2;
    } else if (strict && format3 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
      return i2;
    } else if (strict && format3 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
      return i2;
    } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
      return i2;
    }
  }
}
function getSetDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  if (input != null) {
    input = parseWeekday(input, this.localeData());
    return this.add(input - day, "d");
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input == null ? weekday : this.add(input - weekday, "d");
}
function getSetISODayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    var weekday = parseIsoWeekday(input, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a2, b2) {
    return b2.length - a2.length;
  }
  var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
  for (i2 = 0; i2 < 7; i2++) {
    mom = createUTC([2e3, 1]).day(i2);
    minp = regexEscape(this.weekdaysMin(mom, ""));
    shortp = regexEscape(this.weekdaysShort(mom, ""));
    longp = regexEscape(this.weekdays(mom, ""));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
  this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
  this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
addFormatToken("H", ["HH", 2], 0, "hour");
addFormatToken("h", ["hh", 2], 0, hFormat);
addFormatToken("k", ["kk", 2], 0, kFormat);
addFormatToken("hmm", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});
addFormatToken("hmmss", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
addFormatToken("Hmm", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2);
});
addFormatToken("Hmmss", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function() {
    return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
  });
}
meridiem("a", true);
meridiem("A", false);
addUnitAlias("hour", "h");
addUnitPriority("hour", 13);
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
addRegexToken("a", matchMeridiem);
addRegexToken("A", matchMeridiem);
addRegexToken("H", match1to2);
addRegexToken("h", match1to2);
addRegexToken("k", match1to2);
addRegexToken("HH", match1to2, match2);
addRegexToken("hh", match1to2, match2);
addRegexToken("kk", match1to2, match2);
addRegexToken("hmm", match3to4);
addRegexToken("hmmss", match5to6);
addRegexToken("Hmm", match3to4);
addRegexToken("Hmmss", match5to6);
addParseToken(["H", "HH"], HOUR);
addParseToken(["k", "kk"], function(input, array3, config2) {
  var kInput = toInt(input);
  array3[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(["a", "A"], function(input, array3, config2) {
  config2._isPm = config2._locale.isPM(input);
  config2._meridiem = input;
});
addParseToken(["h", "hh"], function(input, array3, config2) {
  array3[HOUR] = toInt(input);
  getParsingFlags(config2).bigHour = true;
});
addParseToken("hmm", function(input, array3, config2) {
  var pos = input.length - 2;
  array3[HOUR] = toInt(input.substr(0, pos));
  array3[MINUTE] = toInt(input.substr(pos));
  getParsingFlags(config2).bigHour = true;
});
addParseToken("hmmss", function(input, array3, config2) {
  var pos1 = input.length - 4, pos2 = input.length - 2;
  array3[HOUR] = toInt(input.substr(0, pos1));
  array3[MINUTE] = toInt(input.substr(pos1, 2));
  array3[SECOND] = toInt(input.substr(pos2));
  getParsingFlags(config2).bigHour = true;
});
addParseToken("Hmm", function(input, array3, config2) {
  var pos = input.length - 2;
  array3[HOUR] = toInt(input.substr(0, pos));
  array3[MINUTE] = toInt(input.substr(pos));
});
addParseToken("Hmmss", function(input, array3, config2) {
  var pos1 = input.length - 4, pos2 = input.length - 2;
  array3[HOUR] = toInt(input.substr(0, pos1));
  array3[MINUTE] = toInt(input.substr(pos1, 2));
  array3[SECOND] = toInt(input.substr(pos2));
});
function localeIsPM(input) {
  return (input + "").toLowerCase().charAt(0) === "p";
}
var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? "pm" : "PM";
  } else {
    return isLower ? "am" : "AM";
  }
}
var baseConfig = {
  calendar: defaultCalendar,
  longDateFormat: defaultLongDateFormat,
  invalidDate: defaultInvalidDate,
  ordinal: defaultOrdinal,
  dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
  relativeTime: defaultRelativeTime,
  months: defaultLocaleMonths,
  monthsShort: defaultLocaleMonthsShort,
  week: defaultLocaleWeek,
  weekdays: defaultLocaleWeekdays,
  weekdaysMin: defaultLocaleWeekdaysMin,
  weekdaysShort: defaultLocaleWeekdaysShort,
  meridiemParse: defaultLocaleMeridiemParse
};
var locales = {}, localeFamilies = {}, globalLocale;
function commonPrefix(arr1, arr2) {
  var i2, minl = Math.min(arr1.length, arr2.length);
  for (i2 = 0; i2 < minl; i2 += 1) {
    if (arr1[i2] !== arr2[i2]) {
      return i2;
    }
  }
  return minl;
}
function normalizeLocale(key2) {
  return key2 ? key2.toLowerCase().replace("_", "-") : key2;
}
function chooseLocale(names2) {
  var i2 = 0, j2, next3, locale2, split;
  while (i2 < names2.length) {
    split = normalizeLocale(names2[i2]).split("-");
    j2 = split.length;
    next3 = normalizeLocale(names2[i2 + 1]);
    next3 = next3 ? next3.split("-") : null;
    while (j2 > 0) {
      locale2 = loadLocale(split.slice(0, j2).join("-"));
      if (locale2) {
        return locale2;
      }
      if (next3 && next3.length >= j2 && commonPrefix(split, next3) >= j2 - 1) {
        break;
      }
      j2--;
    }
    i2++;
  }
  return globalLocale;
}
function loadLocale(name2) {
  var oldLocale = null, aliasedRequire;
  if (locales[name2] === void 0 && typeof module !== "undefined" && module && module.exports) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = require;
      aliasedRequire("./locale/" + name2);
      getSetGlobalLocale(oldLocale);
    } catch (e2) {
      locales[name2] = null;
    }
  }
  return locales[name2];
}
function getSetGlobalLocale(key2, values) {
  var data80;
  if (key2) {
    if (isUndefined$1(values)) {
      data80 = getLocale(key2);
    } else {
      data80 = defineLocale(key2, values);
    }
    if (data80) {
      globalLocale = data80;
    } else {
      if (typeof console !== "undefined" && console.warn) {
        console.warn("Locale " + key2 + " not found. Did you forget to load it?");
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name2, config2) {
  if (config2 !== null) {
    var locale2, parentConfig = baseConfig;
    config2.abbr = name2;
    if (locales[name2] != null) {
      deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
      parentConfig = locales[name2]._config;
    } else if (config2.parentLocale != null) {
      if (locales[config2.parentLocale] != null) {
        parentConfig = locales[config2.parentLocale]._config;
      } else {
        locale2 = loadLocale(config2.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config2.parentLocale]) {
            localeFamilies[config2.parentLocale] = [];
          }
          localeFamilies[config2.parentLocale].push({
            name: name2,
            config: config2
          });
          return null;
        }
      }
    }
    locales[name2] = new Locale(mergeConfigs(parentConfig, config2));
    if (localeFamilies[name2]) {
      localeFamilies[name2].forEach(function(x2) {
        defineLocale(x2.name, x2.config);
      });
    }
    getSetGlobalLocale(name2);
    return locales[name2];
  } else {
    delete locales[name2];
    return null;
  }
}
function updateLocale(name2, config2) {
  if (config2 != null) {
    var locale2, tmpLocale, parentConfig = baseConfig;
    if (locales[name2] != null && locales[name2].parentLocale != null) {
      locales[name2].set(mergeConfigs(locales[name2]._config, config2));
    } else {
      tmpLocale = loadLocale(name2);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config2 = mergeConfigs(parentConfig, config2);
      if (tmpLocale == null) {
        config2.abbr = name2;
      }
      locale2 = new Locale(config2);
      locale2.parentLocale = locales[name2];
      locales[name2] = locale2;
    }
    getSetGlobalLocale(name2);
  } else {
    if (locales[name2] != null) {
      if (locales[name2].parentLocale != null) {
        locales[name2] = locales[name2].parentLocale;
        if (name2 === getSetGlobalLocale()) {
          getSetGlobalLocale(name2);
        }
      } else if (locales[name2] != null) {
        delete locales[name2];
      }
    }
  }
  return locales[name2];
}
function getLocale(key2) {
  var locale2;
  if (key2 && key2._locale && key2._locale._abbr) {
    key2 = key2._locale._abbr;
  }
  if (!key2) {
    return globalLocale;
  }
  if (!isArray$3(key2)) {
    locale2 = loadLocale(key2);
    if (locale2) {
      return locale2;
    }
    key2 = [key2];
  }
  return chooseLocale(key2);
}
function listLocales() {
  return keys$1(locales);
}
function checkOverflow(m2) {
  var overflow3, a2 = m2._a;
  if (a2 && getParsingFlags(m2).overflow === -2) {
    overflow3 = a2[MONTH] < 0 || a2[MONTH] > 11 ? MONTH : a2[DATE] < 1 || a2[DATE] > daysInMonth(a2[YEAR], a2[MONTH]) ? DATE : a2[HOUR] < 0 || a2[HOUR] > 24 || a2[HOUR] === 24 && (a2[MINUTE] !== 0 || a2[SECOND] !== 0 || a2[MILLISECOND] !== 0) ? HOUR : a2[MINUTE] < 0 || a2[MINUTE] > 59 ? MINUTE : a2[SECOND] < 0 || a2[SECOND] > 59 ? SECOND : a2[MILLISECOND] < 0 || a2[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m2)._overflowDayOfYear && (overflow3 < YEAR || overflow3 > DATE)) {
      overflow3 = DATE;
    }
    if (getParsingFlags(m2)._overflowWeeks && overflow3 === -1) {
      overflow3 = WEEK;
    }
    if (getParsingFlags(m2)._overflowWeekday && overflow3 === -1) {
      overflow3 = WEEKDAY;
    }
    getParsingFlags(m2).overflow = overflow3;
  }
  return m2;
}
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
  ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
  ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
  ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
  ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
  ["YYYY-DDD", /\d{4}-\d{3}/],
  ["YYYY-MM", /\d{4}-\d\d/, false],
  ["YYYYYYMMDD", /[+-]\d{10}/],
  ["YYYYMMDD", /\d{8}/],
  ["GGGG[W]WWE", /\d{4}W\d{3}/],
  ["GGGG[W]WW", /\d{4}W\d{2}/, false],
  ["YYYYDDD", /\d{7}/],
  ["YYYYMM", /\d{6}/, false],
  ["YYYY", /\d{4}/, false]
], isoTimes = [
  ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
  ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
  ["HH:mm:ss", /\d\d:\d\d:\d\d/],
  ["HH:mm", /\d\d:\d\d/],
  ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
  ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
  ["HHmmss", /\d\d\d\d\d\d/],
  ["HHmm", /\d\d\d\d/],
  ["HH", /\d\d/]
], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
  UT: 0,
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function configFromISO(config2) {
  var i2, l2, string2 = config2._i, match5 = extendedIsoRegex.exec(string2) || basicIsoRegex.exec(string2), allowTime, dateFormat, timeFormat, tzFormat;
  if (match5) {
    getParsingFlags(config2).iso = true;
    for (i2 = 0, l2 = isoDates.length; i2 < l2; i2++) {
      if (isoDates[i2][1].exec(match5[1])) {
        dateFormat = isoDates[i2][0];
        allowTime = isoDates[i2][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config2._isValid = false;
      return;
    }
    if (match5[3]) {
      for (i2 = 0, l2 = isoTimes.length; i2 < l2; i2++) {
        if (isoTimes[i2][1].exec(match5[3])) {
          timeFormat = (match5[2] || " ") + isoTimes[i2][0];
          break;
        }
      }
      if (timeFormat == null) {
        config2._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config2._isValid = false;
      return;
    }
    if (match5[4]) {
      if (tzRegex.exec(match5[4])) {
        tzFormat = "Z";
      } else {
        config2._isValid = false;
        return;
      }
    }
    config2._f = dateFormat + (timeFormat || "") + (tzFormat || "");
    configFromStringAndFormat(config2);
  } else {
    config2._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [
    untruncateYear(yearStr),
    defaultLocaleMonthsShort.indexOf(monthStr),
    parseInt(dayStr, 10),
    parseInt(hourStr, 10),
    parseInt(minuteStr, 10)
  ];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s2) {
  return s2.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function checkWeekday(weekdayStr, parsedInput, config2) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config2).weekdayMismatch = true;
      config2._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10), m2 = hm % 100, h2 = (hm - m2) / 100;
    return h2 * 60 + m2;
  }
}
function configFromRFC2822(config2) {
  var match5 = rfc2822.exec(preprocessRFC2822(config2._i)), parsedArray;
  if (match5) {
    parsedArray = extractFromRFC2822Strings(match5[4], match5[3], match5[2], match5[5], match5[6], match5[7]);
    if (!checkWeekday(match5[1], parsedArray, config2)) {
      return;
    }
    config2._a = parsedArray;
    config2._tzm = calculateOffset(match5[8], match5[9], match5[10]);
    config2._d = createUTCDate.apply(null, config2._a);
    config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
    getParsingFlags(config2).rfc2822 = true;
  } else {
    config2._isValid = false;
  }
}
function configFromString(config2) {
  var matched = aspNetJsonRegex.exec(config2._i);
  if (matched !== null) {
    config2._d = new Date(+matched[1]);
    return;
  }
  configFromISO(config2);
  if (config2._isValid === false) {
    delete config2._isValid;
  } else {
    return;
  }
  configFromRFC2822(config2);
  if (config2._isValid === false) {
    delete config2._isValid;
  } else {
    return;
  }
  if (config2._strict) {
    config2._isValid = false;
  } else {
    hooks.createFromInputFallback(config2);
  }
}
hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config2) {
  config2._d = new Date(config2._i + (config2._useUTC ? " UTC" : ""));
});
function defaults$5(a2, b2, c2) {
  if (a2 != null) {
    return a2;
  }
  if (b2 != null) {
    return b2;
  }
  return c2;
}
function currentDateArray(config2) {
  var nowValue = new Date(hooks.now());
  if (config2._useUTC) {
    return [
      nowValue.getUTCFullYear(),
      nowValue.getUTCMonth(),
      nowValue.getUTCDate()
    ];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config2) {
  var i2, date3, input = [], currentDate, expectedWeekday, yearToUse;
  if (config2._d) {
    return;
  }
  currentDate = currentDateArray(config2);
  if (config2._w && config2._a[DATE] == null && config2._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config2);
  }
  if (config2._dayOfYear != null) {
    yearToUse = defaults$5(config2._a[YEAR], currentDate[YEAR]);
    if (config2._dayOfYear > daysInYear(yearToUse) || config2._dayOfYear === 0) {
      getParsingFlags(config2)._overflowDayOfYear = true;
    }
    date3 = createUTCDate(yearToUse, 0, config2._dayOfYear);
    config2._a[MONTH] = date3.getUTCMonth();
    config2._a[DATE] = date3.getUTCDate();
  }
  for (i2 = 0; i2 < 3 && config2._a[i2] == null; ++i2) {
    config2._a[i2] = input[i2] = currentDate[i2];
  }
  for (; i2 < 7; i2++) {
    config2._a[i2] = input[i2] = config2._a[i2] == null ? i2 === 2 ? 1 : 0 : config2._a[i2];
  }
  if (config2._a[HOUR] === 24 && config2._a[MINUTE] === 0 && config2._a[SECOND] === 0 && config2._a[MILLISECOND] === 0) {
    config2._nextDay = true;
    config2._a[HOUR] = 0;
  }
  config2._d = (config2._useUTC ? createUTCDate : createDate).apply(null, input);
  expectedWeekday = config2._useUTC ? config2._d.getUTCDay() : config2._d.getDay();
  if (config2._tzm != null) {
    config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
  }
  if (config2._nextDay) {
    config2._a[HOUR] = 24;
  }
  if (config2._w && typeof config2._w.d !== "undefined" && config2._w.d !== expectedWeekday) {
    getParsingFlags(config2).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config2) {
  var w2, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w2 = config2._w;
  if (w2.GG != null || w2.W != null || w2.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults$5(w2.GG, config2._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
    week = defaults$5(w2.W, 1);
    weekday = defaults$5(w2.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config2._locale._week.dow;
    doy = config2._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults$5(w2.gg, config2._a[YEAR], curWeek.year);
    week = defaults$5(w2.w, curWeek.week);
    if (w2.d != null) {
      weekday = w2.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w2.e != null) {
      weekday = w2.e + dow;
      if (w2.e < 0 || w2.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config2)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config2)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config2._a[YEAR] = temp.year;
    config2._dayOfYear = temp.dayOfYear;
  }
}
hooks.ISO_8601 = function() {
};
hooks.RFC_2822 = function() {
};
function configFromStringAndFormat(config2) {
  if (config2._f === hooks.ISO_8601) {
    configFromISO(config2);
    return;
  }
  if (config2._f === hooks.RFC_2822) {
    configFromRFC2822(config2);
    return;
  }
  config2._a = [];
  getParsingFlags(config2).empty = true;
  var string2 = "" + config2._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string2.length, totalParsedInputLength = 0, era;
  tokens2 = expandFormat(config2._f, config2._locale).match(formattingTokens) || [];
  for (i2 = 0; i2 < tokens2.length; i2++) {
    token2 = tokens2[i2];
    parsedInput = (string2.match(getParseRegexForToken(token2, config2)) || [])[0];
    if (parsedInput) {
      skipped = string2.substr(0, string2.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config2).unusedInput.push(skipped);
      }
      string2 = string2.slice(string2.indexOf(parsedInput) + parsedInput.length);
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config2).empty = false;
      } else {
        getParsingFlags(config2).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config2);
    } else if (config2._strict && !parsedInput) {
      getParsingFlags(config2).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config2).charsLeftOver = stringLength - totalParsedInputLength;
  if (string2.length > 0) {
    getParsingFlags(config2).unusedInput.push(string2);
  }
  if (config2._a[HOUR] <= 12 && getParsingFlags(config2).bigHour === true && config2._a[HOUR] > 0) {
    getParsingFlags(config2).bigHour = void 0;
  }
  getParsingFlags(config2).parsedDateParts = config2._a.slice(0);
  getParsingFlags(config2).meridiem = config2._meridiem;
  config2._a[HOUR] = meridiemFixWrap(config2._locale, config2._a[HOUR], config2._meridiem);
  era = getParsingFlags(config2).era;
  if (era !== null) {
    config2._a[YEAR] = config2._locale.erasConvertYear(era, config2._a[YEAR]);
  }
  configFromArray(config2);
  checkOverflow(config2);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config2) {
  var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false;
  if (config2._f.length === 0) {
    getParsingFlags(config2).invalidFormat = true;
    config2._d = new Date(NaN);
    return;
  }
  for (i2 = 0; i2 < config2._f.length; i2++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config2);
    if (config2._useUTC != null) {
      tempConfig._useUTC = config2._useUTC;
    }
    tempConfig._f = config2._f[i2];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend$1(config2, bestMoment || tempConfig);
}
function configFromObject(config2) {
  if (config2._d) {
    return;
  }
  var i2 = normalizeObjectUnits(config2._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
  config2._a = map([i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond], function(obj) {
    return obj && parseInt(obj, 10);
  });
  configFromArray(config2);
}
function createFromConfig(config2) {
  var res = new Moment(checkOverflow(prepareConfig(config2)));
  if (res._nextDay) {
    res.add(1, "d");
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config2) {
  var input = config2._i, format3 = config2._f;
  config2._locale = config2._locale || getLocale(config2._l);
  if (input === null || format3 === void 0 && input === "") {
    return createInvalid({ nullInput: true });
  }
  if (typeof input === "string") {
    config2._i = input = config2._locale.preparse(input);
  }
  if (isMoment$1(input)) {
    return new Moment(checkOverflow(input));
  } else if (isDate$1(input)) {
    config2._d = input;
  } else if (isArray$3(format3)) {
    configFromStringAndArray(config2);
  } else if (format3) {
    configFromStringAndFormat(config2);
  } else {
    configFromInput(config2);
  }
  if (!isValid(config2)) {
    config2._d = null;
  }
  return config2;
}
function configFromInput(config2) {
  var input = config2._i;
  if (isUndefined$1(input)) {
    config2._d = new Date(hooks.now());
  } else if (isDate$1(input)) {
    config2._d = new Date(input.valueOf());
  } else if (typeof input === "string") {
    configFromString(config2);
  } else if (isArray$3(input)) {
    config2._a = map(input.slice(0), function(obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config2);
  } else if (isObject$3(input)) {
    configFromObject(config2);
  } else if (isNumber$2(input)) {
    config2._d = new Date(input);
  } else {
    hooks.createFromInputFallback(config2);
  }
}
function createLocalOrUTC(input, format3, locale2, strict, isUTC) {
  var c2 = {};
  if (format3 === true || format3 === false) {
    strict = format3;
    format3 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject$3(input) && isObjectEmpty(input) || isArray$3(input) && input.length === 0) {
    input = void 0;
  }
  c2._isAMomentObject = true;
  c2._useUTC = c2._isUTC = isUTC;
  c2._l = locale2;
  c2._i = input;
  c2._f = format3;
  c2._strict = strict;
  return createFromConfig(c2);
}
function createLocal(input, format3, locale2, strict) {
  return createLocalOrUTC(input, format3, locale2, strict, false);
}
var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
  var other = createLocal.apply(null, arguments);
  if (this.isValid() && other.isValid()) {
    return other < this ? this : other;
  } else {
    return createInvalid();
  }
}), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
  var other = createLocal.apply(null, arguments);
  if (this.isValid() && other.isValid()) {
    return other > this ? this : other;
  } else {
    return createInvalid();
  }
});
function pickBy(fn, moments) {
  var res, i2;
  if (moments.length === 1 && isArray$3(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i2 = 1; i2 < moments.length; ++i2) {
    if (!moments[i2].isValid() || moments[i2][fn](res)) {
      res = moments[i2];
    }
  }
  return res;
}
function min() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isBefore", args);
}
function max() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isAfter", args);
}
var now$4 = function() {
  return Date.now ? Date.now() : +new Date();
};
var ordering = [
  "year",
  "quarter",
  "month",
  "week",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function isDurationValid(m2) {
  var key2, unitHasDecimal = false, i2;
  for (key2 in m2) {
    if (hasOwnProp(m2, key2) && !(indexOf$1.call(ordering, key2) !== -1 && (m2[key2] == null || !isNaN(m2[key2])))) {
      return false;
    }
  }
  for (i2 = 0; i2 < ordering.length; ++i2) {
    if (m2[ordering[i2]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m2[ordering[i2]]) !== toInt(m2[ordering[i2]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration2) {
  var normalizedInput = normalizeObjectUnits(duration2), years3 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months3 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months3 + quarters * 3 + years3 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number3) {
  if (number3 < 0) {
    return Math.round(-1 * number3) * -1;
  } else {
    return Math.round(number3);
  }
}
function compareArrays(array1, array22, dontConvert) {
  var len = Math.min(array1.length, array22.length), lengthDiff = Math.abs(array1.length - array22.length), diffs = 0, i2;
  for (i2 = 0; i2 < len; i2++) {
    if (dontConvert && array1[i2] !== array22[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array22[i2])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset$1(token2, separator) {
  addFormatToken(token2, 0, 0, function() {
    var offset4 = this.utcOffset(), sign2 = "+";
    if (offset4 < 0) {
      offset4 = -offset4;
      sign2 = "-";
    }
    return sign2 + zeroFill(~~(offset4 / 60), 2) + separator + zeroFill(~~offset4 % 60, 2);
  });
}
offset$1("Z", ":");
offset$1("ZZ", "");
addRegexToken("Z", matchShortOffset);
addRegexToken("ZZ", matchShortOffset);
addParseToken(["Z", "ZZ"], function(input, array3, config2) {
  config2._useUTC = true;
  config2._tzm = offsetFromString(matchShortOffset, input);
});
var chunkOffset = /([\+\-]|\d\d)/gi;
function offsetFromString(matcher, string2) {
  var matches = (string2 || "").match(matcher), chunk, parts, minutes2;
  if (matches === null) {
    return null;
  }
  chunk = matches[matches.length - 1] || [];
  parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
}
function cloneWithOffset(input, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment$1(input) || isDate$1(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input).local();
  }
}
function getDateOffset(m2) {
  return -Math.round(m2._d.getTimezoneOffset());
}
hooks.updateOffset = function() {
};
function getSetOffset(input, keepLocalTime, keepMinutes) {
  var offset4 = this._offset || 0, localAdjust;
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    if (typeof input === "string") {
      input = offsetFromString(matchShortOffset, input);
      if (input === null) {
        return this;
      }
    } else if (Math.abs(input) < 16 && !keepMinutes) {
      input = input * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, "m");
    }
    if (offset4 !== input) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(this, createDuration(input - offset4, "m"), 1, false);
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset4 : getDateOffset(this);
  }
}
function getSetZone(input, keepLocalTime) {
  if (input != null) {
    if (typeof input !== "string") {
      input = -input;
    }
    this.utcOffset(input, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), "m");
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === "string") {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input) {
  if (!this.isValid()) {
    return false;
  }
  input = input ? createLocal(input).utcOffset() : 0;
  return (this.utcOffset() - input) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined$1(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c2 = {}, other;
  copyConfig(c2, this);
  c2 = prepareConfig(c2);
  if (c2._a) {
    other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
    this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function createDuration(input, key2) {
  var duration2 = input, match5 = null, sign2, ret, diffRes;
  if (isDuration(input)) {
    duration2 = {
      ms: input._milliseconds,
      d: input._days,
      M: input._months
    };
  } else if (isNumber$2(input) || !isNaN(+input)) {
    duration2 = {};
    if (key2) {
      duration2[key2] = +input;
    } else {
      duration2.milliseconds = +input;
    }
  } else if (match5 = aspNetRegex.exec(input)) {
    sign2 = match5[1] === "-" ? -1 : 1;
    duration2 = {
      y: 0,
      d: toInt(match5[DATE]) * sign2,
      h: toInt(match5[HOUR]) * sign2,
      m: toInt(match5[MINUTE]) * sign2,
      s: toInt(match5[SECOND]) * sign2,
      ms: toInt(absRound(match5[MILLISECOND] * 1e3)) * sign2
    };
  } else if (match5 = isoRegex.exec(input)) {
    sign2 = match5[1] === "-" ? -1 : 1;
    duration2 = {
      y: parseIso(match5[2], sign2),
      M: parseIso(match5[3], sign2),
      w: parseIso(match5[4], sign2),
      d: parseIso(match5[5], sign2),
      h: parseIso(match5[6], sign2),
      m: parseIso(match5[7], sign2),
      s: parseIso(match5[8], sign2)
    };
  } else if (duration2 == null) {
    duration2 = {};
  } else if (typeof duration2 === "object" && ("from" in duration2 || "to" in duration2)) {
    diffRes = momentsDifference(createLocal(duration2.from), createLocal(duration2.to));
    duration2 = {};
    duration2.ms = diffRes.milliseconds;
    duration2.M = diffRes.months;
  }
  ret = new Duration(duration2);
  if (isDuration(input) && hasOwnProp(input, "_locale")) {
    ret._locale = input._locale;
  }
  if (isDuration(input) && hasOwnProp(input, "_isValid")) {
    ret._isValid = input._isValid;
  }
  return ret;
}
createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(",", "."));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base, other) {
  var res = {};
  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
  if (base.clone().add(res.months, "M").isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base.clone().add(res.months, "M");
  return res;
}
function momentsDifference(base, other) {
  var res;
  if (!(base.isValid() && other.isValid())) {
    return { milliseconds: 0, months: 0 };
  }
  other = cloneWithOffset(other, base);
  if (base.isBefore(other)) {
    res = positiveMomentsDifference(base, other);
  } else {
    res = positiveMomentsDifference(other, base);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name2) {
  return function(val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(name2, "moment()." + name2 + "(period, number) is deprecated. Please use moment()." + name2 + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration2, isAdding, updateOffset) {
  var milliseconds2 = duration2._milliseconds, days2 = absRound(duration2._days), months3 = absRound(duration2._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months3) {
    setMonth(mom, get$1(mom, "Month") + months3 * isAdding);
  }
  if (days2) {
    set$1(mom, "Date", get$1(mom, "Date") + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months3);
  }
}
var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
function isString$2(input) {
  return typeof input === "string" || input instanceof String;
}
function isMomentInput(input) {
  return isMoment$1(input) || isDate$1(input) || isString$2(input) || isNumber$2(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
}
function isMomentInputObject(input) {
  var objectTest = isObject$3(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i2, property2;
  for (i2 = 0; i2 < properties.length; i2 += 1) {
    property2 = properties[i2];
    propertyTest = propertyTest || hasOwnProp(input, property2);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input) {
  var arrayTest = isArray$3(input), dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input.filter(function(item) {
      return !isNumber$2(item) && isString$2(input);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input) {
  var objectTest = isObject$3(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i2, property2;
  for (i2 = 0; i2 < properties.length; i2 += 1) {
    property2 = properties[i2];
    propertyTest = propertyTest || hasOwnProp(input, property2);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, "days", true);
  return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
}
function calendar$1(time, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time = void 0;
    }
  }
  var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format3 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction$2(formats[format3]) ? formats[format3].call(this, now2) : formats[format3]);
  return this.format(output || this.localeData().calendar(format3, this, createLocal(now2)));
}
function clone() {
  return new Moment(this);
}
function isAfter(input, units) {
  var localInput = isMoment$1(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input, units) {
  var localInput = isMoment$1(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment$1(from2) ? from2 : createLocal(from2), localTo = isMoment$1(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || "()";
  return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input, units) {
  var localInput = isMoment$1(input) ? input : createLocal(input), inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input, units) {
  return this.isSame(input, units) || this.isAfter(input, units);
}
function isSameOrBefore(input, units) {
  return this.isSame(input, units) || this.isBefore(input, units);
}
function diff(input, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case "year":
      output = monthDiff(this, that) / 12;
      break;
    case "month":
      output = monthDiff(this, that);
      break;
    case "quarter":
      output = monthDiff(this, that) / 3;
      break;
    case "second":
      output = (this - that) / 1e3;
      break;
    case "minute":
      output = (this - that) / 6e4;
      break;
    case "hour":
      output = (this - that) / 36e5;
      break;
    case "day":
      output = (this - that - zoneDelta) / 864e5;
      break;
    case "week":
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a2, b2) {
  if (a2.date() < b2.date()) {
    return -monthDiff(b2, a2);
  }
  var wholeMonthDiff = (b2.year() - a2.year()) * 12 + (b2.month() - a2.month()), anchor = a2.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
  if (b2 - anchor < 0) {
    anchor2 = a2.clone().add(wholeMonthDiff - 1, "months");
    adjust = (b2 - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a2.clone().add(wholeMonthDiff + 1, "months");
    adjust = (b2 - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
function toString$3() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
  if (m2.year() < 0 || m2.year() > 9999) {
    return formatMoment(m2, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
  }
  if (isFunction$2(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
    }
  }
  return formatMoment(m2, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
}
function inspect() {
  if (!this.isValid()) {
    return "moment.invalid(/* " + this._i + " */)";
  }
  var func = "moment", zone = "", prefix, year, datetime, suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
    zone = "Z";
  }
  prefix = "[" + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
  datetime = "-MM-DD[T]HH:mm:ss.SSS";
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime + suffix);
}
function format$2(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time, withoutSuffix) {
  if (this.isValid() && (isMoment$1(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time, withoutSuffix) {
  if (this.isValid() && (isMoment$1(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key2) {
  var newLocaleData;
  if (key2 === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key2);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key2) {
  if (key2 === void 0) {
    return this.localeData();
  } else {
    return this.locale(key2);
  }
});
function localeData() {
  return this._locale;
}
var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y2, m2, d2) {
  if (y2 < 100 && y2 >= 0) {
    return new Date(y2 + 400, m2, d2) - MS_PER_400_YEARS;
  } else {
    return new Date(y2, m2, d2).valueOf();
  }
}
function utcStartOfDate(y2, m2, d2) {
  if (y2 < 100 && y2 >= 0) {
    return Date.UTC(y2 + 400, m2, d2) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y2, m2, d2);
  }
}
function startOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year(), 0, 1);
      break;
    case "quarter":
      time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
      break;
    case "month":
      time = startOfDate(this.year(), this.month(), 1);
      break;
    case "week":
      time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
      break;
    case "isoWeek":
      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date());
      break;
    case "hour":
      time = this._d.valueOf();
      time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
      break;
    case "minute":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_MINUTE);
      break;
    case "second":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
      break;
    case "month":
      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
      break;
    case "isoWeek":
      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      time = this._d.valueOf();
      time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
      break;
    case "minute":
      time = this._d.valueOf();
      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
      break;
    case "second":
      time = this._d.valueOf();
      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray$6() {
  var m2 = this;
  return [
    m2.year(),
    m2.month(),
    m2.date(),
    m2.hour(),
    m2.minute(),
    m2.second(),
    m2.millisecond()
  ];
}
function toObject() {
  var m2 = this;
  return {
    years: m2.year(),
    months: m2.month(),
    date: m2.date(),
    hours: m2.hours(),
    minutes: m2.minutes(),
    seconds: m2.seconds(),
    milliseconds: m2.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend$1({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
addFormatToken("N", 0, 0, "eraAbbr");
addFormatToken("NN", 0, 0, "eraAbbr");
addFormatToken("NNN", 0, 0, "eraAbbr");
addFormatToken("NNNN", 0, 0, "eraName");
addFormatToken("NNNNN", 0, 0, "eraNarrow");
addFormatToken("y", ["y", 1], "yo", "eraYear");
addFormatToken("y", ["yy", 2], 0, "eraYear");
addFormatToken("y", ["yyy", 3], 0, "eraYear");
addFormatToken("y", ["yyyy", 4], 0, "eraYear");
addRegexToken("N", matchEraAbbr);
addRegexToken("NN", matchEraAbbr);
addRegexToken("NNN", matchEraAbbr);
addRegexToken("NNNN", matchEraName);
addRegexToken("NNNNN", matchEraNarrow);
addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array3, config2, token2) {
  var era = config2._locale.erasParse(input, token2, config2._strict);
  if (era) {
    getParsingFlags(config2).era = era;
  } else {
    getParsingFlags(config2).invalidEra = input;
  }
});
addRegexToken("y", matchUnsigned);
addRegexToken("yy", matchUnsigned);
addRegexToken("yyy", matchUnsigned);
addRegexToken("yyyy", matchUnsigned);
addRegexToken("yo", matchEraYearOrdinal);
addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
addParseToken(["yo"], function(input, array3, config2, token2) {
  var match5;
  if (config2._locale._eraYearOrdinalRegex) {
    match5 = input.match(config2._locale._eraYearOrdinalRegex);
  }
  if (config2._locale.eraYearOrdinalParse) {
    array3[YEAR] = config2._locale.eraYearOrdinalParse(input, match5);
  } else {
    array3[YEAR] = parseInt(input, 10);
  }
});
function localeEras(m2, format3) {
  var i2, l2, date3, eras = this._eras || getLocale("en")._eras;
  for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
    switch (typeof eras[i2].since) {
      case "string":
        date3 = hooks(eras[i2].since).startOf("day");
        eras[i2].since = date3.valueOf();
        break;
    }
    switch (typeof eras[i2].until) {
      case "undefined":
        eras[i2].until = Infinity;
        break;
      case "string":
        date3 = hooks(eras[i2].until).startOf("day").valueOf();
        eras[i2].until = date3.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format3, strict) {
  var i2, l2, eras = this.eras(), name2, abbr, narrow;
  eraName = eraName.toUpperCase();
  for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
    name2 = eras[i2].name.toUpperCase();
    abbr = eras[i2].abbr.toUpperCase();
    narrow = eras[i2].narrow.toUpperCase();
    if (strict) {
      switch (format3) {
        case "N":
        case "NN":
        case "NNN":
          if (abbr === eraName) {
            return eras[i2];
          }
          break;
        case "NNNN":
          if (name2 === eraName) {
            return eras[i2];
          }
          break;
        case "NNNNN":
          if (narrow === eraName) {
            return eras[i2];
          }
          break;
      }
    } else if ([name2, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i2];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i2, l2, val, eras = this.localeData().eras();
  for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i2].since <= val && val <= eras[i2].until) {
      return eras[i2].name;
    }
    if (eras[i2].until <= val && val <= eras[i2].since) {
      return eras[i2].name;
    }
  }
  return "";
}
function getEraNarrow() {
  var i2, l2, val, eras = this.localeData().eras();
  for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i2].since <= val && val <= eras[i2].until) {
      return eras[i2].narrow;
    }
    if (eras[i2].until <= val && val <= eras[i2].since) {
      return eras[i2].narrow;
    }
  }
  return "";
}
function getEraAbbr() {
  var i2, l2, val, eras = this.localeData().eras();
  for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i2].since <= val && val <= eras[i2].until) {
      return eras[i2].abbr;
    }
    if (eras[i2].until <= val && val <= eras[i2].since) {
      return eras[i2].abbr;
    }
  }
  return "";
}
function getEraYear() {
  var i2, l2, dir, val, eras = this.localeData().eras();
  for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
    dir = eras[i2].since <= eras[i2].until ? 1 : -1;
    val = this.clone().startOf("day").valueOf();
    if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
      return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNameRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, "_erasAbbrRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNarrowRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l2, eras = this.eras();
  for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
    namePieces.push(regexEscape(eras[i2].name));
    abbrPieces.push(regexEscape(eras[i2].abbr));
    narrowPieces.push(regexEscape(eras[i2].narrow));
    mixedPieces.push(regexEscape(eras[i2].name));
    mixedPieces.push(regexEscape(eras[i2].abbr));
    mixedPieces.push(regexEscape(eras[i2].narrow));
  }
  this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
  this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
  this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
}
addFormatToken(0, ["gg", 2], 0, function() {
  return this.weekYear() % 100;
});
addFormatToken(0, ["GG", 2], 0, function() {
  return this.isoWeekYear() % 100;
});
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
addWeekYearFormatToken("gggg", "weekYear");
addWeekYearFormatToken("ggggg", "weekYear");
addWeekYearFormatToken("GGGG", "isoWeekYear");
addWeekYearFormatToken("GGGGG", "isoWeekYear");
addUnitAlias("weekYear", "gg");
addUnitAlias("isoWeekYear", "GG");
addUnitPriority("weekYear", 1);
addUnitPriority("isoWeekYear", 1);
addRegexToken("G", matchSigned);
addRegexToken("g", matchSigned);
addRegexToken("GG", match1to2, match2);
addRegexToken("gg", match1to2, match2);
addRegexToken("GGGG", match1to4, match4);
addRegexToken("gggg", match1to4, match4);
addRegexToken("GGGGG", match1to6, match6);
addRegexToken("ggggg", match1to6, match6);
addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config2, token2) {
  week[token2.substr(0, 2)] = toInt(input);
});
addWeekParseToken(["gg", "GG"], function(input, week, config2, token2) {
  week[token2] = hooks.parseTwoDigitYear(input);
});
function getSetWeekYear(input) {
  return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
}
function getSetISOWeekYear(input) {
  return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  var weeksTarget;
  if (input == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date3 = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date3.getUTCFullYear());
  this.month(date3.getUTCMonth());
  this.date(date3.getUTCDate());
  return this;
}
addFormatToken("Q", 0, "Qo", "quarter");
addUnitAlias("quarter", "Q");
addUnitPriority("quarter", 7);
addRegexToken("Q", match1);
addParseToken("Q", function(input, array3) {
  array3[MONTH] = (toInt(input) - 1) * 3;
});
function getSetQuarter(input) {
  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}
addFormatToken("D", ["DD", 2], "Do", "date");
addUnitAlias("date", "D");
addUnitPriority("date", 9);
addRegexToken("D", match1to2);
addRegexToken("DD", match1to2, match2);
addRegexToken("Do", function(isStrict, locale2) {
  return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
});
addParseToken(["D", "DD"], DATE);
addParseToken("Do", function(input, array3) {
  array3[DATE] = toInt(input.match(match1to2)[0]);
});
var getSetDayOfMonth = makeGetSet("Date", true);
addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
addUnitAlias("dayOfYear", "DDD");
addUnitPriority("dayOfYear", 4);
addRegexToken("DDD", match1to3);
addRegexToken("DDDD", match3);
addParseToken(["DDD", "DDDD"], function(input, array3, config2) {
  config2._dayOfYear = toInt(input);
});
function getSetDayOfYear(input) {
  var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
  return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
}
addFormatToken("m", ["mm", 2], 0, "minute");
addUnitAlias("minute", "m");
addUnitPriority("minute", 14);
addRegexToken("m", match1to2);
addRegexToken("mm", match1to2, match2);
addParseToken(["m", "mm"], MINUTE);
var getSetMinute = makeGetSet("Minutes", false);
addFormatToken("s", ["ss", 2], 0, "second");
addUnitAlias("second", "s");
addUnitPriority("second", 15);
addRegexToken("s", match1to2);
addRegexToken("ss", match1to2, match2);
addParseToken(["s", "ss"], SECOND);
var getSetSecond = makeGetSet("Seconds", false);
addFormatToken("S", 0, 0, function() {
  return ~~(this.millisecond() / 100);
});
addFormatToken(0, ["SS", 2], 0, function() {
  return ~~(this.millisecond() / 10);
});
addFormatToken(0, ["SSS", 3], 0, "millisecond");
addFormatToken(0, ["SSSS", 4], 0, function() {
  return this.millisecond() * 10;
});
addFormatToken(0, ["SSSSS", 5], 0, function() {
  return this.millisecond() * 100;
});
addFormatToken(0, ["SSSSSS", 6], 0, function() {
  return this.millisecond() * 1e3;
});
addFormatToken(0, ["SSSSSSS", 7], 0, function() {
  return this.millisecond() * 1e4;
});
addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
  return this.millisecond() * 1e5;
});
addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
  return this.millisecond() * 1e6;
});
addUnitAlias("millisecond", "ms");
addUnitPriority("millisecond", 16);
addRegexToken("S", match1to3, match1);
addRegexToken("SS", match1to3, match2);
addRegexToken("SSS", match1to3, match3);
var token$1, getSetMillisecond;
for (token$1 = "SSSS"; token$1.length <= 9; token$1 += "S") {
  addRegexToken(token$1, matchUnsigned);
}
function parseMs(input, array3) {
  array3[MILLISECOND] = toInt(("0." + input) * 1e3);
}
for (token$1 = "S"; token$1.length <= 9; token$1 += "S") {
  addParseToken(token$1, parseMs);
}
getSetMillisecond = makeGetSet("Milliseconds", false);
addFormatToken("z", 0, 0, "zoneAbbr");
addFormatToken("zz", 0, 0, "zoneName");
function getZoneAbbr() {
  return this._isUTC ? "UTC" : "";
}
function getZoneName() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
var proto = Moment.prototype;
proto.add = add;
proto.calendar = calendar$1;
proto.clone = clone;
proto.diff = diff;
proto.endOf = endOf;
proto.format = format$2;
proto.from = from;
proto.fromNow = fromNow;
proto.to = to;
proto.toNow = toNow;
proto.get = stringGet;
proto.invalidAt = invalidAt;
proto.isAfter = isAfter;
proto.isBefore = isBefore;
proto.isBetween = isBetween;
proto.isSame = isSame;
proto.isSameOrAfter = isSameOrAfter;
proto.isSameOrBefore = isSameOrBefore;
proto.isValid = isValid$2;
proto.lang = lang;
proto.locale = locale;
proto.localeData = localeData;
proto.max = prototypeMax;
proto.min = prototypeMin;
proto.parsingFlags = parsingFlags;
proto.set = stringSet;
proto.startOf = startOf;
proto.subtract = subtract;
proto.toArray = toArray$6;
proto.toObject = toObject;
proto.toDate = toDate;
proto.toISOString = toISOString;
proto.inspect = inspect;
if (typeof Symbol !== "undefined" && Symbol.for != null) {
  proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return "Moment<" + this.format() + ">";
  };
}
proto.toJSON = toJSON;
proto.toString = toString$3;
proto.unix = unix;
proto.valueOf = valueOf;
proto.creationData = creationData;
proto.eraName = getEraName;
proto.eraNarrow = getEraNarrow;
proto.eraAbbr = getEraAbbr;
proto.eraYear = getEraYear;
proto.year = getSetYear;
proto.isLeapYear = getIsLeapYear;
proto.weekYear = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;
proto.quarter = proto.quarters = getSetQuarter;
proto.month = getSetMonth;
proto.daysInMonth = getDaysInMonth;
proto.week = proto.weeks = getSetWeek;
proto.isoWeek = proto.isoWeeks = getSetISOWeek;
proto.weeksInYear = getWeeksInYear;
proto.weeksInWeekYear = getWeeksInWeekYear;
proto.isoWeeksInYear = getISOWeeksInYear;
proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
proto.date = getSetDayOfMonth;
proto.day = proto.days = getSetDayOfWeek;
proto.weekday = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear = getSetDayOfYear;
proto.hour = proto.hours = getSetHour;
proto.minute = proto.minutes = getSetMinute;
proto.second = proto.seconds = getSetSecond;
proto.millisecond = proto.milliseconds = getSetMillisecond;
proto.utcOffset = getSetOffset;
proto.utc = setOffsetToUTC;
proto.local = setOffsetToLocal;
proto.parseZone = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST = isDaylightSavingTime;
proto.isLocal = isLocal;
proto.isUtcOffset = isUtcOffset;
proto.isUtc = isUtc;
proto.isUTC = isUtc;
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;
proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
function createUnix(input) {
  return createLocal(input * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string2) {
  return string2;
}
var proto$1 = Locale.prototype;
proto$1.calendar = calendar;
proto$1.longDateFormat = longDateFormat;
proto$1.invalidDate = invalidDate;
proto$1.ordinal = ordinal;
proto$1.preparse = preParsePostFormat;
proto$1.postformat = preParsePostFormat;
proto$1.relativeTime = relativeTime;
proto$1.pastFuture = pastFuture;
proto$1.set = set;
proto$1.eras = localeEras;
proto$1.erasParse = localeErasParse;
proto$1.erasConvertYear = localeErasConvertYear;
proto$1.erasAbbrRegex = erasAbbrRegex;
proto$1.erasNameRegex = erasNameRegex;
proto$1.erasNarrowRegex = erasNarrowRegex;
proto$1.months = localeMonths;
proto$1.monthsShort = localeMonthsShort;
proto$1.monthsParse = localeMonthsParse;
proto$1.monthsRegex = monthsRegex;
proto$1.monthsShortRegex = monthsShortRegex;
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;
proto$1.weekdays = localeWeekdays;
proto$1.weekdaysMin = localeWeekdaysMin;
proto$1.weekdaysShort = localeWeekdaysShort;
proto$1.weekdaysParse = localeWeekdaysParse;
proto$1.weekdaysRegex = weekdaysRegex;
proto$1.weekdaysShortRegex = weekdaysShortRegex;
proto$1.weekdaysMinRegex = weekdaysMinRegex;
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;
function get$1$1(format3, index2, field, setter) {
  var locale2 = getLocale(), utc = createUTC().set(setter, index2);
  return locale2[field](utc, format3);
}
function listMonthsImpl(format3, index2, field) {
  if (isNumber$2(format3)) {
    index2 = format3;
    format3 = void 0;
  }
  format3 = format3 || "";
  if (index2 != null) {
    return get$1$1(format3, index2, field, "month");
  }
  var i2, out = [];
  for (i2 = 0; i2 < 12; i2++) {
    out[i2] = get$1$1(format3, i2, field, "month");
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format3, index2, field) {
  if (typeof localeSorted === "boolean") {
    if (isNumber$2(format3)) {
      index2 = format3;
      format3 = void 0;
    }
    format3 = format3 || "";
  } else {
    format3 = localeSorted;
    index2 = format3;
    localeSorted = false;
    if (isNumber$2(format3)) {
      index2 = format3;
      format3 = void 0;
    }
    format3 = format3 || "";
  }
  var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
  if (index2 != null) {
    return get$1$1(format3, (index2 + shift) % 7, field, "day");
  }
  for (i2 = 0; i2 < 7; i2++) {
    out[i2] = get$1$1(format3, (i2 + shift) % 7, field, "day");
  }
  return out;
}
function listMonths(format3, index2) {
  return listMonthsImpl(format3, index2, "months");
}
function listMonthsShort(format3, index2) {
  return listMonthsImpl(format3, index2, "monthsShort");
}
function listWeekdays(localeSorted, format3, index2) {
  return listWeekdaysImpl(localeSorted, format3, index2, "weekdays");
}
function listWeekdaysShort(localeSorted, format3, index2) {
  return listWeekdaysImpl(localeSorted, format3, index2, "weekdaysShort");
}
function listWeekdaysMin(localeSorted, format3, index2) {
  return listWeekdaysImpl(localeSorted, format3, index2, "weekdaysMin");
}
getSetGlobalLocale("en", {
  eras: [
    {
      since: "0001-01-01",
      until: Infinity,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    },
    {
      since: "0000-12-31",
      until: -Infinity,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }
  ],
  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  ordinal: function(number3) {
    var b2 = number3 % 10, output = toInt(number3 % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
    return number3 + output;
  }
});
hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
var mathAbs = Math.abs;
function abs() {
  var data80 = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data80.milliseconds = mathAbs(data80.milliseconds);
  data80.seconds = mathAbs(data80.seconds);
  data80.minutes = mathAbs(data80.minutes);
  data80.hours = mathAbs(data80.hours);
  data80.months = mathAbs(data80.months);
  data80.years = mathAbs(data80.years);
  return this;
}
function addSubtract$1(duration2, input, value26, direction) {
  var other = createDuration(input, value26);
  duration2._milliseconds += direction * other._milliseconds;
  duration2._days += direction * other._days;
  duration2._months += direction * other._months;
  return duration2._bubble();
}
function add$1(input, value26) {
  return addSubtract$1(this, input, value26, 1);
}
function subtract$1(input, value26) {
  return addSubtract$1(this, input, value26, -1);
}
function absCeil(number3) {
  if (number3 < 0) {
    return Math.floor(number3);
  } else {
    return Math.ceil(number3);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds, days2 = this._days, months3 = this._months, data80 = this._data, seconds2, minutes2, hours2, years3, monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months3 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months3 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months3) + days2) * 864e5;
    days2 = 0;
    months3 = 0;
  }
  data80.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data80.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data80.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data80.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months3 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years3 = absFloor(months3 / 12);
  months3 %= 12;
  data80.days = days2;
  data80.months = months3;
  data80.years = years3;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months3) {
  return months3 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2, months3, milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === "month" || units === "quarter" || units === "year") {
    days2 = this._days + milliseconds2 / 864e5;
    months3 = this._months + daysToMonths(days2);
    switch (units) {
      case "month":
        return months3;
      case "quarter":
        return months3 / 3;
      case "year":
        return months3 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case "week":
        return days2 / 7 + milliseconds2 / 6048e5;
      case "day":
        return days2 + milliseconds2 / 864e5;
      case "hour":
        return days2 * 24 + milliseconds2 / 36e5;
      case "minute":
        return days2 * 1440 + milliseconds2 / 6e4;
      case "second":
        return days2 * 86400 + milliseconds2 / 1e3;
      case "millisecond":
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error("Unknown unit " + units);
    }
  }
}
function valueOf$1() {
  if (!this.isValid()) {
    return NaN;
  }
  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
}
function makeAs(alias) {
  return function() {
    return this.as(alias);
  };
}
var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + "s"]() : NaN;
}
function makeGetter(name2) {
  return function() {
    return this.isValid() ? this._data[name2] : NaN;
  };
}
var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
function weeks() {
  return absFloor(this.days() / 7);
}
var round = Math.round, thresholds = {
  ss: 44,
  s: 45,
  m: 45,
  h: 22,
  d: 26,
  w: null,
  M: 11
};
function substituteTimeAgo(string2, number3, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number3 || 1, !!withoutSuffix, string2, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration2 = createDuration(posNegDuration).abs(), seconds2 = round(duration2.as("s")), minutes2 = round(duration2.as("m")), hours2 = round(duration2.as("h")), days2 = round(duration2.as("d")), months3 = round(duration2.as("M")), weeks2 = round(duration2.as("w")), years3 = round(duration2.as("y")), a2 = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
  if (thresholds2.w != null) {
    a2 = a2 || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
  }
  a2 = a2 || months3 <= 1 && ["M"] || months3 < thresholds2.M && ["MM", months3] || years3 <= 1 && ["y"] || ["yy", years3];
  a2[2] = withoutSuffix;
  a2[3] = +posNegDuration > 0;
  a2[4] = locale2;
  return substituteTimeAgo.apply(null, a2);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round;
  }
  if (typeof roundingFunction === "function") {
    round = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === "s") {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false, th = thresholds, locale2, output;
  if (typeof argWithSuffix === "object") {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === "boolean") {
    withSuffix = argWithSuffix;
  }
  if (typeof argThresholds === "object") {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
var abs$1 = Math.abs;
function sign(x2) {
  return (x2 > 0) - (x2 < 0) || +x2;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months3 = abs$1(this._months), minutes2, hours2, years3, s2, total2 = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
  if (!total2) {
    return "P0D";
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years3 = absFloor(months3 / 12);
  months3 %= 12;
  s2 = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
  totalSign = total2 < 0 ? "-" : "";
  ymSign = sign(this._months) !== sign(total2) ? "-" : "";
  daysSign = sign(this._days) !== sign(total2) ? "-" : "";
  hmsSign = sign(this._milliseconds) !== sign(total2) ? "-" : "";
  return totalSign + "P" + (years3 ? ymSign + years3 + "Y" : "") + (months3 ? ymSign + months3 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s2 + "S" : "");
}
var proto$2 = Duration.prototype;
proto$2.isValid = isValid$1;
proto$2.abs = abs;
proto$2.add = add$1;
proto$2.subtract = subtract$1;
proto$2.as = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds = asSeconds;
proto$2.asMinutes = asMinutes;
proto$2.asHours = asHours;
proto$2.asDays = asDays;
proto$2.asWeeks = asWeeks;
proto$2.asMonths = asMonths;
proto$2.asQuarters = asQuarters;
proto$2.asYears = asYears;
proto$2.valueOf = valueOf$1;
proto$2._bubble = bubble;
proto$2.clone = clone$1;
proto$2.get = get$2;
proto$2.milliseconds = milliseconds;
proto$2.seconds = seconds;
proto$2.minutes = minutes;
proto$2.hours = hours;
proto$2.days = days;
proto$2.weeks = weeks;
proto$2.months = months;
proto$2.years = years;
proto$2.humanize = humanize;
proto$2.toISOString = toISOString$1;
proto$2.toString = toISOString$1;
proto$2.toJSON = toISOString$1;
proto$2.locale = locale;
proto$2.localeData = localeData;
proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
proto$2.lang = lang;
addFormatToken("X", 0, 0, "unix");
addFormatToken("x", 0, 0, "valueOf");
addRegexToken("x", matchSigned);
addRegexToken("X", matchTimestamp);
addParseToken("X", function(input, array3, config2) {
  config2._d = new Date(parseFloat(input) * 1e3);
});
addParseToken("x", function(input, array3, config2) {
  config2._d = new Date(toInt(input));
});
//! moment.js
hooks.version = "2.29.1";
setHookCallback(createLocal);
hooks.fn = proto;
hooks.min = min;
hooks.max = max;
hooks.now = now$4;
hooks.utc = createUTC;
hooks.unix = createUnix;
hooks.months = listMonths;
hooks.isDate = isDate$1;
hooks.locale = getSetGlobalLocale;
hooks.invalid = createInvalid;
hooks.duration = createDuration;
hooks.isMoment = isMoment$1;
hooks.weekdays = listWeekdays;
hooks.parseZone = createInZone;
hooks.localeData = getLocale;
hooks.isDuration = isDuration;
hooks.monthsShort = listMonthsShort;
hooks.weekdaysMin = listWeekdaysMin;
hooks.defineLocale = defineLocale;
hooks.updateLocale = updateLocale;
hooks.locales = listLocales;
hooks.weekdaysShort = listWeekdaysShort;
hooks.normalizeUnits = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat = getCalendarFormat;
hooks.prototype = proto;
hooks.HTML5_FMT = {
  DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
  DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
  DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
  DATE: "YYYY-MM-DD",
  TIME: "HH:mm",
  TIME_SECONDS: "HH:mm:ss",
  TIME_MS: "HH:mm:ss.SSS",
  WEEK: "GGGG-[W]WW",
  MONTH: "YYYY-MM"
};
function interopDefault(m2) {
  return m2.default || m2;
}
var runtimeLocale = _extends$1({}, defaultLocale.Modal);
function changeConfirmLocale(newLocale) {
  if (newLocale) {
    runtimeLocale = _extends$1(_extends$1({}, runtimeLocale), newLocale);
  } else {
    runtimeLocale = _extends$1({}, defaultLocale.Modal);
  }
}
function getConfirmLocale() {
  return runtimeLocale;
}
var warned = {};
function warning$5(valid, message2) {
}
function note(valid, message2) {
}
function call(method3, valid, message2) {
  if (!valid && !warned[message2]) {
    method3(false, message2);
    warned[message2] = true;
  }
}
function warningOnce(valid, message2) {
  call(warning$5, valid, message2);
}
function noteOnce(valid, message2) {
  call(note, valid, message2);
}
var warning$4 = function(valid, component) {
  var message2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
  warningOnce(valid, "[antdv: ".concat(component, "] ").concat(message2));
};
var ANT_MARK = "internalMark";
function setMomentLocale(locale2) {
  if (locale2 && locale2.locale) {
    interopDefault(hooks).locale(locale2.locale);
  } else {
    interopDefault(hooks).locale("en");
  }
}
var LocaleProvider = defineComponent({
  name: "ALocaleProvider",
  props: {
    locale: {
      type: Object
    },
    ANT_MARK__: PropsTypes.string
  },
  setup: function setup3(props2, _ref) {
    var slots = _ref.slots;
    warning$4(props2.ANT_MARK__ === ANT_MARK, "LocaleProvider", "`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead");
    var state2 = reactive({
      antLocale: _extends$1(_extends$1({}, props2.locale), {
        exist: true
      }),
      ANT_MARK__: ANT_MARK
    });
    provide("localeData", state2);
    watch(function() {
      return props2.locale;
    }, function(val) {
      state2.antLocale = _extends$1(_extends$1({}, val), {
        exist: true
      });
      setMomentLocale(val);
      changeConfirmLocale(val && val.Modal);
    }, {
      immediate: true
    });
    onUnmounted(function() {
      changeConfirmLocale();
    });
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
LocaleProvider.install = function(app) {
  app.component(LocaleProvider.name, LocaleProvider);
  return app;
};
var LocaleProvider$1 = withInstall(LocaleProvider);
var configProviderProps = {
  getTargetContainer: {
    type: Function
  },
  getPopupContainer: {
    type: Function
  },
  prefixCls: String,
  getPrefixCls: {
    type: Function
  },
  renderEmpty: {
    type: Function
  },
  transformCellText: {
    type: Function
  },
  csp: {
    type: Object
  },
  autoInsertSpaceInButton: PropsTypes.looseBool,
  locale: {
    type: Object
  },
  pageHeader: {
    type: Object
  },
  componentSize: {
    type: String
  },
  direction: {
    type: String
  },
  space: {
    type: Object
  },
  virtual: PropsTypes.looseBool,
  dropdownMatchSelectWidth: PropsTypes.looseBool,
  form: {
    type: Object
  }
};
var ConfigProvider = defineComponent({
  name: "AConfigProvider",
  props: configProviderProps,
  setup: function setup4(props2, _ref) {
    var slots = _ref.slots;
    var getPrefixCls2 = function getPrefixCls3(suffixCls, customizePrefixCls) {
      var _props$prefixCls = props2.prefixCls, prefixCls2 = _props$prefixCls === void 0 ? "ant" : _props$prefixCls;
      if (customizePrefixCls)
        return customizePrefixCls;
      return suffixCls ? "".concat(prefixCls2, "-").concat(suffixCls) : prefixCls2;
    };
    var renderEmptyComponent = function renderEmptyComponent2(name2) {
      var renderEmpty$1 = props2.renderEmpty || slots.renderEmpty || renderEmpty;
      return renderEmpty$1(name2);
    };
    var getPrefixClsWrapper = function getPrefixClsWrapper2(suffixCls, customizePrefixCls) {
      var prefixCls2 = props2.prefixCls;
      if (customizePrefixCls)
        return customizePrefixCls;
      var mergedPrefixCls = prefixCls2 || getPrefixCls2("");
      return suffixCls ? "".concat(mergedPrefixCls, "-").concat(suffixCls) : mergedPrefixCls;
    };
    var configProvider = reactive(_extends$1(_extends$1({}, props2), {
      getPrefixCls: getPrefixClsWrapper,
      renderEmpty: renderEmptyComponent
    }));
    Object.keys(props2).forEach(function(key2) {
      watch(function() {
        return props2[key2];
      }, function() {
        configProvider[key2] = props2[key2];
      });
    });
    provide("configProvider", configProvider);
    var renderProvider = function renderProvider2(legacyLocale) {
      var _a;
      return createVNode(LocaleProvider$1, {
        "locale": props2.locale || legacyLocale,
        "ANT_MARK__": ANT_MARK
      }, {
        default: function _default8() {
          return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
        }
      });
    };
    return function() {
      return createVNode(LocaleReceiver, {
        "children": function children(_2, __, legacyLocale) {
          return renderProvider(legacyLocale);
        }
      }, null);
    };
  }
});
var defaultConfigProvider = reactive({
  getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
    if (customizePrefixCls)
      return customizePrefixCls;
    return suffixCls ? "ant-".concat(suffixCls) : "ant";
  },
  renderEmpty,
  direction: "ltr"
});
var index$C = withInstall(ConfigProvider);
var useConfigInject = function(name2, props2) {
  var configProvider = inject("configProvider", defaultConfigProvider);
  var prefixCls2 = computed(function() {
    return configProvider.getPrefixCls(name2, props2.prefixCls);
  });
  var direction = computed(function() {
    return configProvider.direction;
  });
  var autoInsertSpaceInButton = computed(function() {
    return configProvider.autoInsertSpaceInButton;
  });
  var renderEmpty2 = computed(function() {
    return configProvider.renderEmpty;
  });
  var space = computed(function() {
    return configProvider.space;
  });
  var pageHeader = computed(function() {
    return configProvider.pageHeader;
  });
  var form = computed(function() {
    return configProvider.form;
  });
  var size2 = computed(function() {
    return props2.size || configProvider.componentSize;
  });
  var getTargetContainer = computed(function() {
    return props2.getTargetContainer;
  });
  return {
    configProvider,
    prefixCls: prefixCls2,
    direction,
    size: size2,
    getTargetContainer,
    space,
    pageHeader,
    form,
    autoInsertSpaceInButton,
    renderEmpty: renderEmpty2
  };
};
function getDefaultTarget() {
  return typeof window !== "undefined" ? window : null;
}
var AffixStatus;
(function(AffixStatus2) {
  AffixStatus2[AffixStatus2["None"] = 0] = "None";
  AffixStatus2[AffixStatus2["Prepare"] = 1] = "Prepare";
})(AffixStatus || (AffixStatus = {}));
var affixProps = {
  offsetTop: PropsTypes.number,
  offset: PropsTypes.number,
  offsetBottom: PropsTypes.number,
  target: PropsTypes.func.def(getDefaultTarget),
  prefixCls: PropsTypes.string,
  onChange: PropsTypes.func,
  onTestUpdatePosition: PropsTypes.func
};
var Affix = defineComponent({
  name: "AAffix",
  props: affixProps,
  emits: ["change", "testUpdatePosition"],
  setup: function setup5(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, expose = _ref.expose;
    var placeholderNode = ref();
    var fixedNode = ref();
    var state2 = reactive({
      affixStyle: void 0,
      placeholderStyle: void 0,
      status: AffixStatus.None,
      lastAffix: false,
      prevTarget: null,
      timeout: null
    });
    var currentInstance2 = getCurrentInstance();
    var offsetTop = computed(function() {
      return props2.offsetBottom === void 0 && props2.offsetTop === void 0 ? 0 : props2.offsetTop;
    });
    var offsetBottom = computed(function() {
      return props2.offsetBottom;
    });
    var measure2 = function measure3() {
      var status = state2.status, lastAffix = state2.lastAffix;
      var target = props2.target;
      if (status !== AffixStatus.Prepare || !fixedNode.value || !placeholderNode.value || !target) {
        return;
      }
      var targetNode = target();
      if (!targetNode) {
        return;
      }
      var newState = {
        status: AffixStatus.None
      };
      var targetRect = getTargetRect(targetNode);
      var placeholderReact = getTargetRect(placeholderNode.value);
      var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop.value);
      var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom.value);
      if (fixedTop !== void 0) {
        newState.affixStyle = {
          position: "fixed",
          top: fixedTop,
          width: placeholderReact.width + "px",
          height: placeholderReact.height + "px"
        };
        newState.placeholderStyle = {
          width: placeholderReact.width + "px",
          height: placeholderReact.height + "px"
        };
      } else if (fixedBottom !== void 0) {
        newState.affixStyle = {
          position: "fixed",
          bottom: fixedBottom,
          width: placeholderReact.width + "px",
          height: placeholderReact.height + "px"
        };
        newState.placeholderStyle = {
          width: placeholderReact.width + "px",
          height: placeholderReact.height + "px"
        };
      }
      newState.lastAffix = !!newState.affixStyle;
      if (lastAffix !== newState.lastAffix) {
        emit("change", newState.lastAffix);
      }
      _extends$1(state2, newState);
    };
    var prepareMeasure = function prepareMeasure2() {
      _extends$1(state2, {
        status: AffixStatus.Prepare,
        affixStyle: void 0,
        placeholderStyle: void 0
      });
      currentInstance2.update();
    };
    var updatePosition = throttleByAnimationFrame(function() {
      prepareMeasure();
    });
    var lazyUpdatePosition = throttleByAnimationFrame(function() {
      var target = props2.target;
      var affixStyle = state2.affixStyle;
      if (target && affixStyle) {
        var targetNode = target();
        if (targetNode && placeholderNode.value) {
          var targetRect = getTargetRect(targetNode);
          var placeholderReact = getTargetRect(placeholderNode.value);
          var fixedTop = getFixedTop(placeholderReact, targetRect, offsetTop.value);
          var fixedBottom = getFixedBottom(placeholderReact, targetRect, offsetBottom.value);
          if (fixedTop !== void 0 && affixStyle.top === fixedTop || fixedBottom !== void 0 && affixStyle.bottom === fixedBottom) {
            return;
          }
        }
      }
      prepareMeasure();
    });
    expose({
      updatePosition,
      lazyUpdatePosition
    });
    watch(function() {
      return props2.target;
    }, function(val) {
      var newTarget = null;
      if (val) {
        newTarget = val() || null;
      }
      if (state2.prevTarget !== newTarget) {
        removeObserveTarget(currentInstance2);
        if (newTarget) {
          addObserveTarget(newTarget, currentInstance2);
          updatePosition();
        }
        state2.prevTarget = newTarget;
      }
    });
    watch(function() {
      return [props2.offsetTop, props2.offsetBottom];
    }, updatePosition);
    onMounted(function() {
      var target = props2.target;
      if (target) {
        state2.timeout = setTimeout(function() {
          addObserveTarget(target(), currentInstance2);
          updatePosition();
        });
      }
    });
    onUpdated(function() {
      measure2();
    });
    onUnmounted(function() {
      clearTimeout(state2.timeout);
      removeObserveTarget(currentInstance2);
      updatePosition.cancel();
      lazyUpdatePosition.cancel();
    });
    var _useConfigInject = useConfigInject("affix", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a;
      var affixStyle = state2.affixStyle, placeholderStyle = state2.placeholderStyle;
      var className = classNames(_defineProperty$U({}, prefixCls2.value, affixStyle));
      var restProps = omit$2(props2, ["prefixCls", "offsetTop", "offsetBottom", "target"]);
      return createVNode(ResizeObserver, {
        "onResize": updatePosition
      }, {
        default: function _default8() {
          return [createVNode("div", _objectSpread2$2(_objectSpread2$2({}, restProps), {}, {
            "style": placeholderStyle,
            "ref": placeholderNode
          }), [createVNode("div", {
            "class": className,
            "ref": fixedNode,
            "style": affixStyle
          }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])])];
        }
      });
    };
  }
});
var Affix$1 = withInstall(Affix);
var id = 0;
var ids = {};
function wrapperRaf(callback) {
  var delayFrames = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var myId = id++;
  var restFrames = delayFrames;
  function internalCallback() {
    restFrames -= 1;
    if (restFrames <= 0) {
      callback();
      delete ids[myId];
    } else {
      ids[myId] = requestAnimationFrame(internalCallback);
    }
  }
  ids[myId] = requestAnimationFrame(internalCallback);
  return myId;
}
wrapperRaf.cancel = function cancel(pid) {
  if (pid === void 0)
    return;
  cancelAnimationFrame(ids[pid]);
  delete ids[pid];
};
wrapperRaf.ids = ids;
function isWindow$2(obj) {
  return obj !== null && obj !== void 0 && obj === obj.window;
}
function getScroll$4(target, top) {
  var _a;
  if (typeof window === "undefined") {
    return 0;
  }
  var method3 = top ? "scrollTop" : "scrollLeft";
  var result = 0;
  if (isWindow$2(target)) {
    result = target[top ? "pageYOffset" : "pageXOffset"];
  } else if (target instanceof Document) {
    result = target.documentElement[method3];
  } else if (target) {
    result = target[method3];
  }
  if (target && !isWindow$2(target) && typeof result !== "number") {
    result = (_a = (target.ownerDocument || target).documentElement) === null || _a === void 0 ? void 0 : _a[method3];
  }
  return result;
}
function easeInOutCubic(t2, b2, c2, d2) {
  var cc = c2 - b2;
  t2 /= d2 / 2;
  if (t2 < 1) {
    return cc / 2 * t2 * t2 * t2 + b2;
  }
  return cc / 2 * ((t2 -= 2) * t2 * t2 + 2) + b2;
}
function scrollTo$1(y2) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _options$getContainer = options2.getContainer, getContainer5 = _options$getContainer === void 0 ? function() {
    return window;
  } : _options$getContainer, callback = options2.callback, _options$duration = options2.duration, duration2 = _options$duration === void 0 ? 450 : _options$duration;
  var container = getContainer5();
  var scrollTop2 = getScroll$4(container, true);
  var startTime = Date.now();
  var frameFunc = function frameFunc2() {
    var timestamp = Date.now();
    var time = timestamp - startTime;
    var nextScrollTop = easeInOutCubic(time > duration2 ? duration2 : time, scrollTop2, y2, duration2);
    if (isWindow$2(container)) {
      container.scrollTo(window.pageXOffset, nextScrollTop);
    } else if (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument") {
      container.documentElement.scrollTop = nextScrollTop;
    } else {
      container.scrollTop = nextScrollTop;
    }
    if (time < duration2) {
      wrapperRaf(frameFunc2);
    } else if (typeof callback === "function") {
      callback();
    }
  };
  wrapperRaf(frameFunc);
}
function noop$J() {
}
var AnchorContextKey = Symbol("anchorContextKey");
var useProvideAnchor = function useProvideAnchor2(state2) {
  provide(AnchorContextKey, state2);
};
var useInjectAnchor = function useInjectAnchor2() {
  return inject(AnchorContextKey, {
    registerLink: noop$J,
    unregisterLink: noop$J,
    scrollTo: noop$J,
    activeLink: computed(function() {
      return "";
    }),
    handleClick: noop$J
  });
};
var useProvideAnchor$1 = useProvideAnchor;
function getDefaultContainer() {
  return window;
}
function getOffsetTop(element, container) {
  if (!element.getClientRects().length) {
    return 0;
  }
  var rect = element.getBoundingClientRect();
  if (rect.width || rect.height) {
    if (container === window) {
      container = element.ownerDocument.documentElement;
      return rect.top - container.clientTop;
    }
    return rect.top - container.getBoundingClientRect().top;
  }
  return rect.top;
}
var sharpMatcherRegx = /#(\S+)$/;
var anchorProps = {
  prefixCls: PropsTypes.string,
  offsetTop: PropsTypes.number,
  bounds: PropsTypes.number,
  affix: PropsTypes.looseBool.def(true),
  showInkInFixed: PropsTypes.looseBool.def(false),
  getContainer: PropsTypes.func.def(getDefaultContainer),
  wrapperClass: PropsTypes.string,
  wrapperStyle: PropsTypes.style,
  getCurrentAnchor: PropsTypes.func,
  targetOffset: PropsTypes.number,
  onChange: PropsTypes.func,
  onClick: PropsTypes.func
};
var Anchor = defineComponent({
  name: "AAnchor",
  inheritAttrs: false,
  props: anchorProps,
  emits: ["change", "click"],
  setup: function setup6(props2, _ref) {
    var emit = _ref.emit, attrs = _ref.attrs, slots = _ref.slots, expose = _ref.expose;
    var _useConfigInject = useConfigInject("anchor", props2), prefixCls2 = _useConfigInject.prefixCls, getTargetContainer = _useConfigInject.getTargetContainer, direction = _useConfigInject.direction;
    var inkNodeRef = ref();
    var anchorRef = ref();
    var state2 = reactive({
      links: [],
      scrollContainer: null,
      scrollEvent: null,
      animating: false
    });
    var activeLink = ref(null);
    var getContainer5 = computed(function() {
      var getContainer6 = props2.getContainer;
      return getContainer6 || getTargetContainer.value || getDefaultContainer;
    });
    var getCurrentAnchor = function getCurrentAnchor2() {
      var offsetTop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var bounds = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
      var linkSections = [];
      var container = getContainer5.value();
      state2.links.forEach(function(link) {
        var sharpLinkMatch = sharpMatcherRegx.exec(link.toString());
        if (!sharpLinkMatch) {
          return;
        }
        var target = document.getElementById(sharpLinkMatch[1]);
        if (target) {
          var top = getOffsetTop(target, container);
          if (top < offsetTop + bounds) {
            linkSections.push({
              link,
              top
            });
          }
        }
      });
      if (linkSections.length) {
        var maxSection = linkSections.reduce(function(prev3, curr) {
          return curr.top > prev3.top ? curr : prev3;
        });
        return maxSection.link;
      }
      return "";
    };
    var setCurrentActiveLink = function setCurrentActiveLink2(link) {
      var getCurrentAnchor2 = props2.getCurrentAnchor;
      if (activeLink.value === link) {
        return;
      }
      activeLink.value = typeof getCurrentAnchor2 === "function" ? getCurrentAnchor2() : link;
      emit("change", link);
    };
    var handleScrollTo = function handleScrollTo2(link) {
      var offsetTop = props2.offsetTop, getContainer6 = props2.getContainer, targetOffset2 = props2.targetOffset;
      setCurrentActiveLink(link);
      var container = getContainer6();
      var scrollTop2 = getScroll$4(container, true);
      var sharpLinkMatch = sharpMatcherRegx.exec(link);
      if (!sharpLinkMatch) {
        return;
      }
      var targetElement = document.getElementById(sharpLinkMatch[1]);
      if (!targetElement) {
        return;
      }
      var eleOffsetTop = getOffsetTop(targetElement, container);
      var y2 = scrollTop2 + eleOffsetTop;
      y2 -= targetOffset2 !== void 0 ? targetOffset2 : offsetTop || 0;
      state2.animating = true;
      scrollTo$1(y2, {
        callback: function callback() {
          state2.animating = false;
        },
        getContainer: getContainer6
      });
    };
    expose({
      scrollTo: handleScrollTo
    });
    var handleScroll4 = function handleScroll5() {
      if (state2.animating) {
        return;
      }
      var offsetTop = props2.offsetTop, bounds = props2.bounds, targetOffset2 = props2.targetOffset;
      var currentActiveLink = getCurrentAnchor(targetOffset2 !== void 0 ? targetOffset2 : offsetTop || 0, bounds);
      setCurrentActiveLink(currentActiveLink);
    };
    var updateInk = function updateInk2() {
      var linkNode = anchorRef.value.getElementsByClassName("".concat(prefixCls2.value, "-link-title-active"))[0];
      if (linkNode) {
        inkNodeRef.value.style.top = "".concat(linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5, "px");
      }
    };
    useProvideAnchor$1({
      registerLink: function registerLink(link) {
        if (!state2.links.includes(link)) {
          state2.links.push(link);
        }
      },
      unregisterLink: function unregisterLink(link) {
        var index2 = state2.links.indexOf(link);
        if (index2 !== -1) {
          state2.links.splice(index2, 1);
        }
      },
      activeLink,
      scrollTo: handleScrollTo,
      handleClick: function handleClick5(e2, info3) {
        emit("click", e2, info3);
      }
    });
    onMounted(function() {
      nextTick(function() {
        var container = getContainer5.value();
        state2.scrollContainer = container;
        state2.scrollEvent = addEventListenerWrap(state2.scrollContainer, "scroll", handleScroll4);
        handleScroll4();
      });
    });
    onBeforeUnmount(function() {
      if (state2.scrollEvent) {
        state2.scrollEvent.remove();
      }
    });
    onUpdated(function() {
      if (state2.scrollEvent) {
        var currentContainer = getContainer5.value();
        if (state2.scrollContainer !== currentContainer) {
          state2.scrollContainer = currentContainer;
          state2.scrollEvent.remove();
          state2.scrollEvent = addEventListenerWrap(state2.scrollContainer, "scroll", handleScroll4);
          handleScroll4();
        }
      }
      updateInk();
    });
    return function() {
      var _a;
      var offsetTop = props2.offsetTop, affix = props2.affix, showInkInFixed = props2.showInkInFixed;
      var pre = prefixCls2.value;
      var inkClass = classNames("".concat(pre, "-ink-ball"), {
        visible: activeLink.value
      });
      var wrapperClass = classNames(props2.wrapperClass, "".concat(pre, "-wrapper"), _defineProperty$U({}, "".concat(pre, "-rtl"), direction.value === "rtl"));
      var anchorClass = classNames(pre, {
        fixed: !affix && !showInkInFixed
      });
      var wrapperStyle2 = _extends$1({
        maxHeight: offsetTop ? "calc(100vh - ".concat(offsetTop, "px)") : "100vh"
      }, props2.wrapperStyle);
      var anchorContent = createVNode("div", {
        "class": wrapperClass,
        "style": wrapperStyle2,
        "ref": anchorRef
      }, [createVNode("div", {
        "class": anchorClass
      }, [createVNode("div", {
        "class": "".concat(pre, "-ink")
      }, [createVNode("span", {
        "class": inkClass,
        "ref": inkNodeRef
      }, null)]), (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])]);
      return !affix ? anchorContent : createVNode(Affix$1, _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "offsetTop": offsetTop,
        "target": getContainer5.value
      }), {
        default: function _default8() {
          return [anchorContent];
        }
      });
    };
  }
});
var anchorLinkProps = {
  prefixCls: PropsTypes.string,
  href: PropsTypes.string.def("#"),
  title: PropsTypes.VNodeChild,
  target: PropsTypes.string
};
var AnchorLink = defineComponent({
  name: "AAnchorLink",
  props: anchorLinkProps,
  slots: ["title"],
  setup: function setup7(props2, _ref) {
    var slots = _ref.slots;
    var mergedTitle = null;
    var _useInjectAnchor = useInjectAnchor(), contextHandleClick = _useInjectAnchor.handleClick, scrollTo3 = _useInjectAnchor.scrollTo, unregisterLink = _useInjectAnchor.unregisterLink, registerLink = _useInjectAnchor.registerLink, activeLink = _useInjectAnchor.activeLink;
    var _useConfigInject = useConfigInject("anchor", props2), prefixCls2 = _useConfigInject.prefixCls;
    var handleClick5 = function handleClick6(e2) {
      var href = props2.href;
      contextHandleClick(e2, {
        title: mergedTitle,
        href
      });
      scrollTo3(href);
    };
    watch(function() {
      return props2.href;
    }, function(val, oldVal) {
      nextTick(function() {
        unregisterLink(oldVal);
        registerLink(val);
      });
    });
    onMounted(function() {
      registerLink(props2.href);
    });
    onBeforeUnmount(function() {
      unregisterLink(props2.href);
    });
    return function() {
      var _a;
      var href = props2.href, target = props2.target;
      var pre = prefixCls2.value;
      var title2 = getPropsSlot(slots, props2, "title");
      mergedTitle = title2;
      var active = activeLink.value === href;
      var wrapperClassName = classNames("".concat(pre, "-link"), _defineProperty$U({}, "".concat(pre, "-link-active"), active));
      var titleClassName = classNames("".concat(pre, "-link-title"), _defineProperty$U({}, "".concat(pre, "-link-title-active"), active));
      return createVNode("div", {
        "class": wrapperClassName
      }, [createVNode("a", {
        "class": titleClassName,
        "href": href,
        "title": typeof title2 === "string" ? title2 : "",
        "target": target,
        "onClick": handleClick5
      }, [title2]), (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
Anchor.Link = AnchorLink;
Anchor.install = function(app) {
  app.component(Anchor.name, Anchor);
  app.component(Anchor.Link.name, Anchor.Link);
  return app;
};
var TransBtn = function TransBtn2(props2, _ref) {
  var slots = _ref.slots;
  var _a;
  var className = props2.class, customizeIcon = props2.customizeIcon, customizeIconProps = props2.customizeIconProps, _onMousedown = props2.onMousedown, onClick7 = props2.onClick;
  var icon;
  if (typeof customizeIcon === "function") {
    icon = customizeIcon(customizeIconProps);
  } else {
    icon = customizeIcon;
  }
  return createVNode("span", {
    "class": className,
    "onMousedown": function onMousedown2(event) {
      event.preventDefault();
      if (_onMousedown) {
        _onMousedown(event);
      }
    },
    "style": {
      userSelect: "none",
      WebkitUserSelect: "none"
    },
    "unselectable": "on",
    "onClick": onClick7,
    "aria-hidden": true
  }, [icon !== void 0 ? icon : createVNode("span", {
    "class": className.split(/\s+/).map(function(cls) {
      return "".concat(cls, "-icon");
    })
  }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])]);
};
TransBtn.inheritAttrs = false;
TransBtn.displayName = "TransBtn";
TransBtn.props = {
  class: PropsTypes.string,
  customizeIcon: PropsTypes.any,
  customizeIconProps: PropsTypes.any,
  onMousedown: PropsTypes.func,
  onClick: PropsTypes.func
};
var TransBtn$1 = TransBtn;
var KeyCode$1 = {
  MAC_ENTER: 3,
  BACKSPACE: 8,
  TAB: 9,
  NUM_CENTER: 12,
  ENTER: 13,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  PAUSE: 19,
  CAPS_LOCK: 20,
  ESC: 27,
  SPACE: 32,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  PRINT_SCREEN: 44,
  INSERT: 45,
  DELETE: 46,
  ZERO: 48,
  ONE: 49,
  TWO: 50,
  THREE: 51,
  FOUR: 52,
  FIVE: 53,
  SIX: 54,
  SEVEN: 55,
  EIGHT: 56,
  NINE: 57,
  QUESTION_MARK: 63,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  META: 91,
  WIN_KEY_RIGHT: 92,
  CONTEXT_MENU: 93,
  NUM_ZERO: 96,
  NUM_ONE: 97,
  NUM_TWO: 98,
  NUM_THREE: 99,
  NUM_FOUR: 100,
  NUM_FIVE: 101,
  NUM_SIX: 102,
  NUM_SEVEN: 103,
  NUM_EIGHT: 104,
  NUM_NINE: 105,
  NUM_MULTIPLY: 106,
  NUM_PLUS: 107,
  NUM_MINUS: 109,
  NUM_PERIOD: 110,
  NUM_DIVISION: 111,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  NUMLOCK: 144,
  SEMICOLON: 186,
  DASH: 189,
  EQUALS: 187,
  COMMA: 188,
  PERIOD: 190,
  SLASH: 191,
  APOSTROPHE: 192,
  SINGLE_QUOTE: 222,
  OPEN_SQUARE_BRACKET: 219,
  BACKSLASH: 220,
  CLOSE_SQUARE_BRACKET: 221,
  WIN_KEY: 224,
  MAC_FF_META: 224,
  WIN_IME: 229,
  isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e2) {
    var keyCode = e2.keyCode;
    if (e2.altKey && !e2.ctrlKey || e2.metaKey || keyCode >= KeyCode$1.F1 && keyCode <= KeyCode$1.F12) {
      return false;
    }
    switch (keyCode) {
      case KeyCode$1.ALT:
      case KeyCode$1.CAPS_LOCK:
      case KeyCode$1.CONTEXT_MENU:
      case KeyCode$1.CTRL:
      case KeyCode$1.DOWN:
      case KeyCode$1.END:
      case KeyCode$1.ESC:
      case KeyCode$1.HOME:
      case KeyCode$1.INSERT:
      case KeyCode$1.LEFT:
      case KeyCode$1.MAC_FF_META:
      case KeyCode$1.META:
      case KeyCode$1.NUMLOCK:
      case KeyCode$1.NUM_CENTER:
      case KeyCode$1.PAGE_DOWN:
      case KeyCode$1.PAGE_UP:
      case KeyCode$1.PAUSE:
      case KeyCode$1.PRINT_SCREEN:
      case KeyCode$1.RIGHT:
      case KeyCode$1.SHIFT:
      case KeyCode$1.UP:
      case KeyCode$1.WIN_KEY:
      case KeyCode$1.WIN_KEY_RIGHT:
        return false;
      default:
        return true;
    }
  },
  isCharacterKey: function isCharacterKey(keyCode) {
    if (keyCode >= KeyCode$1.ZERO && keyCode <= KeyCode$1.NINE) {
      return true;
    }
    if (keyCode >= KeyCode$1.NUM_ZERO && keyCode <= KeyCode$1.NUM_MULTIPLY) {
      return true;
    }
    if (keyCode >= KeyCode$1.A && keyCode <= KeyCode$1.Z) {
      return true;
    }
    if (window.navigator.userAgent.indexOf("WebKit") !== -1 && keyCode === 0) {
      return true;
    }
    switch (keyCode) {
      case KeyCode$1.SPACE:
      case KeyCode$1.QUESTION_MARK:
      case KeyCode$1.NUM_PLUS:
      case KeyCode$1.NUM_MINUS:
      case KeyCode$1.NUM_PERIOD:
      case KeyCode$1.NUM_DIVISION:
      case KeyCode$1.SEMICOLON:
      case KeyCode$1.DASH:
      case KeyCode$1.EQUALS:
      case KeyCode$1.COMMA:
      case KeyCode$1.PERIOD:
      case KeyCode$1.SLASH:
      case KeyCode$1.APOSTROPHE:
      case KeyCode$1.SINGLE_QUOTE:
      case KeyCode$1.OPEN_SQUARE_BRACKET:
      case KeyCode$1.BACKSLASH:
      case KeyCode$1.CLOSE_SQUARE_BRACKET:
        return true;
      default:
        return false;
    }
  }
};
var KeyCode$2 = KeyCode$1;
var attributes = "accept acceptcharset accesskey action allowfullscreen allowtransparency\nalt async autocomplete autofocus autoplay capture cellpadding cellspacing challenge\ncharset checked classid classname colspan cols content contenteditable contextmenu\ncontrols coords crossorigin data datetime default defer dir disabled download draggable\nenctype form formaction formenctype formmethod formnovalidate formtarget frameborder\nheaders height hidden high href hreflang htmlfor httpequiv icon id inputmode integrity\nis keyparams keytype kind label lang list loop low manifest marginheight marginwidth max maxlength media\nmediagroup method min minlength multiple muted name novalidate nonce open\noptimum pattern placeholder poster preload radiogroup readonly rel required\nreversed role rowspan rows sandbox scope scoped scrolling seamless selected\nshape size sizes span spellcheck src srcdoc srclang srcset start step style\nsummary tabindex target title type usemap value width wmode wrap";
var eventsName = "onCopy onCut onPaste onCompositionend onCompositionstart onCompositionupdate onKeydown\n    onKeypress onKeyup onFocus onBlur onChange onInput onSubmit onClick onContextmenu onDoubleclick onDblclick\n    onDrag onDragend onDragenter onDragexit onDragleave onDragover onDragstart onDrop onMousedown\n    onMouseenter onMouseleave onMousemove onMouseout onMouseover onMouseup onSelect onTouchcancel\n    onTouchend onTouchmove onTouchstart onTouchstartPassive onTouchmovePassive onScroll onWheel onAbort onCanplay onCanplaythrough\n    onDurationchange onEmptied onEncrypted onEnded onError onLoadeddata onLoadedmetadata\n    onLoadstart onPause onPlay onPlaying onProgress onRatechange onSeeked onSeeking onStalled onSuspend onTimeupdate onVolumechange onWaiting onLoad onError";
var propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
var ariaPrefix = "aria-";
var dataPrefix = "data-";
function match$1(key2, prefix) {
  return key2.indexOf(prefix) === 0;
}
function pickAttrs(props2) {
  var ariaOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var mergedConfig;
  if (ariaOnly === false) {
    mergedConfig = {
      aria: true,
      data: true,
      attr: true
    };
  } else if (ariaOnly === true) {
    mergedConfig = {
      aria: true
    };
  } else {
    mergedConfig = _extends$1({}, ariaOnly);
  }
  var attrs = {};
  Object.keys(props2).forEach(function(key2) {
    if (mergedConfig.aria && (key2 === "role" || match$1(key2, ariaPrefix)) || mergedConfig.data && match$1(key2, dataPrefix) || mergedConfig.attr && (propList.includes(key2) || propList.includes(key2.toLowerCase()))) {
      attrs[key2] = props2[key2];
    }
  });
  return attrs;
}
function createRef$1() {
  var func = function func2(node) {
    func2.current = node;
  };
  return func;
}
var Filter = function Filter2(_ref, _ref2) {
  var height = _ref.height, offset4 = _ref.offset, prefixCls2 = _ref.prefixCls, onInnerResize = _ref.onInnerResize;
  var slots = _ref2.slots;
  var _a;
  var outerStyle = {};
  var innerStyle = {
    display: "flex",
    flexDirection: "column"
  };
  if (offset4 !== void 0) {
    outerStyle = {
      height: "".concat(height, "px"),
      position: "relative",
      overflow: "hidden"
    };
    innerStyle = _extends$1(_extends$1({}, innerStyle), {
      transform: "translateY(".concat(offset4, "px)"),
      position: "absolute",
      left: 0,
      right: 0,
      top: 0
    });
  }
  return createVNode("div", {
    "style": outerStyle
  }, [createVNode(ResizeObserver, {
    "onResize": function onResize(_ref3) {
      var offsetHeight = _ref3.offsetHeight;
      if (offsetHeight && onInnerResize) {
        onInnerResize();
      }
    }
  }, {
    default: function _default8() {
      return [createVNode("div", {
        "style": innerStyle,
        "class": classNames(_defineProperty$U({}, "".concat(prefixCls2, "-holder-inner"), prefixCls2))
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])];
    }
  })]);
};
Filter.displayName = "Filter";
Filter.inheritAttrs = false;
Filter.props = {
  prefixCls: String,
  height: Number,
  offset: Number,
  onInnerResize: Function
};
var Filler = Filter;
var Item$2 = function Item2(_ref, _ref2) {
  var setRef2 = _ref.setRef;
  var slots = _ref2.slots;
  var _a;
  var children = (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
  return children && children.length ? cloneVNode(children[0], {
    ref: setRef2
  }) : children;
};
Item$2.props = {
  setRef: {
    type: Function,
    default: function _default() {
    }
  }
};
var Item$3 = Item$2;
var MIN_SIZE = 20;
function getPageY(e2) {
  return "touches" in e2 ? e2.touches[0].pageY : e2.pageY;
}
var ScrollBar = defineComponent({
  name: "ScrollBar",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    scrollTop: PropsTypes.number,
    scrollHeight: PropsTypes.number,
    height: PropsTypes.number,
    count: PropsTypes.number,
    onScroll: {
      type: Function
    },
    onStartMove: {
      type: Function
    },
    onStopMove: {
      type: Function
    }
  },
  setup: function setup8() {
    return {
      moveRaf: null,
      scrollbarRef: createRef$1(),
      thumbRef: createRef$1(),
      visibleTimeout: null,
      state: reactive({
        dragging: false,
        pageY: null,
        startTop: null,
        visible: false
      })
    };
  },
  watch: {
    scrollTop: {
      handler: function handler2() {
        this.delayHidden();
      },
      flush: "post"
    }
  },
  mounted: function mounted() {
    this.scrollbarRef.current.addEventListener("touchstart", this.onScrollbarTouchStart, supportsPassive$1 ? {
      passive: false
    } : false);
    this.thumbRef.current.addEventListener("touchstart", this.onMouseDown, supportsPassive$1 ? {
      passive: false
    } : false);
  },
  beforeUnmount: function beforeUnmount() {
    this.removeEvents();
    clearTimeout(this.visibleTimeout);
  },
  methods: {
    delayHidden: function delayHidden() {
      var _this = this;
      clearTimeout(this.visibleTimeout);
      this.state.visible = true;
      this.visibleTimeout = setTimeout(function() {
        _this.state.visible = false;
      }, 2e3);
    },
    onScrollbarTouchStart: function onScrollbarTouchStart(e2) {
      e2.preventDefault();
    },
    onContainerMouseDown: function onContainerMouseDown(e2) {
      e2.stopPropagation();
      e2.preventDefault();
    },
    patchEvents: function patchEvents() {
      window.addEventListener("mousemove", this.onMouseMove);
      window.addEventListener("mouseup", this.onMouseUp);
      this.thumbRef.current.addEventListener("touchmove", this.onMouseMove, supportsPassive$1 ? {
        passive: false
      } : false);
      this.thumbRef.current.addEventListener("touchend", this.onMouseUp);
    },
    removeEvents: function removeEvents() {
      window.removeEventListener("mousemove", this.onMouseMove);
      window.removeEventListener("mouseup", this.onMouseUp);
      this.scrollbarRef.current.removeEventListener("touchstart", this.onScrollbarTouchStart, supportsPassive$1 ? {
        passive: false
      } : false);
      this.thumbRef.current.removeEventListener("touchstart", this.onMouseDown, supportsPassive$1 ? {
        passive: false
      } : false);
      this.thumbRef.current.removeEventListener("touchmove", this.onMouseMove, supportsPassive$1 ? {
        passive: false
      } : false);
      this.thumbRef.current.removeEventListener("touchend", this.onMouseUp);
      wrapperRaf.cancel(this.moveRaf);
    },
    onMouseDown: function onMouseDown(e2) {
      var onStartMove = this.$props.onStartMove;
      _extends$1(this.state, {
        dragging: true,
        pageY: getPageY(e2),
        startTop: this.getTop()
      });
      onStartMove();
      this.patchEvents();
      e2.stopPropagation();
      e2.preventDefault();
    },
    onMouseMove: function onMouseMove(e2) {
      var _this$state = this.state, dragging = _this$state.dragging, pageY = _this$state.pageY, startTop = _this$state.startTop;
      var onScroll2 = this.$props.onScroll;
      wrapperRaf.cancel(this.moveRaf);
      if (dragging) {
        var offsetY = getPageY(e2) - pageY;
        var newTop = startTop + offsetY;
        var enableScrollRange = this.getEnableScrollRange();
        var enableHeightRange = this.getEnableHeightRange();
        var ptg = enableHeightRange ? newTop / enableHeightRange : 0;
        var newScrollTop = Math.ceil(ptg * enableScrollRange);
        this.moveRaf = wrapperRaf(function() {
          onScroll2(newScrollTop);
        });
      }
    },
    onMouseUp: function onMouseUp() {
      var onStopMove = this.$props.onStopMove;
      this.state.dragging = false;
      onStopMove();
      this.removeEvents();
    },
    getSpinHeight: function getSpinHeight() {
      var _this$$props = this.$props, height = _this$$props.height, count = _this$$props.count;
      var baseHeight = height / count * 10;
      baseHeight = Math.max(baseHeight, MIN_SIZE);
      baseHeight = Math.min(baseHeight, height / 2);
      return Math.floor(baseHeight);
    },
    getEnableScrollRange: function getEnableScrollRange() {
      var _this$$props2 = this.$props, scrollHeight = _this$$props2.scrollHeight, height = _this$$props2.height;
      return scrollHeight - height || 0;
    },
    getEnableHeightRange: function getEnableHeightRange() {
      var height = this.$props.height;
      var spinHeight = this.getSpinHeight();
      return height - spinHeight || 0;
    },
    getTop: function getTop2() {
      var scrollTop2 = this.$props.scrollTop;
      var enableScrollRange = this.getEnableScrollRange();
      var enableHeightRange = this.getEnableHeightRange();
      if (scrollTop2 === 0 || enableScrollRange === 0) {
        return 0;
      }
      var ptg = scrollTop2 / enableScrollRange;
      return ptg * enableHeightRange;
    },
    showScroll: function showScroll() {
      var _this$$props3 = this.$props, height = _this$$props3.height, scrollHeight = _this$$props3.scrollHeight;
      return scrollHeight > height;
    }
  },
  render: function render2() {
    var _this$state2 = this.state, dragging = _this$state2.dragging, visible9 = _this$state2.visible;
    var prefixCls2 = this.$props.prefixCls;
    var spinHeight = this.getSpinHeight() + "px";
    var top = this.getTop() + "px";
    var canScroll = this.showScroll();
    var mergedVisible = canScroll && visible9;
    return createVNode("div", {
      "ref": this.scrollbarRef,
      "class": classNames("".concat(prefixCls2, "-scrollbar"), _defineProperty$U({}, "".concat(prefixCls2, "-scrollbar-show"), canScroll)),
      "style": {
        width: "8px",
        top: 0,
        bottom: 0,
        right: 0,
        position: "absolute",
        display: mergedVisible ? void 0 : "none"
      },
      "onMousedown": this.onContainerMouseDown,
      "onMousemove": this.delayHidden
    }, [createVNode("div", {
      "ref": this.thumbRef,
      "class": classNames("".concat(prefixCls2, "-scrollbar-thumb"), _defineProperty$U({}, "".concat(prefixCls2, "-scrollbar-thumb-moving"), dragging)),
      "style": {
        width: "100%",
        height: spinHeight,
        top,
        left: 0,
        position: "absolute",
        background: "rgba(0, 0, 0, 0.5)",
        borderRadius: "99px",
        cursor: "pointer",
        userSelect: "none"
      },
      "onMousedown": this.onMouseDown
    }, null)]);
  }
});
function useHeights(getKey4, onItemAdd, onItemRemove) {
  var instance = new Map();
  var heights = reactive({});
  var heightUpdateId = 0;
  function collectHeight() {
    heightUpdateId += 1;
    var currentId = heightUpdateId;
    Promise.resolve().then(function() {
      if (currentId !== heightUpdateId)
        return;
      instance.forEach(function(element, key2) {
        if (element && element.offsetParent) {
          var offsetHeight = element.offsetHeight;
          if (heights[key2] !== offsetHeight) {
            heights[key2] = element.offsetHeight;
          }
        }
      });
    });
  }
  function setInstance(item, ins) {
    var key2 = getKey4(item);
    var origin = instance.get(key2);
    if (ins) {
      instance.set(key2, ins);
      collectHeight();
    } else {
      instance.delete(key2);
    }
    if (!origin !== !ins) {
      if (ins) {
        onItemAdd === null || onItemAdd === void 0 ? void 0 : onItemAdd(item);
      } else {
        onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(item);
      }
    }
  }
  return [setInstance, collectHeight, heights];
}
function useScrollTo(containerRef, mergedData, heights, props2, getKey4, collectHeight, syncScrollTop, triggerFlash) {
  var scroll = null;
  return function(arg) {
    if (arg === null || arg === void 0) {
      triggerFlash();
      return;
    }
    wrapperRaf.cancel(scroll);
    var data80 = mergedData.value;
    var itemHeight = props2.itemHeight;
    if (typeof arg === "number") {
      syncScrollTop(arg);
    } else if (arg && _typeof$2(arg) === "object") {
      var index2;
      var align = arg.align;
      if ("index" in arg) {
        index2 = arg.index;
      } else {
        index2 = data80.findIndex(function(item) {
          return getKey4(item) === arg.key;
        });
      }
      var _arg$offset = arg.offset, offset4 = _arg$offset === void 0 ? 0 : _arg$offset;
      var syncScroll = function syncScroll2(times, targetAlign) {
        if (times < 0 || !containerRef.value)
          return;
        var height = containerRef.value.clientHeight;
        var needCollectHeight = false;
        var newTargetAlign = targetAlign;
        if (height) {
          var mergedAlign = targetAlign || align;
          var stackTop = 0;
          var itemTop = 0;
          var itemBottom = 0;
          var maxLen = Math.min(data80.length, index2);
          for (var i2 = 0; i2 <= maxLen; i2 += 1) {
            var key2 = getKey4(data80[i2]);
            itemTop = stackTop;
            var cacheHeight = heights[key2];
            itemBottom = itemTop + (cacheHeight === void 0 ? itemHeight : cacheHeight);
            stackTop = itemBottom;
            if (i2 === index2 && cacheHeight === void 0) {
              needCollectHeight = true;
            }
          }
          var targetTop = null;
          switch (mergedAlign) {
            case "top":
              targetTop = itemTop - offset4;
              break;
            case "bottom":
              targetTop = itemBottom - height + offset4;
              break;
            default: {
              var scrollTop2 = containerRef.value.scrollTop;
              var scrollBottom = scrollTop2 + height;
              if (itemTop < scrollTop2) {
                newTargetAlign = "top";
              } else if (itemBottom > scrollBottom) {
                newTargetAlign = "bottom";
              }
            }
          }
          if (targetTop !== null && targetTop !== containerRef.value.scrollTop) {
            syncScrollTop(targetTop);
          }
        }
        scroll = wrapperRaf(function() {
          if (needCollectHeight) {
            collectHeight();
          }
          syncScroll2(times - 1, newTargetAlign);
        });
      };
      syncScroll(3);
    }
  };
}
var isFF = (typeof navigator === "undefined" ? "undefined" : _typeof$2(navigator)) === "object" && /Firefox/i.test(navigator.userAgent);
var isFF$1 = isFF;
var useOriginScroll = function(isScrollAtTop, isScrollAtBottom) {
  var lock = false;
  var lockTimeout = null;
  function lockScroll() {
    clearTimeout(lockTimeout);
    lock = true;
    lockTimeout = setTimeout(function() {
      lock = false;
    }, 50);
  }
  return function(deltaY) {
    var smoothOffset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var originScroll = deltaY < 0 && isScrollAtTop.value || deltaY > 0 && isScrollAtBottom.value;
    if (smoothOffset && originScroll) {
      clearTimeout(lockTimeout);
      lock = false;
    } else if (!originScroll || lock) {
      lockScroll();
    }
    return !lock && originScroll;
  };
};
function useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, onWheelDelta) {
  var offsetRef = 0;
  var nextFrame2 = null;
  var wheelValue = null;
  var isMouseScroll = false;
  var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom);
  function onWheel(event) {
    if (!inVirtual.value)
      return;
    wrapperRaf.cancel(nextFrame2);
    var deltaY = event.deltaY;
    offsetRef += deltaY;
    wheelValue = deltaY;
    if (originScroll(deltaY))
      return;
    if (!isFF$1) {
      event.preventDefault();
    }
    nextFrame2 = wrapperRaf(function() {
      var patchMultiple = isMouseScroll ? 10 : 1;
      onWheelDelta(offsetRef * patchMultiple);
      offsetRef = 0;
    });
  }
  function onFireFoxScroll(event) {
    if (!inVirtual.value)
      return;
    isMouseScroll = event.detail === wheelValue;
  }
  return [onWheel, onFireFoxScroll];
}
var SMOOTH_PTG = 14 / 15;
function useMobileTouchMove(inVirtual, listRef, callback) {
  var touched = false;
  var touchY = 0;
  var element = null;
  var interval = null;
  var cleanUpEvents = function cleanUpEvents2() {
    if (element) {
      element.removeEventListener("touchmove", onTouchMove2, supportsPassive$1 ? {
        passive: false
      } : false);
      element.removeEventListener("touchend", onTouchEnd3);
    }
  };
  var onTouchMove2 = function onTouchMove3(e2) {
    if (touched) {
      var currentY = Math.ceil(e2.touches[0].pageY);
      var offsetY = touchY - currentY;
      touchY = currentY;
      if (callback(offsetY)) {
        e2.preventDefault();
      }
      clearInterval(interval);
      interval = setInterval(function() {
        offsetY *= SMOOTH_PTG;
        if (!callback(offsetY, true) || Math.abs(offsetY) <= 0.1) {
          clearInterval(interval);
        }
      }, 16);
    }
  };
  var onTouchEnd3 = function onTouchEnd4() {
    touched = false;
    cleanUpEvents();
  };
  var onTouchStart2 = function onTouchStart3(e2) {
    cleanUpEvents();
    if (e2.touches.length === 1 && !touched) {
      touched = true;
      touchY = Math.ceil(e2.touches[0].pageY);
      element = e2.target;
      element.addEventListener("touchmove", onTouchMove2, supportsPassive$1 ? {
        passive: false
      } : false);
      element.addEventListener("touchend", onTouchEnd3);
    }
  };
  onMounted(function() {
    watch(inVirtual, function(val) {
      listRef.value.removeEventListener("touchstart", onTouchStart2, supportsPassive$1 ? {
        passive: false
      } : false);
      cleanUpEvents();
      clearInterval(interval);
      if (val) {
        listRef.value.addEventListener("touchstart", onTouchStart2, supportsPassive$1 ? {
          passive: false
        } : false);
      }
    }, {
      immediate: true
    });
  });
}
var __rest$W = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var EMPTY_DATA = [];
var ScrollStyle = {
  overflowY: "auto",
  overflowAnchor: "none"
};
function renderChildren(list, startIndex, endIndex, setNodeRef, renderFunc, _ref) {
  var getKey4 = _ref.getKey;
  return list.slice(startIndex, endIndex + 1).map(function(item, index2) {
    var eleIndex = startIndex + index2;
    var node = renderFunc(item, eleIndex, {});
    var key2 = getKey4(item);
    return createVNode(Item$3, {
      "key": key2,
      "setRef": function setRef2(ele) {
        return setNodeRef(item, ele);
      }
    }, {
      default: function _default8() {
        return [node];
      }
    });
  });
}
var List$3 = defineComponent({
  name: "List",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    data: PropsTypes.array,
    height: PropsTypes.number,
    itemHeight: PropsTypes.number,
    fullHeight: PropsTypes.looseBool,
    itemKey: {
      type: [String, Number, Function],
      required: true
    },
    component: {
      type: [String, Object]
    },
    virtual: PropsTypes.looseBool,
    children: PropsTypes.func,
    onScroll: PropsTypes.func,
    onMousedown: PropsTypes.func,
    onMouseenter: PropsTypes.func
  },
  setup: function setup9(props2) {
    var useVirtual = computed(function() {
      var height = props2.height, itemHeight = props2.itemHeight, virtual = props2.virtual;
      return !!(virtual !== false && height && itemHeight);
    });
    var inVirtual = computed(function() {
      var height = props2.height, itemHeight = props2.itemHeight, data80 = props2.data;
      return useVirtual.value && data80 && itemHeight * data80.length > height;
    });
    var state2 = reactive({
      scrollTop: 0,
      scrollMoving: false
    });
    var mergedData = computed(function() {
      return props2.data || EMPTY_DATA;
    });
    var componentRef = ref();
    var fillerInnerRef = ref();
    var scrollBarRef = ref();
    var getKey4 = function getKey5(item) {
      if (typeof props2.itemKey === "function") {
        return props2.itemKey(item);
      }
      return item === null || item === void 0 ? void 0 : item[props2.itemKey];
    };
    var sharedConfig = {
      getKey: getKey4
    };
    function syncScrollTop(newTop) {
      var value26;
      if (typeof newTop === "function") {
        value26 = newTop(state2.scrollTop);
      } else {
        value26 = newTop;
      }
      var alignedTop = keepInRange(value26);
      if (componentRef.value) {
        componentRef.value.scrollTop = alignedTop;
      }
      state2.scrollTop = alignedTop;
    }
    var _useHeights = useHeights(getKey4, null, null), _useHeights2 = _slicedToArray$2(_useHeights, 3), setInstance = _useHeights2[0], collectHeight = _useHeights2[1], heights = _useHeights2[2];
    var calRes = ref({});
    watch([inVirtual, useVirtual, function() {
      return state2.scrollTop;
    }, mergedData, heights, function() {
      return props2.height;
    }], function() {
      nextTick(function() {
        var _a;
        if (!useVirtual.value) {
          calRes.value = {
            scrollHeight: void 0,
            start: 0,
            end: mergedData.value.length - 1,
            offset: void 0
          };
          return;
        }
        if (!inVirtual.value) {
          calRes.value = {
            scrollHeight: ((_a = fillerInnerRef.value) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0,
            start: 0,
            end: mergedData.value.length - 1,
            offset: void 0
          };
          return;
        }
        var itemTop = 0;
        var startIndex;
        var startOffset;
        var endIndex;
        var dataLen3 = mergedData.value.length;
        var data80 = mergedData.value;
        for (var i2 = 0; i2 < dataLen3; i2 += 1) {
          var item = data80[i2];
          var key2 = getKey4(item);
          var cacheHeight = heights[key2];
          var currentItemBottom = itemTop + (cacheHeight === void 0 ? props2.itemHeight : cacheHeight);
          if (currentItemBottom >= state2.scrollTop && startIndex === void 0) {
            startIndex = i2;
            startOffset = itemTop;
          }
          if (currentItemBottom > state2.scrollTop + props2.height && endIndex === void 0) {
            endIndex = i2;
          }
          itemTop = currentItemBottom;
        }
        if (startIndex === void 0) {
          startIndex = 0;
          startOffset = 0;
        }
        if (endIndex === void 0) {
          endIndex = dataLen3 - 1;
        }
        endIndex = Math.min(endIndex + 1, dataLen3);
        calRes.value = {
          scrollHeight: itemTop,
          start: startIndex,
          end: endIndex,
          offset: startOffset
        };
      });
    }, {
      immediate: true,
      flush: "post"
    });
    var maxScrollHeight = computed(function() {
      return calRes.value.scrollHeight - props2.height;
    });
    function keepInRange(newScrollTop) {
      var newTop = newScrollTop;
      if (!Number.isNaN(maxScrollHeight.value)) {
        newTop = Math.min(newTop, maxScrollHeight.value);
      }
      newTop = Math.max(newTop, 0);
      return newTop;
    }
    var isScrollAtTop = computed(function() {
      return state2.scrollTop <= 0;
    });
    var isScrollAtBottom = computed(function() {
      return state2.scrollTop >= maxScrollHeight.value;
    });
    var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom);
    function onScrollBar(newScrollTop) {
      var newTop = newScrollTop;
      syncScrollTop(newTop);
    }
    function onFallbackScroll(e2) {
      var _a;
      var newScrollTop = e2.currentTarget.scrollTop;
      if (Math.abs(newScrollTop - state2.scrollTop) >= 1) {
        syncScrollTop(newScrollTop);
      }
      (_a = props2.onScroll) === null || _a === void 0 ? void 0 : _a.call(props2, e2);
    }
    var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, function(offsetY) {
      syncScrollTop(function(top) {
        var newTop = top + offsetY;
        return newTop;
      });
    }), _useFrameWheel2 = _slicedToArray$2(_useFrameWheel, 2), onRawWheel = _useFrameWheel2[0], onFireFoxScroll = _useFrameWheel2[1];
    useMobileTouchMove(useVirtual, componentRef, function(deltaY, smoothOffset) {
      if (originScroll(deltaY, smoothOffset)) {
        return false;
      }
      onRawWheel({
        preventDefault: function preventDefault2() {
        },
        deltaY
      });
      return true;
    });
    function onMozMousePixelScroll(e2) {
      if (useVirtual.value) {
        e2.preventDefault();
      }
    }
    var removeEventListener2 = function removeEventListener3() {
      if (componentRef.value) {
        componentRef.value.removeEventListener("wheel", onRawWheel, supportsPassive$1 ? {
          passive: false
        } : false);
        componentRef.value.removeEventListener("DOMMouseScroll", onFireFoxScroll);
        componentRef.value.removeEventListener("MozMousePixelScroll", onMozMousePixelScroll);
      }
    };
    watchEffect(function() {
      nextTick(function() {
        if (componentRef.value) {
          removeEventListener2();
          componentRef.value.addEventListener("wheel", onRawWheel, supportsPassive$1 ? {
            passive: false
          } : false);
          componentRef.value.addEventListener("DOMMouseScroll", onFireFoxScroll);
          componentRef.value.addEventListener("MozMousePixelScroll", onMozMousePixelScroll);
        }
      });
    });
    onBeforeUnmount(function() {
      removeEventListener2();
    });
    var scrollTo3 = useScrollTo(componentRef, mergedData, heights, props2, getKey4, collectHeight, syncScrollTop, function() {
      var _a;
      (_a = scrollBarRef.value) === null || _a === void 0 ? void 0 : _a.delayHidden();
    });
    var componentStyle = computed(function() {
      var cs = null;
      if (props2.height) {
        cs = _extends$1(_defineProperty$U({}, props2.fullHeight ? "height" : "maxHeight", props2.height + "px"), ScrollStyle);
        if (useVirtual.value) {
          cs.overflowY = "hidden";
          if (state2.scrollMoving) {
            cs.pointerEvents = "none";
          }
        }
      }
      return cs;
    });
    return {
      state: state2,
      mergedData,
      componentStyle,
      scrollTo: scrollTo3,
      onFallbackScroll,
      onScrollBar,
      componentRef,
      useVirtual,
      calRes,
      collectHeight,
      setInstance,
      sharedConfig,
      scrollBarRef,
      fillerInnerRef
    };
  },
  render: function render3() {
    var _this = this;
    var _a = _extends$1(_extends$1({}, this.$props), this.$attrs), _a$prefixCls = _a.prefixCls, prefixCls2 = _a$prefixCls === void 0 ? "rc-virtual-list" : _a$prefixCls, height = _a.height;
    _a.itemHeight;
    _a.fullHeight;
    _a.data;
    _a.itemKey;
    _a.virtual;
    var _a$component = _a.component, Component = _a$component === void 0 ? "div" : _a$component;
    _a.onScroll;
    var children = _a.children, style3 = _a.style, className = _a.class, restProps = __rest$W(_a, ["prefixCls", "height", "itemHeight", "fullHeight", "data", "itemKey", "virtual", "component", "onScroll", "children", "style", "class"]);
    var mergedClassName = classNames(prefixCls2, className);
    var scrollTop2 = this.state.scrollTop;
    var _this$calRes = this.calRes, scrollHeight = _this$calRes.scrollHeight, offset4 = _this$calRes.offset, start = _this$calRes.start, end = _this$calRes.end;
    var componentStyle = this.componentStyle, onFallbackScroll = this.onFallbackScroll, onScrollBar = this.onScrollBar, useVirtual = this.useVirtual, collectHeight = this.collectHeight, sharedConfig = this.sharedConfig, setInstance = this.setInstance, mergedData = this.mergedData;
    var listChildren = renderChildren(mergedData, start, end, setInstance, children, sharedConfig);
    return createVNode("div", _objectSpread2$2({
      "style": _extends$1(_extends$1({}, style3), {
        position: "relative"
      }),
      "class": mergedClassName
    }, restProps), [createVNode(Component, {
      "class": "".concat(prefixCls2, "-holder"),
      "style": componentStyle,
      "ref": "componentRef",
      "onScroll": onFallbackScroll
    }, {
      default: function _default8() {
        return [createVNode(Filler, {
          "prefixCls": prefixCls2,
          "height": scrollHeight,
          "offset": offset4,
          "onInnerResize": collectHeight,
          "ref": "fillerInnerRef"
        }, {
          default: function _default9() {
            return [listChildren];
          }
        })];
      }
    }), useVirtual && createVNode(ScrollBar, {
      "ref": "scrollBarRef",
      "prefixCls": prefixCls2,
      "scrollTop": scrollTop2,
      "height": height,
      "scrollHeight": scrollHeight,
      "count": mergedData.length,
      "onScroll": onScrollBar,
      "onStartMove": function onStartMove() {
        _this.state.scrollMoving = true;
      },
      "onStopMove": function onStopMove() {
        _this.state.scrollMoving = false;
      }
    }, null)]);
  }
});
var List$4 = List$3;
function useMemo(getValue2, condition, shouldUpdate) {
  var cacheRef = ref(getValue2());
  watch(condition, function(next3, pre) {
    if (shouldUpdate) {
      if (shouldUpdate(next3, pre)) {
        cacheRef.value = getValue2();
      }
    } else {
      cacheRef.value = getValue2();
    }
  });
  return cacheRef;
}
var __rest$V = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var OptionListProps = {
  prefixCls: PropsTypes.string,
  id: PropsTypes.string,
  options: PropsTypes.array,
  flattenOptions: PropsTypes.array,
  height: PropsTypes.number,
  itemHeight: PropsTypes.number,
  values: PropsTypes.any,
  multiple: PropsTypes.looseBool,
  open: PropsTypes.looseBool,
  defaultActiveFirstOption: PropsTypes.looseBool,
  notFoundContent: PropsTypes.any,
  menuItemSelectedIcon: PropsTypes.any,
  childrenAsData: PropsTypes.looseBool,
  searchValue: PropsTypes.string,
  virtual: PropsTypes.looseBool,
  onSelect: PropsTypes.func,
  onToggleOpen: {
    type: Function
  },
  onActiveValue: PropsTypes.func,
  onScroll: PropsTypes.func,
  onMouseenter: PropsTypes.func
};
var OptionList = defineComponent({
  name: "OptionList",
  inheritAttrs: false,
  slots: ["option"],
  setup: function setup10(props2) {
    var itemPrefixCls = computed(function() {
      return "".concat(props2.prefixCls, "-item");
    });
    var memoFlattenOptions = useMemo(function() {
      return props2.flattenOptions;
    }, [function() {
      return props2.open;
    }, function() {
      return props2.flattenOptions;
    }], function(next3) {
      return next3[0];
    });
    var listRef = createRef$1();
    var onListMouseDown = function onListMouseDown2(event) {
      event.preventDefault();
    };
    var scrollIntoView2 = function scrollIntoView3(index2) {
      if (listRef.current) {
        listRef.current.scrollTo({
          index: index2
        });
      }
    };
    var getEnabledActiveIndex = function getEnabledActiveIndex2(index2) {
      var offset4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var len = memoFlattenOptions.value.length;
      for (var i2 = 0; i2 < len; i2 += 1) {
        var current2 = (index2 + i2 * offset4 + len) % len;
        var _memoFlattenOptions$v = memoFlattenOptions.value[current2], group = _memoFlattenOptions$v.group, data80 = _memoFlattenOptions$v.data;
        if (!group && !data80.disabled) {
          return current2;
        }
      }
      return -1;
    };
    var state2 = reactive({
      activeIndex: getEnabledActiveIndex(0)
    });
    var setActive = function setActive2(index2) {
      var fromKeyboard = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      state2.activeIndex = index2;
      var info3 = {
        source: fromKeyboard ? "keyboard" : "mouse"
      };
      var flattenItem = memoFlattenOptions.value[index2];
      if (!flattenItem) {
        props2.onActiveValue(null, -1, info3);
        return;
      }
      props2.onActiveValue(flattenItem.data.value, index2, info3);
    };
    watch([function() {
      return memoFlattenOptions.value.length;
    }, function() {
      return props2.searchValue;
    }], function() {
      setActive(props2.defaultActiveFirstOption !== false ? getEnabledActiveIndex(0) : -1);
    }, {
      immediate: true
    });
    watch(function() {
      return props2.open;
    }, function() {
      if (!props2.multiple && props2.open && props2.values.size === 1) {
        var value26 = Array.from(props2.values)[0];
        var index2 = memoFlattenOptions.value.findIndex(function(_ref) {
          var data80 = _ref.data;
          return data80.value === value26;
        });
        setActive(index2);
        nextTick(function() {
          scrollIntoView2(index2);
        });
      }
      if (props2.open) {
        nextTick(function() {
          var _a;
          (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.scrollTo(void 0);
        });
      }
    }, {
      immediate: true,
      flush: "post"
    });
    var onSelectValue = function onSelectValue2(value26) {
      if (value26 !== void 0) {
        props2.onSelect(value26, {
          selected: !props2.values.has(value26)
        });
      }
      if (!props2.multiple) {
        props2.onToggleOpen(false);
      }
    };
    function renderItem(index2) {
      var item = memoFlattenOptions.value[index2];
      if (!item)
        return null;
      var itemData = item.data || {};
      var value26 = itemData.value, label = itemData.label, children = itemData.children;
      var attrs = pickAttrs(itemData, true);
      var mergedLabel = props2.childrenAsData ? children : label;
      return item ? createVNode("div", _objectSpread2$2(_objectSpread2$2({
        "aria-label": typeof mergedLabel === "string" ? mergedLabel : void 0
      }, attrs), {}, {
        "key": index2,
        "role": "option",
        "id": "".concat(props2.id, "_list_").concat(index2),
        "aria-selected": props2.values.has(value26)
      }), [value26]) : null;
    }
    return {
      memoFlattenOptions,
      renderItem,
      listRef,
      state: state2,
      onListMouseDown,
      itemPrefixCls,
      setActive,
      onSelectValue,
      onKeydown: function onKeydown2(event) {
        var which = event.which;
        switch (which) {
          case KeyCode$2.UP:
          case KeyCode$2.DOWN: {
            var offset4 = 0;
            if (which === KeyCode$2.UP) {
              offset4 = -1;
            } else if (which === KeyCode$2.DOWN) {
              offset4 = 1;
            }
            if (offset4 !== 0) {
              var nextActiveIndex = getEnabledActiveIndex(state2.activeIndex + offset4, offset4);
              scrollIntoView2(nextActiveIndex);
              setActive(nextActiveIndex, true);
            }
            break;
          }
          case KeyCode$2.ENTER: {
            var item = memoFlattenOptions.value[state2.activeIndex];
            if (item && !item.data.disabled) {
              onSelectValue(item.data.value);
            } else {
              onSelectValue(void 0);
            }
            if (props2.open) {
              event.preventDefault();
            }
            break;
          }
          case KeyCode$2.ESC: {
            props2.onToggleOpen(false);
            if (props2.open) {
              event.stopPropagation();
            }
          }
        }
      },
      onKeyup: function onKeyup() {
      },
      scrollTo: function scrollTo3(index2) {
        scrollIntoView2(index2);
      }
    };
  },
  render: function render4() {
    var renderItem = this.renderItem, listRef = this.listRef, onListMouseDown = this.onListMouseDown, itemPrefixCls = this.itemPrefixCls, setActive = this.setActive, onSelectValue = this.onSelectValue, memoFlattenOptions = this.memoFlattenOptions, $slots = this.$slots;
    var _this$$props = this.$props, id2 = _this$$props.id, childrenAsData = _this$$props.childrenAsData, values = _this$$props.values, height = _this$$props.height, itemHeight = _this$$props.itemHeight, menuItemSelectedIcon = _this$$props.menuItemSelectedIcon, notFoundContent = _this$$props.notFoundContent, virtual = _this$$props.virtual, onScroll2 = _this$$props.onScroll, onMouseenter2 = _this$$props.onMouseenter;
    var renderOption = $slots.option;
    var activeIndex = this.state.activeIndex;
    if (memoFlattenOptions.length === 0) {
      return createVNode("div", {
        "role": "listbox",
        "id": "".concat(id2, "_list"),
        "class": "".concat(itemPrefixCls, "-empty"),
        "onMousedown": onListMouseDown
      }, [notFoundContent]);
    }
    return createVNode(Fragment, null, [createVNode("div", {
      "role": "listbox",
      "id": "".concat(id2, "_list"),
      "style": {
        height: 0,
        width: 0,
        overflow: "hidden"
      }
    }, [renderItem(activeIndex - 1), renderItem(activeIndex), renderItem(activeIndex + 1)]), createVNode(List$4, {
      "itemKey": "key",
      "ref": listRef,
      "data": memoFlattenOptions,
      "height": height,
      "itemHeight": itemHeight,
      "fullHeight": false,
      "onMousedown": onListMouseDown,
      "onScroll": onScroll2,
      "virtual": virtual,
      "onMouseenter": onMouseenter2,
      "children": function children(_ref2, itemIndex) {
        var _classNames;
        var group = _ref2.group, groupOption = _ref2.groupOption, data80 = _ref2.data;
        var label = data80.label, key2 = data80.key;
        if (group) {
          return createVNode("div", {
            "class": classNames(itemPrefixCls, "".concat(itemPrefixCls, "-group"))
          }, [renderOption ? renderOption(data80) : label !== void 0 ? label : key2]);
        }
        var disabled = data80.disabled, value26 = data80.value, title2 = data80.title, children2 = data80.children, style3 = data80.style, cls = data80.class, className = data80.className, otherProps = __rest$V(data80, ["disabled", "value", "title", "children", "style", "class", "className"]);
        var selected = values.has(value26);
        var optionPrefixCls = "".concat(itemPrefixCls, "-option");
        var optionClassName = classNames(itemPrefixCls, optionPrefixCls, cls, className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(optionPrefixCls, "-grouped"), groupOption), _defineProperty$U(_classNames, "".concat(optionPrefixCls, "-active"), activeIndex === itemIndex && !disabled), _defineProperty$U(_classNames, "".concat(optionPrefixCls, "-disabled"), disabled), _defineProperty$U(_classNames, "".concat(optionPrefixCls, "-selected"), selected), _classNames));
        var mergedLabel = childrenAsData ? children2 : label;
        var iconVisible = !menuItemSelectedIcon || typeof menuItemSelectedIcon === "function" || selected;
        var content = mergedLabel || value26;
        var optionTitle = typeof content === "string" || typeof content === "number" ? content.toString() : void 0;
        if (title2 !== void 0) {
          optionTitle = title2;
        }
        return createVNode("div", _objectSpread2$2(_objectSpread2$2({}, otherProps), {}, {
          "aria-selected": selected,
          "class": optionClassName,
          "title": optionTitle,
          "onMousemove": function onMousemove(e2) {
            if (otherProps.onMousemove) {
              otherProps.onMousemove(e2);
            }
            if (activeIndex === itemIndex || disabled) {
              return;
            }
            setActive(itemIndex);
          },
          "onClick": function onClick7(e2) {
            if (!disabled) {
              onSelectValue(value26);
            }
            if (otherProps.onClick) {
              otherProps.onClick(e2);
            }
          },
          "style": style3
        }), [createVNode("div", {
          "class": "".concat(optionPrefixCls, "-content")
        }, [renderOption ? renderOption(data80) : content]), isValidElement(menuItemSelectedIcon) || selected, iconVisible && createVNode(TransBtn$1, {
          "class": "".concat(itemPrefixCls, "-option-state"),
          "customizeIcon": menuItemSelectedIcon,
          "customizeIconProps": {
            isSelected: selected
          }
        }, {
          default: function _default8() {
            return [selected ? "\u2713" : null];
          }
        })]);
      }
    }, null)]);
  }
});
OptionList.props = OptionListProps;
var SelectOptionList = OptionList;
var Option$4 = function Option2() {
  return null;
};
Option$4.isSelectOption = true;
Option$4.displayName = "ASelectOption";
var Option$5 = Option$4;
var OptGroup$2 = function OptGroup2() {
  return null;
};
OptGroup$2.isSelectOptGroup = true;
OptGroup$2.displayName = "ASelectOptGroup";
var OptGroup$3 = OptGroup$2;
var __rest$U = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function convertNodeToOption(node) {
  var _a = node, key2 = _a.key, children = _a.children, _b = _a.props, value26 = _b.value, disabled = _b.disabled, restProps = __rest$U(_b, ["value", "disabled"]);
  var child = children && children.default ? children.default() : void 0;
  return _extends$1({
    key: key2,
    value: value26 !== void 0 ? value26 : key2,
    children: child,
    disabled: disabled || disabled === ""
  }, restProps);
}
function convertChildrenToData$1(nodes) {
  var optionOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var dd = flattenChildren(nodes).map(function(node, index2) {
    var _a;
    if (!isValidElement(node) || !node.type) {
      return null;
    }
    var isSelectOptGroup = node.type.isSelectOptGroup, key2 = node.key, children = node.children, props2 = node.props;
    if (optionOnly || !isSelectOptGroup) {
      return convertNodeToOption(node);
    }
    var child = children && children.default ? children.default() : void 0;
    var label = (props2 === null || props2 === void 0 ? void 0 : props2.label) || ((_a = children.label) === null || _a === void 0 ? void 0 : _a.call(children)) || key2;
    return _extends$1(_extends$1({
      key: "__RC_SELECT_GRP__".concat(key2 === null ? index2 : String(key2), "__")
    }, props2), {
      label,
      options: convertChildrenToData$1(child || [])
    });
  }).filter(function(data80) {
    return data80;
  });
  return dd;
}
function _toArray$1(arr) {
  return _arrayWithHoles$2(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableRest$2();
}
function toArray$5(value26) {
  if (Array.isArray(value26)) {
    return value26;
  }
  return value26 !== void 0 ? [value26] : [];
}
function toInnerValue(value26, _ref) {
  var labelInValue = _ref.labelInValue, combobox = _ref.combobox;
  var valueMap = new Map();
  if (value26 === void 0 || value26 === "" && combobox) {
    return [[], valueMap];
  }
  var values = Array.isArray(value26) ? value26 : [value26];
  var rawValues = values;
  if (labelInValue) {
    rawValues = values.filter(function(item) {
      return item !== null;
    }).map(function(itemValue) {
      var key2 = itemValue.key, val = itemValue.value;
      var finalVal = val !== void 0 ? val : key2;
      valueMap.set(finalVal, itemValue);
      return finalVal;
    });
  }
  return [rawValues, valueMap];
}
function toOuterValues(valueList, _ref2) {
  var optionLabelProp = _ref2.optionLabelProp, labelInValue = _ref2.labelInValue, prevValueMap = _ref2.prevValueMap, options2 = _ref2.options, getLabeledValue3 = _ref2.getLabeledValue;
  var values = valueList;
  if (labelInValue) {
    values = values.map(function(val) {
      return getLabeledValue3(val, {
        options: options2,
        prevValueMap,
        labelInValue,
        optionLabelProp
      });
    });
  }
  return values;
}
function removeLastEnabledValue(measureValues, values) {
  var newValues = _toConsumableArray(values);
  var removeIndex;
  for (removeIndex = measureValues.length - 1; removeIndex >= 0; removeIndex -= 1) {
    if (!measureValues[removeIndex].disabled) {
      break;
    }
  }
  var removedValue = null;
  if (removeIndex !== -1) {
    removedValue = newValues[removeIndex];
    newValues.splice(removeIndex, 1);
  }
  return {
    values: newValues,
    removedValue
  };
}
var isClient = typeof window !== "undefined" && window.document && window.document.documentElement;
var isBrowserClient = isClient;
var uuid$2 = 0;
function getUUID() {
  var retId;
  if (isBrowserClient) {
    retId = uuid$2;
    uuid$2 += 1;
  } else {
    retId = "TEST_OR_SSR";
  }
  return retId;
}
function getKey$1(data80, index2) {
  var key2 = data80.key;
  var value26;
  if ("value" in data80) {
    value26 = data80.value;
  }
  if (key2 !== null && key2 !== void 0) {
    return key2;
  }
  if (value26 !== void 0) {
    return value26;
  }
  return "rc-index-key-".concat(index2);
}
function flattenOptions(options2) {
  var flattenList = [];
  function dig(list, isGroupOption) {
    list.forEach(function(data80) {
      if (isGroupOption || !("options" in data80)) {
        flattenList.push({
          key: getKey$1(data80, flattenList.length),
          groupOption: isGroupOption,
          data: data80
        });
      } else {
        flattenList.push({
          key: getKey$1(data80, flattenList.length),
          group: true,
          data: data80
        });
        dig(data80.options, true);
      }
    });
  }
  dig(options2, false);
  return flattenList;
}
function injectPropsWithOption(option) {
  var newOption = _extends$1({}, option);
  if (!("props" in newOption)) {
    Object.defineProperty(newOption, "props", {
      get: function get2() {
        return newOption;
      }
    });
  }
  return newOption;
}
function findValueOption(values, options2) {
  var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref$prevValueOptions = _ref.prevValueOptions, prevValueOptions = _ref$prevValueOptions === void 0 ? [] : _ref$prevValueOptions;
  var optionMap = new Map();
  options2.forEach(function(flattenItem) {
    if (!flattenItem.group) {
      var data80 = flattenItem.data;
      optionMap.set(data80.value, data80);
    }
  });
  return values.map(function(val) {
    var option = optionMap.get(val);
    if (!option) {
      option = _extends$1({}, prevValueOptions.find(function(opt) {
        return opt._INTERNAL_OPTION_VALUE_ === val;
      }));
    }
    return injectPropsWithOption(option);
  });
}
var getLabeledValue = function getLabeledValue2(value26, _ref2) {
  var options2 = _ref2.options, prevValueMap = _ref2.prevValueMap, labelInValue = _ref2.labelInValue, optionLabelProp = _ref2.optionLabelProp;
  var item = findValueOption([value26], options2)[0];
  var result = {
    value: value26
  };
  var prevValItem = labelInValue ? prevValueMap.get(value26) : void 0;
  if (prevValItem && _typeof$2(prevValItem) === "object" && "label" in prevValItem) {
    result.label = prevValItem.label;
    if (item && typeof prevValItem.label === "string" && typeof item[optionLabelProp] === "string" && prevValItem.label.trim() !== item[optionLabelProp].trim())
      ;
  } else if (item && optionLabelProp in item) {
    if (Array.isArray(item[optionLabelProp])) {
      result.label = isVNode(item[optionLabelProp][0]) ? cloneVNode(item[optionLabelProp][0]) : item[optionLabelProp];
    } else {
      result.label = item[optionLabelProp];
    }
  } else {
    result.label = value26;
    result.isCacheable = true;
  }
  result.key = result.value;
  return result;
};
function toRawString(content) {
  return toArray$5(content).map(function(item) {
    var _a, _b;
    if (isVNode(item)) {
      return ((_a = item === null || item === void 0 ? void 0 : item.el) === null || _a === void 0 ? void 0 : _a.innerText) || ((_b = item === null || item === void 0 ? void 0 : item.el) === null || _b === void 0 ? void 0 : _b.wholeText);
    } else {
      return item;
    }
  }).join("");
}
function getFilterFunction(optionFilterProp) {
  return function(searchValue2, option) {
    var lowerSearchText = searchValue2.toLowerCase();
    if ("options" in option) {
      return toRawString(option.label).toLowerCase().includes(lowerSearchText);
    }
    var rawValue = option[optionFilterProp];
    var value26 = toRawString(rawValue).toLowerCase();
    return value26.includes(lowerSearchText);
  };
}
function filterOptions(searchValue2, options2, _ref3) {
  var optionFilterProp = _ref3.optionFilterProp, filterOption2 = _ref3.filterOption;
  var filteredOptions = [];
  var filterFunc;
  if (filterOption2 === false) {
    return _toConsumableArray(options2);
  }
  if (typeof filterOption2 === "function") {
    filterFunc = filterOption2;
  } else {
    filterFunc = getFilterFunction(optionFilterProp);
  }
  options2.forEach(function(item) {
    if ("options" in item) {
      var matchGroup = filterFunc(searchValue2, item);
      if (matchGroup) {
        filteredOptions.push(item);
      } else {
        var subOptions = item.options.filter(function(subItem) {
          return filterFunc(searchValue2, subItem);
        });
        if (subOptions.length) {
          filteredOptions.push(_extends$1(_extends$1({}, item), {
            options: subOptions
          }));
        }
      }
      return;
    }
    if (filterFunc(searchValue2, injectPropsWithOption(item))) {
      filteredOptions.push(item);
    }
  });
  return filteredOptions;
}
function getSeparatedContent(text, tokens2) {
  if (!tokens2 || !tokens2.length) {
    return null;
  }
  var match5 = false;
  function separate(str, _ref4) {
    var _ref5 = _toArray$1(_ref4), token2 = _ref5[0], restTokens = _ref5.slice(1);
    if (!token2) {
      return [str];
    }
    var list2 = str.split(token2);
    match5 = match5 || list2.length > 1;
    return list2.reduce(function(prevList, unitStr) {
      return [].concat(_toConsumableArray(prevList), _toConsumableArray(separate(unitStr, restTokens)));
    }, []).filter(function(unit) {
      return unit;
    });
  }
  var list = separate(text, tokens2);
  return match5 ? list : null;
}
function isValueDisabled(value26, options2) {
  var option = findValueOption([value26], options2)[0];
  return option.disabled;
}
function fillOptionsWithMissingValue(options2, value26, optionLabelProp, labelInValue) {
  var values = toArray$5(value26).slice().sort();
  var cloneOptions = _toConsumableArray(options2);
  var optionValues = new Set();
  options2.forEach(function(opt) {
    if (opt.options) {
      opt.options.forEach(function(subOpt) {
        optionValues.add(subOpt.value);
      });
    } else {
      optionValues.add(opt.value);
    }
  });
  values.forEach(function(item) {
    var val = labelInValue ? item.value : item;
    if (!optionValues.has(val)) {
      var _ref6;
      cloneOptions.push(labelInValue ? (_ref6 = {}, _defineProperty$U(_ref6, optionLabelProp, item.label), _defineProperty$U(_ref6, "value", val), _ref6) : {
        value: val
      });
    }
  });
  return cloneOptions;
}
function cloneElement(vnode) {
  var nodeProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var override = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var mergeRef = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var ele = vnode;
  if (Array.isArray(vnode)) {
    ele = filterEmpty(vnode)[0];
  }
  if (!ele) {
    return null;
  }
  var node = cloneVNode(ele, nodeProps, mergeRef);
  node.props = override ? _extends$1(_extends$1({}, node.props), nodeProps) : node.props;
  warning$4(_typeof$2(node.props.class) !== "object", "class must be string");
  return node;
}
function onCompositionStart(e2) {
  e2.target.composing = true;
}
function onCompositionEnd(e2) {
  if (!e2.target.composing)
    return;
  e2.target.composing = false;
  trigger(e2.target, "input");
}
function trigger(el, type3) {
  var e2 = document.createEvent("HTMLEvents");
  e2.initEvent(type3, true, true);
  el.dispatchEvent(e2);
}
function addEventListener$2(el, event, handler8, options2) {
  el.addEventListener(event, handler8, options2);
}
var antInput = {
  created: function created(el, binding) {
    if (!binding.modifiers || !binding.modifiers.lazy) {
      addEventListener$2(el, "compositionstart", onCompositionStart);
      addEventListener$2(el, "compositionend", onCompositionEnd);
      addEventListener$2(el, "change", onCompositionEnd);
    }
  }
};
var antInput$1 = antInput;
var Input$1 = defineComponent({
  name: "Input",
  inheritAttrs: false,
  props: {
    inputRef: PropsTypes.any,
    prefixCls: PropsTypes.string,
    id: PropsTypes.string,
    inputElement: PropsTypes.any,
    disabled: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    autocomplete: PropsTypes.string,
    editable: PropsTypes.looseBool,
    accessibilityIndex: PropsTypes.number,
    value: PropsTypes.string,
    open: PropsTypes.looseBool,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    attrs: PropsTypes.object,
    onKeydown: PropsTypes.func,
    onMousedown: PropsTypes.func,
    onChange: PropsTypes.func,
    onPaste: PropsTypes.func,
    onCompositionstart: PropsTypes.func,
    onCompositionend: PropsTypes.func,
    onFocus: PropsTypes.func,
    onBlur: PropsTypes.func
  },
  setup: function setup11(props2) {
    return {
      blurTimeout: null,
      VCSelectContainerEvent: inject("VCSelectContainerEvent")
    };
  },
  render: function render5() {
    var _this = this;
    var _a;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, id2 = _this$$props.id, inputElement = _this$$props.inputElement, disabled = _this$$props.disabled, tabindex = _this$$props.tabindex, autofocus = _this$$props.autofocus, autocomplete = _this$$props.autocomplete, editable = _this$$props.editable, accessibilityIndex = _this$$props.accessibilityIndex, value26 = _this$$props.value, _onKeydown = _this$$props.onKeydown, _onMousedown = _this$$props.onMousedown, onChange9 = _this$$props.onChange, onPaste = _this$$props.onPaste, _onCompositionstart = _this$$props.onCompositionstart, _onCompositionend = _this$$props.onCompositionend, _onFocus = _this$$props.onFocus, _onBlur = _this$$props.onBlur, open6 = _this$$props.open, inputRef = _this$$props.inputRef, attrs = _this$$props.attrs;
    var inputNode = inputElement || withDirectives(createVNode("input", null, null), [[antInput$1]]);
    var inputProps2 = inputNode.props || {};
    var onOriginKeyDown = inputProps2.onKeydown, onOriginInput = inputProps2.onInput, onOriginFocus = inputProps2.onFocus, onOriginBlur = inputProps2.onBlur, onOriginMouseDown = inputProps2.onMousedown, onOriginCompositionStart = inputProps2.onCompositionstart, onOriginCompositionEnd = inputProps2.onCompositionend, style3 = inputProps2.style;
    inputNode = cloneElement(inputNode, _extends$1(_extends$1(_extends$1({
      id: id2,
      ref: inputRef,
      disabled,
      tabindex,
      autocomplete: autocomplete || "off",
      autofocus,
      class: classNames("".concat(prefixCls2, "-selection-search-input"), (_a = inputNode === null || inputNode === void 0 ? void 0 : inputNode.props) === null || _a === void 0 ? void 0 : _a.className),
      style: _extends$1(_extends$1({}, style3), {
        opacity: editable ? null : 0
      }),
      role: "combobox",
      "aria-expanded": open6,
      "aria-haspopup": "listbox",
      "aria-owns": "".concat(id2, "_list"),
      "aria-autocomplete": "list",
      "aria-controls": "".concat(id2, "_list"),
      "aria-activedescendant": "".concat(id2, "_list_").concat(accessibilityIndex)
    }, attrs), {
      value: editable ? value26 : "",
      readonly: !editable,
      unselectable: !editable ? "on" : null,
      onKeydown: function onKeydown2(event) {
        _onKeydown(event);
        if (onOriginKeyDown) {
          onOriginKeyDown(event);
        }
      },
      onMousedown: function onMousedown2(event) {
        _onMousedown(event);
        if (onOriginMouseDown) {
          onOriginMouseDown(event);
        }
      },
      onInput: function onInput(event) {
        onChange9(event);
        if (onOriginInput) {
          onOriginInput(event);
        }
      },
      onCompositionstart: function onCompositionstart2(event) {
        _onCompositionstart(event);
        if (onOriginCompositionStart) {
          onOriginCompositionStart(event);
        }
      },
      onCompositionend: function onCompositionend2(event) {
        _onCompositionend(event);
        if (onOriginCompositionEnd) {
          onOriginCompositionEnd(event);
        }
      },
      onPaste,
      onFocus: function onFocus6() {
        var _a2;
        clearTimeout(_this.blurTimeout);
        onOriginFocus && onOriginFocus(arguments.length <= 0 ? void 0 : arguments[0]);
        _onFocus && _onFocus(arguments.length <= 0 ? void 0 : arguments[0]);
        (_a2 = _this.VCSelectContainerEvent) === null || _a2 === void 0 ? void 0 : _a2.focus(arguments.length <= 0 ? void 0 : arguments[0]);
      },
      onBlur: function onBlur7() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this.blurTimeout = setTimeout(function() {
          var _a2;
          onOriginBlur && onOriginBlur(args[0]);
          _onBlur && _onBlur(args[0]);
          (_a2 = _this.VCSelectContainerEvent) === null || _a2 === void 0 ? void 0 : _a2.blur(args[0]);
        }, 200);
      }
    }), inputNode.type === "textarea" ? {} : {
      type: "search"
    }), true, true);
    return inputNode;
  }
});
var Input$2 = Input$1;
var OverflowContextProviderKey = Symbol("OverflowContextProviderKey");
var OverflowContextProvider = defineComponent({
  name: "OverflowContextProvider",
  inheritAttrs: false,
  props: {
    value: {
      type: Object
    }
  },
  setup: function setup12(props2, _ref) {
    var slots = _ref.slots;
    provide(OverflowContextProviderKey, computed(function() {
      return props2.value;
    }));
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
var useInjectOverflowContext = function useInjectOverflowContext2() {
  return inject(OverflowContextProviderKey, computed(function() {
    return null;
  }));
};
var __rest$T = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var UNDEFINED = void 0;
var Item$1 = defineComponent({
  name: "Item",
  props: {
    prefixCls: String,
    item: PropsTypes.any,
    renderItem: Function,
    responsive: Boolean,
    itemKey: {
      type: [String, Number]
    },
    registerSize: Function,
    display: Boolean,
    order: Number,
    component: PropsTypes.any,
    invalidate: Boolean
  },
  setup: function setup13(props2, _ref) {
    var slots = _ref.slots, expose = _ref.expose;
    var mergedHidden = computed(function() {
      return props2.responsive && !props2.display;
    });
    var itemNodeRef = ref();
    expose({
      itemNodeRef
    });
    function internalRegisterSize(width) {
      props2.registerSize(props2.itemKey, width);
    }
    onUnmounted(function() {
      internalRegisterSize(null);
    });
    return function() {
      var _a;
      var prefixCls2 = props2.prefixCls, invalidate = props2.invalidate, item = props2.item, renderItem = props2.renderItem, responsive = props2.responsive;
      props2.registerSize;
      props2.itemKey;
      props2.display;
      var order = props2.order, _props$component = props2.component, Component = _props$component === void 0 ? "div" : _props$component, restProps = __rest$T(props2, ["prefixCls", "invalidate", "item", "renderItem", "responsive", "registerSize", "itemKey", "display", "order", "component"]);
      var children = (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
      var childNode = renderItem && item !== UNDEFINED ? renderItem(item) : children;
      var overflowStyle;
      if (!invalidate) {
        overflowStyle = {
          opacity: mergedHidden.value ? 0 : 1,
          height: mergedHidden.value ? 0 : UNDEFINED,
          overflowY: mergedHidden.value ? "hidden" : UNDEFINED,
          order: responsive ? order : UNDEFINED,
          pointerEvents: mergedHidden.value ? "none" : UNDEFINED,
          position: mergedHidden.value ? "absolute" : UNDEFINED
        };
      }
      var overflowProps = {};
      if (mergedHidden.value) {
        overflowProps["aria-hidden"] = true;
      }
      var itemNode = createVNode(Component, _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({
        "class": classNames(!invalidate && prefixCls2),
        "style": overflowStyle
      }, overflowProps), restProps), {}, {
        "ref": itemNodeRef
      }), {
        default: function _default8() {
          return [childNode];
        }
      });
      return createVNode(ResizeObserver, {
        "disabled": !responsive,
        "onResize": function onResize(_ref2) {
          var offsetWidth = _ref2.offsetWidth;
          internalRegisterSize(offsetWidth);
        }
      }, {
        default: function _default8() {
          return [itemNode];
        }
      });
    };
  }
});
var __rest$S = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var RawItem = defineComponent({
  name: "RawItem",
  inheritAttrs: false,
  props: {
    component: PropsTypes.any,
    title: PropsTypes.any
  },
  setup: function setup14(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var context2 = useInjectOverflowContext();
    return function() {
      var _a, _b;
      if (!context2.value) {
        var _props$component = props2.component, Component = _props$component === void 0 ? "div" : _props$component, _restProps = __rest$S(props2, ["component"]);
        return createVNode(Component, _objectSpread2$2(_objectSpread2$2({}, _restProps), attrs), {
          default: function _default8() {
            return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
          }
        });
      }
      var _c = context2.value, contextClassName = _c.className, restContext = __rest$S(_c, ["className"]);
      var className = attrs.class, restProps = __rest$S(attrs, ["class"]);
      return createVNode(OverflowContextProvider, {
        "value": null
      }, {
        default: function _default8() {
          return [createVNode(Item$1, _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({
            "class": classNames(contextClassName, className)
          }, restContext), restProps), props2), {
            default: function _default9() {
              return [(_b = slots.default) === null || _b === void 0 ? void 0 : _b.call(slots)];
            }
          })];
        }
      });
    };
  }
});
var __rest$R = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var RESPONSIVE = "responsive";
var INVALIDATE = "invalidate";
function defaultRenderRest(omittedItems) {
  return "+ ".concat(omittedItems.length, " ...");
}
var Overflow = defineComponent({
  name: "Overflow",
  inheritAttrs: false,
  props: {
    prefixCls: String,
    data: Array,
    itemKey: [String, Number, Function],
    itemWidth: {
      type: Number,
      default: 10
    },
    renderItem: Function,
    renderRawItem: Function,
    maxCount: [Number, String],
    renderRest: Function,
    renderRawRest: Function,
    suffix: PropsTypes.any,
    component: String,
    itemComponent: PropsTypes.any,
    onVisibleChange: Function,
    ssr: String
  },
  emits: ["visibleChange"],
  setup: function setup15(props2, _ref) {
    var attrs = _ref.attrs, emit = _ref.emit;
    var fullySSR = computed(function() {
      return props2.ssr === "full";
    });
    var containerWidth = ref(null);
    var mergedContainerWidth = computed(function() {
      return containerWidth.value || 0;
    });
    var itemWidths = ref(new Map());
    var prevRestWidth = ref(0);
    var restWidth = ref(0);
    var suffixWidth = ref(0);
    var suffixFixedStart = ref(null);
    var displayCount = ref(null);
    var mergedDisplayCount = computed(function() {
      if (displayCount.value === null && fullySSR.value) {
        return Number.MAX_SAFE_INTEGER;
      }
      return displayCount.value || 0;
    });
    var restReady = ref(false);
    var itemPrefixCls = computed(function() {
      return "".concat(props2.prefixCls, "-item");
    });
    var mergedRestWidth = computed(function() {
      return Math.max(prevRestWidth.value, restWidth.value);
    });
    var isResponsive = computed(function() {
      return !!(props2.data.length && props2.maxCount === RESPONSIVE);
    });
    var invalidate = computed(function() {
      return props2.maxCount === INVALIDATE;
    });
    var showRest = computed(function() {
      return isResponsive.value || typeof props2.maxCount === "number" && props2.data.length > props2.maxCount;
    });
    var mergedData = computed(function() {
      var items = props2.data;
      if (isResponsive.value) {
        if (containerWidth.value === null && fullySSR.value) {
          items = props2.data;
        } else {
          items = props2.data.slice(0, Math.min(props2.data.length, mergedContainerWidth.value / props2.itemWidth));
        }
      } else if (typeof props2.maxCount === "number") {
        items = props2.data.slice(0, props2.maxCount);
      }
      return items;
    });
    var omittedItems = computed(function() {
      if (isResponsive.value) {
        return props2.data.slice(mergedDisplayCount.value + 1);
      }
      return props2.data.slice(mergedData.value.length);
    });
    var getKey4 = function getKey5(item, index2) {
      var _a, _b;
      if (typeof props2.itemKey === "function") {
        return props2.itemKey(item);
      }
      return (_b = props2.itemKey && ((_a = item) === null || _a === void 0 ? void 0 : _a[props2.itemKey])) !== null && _b !== void 0 ? _b : index2;
    };
    var mergedRenderItem = computed(function() {
      return props2.renderItem || function(item) {
        return item;
      };
    });
    var updateDisplayCount = function updateDisplayCount2(count, notReady) {
      displayCount.value = count;
      if (!notReady) {
        restReady.value = count < props2.data.length - 1;
        emit("visibleChange", count);
      }
    };
    var onOverflowResize = function onOverflowResize2(_2, element) {
      containerWidth.value = element.clientWidth;
    };
    var registerSize = function registerSize2(key2, width) {
      var clone4 = new Map(itemWidths.value);
      if (width === null) {
        clone4.delete(key2);
      } else {
        clone4.set(key2, width);
      }
      itemWidths.value = clone4;
    };
    var registerOverflowSize = function registerOverflowSize2(_2, width) {
      prevRestWidth.value = restWidth.value;
      restWidth.value = width;
    };
    var registerSuffixSize = function registerSuffixSize2(_2, width) {
      suffixWidth.value = width;
    };
    var getItemWidth = function getItemWidth2(index2) {
      return itemWidths.value.get(getKey4(mergedData.value[index2], index2));
    };
    watch([mergedContainerWidth, itemWidths, restWidth, suffixWidth, function() {
      return props2.itemKey;
    }, mergedData], function() {
      if (mergedContainerWidth.value && mergedRestWidth.value && mergedData.value) {
        var totalWidth = suffixWidth.value;
        var len = mergedData.value.length;
        var lastIndex = len - 1;
        if (!len) {
          updateDisplayCount(0);
          suffixFixedStart.value = null;
          return;
        }
        for (var i2 = 0; i2 < len; i2 += 1) {
          var currentItemWidth = getItemWidth(i2);
          if (currentItemWidth === void 0) {
            updateDisplayCount(i2 - 1, true);
            break;
          }
          totalWidth += currentItemWidth;
          if (lastIndex === 0 && totalWidth <= mergedContainerWidth.value || i2 === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth.value) {
            updateDisplayCount(lastIndex);
            suffixFixedStart.value = null;
            break;
          } else if (totalWidth + mergedRestWidth.value > mergedContainerWidth.value) {
            updateDisplayCount(i2 - 1);
            suffixFixedStart.value = totalWidth - currentItemWidth - suffixWidth.value + restWidth.value;
            break;
          }
        }
        if (props2.suffix && getItemWidth(0) + suffixWidth.value > mergedContainerWidth.value) {
          suffixFixedStart.value = null;
        }
      }
    });
    return function() {
      var displayRest = restReady.value && !!omittedItems.value.length;
      var itemComponent = props2.itemComponent, renderRawItem = props2.renderRawItem, renderRawRest = props2.renderRawRest, renderRest = props2.renderRest, _props$prefixCls = props2.prefixCls, prefixCls2 = _props$prefixCls === void 0 ? "rc-overflow" : _props$prefixCls, suffix = props2.suffix, _props$component = props2.component, Component = _props$component === void 0 ? "div" : _props$component;
      var className = attrs.class, style3 = attrs.style, restAttrs = __rest$R(attrs, ["class", "style"]);
      var suffixStyle = {};
      if (suffixFixedStart.value !== null && isResponsive.value) {
        suffixStyle = {
          position: "absolute",
          left: "".concat(suffixFixedStart.value, "px"),
          top: 0
        };
      }
      var itemSharedProps = {
        prefixCls: itemPrefixCls.value,
        responsive: isResponsive.value,
        component: itemComponent,
        invalidate: invalidate.value
      };
      var internalRenderItemNode = renderRawItem ? function(item, index2) {
        var key2 = getKey4(item, index2);
        return createVNode(OverflowContextProvider, {
          "key": key2,
          "value": _extends$1(_extends$1({}, itemSharedProps), {
            order: index2,
            item,
            itemKey: key2,
            registerSize,
            display: index2 <= mergedDisplayCount.value
          })
        }, {
          default: function _default8() {
            return [renderRawItem(item, index2)];
          }
        });
      } : function(item, index2) {
        var key2 = getKey4(item, index2);
        return createVNode(Item$1, _objectSpread2$2(_objectSpread2$2({}, itemSharedProps), {}, {
          "order": index2,
          "key": key2,
          "item": item,
          "renderItem": mergedRenderItem.value,
          "itemKey": key2,
          "registerSize": registerSize,
          "display": index2 <= mergedDisplayCount.value
        }), null);
      };
      var restNode;
      var restContextProps = {
        order: displayRest ? mergedDisplayCount.value : Number.MAX_SAFE_INTEGER,
        className: "".concat(itemPrefixCls.value, "-rest"),
        registerSize: registerOverflowSize,
        display: displayRest
      };
      if (!renderRawRest) {
        var mergedRenderRest = renderRest || defaultRenderRest;
        restNode = createVNode(Item$1, _objectSpread2$2(_objectSpread2$2({}, itemSharedProps), restContextProps), {
          default: function _default8() {
            return [typeof mergedRenderRest === "function" ? mergedRenderRest(omittedItems.value) : mergedRenderRest];
          }
        });
      } else if (renderRawRest) {
        restNode = createVNode(OverflowContextProvider, {
          "value": _extends$1(_extends$1({}, itemSharedProps), restContextProps)
        }, {
          default: function _default8() {
            return [renderRawRest(omittedItems.value)];
          }
        });
      }
      var overflowNode = createVNode(Component, _objectSpread2$2({
        "class": classNames(!invalidate.value && prefixCls2, className),
        "style": style3
      }, restAttrs), {
        default: function _default8() {
          return [mergedData.value.map(internalRenderItemNode), showRest.value ? restNode : null, suffix && createVNode(Item$1, _objectSpread2$2(_objectSpread2$2({}, itemSharedProps), {}, {
            "order": mergedDisplayCount.value,
            "class": "".concat(itemPrefixCls.value, "-suffix"),
            "registerSize": registerSuffixSize,
            "display": true,
            "style": suffixStyle
          }), {
            default: function _default9() {
              return [suffix];
            }
          })];
        }
      });
      return createVNode(ResizeObserver, {
        "disabled": !isResponsive.value,
        "onResize": onOverflowResize
      }, {
        default: function _default8() {
          return [overflowNode];
        }
      });
    };
  }
});
Overflow.Item = RawItem;
Overflow.RESPONSIVE = RESPONSIVE;
Overflow.INVALIDATE = INVALIDATE;
var Overflow$1 = Overflow;
var props$4 = {
  id: PropsTypes.string,
  prefixCls: PropsTypes.string,
  values: PropsTypes.array,
  open: PropsTypes.looseBool,
  searchValue: PropsTypes.string,
  inputRef: PropsTypes.any,
  placeholder: PropsTypes.any,
  disabled: PropsTypes.looseBool,
  mode: PropsTypes.string,
  showSearch: PropsTypes.looseBool,
  autofocus: PropsTypes.looseBool,
  autocomplete: PropsTypes.string,
  accessibilityIndex: PropsTypes.number,
  tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  removeIcon: PropsTypes.VNodeChild,
  choiceTransitionName: PropsTypes.string,
  maxTagCount: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  maxTagTextLength: PropsTypes.number,
  maxTagPlaceholder: PropsTypes.any.def(function() {
    return function(omittedValues) {
      return "+ ".concat(omittedValues.length, " ...");
    };
  }),
  tagRender: PropsTypes.func,
  onToggleOpen: {
    type: Function
  },
  onSelect: PropsTypes.func,
  onInputChange: PropsTypes.func,
  onInputPaste: PropsTypes.func,
  onInputKeyDown: PropsTypes.func,
  onInputMouseDown: PropsTypes.func,
  onInputCompositionStart: PropsTypes.func,
  onInputCompositionEnd: PropsTypes.func
};
var onPreventMouseDown = function onPreventMouseDown2(event) {
  event.preventDefault();
  event.stopPropagation();
};
var SelectSelector = defineComponent({
  name: "MultipleSelectSelector",
  inheritAttrs: false,
  props: props$4,
  setup: function setup16(props2) {
    var measureRef = ref();
    var inputWidth = ref(0);
    var focused = ref(false);
    var selectionPrefixCls = computed(function() {
      return "".concat(props2.prefixCls, "-selection");
    });
    var inputValue = computed(function() {
      return props2.open || props2.mode === "tags" ? props2.searchValue : "";
    });
    var inputEditable = computed(function() {
      return props2.mode === "tags" || props2.showSearch && (props2.open || focused.value);
    });
    onMounted(function() {
      watch(inputValue, function() {
        inputWidth.value = measureRef.value.scrollWidth;
      }, {
        flush: "post",
        immediate: true
      });
    });
    function defaultRenderSelector(content, itemDisabled, closable, onClose) {
      return createVNode("span", {
        "class": classNames("".concat(selectionPrefixCls.value, "-item"), _defineProperty$U({}, "".concat(selectionPrefixCls.value, "-item-disabled"), itemDisabled))
      }, [createVNode("span", {
        "class": "".concat(selectionPrefixCls.value, "-item-content")
      }, [content]), closable && createVNode(TransBtn$1, {
        "class": "".concat(selectionPrefixCls.value, "-item-remove"),
        "onMousedown": onPreventMouseDown,
        "onClick": onClose,
        "customizeIcon": props2.removeIcon
      }, {
        default: function _default8() {
          return [createTextVNode("\xD7")];
        }
      })]);
    }
    function customizeRenderSelector(value26, content, itemDisabled, closable, onClose) {
      var onMouseDown3 = function onMouseDown4(e2) {
        onPreventMouseDown(e2);
        props2.onToggleOpen(!open);
      };
      return createVNode("span", {
        "onMousedown": onMouseDown3
      }, [props2.tagRender({
        label: content,
        value: value26,
        disabled: itemDisabled,
        closable,
        onClose
      })]);
    }
    function renderItem(_ref) {
      var itemDisabled = _ref.disabled, label = _ref.label, value26 = _ref.value;
      var closable = !props2.disabled && !itemDisabled;
      var displayLabel = label;
      if (typeof props2.maxTagTextLength === "number") {
        if (typeof label === "string" || typeof label === "number") {
          var strLabel = String(displayLabel);
          if (strLabel.length > props2.maxTagTextLength) {
            displayLabel = "".concat(strLabel.slice(0, props2.maxTagTextLength), "...");
          }
        }
      }
      var onClose = function onClose2(event) {
        if (event)
          event.stopPropagation();
        props2.onSelect(value26, {
          selected: false
        });
      };
      return typeof props2.tagRender === "function" ? customizeRenderSelector(value26, displayLabel, itemDisabled, closable, onClose) : defaultRenderSelector(displayLabel, itemDisabled, closable, onClose);
    }
    function renderRest(omittedValues) {
      var _props$maxTagPlacehol = props2.maxTagPlaceholder, maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function(omittedValues2) {
        return "+ ".concat(omittedValues2.length, " ...");
      } : _props$maxTagPlacehol;
      var content = typeof maxTagPlaceholder === "function" ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
      return defaultRenderSelector(content, false);
    }
    return function() {
      var id2 = props2.id, prefixCls2 = props2.prefixCls, values = props2.values, open6 = props2.open, inputRef = props2.inputRef, placeholder = props2.placeholder, disabled = props2.disabled, autofocus = props2.autofocus, autocomplete = props2.autocomplete, accessibilityIndex = props2.accessibilityIndex, tabindex = props2.tabindex, onInputChange3 = props2.onInputChange, onInputPaste = props2.onInputPaste, onInputKeyDown = props2.onInputKeyDown, onInputMouseDown = props2.onInputMouseDown, onInputCompositionStart = props2.onInputCompositionStart, onInputCompositionEnd = props2.onInputCompositionEnd;
      var inputNode = createVNode("div", {
        "class": "".concat(selectionPrefixCls.value, "-search"),
        "style": {
          width: inputWidth.value + "px"
        },
        "key": "input"
      }, [createVNode(Input$2, {
        "inputRef": inputRef,
        "open": open6,
        "prefixCls": prefixCls2,
        "id": id2,
        "inputElement": null,
        "disabled": disabled,
        "autofocus": autofocus,
        "autocomplete": autocomplete,
        "editable": inputEditable.value,
        "accessibilityIndex": accessibilityIndex,
        "value": inputValue.value,
        "onKeydown": onInputKeyDown,
        "onMousedown": onInputMouseDown,
        "onChange": onInputChange3,
        "onPaste": onInputPaste,
        "onCompositionstart": onInputCompositionStart,
        "onCompositionend": onInputCompositionEnd,
        "tabindex": tabindex,
        "attrs": pickAttrs(props2, true),
        "onFocus": function onFocus6() {
          return focused.value = true;
        },
        "onBlur": function onBlur7() {
          return focused.value = false;
        }
      }, null), createVNode("span", {
        "ref": measureRef,
        "class": "".concat(selectionPrefixCls.value, "-search-mirror"),
        "aria-hidden": true
      }, [inputValue.value, createTextVNode("\xA0")])]);
      var selectionNode = createVNode(Overflow$1, {
        "prefixCls": "".concat(selectionPrefixCls.value, "-overflow"),
        "data": values,
        "renderItem": renderItem,
        "renderRest": renderRest,
        "suffix": inputNode,
        "itemKey": "key",
        "maxCount": props2.maxTagCount,
        "key": "overflow"
      }, null);
      return createVNode(Fragment, null, [selectionNode, !values.length && !inputValue.value && createVNode("span", {
        "class": "".concat(selectionPrefixCls.value, "-placeholder")
      }, [placeholder])]);
    };
  }
});
var MultipleSelector$2 = SelectSelector;
var props$3 = {
  inputElement: PropsTypes.any,
  id: PropsTypes.string,
  prefixCls: PropsTypes.string,
  values: PropsTypes.array,
  open: PropsTypes.looseBool,
  searchValue: PropsTypes.string,
  inputRef: PropsTypes.any,
  placeholder: PropsTypes.any,
  disabled: PropsTypes.looseBool,
  mode: PropsTypes.string,
  showSearch: PropsTypes.looseBool,
  autofocus: PropsTypes.looseBool,
  autocomplete: PropsTypes.string,
  accessibilityIndex: PropsTypes.number,
  tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  activeValue: PropsTypes.string,
  backfill: PropsTypes.looseBool,
  onInputChange: PropsTypes.func,
  onInputPaste: PropsTypes.func,
  onInputKeyDown: PropsTypes.func,
  onInputMouseDown: PropsTypes.func,
  onInputCompositionStart: PropsTypes.func,
  onInputCompositionEnd: PropsTypes.func
};
var SingleSelector$2 = defineComponent({
  name: "SingleSelector",
  setup: function setup17(props2) {
    var inputChanged = ref(false);
    var combobox = computed(function() {
      return props2.mode === "combobox";
    });
    var inputEditable = computed(function() {
      return combobox.value || props2.showSearch;
    });
    var inputValue = computed(function() {
      var inputValue2 = props2.searchValue || "";
      if (combobox.value && props2.activeValue && !inputChanged.value) {
        inputValue2 = props2.activeValue;
      }
      return inputValue2;
    });
    watch([combobox, function() {
      return props2.activeValue;
    }], function() {
      if (combobox.value) {
        inputChanged.value = false;
      }
    }, {
      immediate: true
    });
    var hasTextInput = computed(function() {
      return props2.mode !== "combobox" && !props2.open ? false : !!inputValue.value;
    });
    var title2 = computed(function() {
      var item = props2.values[0];
      return item && (typeof item.label === "string" || typeof item.label === "number") ? item.label.toString() : void 0;
    });
    return function() {
      var inputElement = props2.inputElement, prefixCls2 = props2.prefixCls, id2 = props2.id, values = props2.values, inputRef = props2.inputRef, disabled = props2.disabled, autofocus = props2.autofocus, autocomplete = props2.autocomplete, accessibilityIndex = props2.accessibilityIndex, open6 = props2.open, placeholder = props2.placeholder, tabindex = props2.tabindex, onInputKeyDown = props2.onInputKeyDown, onInputMouseDown = props2.onInputMouseDown, onInputChange3 = props2.onInputChange, onInputPaste = props2.onInputPaste, onInputCompositionStart = props2.onInputCompositionStart, onInputCompositionEnd = props2.onInputCompositionEnd;
      var item = values[0];
      return createVNode(Fragment, null, [createVNode("span", {
        "class": "".concat(prefixCls2, "-selection-search")
      }, [createVNode(Input$2, {
        "inputRef": inputRef,
        "prefixCls": prefixCls2,
        "id": id2,
        "open": open6,
        "inputElement": inputElement,
        "disabled": disabled,
        "autofocus": autofocus,
        "autocomplete": autocomplete,
        "editable": inputEditable.value,
        "accessibilityIndex": accessibilityIndex,
        "value": inputValue.value,
        "onKeydown": onInputKeyDown,
        "onMousedown": onInputMouseDown,
        "onChange": function onChange9(e2) {
          inputChanged.value = true;
          onInputChange3(e2);
        },
        "onPaste": onInputPaste,
        "onCompositionstart": onInputCompositionStart,
        "onCompositionend": onInputCompositionEnd,
        "tabindex": tabindex,
        "attrs": pickAttrs(props2, true)
      }, null)]), !combobox.value && item && !hasTextInput.value && createVNode("span", {
        "class": "".concat(prefixCls2, "-selection-item"),
        "title": title2.value
      }, [createVNode(Fragment, {
        "key": item.key || item.value
      }, [item.label])]), !item && !hasTextInput.value && createVNode("span", {
        "class": "".concat(prefixCls2, "-selection-placeholder")
      }, [placeholder])]);
    };
  }
});
SingleSelector$2.props = props$3;
SingleSelector$2.inheritAttrs = false;
var SingleSelector$3 = SingleSelector$2;
function useLock() {
  var duration2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 250;
  var lock = null;
  var timeout;
  onBeforeUpdate(function() {
    window.clearTimeout(timeout);
  });
  function doLock(locked) {
    if (locked || lock === null) {
      lock = locked;
    }
    window.clearTimeout(timeout);
    timeout = window.setTimeout(function() {
      lock = null;
    }, duration2);
  }
  return [function() {
    return lock;
  }, doLock];
}
var Selector$2 = defineComponent({
  name: "Selector",
  inheritAttrs: false,
  props: {
    id: PropsTypes.string,
    prefixCls: PropsTypes.string,
    showSearch: PropsTypes.looseBool,
    open: PropsTypes.looseBool,
    values: PropsTypes.array,
    multiple: PropsTypes.looseBool,
    mode: PropsTypes.string,
    searchValue: PropsTypes.string,
    activeValue: PropsTypes.string,
    inputElement: PropsTypes.any,
    autofocus: PropsTypes.looseBool,
    accessibilityIndex: PropsTypes.number,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    disabled: PropsTypes.looseBool,
    placeholder: PropsTypes.any,
    removeIcon: PropsTypes.any,
    maxTagCount: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    maxTagTextLength: PropsTypes.number,
    maxTagPlaceholder: PropsTypes.any,
    tagRender: PropsTypes.func,
    tokenWithEnter: PropsTypes.looseBool,
    choiceTransitionName: PropsTypes.string,
    onToggleOpen: {
      type: Function
    },
    onSearch: PropsTypes.func,
    onSearchSubmit: PropsTypes.func,
    onSelect: PropsTypes.func,
    onInputKeyDown: {
      type: Function
    },
    domRef: PropsTypes.func
  },
  setup: function setup18(props2) {
    var inputRef = createRef$1();
    var compositionStatus = false;
    var _useLock = useLock(0), _useLock2 = _slicedToArray$2(_useLock, 2), getInputMouseDown = _useLock2[0], setInputMouseDown = _useLock2[1];
    var onInternalInputKeyDown = function onInternalInputKeyDown2(event) {
      var which = event.which;
      if (which === KeyCode$2.UP || which === KeyCode$2.DOWN) {
        event.preventDefault();
      }
      if (props2.onInputKeyDown) {
        props2.onInputKeyDown(event);
      }
      if (which === KeyCode$2.ENTER && props2.mode === "tags" && !compositionStatus && !props2.open) {
        props2.onSearchSubmit(event.target.value);
      }
      if (![KeyCode$2.SHIFT, KeyCode$2.TAB, KeyCode$2.BACKSPACE, KeyCode$2.ESC].includes(which)) {
        props2.onToggleOpen(true);
      }
    };
    var onInternalInputMouseDown = function onInternalInputMouseDown2() {
      setInputMouseDown(true);
    };
    var pastedText = null;
    var triggerOnSearch = function triggerOnSearch2(value26) {
      if (props2.onSearch(value26, true, compositionStatus) !== false) {
        props2.onToggleOpen(true);
      }
    };
    var onInputCompositionStart = function onInputCompositionStart2() {
      compositionStatus = true;
    };
    var onInputCompositionEnd = function onInputCompositionEnd2(e2) {
      compositionStatus = false;
      if (props2.mode !== "combobox") {
        triggerOnSearch(e2.target.value);
      }
    };
    var onInputChange3 = function onInputChange4(event) {
      var value26 = event.target.value;
      if (props2.tokenWithEnter && pastedText && /[\r\n]/.test(pastedText)) {
        var replacedText = pastedText.replace(/[\r\n]+$/, "").replace(/\r\n/g, " ").replace(/[\r\n]/g, " ");
        value26 = value26.replace(replacedText, pastedText);
      }
      pastedText = null;
      triggerOnSearch(value26);
    };
    var onInputPaste = function onInputPaste2(e2) {
      var clipboardData = e2.clipboardData;
      var value26 = clipboardData.getData("text");
      pastedText = value26;
    };
    var onClick7 = function onClick8(_ref) {
      var target = _ref.target;
      if (target !== inputRef.current) {
        var isIE = document.body.style.msTouchAction !== void 0;
        if (isIE) {
          setTimeout(function() {
            inputRef.current.focus();
          });
        } else {
          inputRef.current.focus();
        }
      }
    };
    var onMousedown2 = function onMousedown3(event) {
      var inputMouseDown = getInputMouseDown();
      if (event.target !== inputRef.current && !inputMouseDown) {
        event.preventDefault();
      }
      if (props2.mode !== "combobox" && (!props2.showSearch || !inputMouseDown) || !props2.open) {
        if (props2.open) {
          props2.onSearch("", true, false);
        }
        props2.onToggleOpen();
      }
    };
    return {
      focus: function focus27() {
        inputRef.current.focus();
      },
      blur: function blur24() {
        inputRef.current.blur();
      },
      onMousedown: onMousedown2,
      onClick: onClick7,
      onInputPaste,
      inputRef,
      onInternalInputKeyDown,
      onInternalInputMouseDown,
      onInputChange: onInputChange3,
      onInputCompositionEnd,
      onInputCompositionStart
    };
  },
  render: function render6() {
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, domRef = _this$$props.domRef, multiple = _this$$props.multiple;
    var onMousedown2 = this.onMousedown, onClick7 = this.onClick, inputRef = this.inputRef, onInputPaste = this.onInputPaste, onInternalInputKeyDown = this.onInternalInputKeyDown, onInternalInputMouseDown = this.onInternalInputMouseDown, onInputChange3 = this.onInputChange, onInputCompositionStart = this.onInputCompositionStart, onInputCompositionEnd = this.onInputCompositionEnd;
    var sharedProps = {
      inputRef,
      onInputKeyDown: onInternalInputKeyDown,
      onInputMouseDown: onInternalInputMouseDown,
      onInputChange: onInputChange3,
      onInputPaste,
      onInputCompositionStart,
      onInputCompositionEnd
    };
    var selectNode = multiple ? createVNode(MultipleSelector$2, _objectSpread2$2(_objectSpread2$2({}, this.$props), sharedProps), null) : createVNode(SingleSelector$3, _objectSpread2$2(_objectSpread2$2({}, this.$props), sharedProps), null);
    return createVNode("div", {
      "ref": domRef,
      "class": "".concat(prefixCls2, "-selector"),
      "onClick": onClick7,
      "onMousedown": onMousedown2
    }, [selectNode]);
  }
});
var Selector$3 = Selector$2;
function contains(root2, n2) {
  if (!root2) {
    return false;
  }
  return root2.contains(n2);
}
var availablePrefixs = ["moz", "ms", "webkit"];
function requestAnimationFramePolyfill() {
  var lastTime = 0;
  return function(callback) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id2 = window.setTimeout(function() {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id2;
  };
}
function getRequestAnimationFrame() {
  if (typeof window === "undefined") {
    return function() {
    };
  }
  if (window.requestAnimationFrame) {
    return window.requestAnimationFrame.bind(window);
  }
  var prefix = availablePrefixs.filter(function(key2) {
    return "".concat(key2, "RequestAnimationFrame") in window;
  })[0];
  return prefix ? window["".concat(prefix, "RequestAnimationFrame")] : requestAnimationFramePolyfill();
}
function cancelRequestAnimationFrame(id2) {
  if (typeof window === "undefined") {
    return null;
  }
  if (window.cancelAnimationFrame) {
    return window.cancelAnimationFrame(id2);
  }
  var prefix = availablePrefixs.filter(function(key2) {
    return "".concat(key2, "CancelAnimationFrame") in window || "".concat(key2, "CancelRequestAnimationFrame") in window;
  })[0];
  return prefix ? (window["".concat(prefix, "CancelAnimationFrame")] || window["".concat(prefix, "CancelRequestAnimationFrame")]).call(this, id2) : clearTimeout(id2);
}
var raf = getRequestAnimationFrame();
var cancelAnimationTimeout = function cancelAnimationTimeout2(frame) {
  return cancelRequestAnimationFrame(frame.id);
};
var requestAnimationTimeout = function requestAnimationTimeout2(callback, delay) {
  var start = Date.now();
  function timeout() {
    if (Date.now() - start >= delay) {
      callback.call();
    } else {
      frame.id = raf(timeout);
    }
  }
  var frame = {
    id: raf(timeout)
  };
  return frame;
};
function ownKeys$1(object3, enumerableOnly) {
  var keys2 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2$1(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$1(Object(source2), true).forEach(function(key2) {
        _defineProperty$T(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$1(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$1 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$1(obj);
}
function _defineProperty$T(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value: value26,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var vendorPrefix;
var jsCssMap = {
  Webkit: "-webkit-",
  Moz: "-moz-",
  ms: "-ms-",
  O: "-o-"
};
function getVendorPrefix() {
  if (vendorPrefix !== void 0) {
    return vendorPrefix;
  }
  vendorPrefix = "";
  var style3 = document.createElement("p").style;
  var testProp = "Transform";
  for (var key2 in jsCssMap) {
    if (key2 + testProp in style3) {
      vendorPrefix = key2;
    }
  }
  return vendorPrefix;
}
function getTransitionName() {
  return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : "transitionProperty";
}
function getTransformName() {
  return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : "transform";
}
function setTransitionProperty(node, value26) {
  var name2 = getTransitionName();
  if (name2) {
    node.style[name2] = value26;
    if (name2 !== "transitionProperty") {
      node.style.transitionProperty = value26;
    }
  }
}
function setTransform$1(node, value26) {
  var name2 = getTransformName();
  if (name2) {
    node.style[name2] = value26;
    if (name2 !== "transform") {
      node.style.transform = value26;
    }
  }
}
function getTransitionProperty(node) {
  return node.style.transitionProperty || node.style[getTransitionName()];
}
function getTransformXY(node) {
  var style3 = window.getComputedStyle(node, null);
  var transform = style3.getPropertyValue("transform") || style3.getPropertyValue(getTransformName());
  if (transform && transform !== "none") {
    var matrix = transform.replace(/[^0-9\-.,]/g, "").split(",");
    return {
      x: parseFloat(matrix[12] || matrix[4], 0),
      y: parseFloat(matrix[13] || matrix[5], 0)
    };
  }
  return {
    x: 0,
    y: 0
  };
}
var matrix2d = /matrix\((.*)\)/;
var matrix3d = /matrix3d\((.*)\)/;
function setTransformXY(node, xy) {
  var style3 = window.getComputedStyle(node, null);
  var transform = style3.getPropertyValue("transform") || style3.getPropertyValue(getTransformName());
  if (transform && transform !== "none") {
    var arr;
    var match2d = transform.match(matrix2d);
    if (match2d) {
      match2d = match2d[1];
      arr = match2d.split(",").map(function(item) {
        return parseFloat(item, 10);
      });
      arr[4] = xy.x;
      arr[5] = xy.y;
      setTransform$1(node, "matrix(".concat(arr.join(","), ")"));
    } else {
      var match3d = transform.match(matrix3d)[1];
      arr = match3d.split(",").map(function(item) {
        return parseFloat(item, 10);
      });
      arr[12] = xy.x;
      arr[13] = xy.y;
      setTransform$1(node, "matrix3d(".concat(arr.join(","), ")"));
    }
  } else {
    setTransform$1(node, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
  }
}
var RE_NUM$1 = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
var getComputedStyleX$1;
function forceRelayout(elem) {
  var originalStyle = elem.style.display;
  elem.style.display = "none";
  elem.offsetHeight;
  elem.style.display = originalStyle;
}
function css$1(el, name2, v2) {
  var value26 = v2;
  if (_typeof$1(name2) === "object") {
    for (var i2 in name2) {
      if (name2.hasOwnProperty(i2)) {
        css$1(el, i2, name2[i2]);
      }
    }
    return void 0;
  }
  if (typeof value26 !== "undefined") {
    if (typeof value26 === "number") {
      value26 = "".concat(value26, "px");
    }
    el.style[name2] = value26;
    return void 0;
  }
  return getComputedStyleX$1(el, name2);
}
function getClientPosition$2(elem) {
  var box;
  var x2;
  var y2;
  var doc2 = elem.ownerDocument;
  var body = doc2.body;
  var docElem = doc2 && doc2.documentElement;
  box = elem.getBoundingClientRect();
  x2 = box.left;
  y2 = box.top;
  x2 -= docElem.clientLeft || body.clientLeft || 0;
  y2 -= docElem.clientTop || body.clientTop || 0;
  return {
    left: x2,
    top: y2
  };
}
function getScroll$3(w2, top) {
  var ret = w2["page".concat(top ? "Y" : "X", "Offset")];
  var method3 = "scroll".concat(top ? "Top" : "Left");
  if (typeof ret !== "number") {
    var d2 = w2.document;
    ret = d2.documentElement[method3];
    if (typeof ret !== "number") {
      ret = d2.body[method3];
    }
  }
  return ret;
}
function getScrollLeft$1(w2) {
  return getScroll$3(w2);
}
function getScrollTop$1(w2) {
  return getScroll$3(w2, true);
}
function getOffset$3(el) {
  var pos = getClientPosition$2(el);
  var doc2 = el.ownerDocument;
  var w2 = doc2.defaultView || doc2.parentWindow;
  pos.left += getScrollLeft$1(w2);
  pos.top += getScrollTop$1(w2);
  return pos;
}
function isWindow$1(obj) {
  return obj !== null && obj !== void 0 && obj == obj.window;
}
function getDocument(node) {
  if (isWindow$1(node)) {
    return node.document;
  }
  if (node.nodeType === 9) {
    return node;
  }
  return node.ownerDocument;
}
function _getComputedStyle$1(elem, name2, cs) {
  var computedStyle = cs;
  var val = "";
  var d2 = getDocument(elem);
  computedStyle = computedStyle || d2.defaultView.getComputedStyle(elem, null);
  if (computedStyle) {
    val = computedStyle.getPropertyValue(name2) || computedStyle[name2];
  }
  return val;
}
var _RE_NUM_NO_PX$1 = new RegExp("^(".concat(RE_NUM$1, ")(?!px)[a-z%]+$"), "i");
var RE_POS$1 = /^(top|right|bottom|left)$/;
var CURRENT_STYLE$1 = "currentStyle";
var RUNTIME_STYLE$1 = "runtimeStyle";
var LEFT$1 = "left";
var PX$1 = "px";
function _getComputedStyleIE$1(elem, name2) {
  var ret = elem[CURRENT_STYLE$1] && elem[CURRENT_STYLE$1][name2];
  if (_RE_NUM_NO_PX$1.test(ret) && !RE_POS$1.test(name2)) {
    var style3 = elem.style;
    var left = style3[LEFT$1];
    var rsLeft = elem[RUNTIME_STYLE$1][LEFT$1];
    elem[RUNTIME_STYLE$1][LEFT$1] = elem[CURRENT_STYLE$1][LEFT$1];
    style3[LEFT$1] = name2 === "fontSize" ? "1em" : ret || 0;
    ret = style3.pixelLeft + PX$1;
    style3[LEFT$1] = left;
    elem[RUNTIME_STYLE$1][LEFT$1] = rsLeft;
  }
  return ret === "" ? "auto" : ret;
}
if (typeof window !== "undefined") {
  getComputedStyleX$1 = window.getComputedStyle ? _getComputedStyle$1 : _getComputedStyleIE$1;
}
function getOffsetDirection(dir, option) {
  if (dir === "left") {
    return option.useCssRight ? "right" : dir;
  }
  return option.useCssBottom ? "bottom" : dir;
}
function oppositeOffsetDirection(dir) {
  if (dir === "left") {
    return "right";
  } else if (dir === "right") {
    return "left";
  } else if (dir === "top") {
    return "bottom";
  } else if (dir === "bottom") {
    return "top";
  }
}
function setLeftTop(elem, offset4, option) {
  if (css$1(elem, "position") === "static") {
    elem.style.position = "relative";
  }
  var presetH = -999;
  var presetV = -999;
  var horizontalProperty = getOffsetDirection("left", option);
  var verticalProperty = getOffsetDirection("top", option);
  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);
  if (horizontalProperty !== "left") {
    presetH = 999;
  }
  if (verticalProperty !== "top") {
    presetV = 999;
  }
  var originalTransition = "";
  var originalOffset = getOffset$3(elem);
  if ("left" in offset4 || "top" in offset4) {
    originalTransition = getTransitionProperty(elem) || "";
    setTransitionProperty(elem, "none");
  }
  if ("left" in offset4) {
    elem.style[oppositeHorizontalProperty] = "";
    elem.style[horizontalProperty] = "".concat(presetH, "px");
  }
  if ("top" in offset4) {
    elem.style[oppositeVerticalProperty] = "";
    elem.style[verticalProperty] = "".concat(presetV, "px");
  }
  forceRelayout(elem);
  var old = getOffset$3(elem);
  var originalStyle = {};
  for (var key2 in offset4) {
    if (offset4.hasOwnProperty(key2)) {
      var dir = getOffsetDirection(key2, option);
      var preset = key2 === "left" ? presetH : presetV;
      var off = originalOffset[key2] - old[key2];
      if (dir === key2) {
        originalStyle[dir] = preset + off;
      } else {
        originalStyle[dir] = preset - off;
      }
    }
  }
  css$1(elem, originalStyle);
  forceRelayout(elem);
  if ("left" in offset4 || "top" in offset4) {
    setTransitionProperty(elem, originalTransition);
  }
  var ret = {};
  for (var _key in offset4) {
    if (offset4.hasOwnProperty(_key)) {
      var _dir = getOffsetDirection(_key, option);
      var _off = offset4[_key] - originalOffset[_key];
      if (_key === _dir) {
        ret[_dir] = originalStyle[_dir] + _off;
      } else {
        ret[_dir] = originalStyle[_dir] - _off;
      }
    }
  }
  css$1(elem, ret);
}
function setTransform$1$1(elem, offset4) {
  var originalOffset = getOffset$3(elem);
  var originalXY = getTransformXY(elem);
  var resultXY = {
    x: originalXY.x,
    y: originalXY.y
  };
  if ("left" in offset4) {
    resultXY.x = originalXY.x + offset4.left - originalOffset.left;
  }
  if ("top" in offset4) {
    resultXY.y = originalXY.y + offset4.top - originalOffset.top;
  }
  setTransformXY(elem, resultXY);
}
function setOffset$1(elem, offset4, option) {
  if (option.ignoreShake) {
    var oriOffset = getOffset$3(elem);
    var oLeft = oriOffset.left.toFixed(0);
    var oTop = oriOffset.top.toFixed(0);
    var tLeft = offset4.left.toFixed(0);
    var tTop = offset4.top.toFixed(0);
    if (oLeft === tLeft && oTop === tTop) {
      return;
    }
  }
  if (option.useCssRight || option.useCssBottom) {
    setLeftTop(elem, offset4, option);
  } else if (option.useCssTransform && getTransformName() in document.body.style) {
    setTransform$1$1(elem, offset4);
  } else {
    setLeftTop(elem, offset4, option);
  }
}
function each$1(arr, fn) {
  for (var i2 = 0; i2 < arr.length; i2++) {
    fn(arr[i2]);
  }
}
function isBorderBoxFn$1(elem) {
  return getComputedStyleX$1(elem, "boxSizing") === "border-box";
}
var BOX_MODELS$1 = ["margin", "border", "padding"];
var CONTENT_INDEX$1 = -1;
var PADDING_INDEX$1 = 2;
var BORDER_INDEX$1 = 1;
var MARGIN_INDEX$1 = 0;
function swap$1(elem, options2, callback) {
  var old = {};
  var style3 = elem.style;
  var name2;
  for (name2 in options2) {
    if (options2.hasOwnProperty(name2)) {
      old[name2] = style3[name2];
      style3[name2] = options2[name2];
    }
  }
  callback.call(elem);
  for (name2 in options2) {
    if (options2.hasOwnProperty(name2)) {
      style3[name2] = old[name2];
    }
  }
}
function getPBMWidth$1(elem, props2, which) {
  var value26 = 0;
  var prop;
  var j2;
  var i2;
  for (j2 = 0; j2 < props2.length; j2++) {
    prop = props2[j2];
    if (prop) {
      for (i2 = 0; i2 < which.length; i2++) {
        var cssProp = void 0;
        if (prop === "border") {
          cssProp = "".concat(prop).concat(which[i2], "Width");
        } else {
          cssProp = prop + which[i2];
        }
        value26 += parseFloat(getComputedStyleX$1(elem, cssProp)) || 0;
      }
    }
  }
  return value26;
}
var domUtils$1 = {
  getParent: function getParent2(element) {
    var parent2 = element;
    do {
      if (parent2.nodeType === 11 && parent2.host) {
        parent2 = parent2.host;
      } else {
        parent2 = parent2.parentNode;
      }
    } while (parent2 && parent2.nodeType !== 1 && parent2.nodeType !== 9);
    return parent2;
  }
};
each$1(["Width", "Height"], function(name2) {
  domUtils$1["doc".concat(name2)] = function(refWin) {
    var d2 = refWin.document;
    return Math.max(d2.documentElement["scroll".concat(name2)], d2.body["scroll".concat(name2)], domUtils$1["viewport".concat(name2)](d2));
  };
  domUtils$1["viewport".concat(name2)] = function(win) {
    var prop = "client".concat(name2);
    var doc2 = win.document;
    var body = doc2.body;
    var documentElement = doc2.documentElement;
    var documentElementProp = documentElement[prop];
    return doc2.compatMode === "CSS1Compat" && documentElementProp || body && body[prop] || documentElementProp;
  };
});
function getWH$1(elem, name2, ex) {
  var extra = ex;
  if (isWindow$1(elem)) {
    return name2 === "width" ? domUtils$1.viewportWidth(elem) : domUtils$1.viewportHeight(elem);
  } else if (elem.nodeType === 9) {
    return name2 === "width" ? domUtils$1.docWidth(elem) : domUtils$1.docHeight(elem);
  }
  var which = name2 === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
  var borderBoxValue = name2 === "width" ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;
  var isBorderBox = isBorderBoxFn$1(elem);
  var cssBoxValue = 0;
  if (borderBoxValue === null || borderBoxValue === void 0 || borderBoxValue <= 0) {
    borderBoxValue = void 0;
    cssBoxValue = getComputedStyleX$1(elem, name2);
    if (cssBoxValue === null || cssBoxValue === void 0 || Number(cssBoxValue) < 0) {
      cssBoxValue = elem.style[name2] || 0;
    }
    cssBoxValue = parseFloat(cssBoxValue) || 0;
  }
  if (extra === void 0) {
    extra = isBorderBox ? BORDER_INDEX$1 : CONTENT_INDEX$1;
  }
  var borderBoxValueOrIsBorderBox = borderBoxValue !== void 0 || isBorderBox;
  var val = borderBoxValue || cssBoxValue;
  if (extra === CONTENT_INDEX$1) {
    if (borderBoxValueOrIsBorderBox) {
      return val - getPBMWidth$1(elem, ["border", "padding"], which);
    }
    return cssBoxValue;
  } else if (borderBoxValueOrIsBorderBox) {
    if (extra === BORDER_INDEX$1) {
      return val;
    }
    return val + (extra === PADDING_INDEX$1 ? -getPBMWidth$1(elem, ["border"], which) : getPBMWidth$1(elem, ["margin"], which));
  }
  return cssBoxValue + getPBMWidth$1(elem, BOX_MODELS$1.slice(extra), which);
}
var cssShow$1 = {
  position: "absolute",
  visibility: "hidden",
  display: "block"
};
function getWHIgnoreDisplay$1() {
  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
    args[_key2] = arguments[_key2];
  }
  var val;
  var elem = args[0];
  if (elem.offsetWidth !== 0) {
    val = getWH$1.apply(void 0, args);
  } else {
    swap$1(elem, cssShow$1, function() {
      val = getWH$1.apply(void 0, args);
    });
  }
  return val;
}
each$1(["width", "height"], function(name2) {
  var first = name2.charAt(0).toUpperCase() + name2.slice(1);
  domUtils$1["outer".concat(first)] = function(el, includeMargin) {
    return el && getWHIgnoreDisplay$1(el, name2, includeMargin ? MARGIN_INDEX$1 : BORDER_INDEX$1);
  };
  var which = name2 === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
  domUtils$1[name2] = function(elem, v2) {
    var val = v2;
    if (val !== void 0) {
      if (elem) {
        var isBorderBox = isBorderBoxFn$1(elem);
        if (isBorderBox) {
          val += getPBMWidth$1(elem, ["padding", "border"], which);
        }
        return css$1(elem, name2, val);
      }
      return void 0;
    }
    return elem && getWHIgnoreDisplay$1(elem, name2, CONTENT_INDEX$1);
  };
});
function mix(to2, from2) {
  for (var i2 in from2) {
    if (from2.hasOwnProperty(i2)) {
      to2[i2] = from2[i2];
    }
  }
  return to2;
}
var utils$e = {
  getWindow: function getWindow(node) {
    if (node && node.document && node.setTimeout) {
      return node;
    }
    var doc2 = node.ownerDocument || node;
    return doc2.defaultView || doc2.parentWindow;
  },
  getDocument,
  offset: function offset2(el, value26, option) {
    if (typeof value26 !== "undefined") {
      setOffset$1(el, value26, option || {});
    } else {
      return getOffset$3(el);
    }
  },
  isWindow: isWindow$1,
  each: each$1,
  css: css$1,
  clone: function clone2(obj) {
    var i2;
    var ret = {};
    for (i2 in obj) {
      if (obj.hasOwnProperty(i2)) {
        ret[i2] = obj[i2];
      }
    }
    var overflow3 = obj.overflow;
    if (overflow3) {
      for (i2 in obj) {
        if (obj.hasOwnProperty(i2)) {
          ret.overflow[i2] = obj.overflow[i2];
        }
      }
    }
    return ret;
  },
  mix,
  getWindowScrollLeft: function getWindowScrollLeft(w2) {
    return getScrollLeft$1(w2);
  },
  getWindowScrollTop: function getWindowScrollTop(w2) {
    return getScrollTop$1(w2);
  },
  merge: function merge2() {
    var ret = {};
    for (var i2 = 0; i2 < arguments.length; i2++) {
      utils$e.mix(ret, i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]);
    }
    return ret;
  },
  viewportWidth: 0,
  viewportHeight: 0
};
mix(utils$e, domUtils$1);
var getParent = utils$e.getParent;
function getOffsetParent(element) {
  if (utils$e.isWindow(element) || element.nodeType === 9) {
    return null;
  }
  var doc2 = utils$e.getDocument(element);
  var body = doc2.body;
  var parent2;
  var positionStyle = utils$e.css(element, "position");
  var skipStatic = positionStyle === "fixed" || positionStyle === "absolute";
  if (!skipStatic) {
    return element.nodeName.toLowerCase() === "html" ? null : getParent(element);
  }
  for (parent2 = getParent(element); parent2 && parent2 !== body && parent2.nodeType !== 9; parent2 = getParent(parent2)) {
    positionStyle = utils$e.css(parent2, "position");
    if (positionStyle !== "static") {
      return parent2;
    }
  }
  return null;
}
var getParent$1 = utils$e.getParent;
function isAncestorFixed(element) {
  if (utils$e.isWindow(element) || element.nodeType === 9) {
    return false;
  }
  var doc2 = utils$e.getDocument(element);
  var body = doc2.body;
  var parent2 = null;
  for (parent2 = getParent$1(element); parent2 && parent2 !== body && parent2 !== doc2; parent2 = getParent$1(parent2)) {
    var positionStyle = utils$e.css(parent2, "position");
    if (positionStyle === "fixed") {
      return true;
    }
  }
  return false;
}
function getVisibleRectForElement(element, alwaysByViewport) {
  var visibleRect = {
    left: 0,
    right: Infinity,
    top: 0,
    bottom: Infinity
  };
  var el = getOffsetParent(element);
  var doc2 = utils$e.getDocument(element);
  var win = doc2.defaultView || doc2.parentWindow;
  var body = doc2.body;
  var documentElement = doc2.documentElement;
  while (el) {
    if ((navigator.userAgent.indexOf("MSIE") === -1 || el.clientWidth !== 0) && el !== body && el !== documentElement && utils$e.css(el, "overflow") !== "visible") {
      var pos = utils$e.offset(el);
      pos.left += el.clientLeft;
      pos.top += el.clientTop;
      visibleRect.top = Math.max(visibleRect.top, pos.top);
      visibleRect.right = Math.min(visibleRect.right, pos.left + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.left);
    } else if (el === body || el === documentElement) {
      break;
    }
    el = getOffsetParent(el);
  }
  var originalPosition = null;
  if (!utils$e.isWindow(element) && element.nodeType !== 9) {
    originalPosition = element.style.position;
    var position = utils$e.css(element, "position");
    if (position === "absolute") {
      element.style.position = "fixed";
    }
  }
  var scrollX = utils$e.getWindowScrollLeft(win);
  var scrollY = utils$e.getWindowScrollTop(win);
  var viewportWidth = utils$e.viewportWidth(win);
  var viewportHeight = utils$e.viewportHeight(win);
  var documentWidth = documentElement.scrollWidth;
  var documentHeight = documentElement.scrollHeight;
  var bodyStyle = window.getComputedStyle(body);
  if (bodyStyle.overflowX === "hidden") {
    documentWidth = win.innerWidth;
  }
  if (bodyStyle.overflowY === "hidden") {
    documentHeight = win.innerHeight;
  }
  if (element.style) {
    element.style.position = originalPosition;
  }
  if (alwaysByViewport || isAncestorFixed(element)) {
    visibleRect.left = Math.max(visibleRect.left, scrollX);
    visibleRect.top = Math.max(visibleRect.top, scrollY);
    visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
    visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
  } else {
    var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
    visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
    var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
    visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
  }
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
}
function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow3) {
  var pos = utils$e.clone(elFuturePos);
  var size2 = {
    width: elRegion.width,
    height: elRegion.height
  };
  if (overflow3.adjustX && pos.left < visibleRect.left) {
    pos.left = visibleRect.left;
  }
  if (overflow3.resizeWidth && pos.left >= visibleRect.left && pos.left + size2.width > visibleRect.right) {
    size2.width -= pos.left + size2.width - visibleRect.right;
  }
  if (overflow3.adjustX && pos.left + size2.width > visibleRect.right) {
    pos.left = Math.max(visibleRect.right - size2.width, visibleRect.left);
  }
  if (overflow3.adjustY && pos.top < visibleRect.top) {
    pos.top = visibleRect.top;
  }
  if (overflow3.resizeHeight && pos.top >= visibleRect.top && pos.top + size2.height > visibleRect.bottom) {
    size2.height -= pos.top + size2.height - visibleRect.bottom;
  }
  if (overflow3.adjustY && pos.top + size2.height > visibleRect.bottom) {
    pos.top = Math.max(visibleRect.bottom - size2.height, visibleRect.top);
  }
  return utils$e.mix(pos, size2);
}
function getRegion(node) {
  var offset4;
  var w2;
  var h2;
  if (!utils$e.isWindow(node) && node.nodeType !== 9) {
    offset4 = utils$e.offset(node);
    w2 = utils$e.outerWidth(node);
    h2 = utils$e.outerHeight(node);
  } else {
    var win = utils$e.getWindow(node);
    offset4 = {
      left: utils$e.getWindowScrollLeft(win),
      top: utils$e.getWindowScrollTop(win)
    };
    w2 = utils$e.viewportWidth(win);
    h2 = utils$e.viewportHeight(win);
  }
  offset4.width = w2;
  offset4.height = h2;
  return offset4;
}
function getAlignOffset(region, align) {
  var V2 = align.charAt(0);
  var H = align.charAt(1);
  var w2 = region.width;
  var h2 = region.height;
  var x2 = region.left;
  var y2 = region.top;
  if (V2 === "c") {
    y2 += h2 / 2;
  } else if (V2 === "b") {
    y2 += h2;
  }
  if (H === "c") {
    x2 += w2 / 2;
  } else if (H === "r") {
    x2 += w2;
  }
  return {
    left: x2,
    top: y2
  };
}
function getElFuturePos(elRegion, refNodeRegion, points, offset4, targetOffset2) {
  var p1 = getAlignOffset(refNodeRegion, points[1]);
  var p2 = getAlignOffset(elRegion, points[0]);
  var diff2 = [p2.left - p1.left, p2.top - p1.top];
  return {
    left: Math.round(elRegion.left - diff2[0] + offset4[0] - targetOffset2[0]),
    top: Math.round(elRegion.top - diff2[1] + offset4[1] - targetOffset2[1])
  };
}
function isFailX(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
}
function isFailY(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
}
function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
}
function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
}
function flip(points, reg, map2) {
  var ret = [];
  utils$e.each(points, function(p2) {
    ret.push(p2.replace(reg, function(m2) {
      return map2[m2];
    }));
  });
  return ret;
}
function flipOffset(offset4, index2) {
  offset4[index2] = -offset4[index2];
  return offset4;
}
function convertOffset(str, offsetLen) {
  var n2;
  if (/%$/.test(str)) {
    n2 = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
  } else {
    n2 = parseInt(str, 10);
  }
  return n2 || 0;
}
function normalizeOffset(offset4, el) {
  offset4[0] = convertOffset(offset4[0], el.width);
  offset4[1] = convertOffset(offset4[1], el.height);
}
function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
  var points = align.points;
  var offset4 = align.offset || [0, 0];
  var targetOffset2 = align.targetOffset || [0, 0];
  var overflow3 = align.overflow;
  var source2 = align.source || el;
  offset4 = [].concat(offset4);
  targetOffset2 = [].concat(targetOffset2);
  overflow3 = overflow3 || {};
  var newOverflowCfg = {};
  var fail = 0;
  var alwaysByViewport = !!(overflow3 && overflow3.alwaysByViewport);
  var visibleRect = getVisibleRectForElement(source2, alwaysByViewport);
  var elRegion = getRegion(source2);
  normalizeOffset(offset4, elRegion);
  normalizeOffset(targetOffset2, tgtRegion);
  var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset4, targetOffset2);
  var newElRegion = utils$e.merge(elRegion, elFuturePos);
  if (visibleRect && (overflow3.adjustX || overflow3.adjustY) && isTgtRegionVisible) {
    if (overflow3.adjustX) {
      if (isFailX(elFuturePos, elRegion, visibleRect)) {
        var newPoints = flip(points, /[lr]/gi, {
          l: "r",
          r: "l"
        });
        var newOffset = flipOffset(offset4, 0);
        var newTargetOffset = flipOffset(targetOffset2, 0);
        var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);
        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
          fail = 1;
          points = newPoints;
          offset4 = newOffset;
          targetOffset2 = newTargetOffset;
        }
      }
    }
    if (overflow3.adjustY) {
      if (isFailY(elFuturePos, elRegion, visibleRect)) {
        var _newPoints = flip(points, /[tb]/gi, {
          t: "b",
          b: "t"
        });
        var _newOffset = flipOffset(offset4, 1);
        var _newTargetOffset = flipOffset(targetOffset2, 1);
        var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);
        if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
          fail = 1;
          points = _newPoints;
          offset4 = _newOffset;
          targetOffset2 = _newTargetOffset;
        }
      }
    }
    if (fail) {
      elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset4, targetOffset2);
      utils$e.mix(newElRegion, elFuturePos);
    }
    var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
    var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect);
    if (isStillFailX || isStillFailY) {
      var _newPoints2 = points;
      if (isStillFailX) {
        _newPoints2 = flip(points, /[lr]/gi, {
          l: "r",
          r: "l"
        });
      }
      if (isStillFailY) {
        _newPoints2 = flip(points, /[tb]/gi, {
          t: "b",
          b: "t"
        });
      }
      points = _newPoints2;
      offset4 = align.offset || [0, 0];
      targetOffset2 = align.targetOffset || [0, 0];
    }
    newOverflowCfg.adjustX = overflow3.adjustX && isStillFailX;
    newOverflowCfg.adjustY = overflow3.adjustY && isStillFailY;
    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
      newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
    }
  }
  if (newElRegion.width !== elRegion.width) {
    utils$e.css(source2, "width", utils$e.width(source2) + newElRegion.width - elRegion.width);
  }
  if (newElRegion.height !== elRegion.height) {
    utils$e.css(source2, "height", utils$e.height(source2) + newElRegion.height - elRegion.height);
  }
  utils$e.offset(source2, {
    left: newElRegion.left,
    top: newElRegion.top
  }, {
    useCssRight: align.useCssRight,
    useCssBottom: align.useCssBottom,
    useCssTransform: align.useCssTransform,
    ignoreShake: align.ignoreShake
  });
  return {
    points,
    offset: offset4,
    targetOffset: targetOffset2,
    overflow: newOverflowCfg
  };
}
function isOutOfVisibleRect(target, alwaysByViewport) {
  var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
  var targetRegion = getRegion(target);
  return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
}
function alignElement(el, refNode, align) {
  var target = align.target || refNode;
  var refNodeRegion = getRegion(target);
  var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
  return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
}
alignElement.__getOffsetParent = getOffsetParent;
alignElement.__getVisibleRectForElement = getVisibleRectForElement;
function alignPoint(el, tgtPoint, align) {
  var pageX;
  var pageY;
  var doc2 = utils$e.getDocument(el);
  var win = doc2.defaultView || doc2.parentWindow;
  var scrollX = utils$e.getWindowScrollLeft(win);
  var scrollY = utils$e.getWindowScrollTop(win);
  var viewportWidth = utils$e.viewportWidth(win);
  var viewportHeight = utils$e.viewportHeight(win);
  if ("pageX" in tgtPoint) {
    pageX = tgtPoint.pageX;
  } else {
    pageX = scrollX + tgtPoint.clientX;
  }
  if ("pageY" in tgtPoint) {
    pageY = tgtPoint.pageY;
  } else {
    pageY = scrollY + tgtPoint.clientY;
  }
  var tgtRegion = {
    left: pageX,
    top: pageY,
    width: 0,
    height: 0
  };
  var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight;
  var points = [align.points[0], "cc"];
  return doAlign(el, tgtRegion, _objectSpread2$1(_objectSpread2$1({}, align), {}, {
    points
  }), pointInView);
}
var isVisible = function(element) {
  if (!element) {
    return false;
  }
  if (element.offsetParent) {
    return true;
  }
  if (element.getBBox) {
    var box = element.getBBox();
    if (box.width || box.height) {
      return true;
    }
  }
  if (element.getBoundingClientRect) {
    var _box = element.getBoundingClientRect();
    if (_box.width || _box.height) {
      return true;
    }
  }
  return false;
};
function isSamePoint(prev3, next3) {
  if (prev3 === next3)
    return true;
  if (!prev3 || !next3)
    return false;
  if ("pageX" in next3 && "pageY" in next3) {
    return prev3.pageX === next3.pageX && prev3.pageY === next3.pageY;
  }
  if ("clientX" in next3 && "clientY" in next3) {
    return prev3.clientX === next3.clientX && prev3.clientY === next3.clientY;
  }
  return false;
}
function restoreFocus(activeElement, container) {
  if (activeElement !== document.activeElement && contains(container, activeElement) && typeof activeElement.focus === "function") {
    activeElement.focus();
  }
}
function monitorResize(element, callback) {
  var prevWidth = null;
  var prevHeight = null;
  function onResize(_ref) {
    var _ref2 = _slicedToArray$2(_ref, 1), target = _ref2[0].target;
    if (!document.documentElement.contains(target))
      return;
    var _target$getBoundingCl = target.getBoundingClientRect(), width = _target$getBoundingCl.width, height = _target$getBoundingCl.height;
    var fixedWidth = Math.floor(width);
    var fixedHeight = Math.floor(height);
    if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {
      Promise.resolve().then(function() {
        callback({
          width: fixedWidth,
          height: fixedHeight
        });
      });
    }
    prevWidth = fixedWidth;
    prevHeight = fixedHeight;
  }
  var resizeObserver = new ResizeObserver$2(onResize);
  if (element) {
    resizeObserver.observe(element);
  }
  return function() {
    resizeObserver.disconnect();
  };
}
var useBuffer = function(callback, buffer) {
  var called = false;
  var timeout = null;
  function cancelTrigger() {
    window.clearTimeout(timeout);
  }
  function trigger2(force) {
    if (!called || force === true) {
      if (callback() === false) {
        return;
      }
      called = true;
      cancelTrigger();
      timeout = window.setTimeout(function() {
        called = false;
      }, buffer.value);
    } else {
      cancelTrigger();
      timeout = window.setTimeout(function() {
        called = false;
        trigger2();
      }, buffer.value);
    }
  }
  return [trigger2, function() {
    called = false;
    cancelTrigger();
  }];
};
var alignProps = {
  align: Object,
  target: [Object, Function],
  onAlign: Function,
  monitorBufferTime: Number,
  monitorWindowResize: Boolean,
  disabled: Boolean
};
function getElement(func) {
  if (typeof func !== "function")
    return null;
  return func();
}
function getPoint(point) {
  if (_typeof$2(point) !== "object" || !point)
    return null;
  return point;
}
var Align = defineComponent({
  name: "Align",
  props: alignProps,
  emits: ["align"],
  setup: function setup19(props2, _ref) {
    var expose = _ref.expose, slots = _ref.slots;
    var cacheRef = ref({});
    var nodeRef = ref();
    var forceAlignPropsRef = computed(function() {
      return {
        disabled: props2.disabled,
        target: props2.target,
        onAlign: props2.onAlign
      };
    });
    var _useBuffer = useBuffer(function() {
      var _forceAlignPropsRef$v = forceAlignPropsRef.value, latestDisabled = _forceAlignPropsRef$v.disabled, latestTarget = _forceAlignPropsRef$v.target, latestOnAlign = _forceAlignPropsRef$v.onAlign;
      if (!latestDisabled && latestTarget && nodeRef.value && nodeRef.value.$el) {
        var source2 = nodeRef.value.$el;
        var result;
        var element = getElement(latestTarget);
        var point = getPoint(latestTarget);
        cacheRef.value.element = element;
        cacheRef.value.point = point;
        var _document = document, activeElement = _document.activeElement;
        if (element && isVisible(element)) {
          result = alignElement(source2, element, props2.align);
        } else if (point) {
          result = alignPoint(source2, point, props2.align);
        }
        restoreFocus(activeElement, source2);
        if (latestOnAlign && result) {
          latestOnAlign(source2, result);
        }
        return true;
      }
      return false;
    }, computed(function() {
      return props2.monitorBufferTime;
    })), _useBuffer2 = _slicedToArray$2(_useBuffer, 2), _forceAlign = _useBuffer2[0], cancelForceAlign = _useBuffer2[1];
    var resizeMonitor = ref({
      cancel: function cancel2() {
      }
    });
    var sourceResizeMonitor = ref({
      cancel: function cancel2() {
      }
    });
    var goAlign = function goAlign2() {
      var target = props2.target;
      var element = getElement(target);
      var point = getPoint(target);
      if (nodeRef.value && nodeRef.value.$el !== sourceResizeMonitor.value.element) {
        sourceResizeMonitor.value.cancel();
        sourceResizeMonitor.value.element = nodeRef.value.$el;
        sourceResizeMonitor.value.cancel = monitorResize(nodeRef.value.$el, _forceAlign);
      }
      if (cacheRef.value.element !== element || !isSamePoint(cacheRef.value.point, point)) {
        _forceAlign();
        if (resizeMonitor.value.element !== element) {
          resizeMonitor.value.cancel();
          resizeMonitor.value.element = element;
          resizeMonitor.value.cancel = monitorResize(element, _forceAlign);
        }
      }
    };
    onMounted(function() {
      goAlign();
    });
    onUpdated(function() {
      goAlign();
    });
    watch(function() {
      return props2.disabled;
    }, function(disabled) {
      if (!disabled) {
        _forceAlign();
      } else {
        cancelForceAlign();
      }
    }, {
      flush: "post"
    });
    var winResizeRef = ref(null);
    watch(function() {
      return props2.monitorWindowResize;
    }, function(monitorWindowResize) {
      if (monitorWindowResize) {
        if (!winResizeRef.value) {
          winResizeRef.value = addEventListenerWrap(window, "resize", _forceAlign);
        }
      } else if (winResizeRef.value) {
        winResizeRef.value.remove();
        winResizeRef.value = null;
      }
    }, {
      flush: "post"
    });
    onUnmounted(function() {
      resizeMonitor.value.cancel();
      sourceResizeMonitor.value.cancel();
      if (winResizeRef.value)
        winResizeRef.value.remove();
      cancelForceAlign();
    });
    expose({
      forceAlign: function forceAlign() {
        return _forceAlign(true);
      }
    });
    return function() {
      var child = slots === null || slots === void 0 ? void 0 : slots.default();
      if (child) {
        return cloneElement(child[0], {
          ref: nodeRef
        }, true, true);
      }
      return child && child[0];
    };
  }
});
var LazyRenderBox$1 = {
  name: "LazyRenderBox",
  props: {
    visible: PropsTypes.looseBool,
    hiddenClassName: PropsTypes.string
  },
  render: function render7() {
    var hiddenClassName = this.$props.hiddenClassName;
    var child = getSlot(this);
    if (hiddenClassName || child && child.length > 1 || child && child[0] && child[0].type === Text$2) {
      return createVNode("div", null, [child]);
    }
    return child && child[0];
  }
};
var PopupInner = {
  props: {
    hiddenClassName: PropsTypes.string.def(""),
    prefixCls: PropsTypes.string,
    visible: PropsTypes.looseBool
  },
  render: function render8() {
    var _this = this;
    var _a, _b;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, visible9 = _this$$props.visible, hiddenClassName = _this$$props.hiddenClassName;
    return createVNode("div", {
      "class": !visible9 ? hiddenClassName : ""
    }, [createVNode(LazyRenderBox$1, {
      "class": "".concat(prefixCls2, "-content"),
      "visible": visible9
    }, {
      default: function _default8() {
        return [(_b = (_a = _this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)];
      }
    })]);
  }
};
var BaseMixin = {
  methods: {
    setState: function setState() {
      var state2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      var newState = typeof state2 === "function" ? state2(this.$data, this.$props) : state2;
      if (this.getDerivedStateFromProps) {
        var s2 = this.getDerivedStateFromProps(getOptionProps(this), _extends$1(_extends$1({}, this.$data), newState));
        if (s2 === null) {
          return;
        } else {
          newState = _extends$1(_extends$1({}, newState), s2 || {});
        }
      }
      _extends$1(this.$data, newState);
      if (this._.isMounted) {
        this.$forceUpdate();
      }
      nextTick(function() {
        callback && callback();
      });
    },
    __emit: function __emit() {
      var args = [].slice.call(arguments, 0);
      var eventName = args[0];
      eventName = "on".concat(eventName[0].toUpperCase()).concat(eventName.substring(1));
      var event = this.$props[eventName] || this.$attrs[eventName];
      if (args.length && event) {
        if (Array.isArray(event)) {
          for (var i2 = 0, l2 = event.length; i2 < l2; i2++) {
            event[i2].apply(event, _toConsumableArray(args.slice(1)));
          }
        } else {
          event.apply(void 0, _toConsumableArray(args.slice(1)));
        }
      }
    }
  }
};
function isPointsEq(a1, a2, isAlignPoint) {
  if (isAlignPoint) {
    return a1[0] === a2[0];
  }
  return a1[0] === a2[0] && a1[1] === a2[1];
}
function getAlignFromPlacement(builtinPlacements, placementStr, align) {
  var baseAlign = builtinPlacements[placementStr] || {};
  return _extends$1(_extends$1({}, baseAlign), align);
}
function getAlignPopupClassName(builtinPlacements, prefixCls2, align, isAlignPoint) {
  var points = align.points;
  for (var placement2 in builtinPlacements) {
    if (builtinPlacements.hasOwnProperty(placement2)) {
      if (isPointsEq(builtinPlacements[placement2].points, points, isAlignPoint)) {
        return "".concat(prefixCls2, "-placement-").concat(placement2);
      }
    }
  }
  return "";
}
function noop$I() {
}
function saveRef(name2, component) {
  this[name2] = component;
}
globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var getTransitionProps = function getTransitionProps2(transitionName2) {
  var opt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var transitionProps = transitionName2 ? _extends$1({
    appear: true,
    appearToClass: "".concat(transitionName2, "-appear ").concat(transitionName2, "-appear-active"),
    enterFromClass: "".concat(transitionName2, "-enter ").concat(transitionName2, "-enter-prepare"),
    enterToClass: "".concat(transitionName2, "-enter ").concat(transitionName2, "-enter-active"),
    leaveFromClass: " ".concat(transitionName2, "-leave"),
    leaveActiveClass: "".concat(transitionName2, "-leave ").concat(transitionName2, "-leave-active"),
    leaveToClass: "".concat(transitionName2, "-leave ").concat(transitionName2, "-leave-active")
  }, opt) : _extends$1({
    css: false
  }, opt);
  return transitionProps;
};
var getTransitionGroupProps = function getTransitionGroupProps2(transitionName2) {
  var opt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var transitionProps = transitionName2 ? _extends$1({
    appear: true,
    appearActiveClass: "".concat(transitionName2),
    appearToClass: "".concat(transitionName2, "-appear ").concat(transitionName2, "-appear-active"),
    enterFromClass: "".concat(transitionName2, "-appear ").concat(transitionName2, "-enter ").concat(transitionName2, "-appear-prepare ").concat(transitionName2, "-enter-prepare"),
    enterActiveClass: "".concat(transitionName2),
    enterToClass: "".concat(transitionName2, "-enter ").concat(transitionName2, "-appear ").concat(transitionName2, "-appear-active ").concat(transitionName2, "-enter-active"),
    leaveActiveClass: "".concat(transitionName2, " ").concat(transitionName2, "-leave"),
    leaveToClass: "".concat(transitionName2, "-leave-active")
  }, opt) : _extends$1({
    css: false
  }, opt);
  return transitionProps;
};
var Transition = Transition$1;
var TransitionGroup = TransitionGroup$1;
var getCollapsedHeight = function getCollapsedHeight2() {
  return {
    height: 0,
    opacity: 0
  };
};
var getRealHeight = function getRealHeight2(node) {
  return {
    height: "".concat(node.scrollHeight, "px"),
    opacity: 1
  };
};
var getCurrentHeight = function getCurrentHeight2(node) {
  return {
    height: "".concat(node.offsetHeight, "px")
  };
};
var collapseMotion = function collapseMotion2(style3, className) {
  return {
    name: "ant-motion-collapse",
    appear: true,
    css: true,
    onBeforeEnter: function onBeforeEnter(node) {
      className.value = "ant-motion-collapse";
      style3.value = getCollapsedHeight();
    },
    onEnter: function onEnter2(node) {
      nextTick(function() {
        style3.value = getRealHeight(node);
      });
    },
    onAfterEnter: function onAfterEnter() {
      className.value = "";
      style3.value = {};
    },
    onBeforeLeave: function onBeforeLeave(node) {
      className.value = "ant-motion-collapse";
      style3.value = getCurrentHeight(node);
    },
    onLeave: function onLeave2(node) {
      window.setTimeout(function() {
        style3.value = getCollapsedHeight();
      });
    },
    onAfterLeave: function onAfterLeave() {
      className.value = "";
      style3.value = {};
    }
  };
};
var Popup = {
  name: "VCTriggerPopup",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    visible: PropsTypes.looseBool,
    getClassNameFromAlign: PropsTypes.func,
    getRootDomNode: PropsTypes.func,
    align: PropsTypes.any,
    destroyPopupOnHide: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    getContainer: PropsTypes.func,
    transitionName: PropsTypes.string,
    animation: PropsTypes.any,
    maskAnimation: PropsTypes.string,
    maskTransitionName: PropsTypes.string,
    mask: PropsTypes.looseBool,
    zIndex: PropsTypes.number,
    popupClassName: PropsTypes.any,
    popupStyle: PropsTypes.object.def(function() {
      return {};
    }),
    stretch: PropsTypes.string,
    point: PropsTypes.shape({
      pageX: PropsTypes.number,
      pageY: PropsTypes.number
    }).loose
  },
  data: function data2() {
    this.domEl = null;
    this.currentAlignClassName = void 0;
    this.transitionProps = {};
    this.savePopupRef = saveRef.bind(this, "popupInstance");
    this.saveAlignRef = saveRef.bind(this, "alignInstance");
    return {
      stretchChecked: false,
      targetWidth: void 0,
      targetHeight: void 0
    };
  },
  mounted: function mounted2() {
    var _this = this;
    this.$nextTick(function() {
      _this.rootNode = _this.getPopupDomNode();
      _this.setStretchSize();
    });
  },
  updated: function updated() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.setStretchSize();
    });
  },
  methods: {
    onAlign: function onAlign(popupDomNode, align) {
      var props2 = this.$props;
      var currentAlignClassName = props2.getClassNameFromAlign(align);
      if (this.currentAlignClassName !== currentAlignClassName) {
        this.currentAlignClassName = currentAlignClassName;
        popupDomNode.className = this.getClassName(currentAlignClassName, popupDomNode.className);
      }
      var onaAlign = this.$attrs.onaAlign;
      onaAlign && onaAlign(popupDomNode, align);
    },
    setStretchSize: function setStretchSize() {
      var _this$$props = this.$props, stretch = _this$$props.stretch, getRootDomNode2 = _this$$props.getRootDomNode, visible9 = _this$$props.visible;
      var _this$$data = this.$data, stretchChecked = _this$$data.stretchChecked, targetHeight = _this$$data.targetHeight, targetWidth = _this$$data.targetWidth;
      if (!stretch || !visible9) {
        if (stretchChecked) {
          this.setState({
            stretchChecked: false
          });
        }
        return;
      }
      var $ele = getRootDomNode2();
      if (!$ele)
        return;
      var height = $ele.offsetHeight;
      var width = $ele.offsetWidth;
      if (targetHeight !== height || targetWidth !== width || !stretchChecked) {
        this.setState({
          stretchChecked: true,
          targetHeight: height,
          targetWidth: width
        });
      }
    },
    getPopupDomNode: function getPopupDomNode() {
      return findDOMNode(this.popupInstance);
    },
    getTargetElement: function getTargetElement() {
      return this.$props.getRootDomNode();
    },
    getAlignTarget: function getAlignTarget() {
      var point = this.$props.point;
      if (point) {
        return point;
      }
      return this.getTargetElement;
    },
    getMaskTransitionName: function getMaskTransitionName() {
      var props2 = this.$props;
      var transitionName2 = props2.maskTransitionName;
      var animation2 = props2.maskAnimation;
      if (!transitionName2 && animation2) {
        transitionName2 = "".concat(props2.prefixCls, "-").concat(animation2);
      }
      return transitionName2;
    },
    getTransitionName: function getTransitionName2() {
      var props2 = this.$props;
      var transitionName2 = props2.transitionName;
      var animation2 = props2.animation;
      if (!transitionName2) {
        if (typeof animation2 === "string") {
          transitionName2 = "".concat(animation2);
        } else if (animation2 && animation2.props && animation2.props.name) {
          transitionName2 = animation2.props.name;
        }
      }
      return transitionName2;
    },
    getClassName: function getClassName(currentAlignClassName) {
      var _this3 = this;
      var originClassName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var enterActiveClass = [];
      if (this.transitionProps) {
        Object.keys(this.transitionProps).forEach(function(k2) {
          if (typeof _this3.transitionProps[k2] === "string") {
            enterActiveClass.push.apply(enterActiveClass, _toConsumableArray(_this3.transitionProps[k2].split(" ")));
          }
        });
      }
      var classNames2 = originClassName.split(" ").filter(function(c2) {
        return enterActiveClass.indexOf(c2) !== -1;
      }).join(" ");
      return "".concat(this.$props.prefixCls, " ").concat(this.$attrs.class || "", " ").concat(this.$props.popupClassName, " ").concat(currentAlignClassName, " ").concat(classNames2);
    },
    getPopupElement: function getPopupElement() {
      var _this4 = this;
      var _a, _b;
      var savePopupRef6 = this.savePopupRef;
      var props2 = this.$props, $attrs = this.$attrs, $slots = this.$slots, getTransitionName6 = this.getTransitionName;
      var _this$$data2 = this.$data, stretchChecked = _this$$data2.stretchChecked, targetHeight = _this$$data2.targetHeight, targetWidth = _this$$data2.targetWidth;
      var _$attrs$style = $attrs.style, style3 = _$attrs$style === void 0 ? {} : _$attrs$style;
      var onEvents = splitAttrs($attrs).onEvents;
      var align = props2.align, visible9 = props2.visible, prefixCls2 = props2.prefixCls, animation2 = props2.animation, popupStyle = props2.popupStyle, getClassNameFromAlign = props2.getClassNameFromAlign, destroyPopupOnHide = props2.destroyPopupOnHide, stretch = props2.stretch;
      var className = this.getClassName(this.currentAlignClassName || getClassNameFromAlign(align));
      if (!visible9) {
        this.currentAlignClassName = null;
      }
      var sizeStyle = {};
      if (stretch) {
        if (stretch.indexOf("height") !== -1) {
          sizeStyle.height = typeof targetHeight === "number" ? "".concat(targetHeight, "px") : targetHeight;
        } else if (stretch.indexOf("minHeight") !== -1) {
          sizeStyle.minHeight = typeof targetHeight === "number" ? "".concat(targetHeight, "px") : targetHeight;
        }
        if (stretch.indexOf("width") !== -1) {
          sizeStyle.width = typeof targetWidth === "number" ? "".concat(targetWidth, "px") : targetWidth;
        } else if (stretch.indexOf("minWidth") !== -1) {
          sizeStyle.minWidth = typeof targetWidth === "number" ? "".concat(targetWidth, "px") : targetWidth;
        }
        if (!stretchChecked) {
          setTimeout(function() {
            if (_this4.alignInstance) {
              _this4.alignInstance.forceAlign();
            }
          }, 0);
        }
      }
      var popupInnerProps = _extends$1(_extends$1({
        prefixCls: prefixCls2,
        visible: visible9,
        class: className
      }, onEvents), {
        ref: savePopupRef6,
        style: _extends$1(_extends$1(_extends$1(_extends$1({}, sizeStyle), popupStyle), style3), this.getZIndexStyle())
      });
      var transitionName2 = getTransitionName6();
      var useTransition = !!transitionName2;
      var transitionProps = getTransitionProps(transitionName2);
      if (_typeof$2(animation2) === "object") {
        useTransition = true;
        transitionProps = _extends$1(_extends$1({}, transitionProps), animation2);
      }
      if (!useTransition) {
        transitionProps = {};
      }
      this.transitionProps = transitionProps;
      if (destroyPopupOnHide) {
        return createVNode(Transition, transitionProps, {
          default: function _default8() {
            return [visible9 ? createVNode(Align, {
              "target": _this4.getAlignTarget(),
              "key": "popup",
              "ref": _this4.saveAlignRef,
              "monitorWindowResize": true,
              "align": align,
              "onAlign": _this4.onAlign
            }, {
              default: function _default9() {
                return [createVNode(PopupInner, popupInnerProps, {
                  default: function _default10() {
                    return [(_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots)];
                  }
                })];
              }
            }) : null];
          }
        });
      }
      return createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [withDirectives(createVNode(Align, {
            "target": _this4.getAlignTarget(),
            "key": "popup",
            "ref": _this4.saveAlignRef,
            "monitorWindowResize": true,
            "disabled": !visible9,
            "align": align,
            "onAlign": _this4.onAlign
          }, {
            default: function _default9() {
              return [createVNode(PopupInner, popupInnerProps, {
                default: function _default10() {
                  return [(_b = $slots.default) === null || _b === void 0 ? void 0 : _b.call($slots)];
                }
              })];
            }
          }), [[vShow, visible9]])];
        }
      });
    },
    getZIndexStyle: function getZIndexStyle() {
      var style3 = {};
      var props2 = this.$props;
      if (props2.zIndex !== void 0) {
        style3.zIndex = props2.zIndex;
      }
      return style3;
    },
    getMaskElement: function getMaskElement() {
      var props2 = this.$props;
      var maskElement = null;
      if (props2.mask) {
        var maskTransition = this.getMaskTransitionName();
        maskElement = withDirectives(createVNode(LazyRenderBox$1, {
          "style": this.getZIndexStyle(),
          "key": "mask",
          "class": "".concat(props2.prefixCls, "-mask"),
          "visible": props2.visible
        }, null), [[vShow, props2.visible]]);
        if (maskTransition) {
          var _maskElement = function() {
            return maskElement;
          }();
          maskElement = createVNode(Transition, {
            "appear": true,
            "name": maskTransition
          }, {
            default: function _default8() {
              return [_maskElement];
            }
          });
        }
      }
      return maskElement;
    }
  },
  render: function render9() {
    var getMaskElement3 = this.getMaskElement, getPopupElement4 = this.getPopupElement;
    return createVNode("div", null, [getMaskElement3(), getPopupElement4()]);
  }
};
var Portal$1 = defineComponent({
  name: "Portal",
  props: {
    getContainer: PropsTypes.func.isRequired,
    children: PropsTypes.any.isRequired,
    didUpdate: PropsTypes.func
  },
  data: function data3() {
    this._container = null;
    return {};
  },
  mounted: function mounted3() {
    this.createContainer();
  },
  updated: function updated2() {
    var _this = this;
    var didUpdate = this.$props.didUpdate;
    if (didUpdate) {
      nextTick(function() {
        didUpdate(_this.$props);
      });
    }
  },
  beforeUnmount: function beforeUnmount2() {
    this.removeContainer();
  },
  methods: {
    createContainer: function createContainer() {
      this._container = this.$props.getContainer();
      this.$forceUpdate();
    },
    removeContainer: function removeContainer() {
      if (this._container && this._container.parentNode) {
        this._container.parentNode.removeChild(this._container);
      }
    }
  },
  render: function render10() {
    var _this2 = this;
    if (this._container) {
      return createVNode(Teleport, {
        "to": this._container
      }, {
        default: function _default8() {
          return [_this2.$props.children];
        }
      });
    }
    return null;
  }
});
function returnEmptyString() {
  return "";
}
function returnDocument() {
  return window.document;
}
var ALL_HANDLERS = ["onClick", "onMousedown", "onTouchstart", "onMouseenter", "onMouseleave", "onFocus", "onBlur", "onContextmenu"];
var Trigger = defineComponent({
  name: "Trigger",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string)]).def([]),
    showAction: PropsTypes.any.def([]),
    hideAction: PropsTypes.any.def([]),
    getPopupClassNameFromAlign: PropsTypes.any.def(returnEmptyString),
    onPopupVisibleChange: PropsTypes.func.def(noop$I),
    afterPopupVisibleChange: PropsTypes.func.def(noop$I),
    popup: PropsTypes.any,
    popupStyle: PropsTypes.object.def(function() {
      return {};
    }),
    prefixCls: PropsTypes.string.def("rc-trigger-popup"),
    popupClassName: PropsTypes.string.def(""),
    popupPlacement: PropsTypes.string,
    builtinPlacements: PropsTypes.object,
    popupTransitionName: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
    popupAnimation: PropsTypes.any,
    mouseEnterDelay: PropsTypes.number.def(0),
    mouseLeaveDelay: PropsTypes.number.def(0.1),
    zIndex: PropsTypes.number,
    focusDelay: PropsTypes.number.def(0),
    blurDelay: PropsTypes.number.def(0.15),
    getPopupContainer: PropsTypes.func,
    getDocument: PropsTypes.func.def(returnDocument),
    forceRender: PropsTypes.looseBool,
    destroyPopupOnHide: PropsTypes.looseBool.def(false),
    mask: PropsTypes.looseBool.def(false),
    maskClosable: PropsTypes.looseBool.def(true),
    popupAlign: PropsTypes.object.def(function() {
      return {};
    }),
    popupVisible: PropsTypes.looseBool,
    defaultPopupVisible: PropsTypes.looseBool.def(false),
    maskTransitionName: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
    maskAnimation: PropsTypes.string,
    stretch: PropsTypes.string,
    alignPoint: PropsTypes.looseBool
  },
  setup: function setup20() {
    return {
      vcTriggerContext: inject("vcTriggerContext", {}),
      savePopupRef: inject("savePopupRef", noop$I),
      dialogContext: inject("dialogContext", null)
    };
  },
  data: function data4() {
    var _this = this;
    var props2 = this.$props;
    var popupVisible4;
    if (hasProp(this, "popupVisible")) {
      popupVisible4 = !!props2.popupVisible;
    } else {
      popupVisible4 = !!props2.defaultPopupVisible;
    }
    ALL_HANDLERS.forEach(function(h2) {
      _this["fire".concat(h2)] = function(e2) {
        _this.fireEvents(h2, e2);
      };
    });
    this._component = null;
    this.focusTime = null;
    this.clickOutsideHandler = null;
    this.contextmenuOutsideHandler1 = null;
    this.contextmenuOutsideHandler2 = null;
    this.touchOutsideHandler = null;
    return {
      prevPopupVisible: popupVisible4,
      sPopupVisible: popupVisible4,
      point: null
    };
  },
  watch: {
    popupVisible: function popupVisible(val) {
      if (val !== void 0) {
        this.prevPopupVisible = this.sPopupVisible;
        this.sPopupVisible = val;
      }
    }
  },
  created: function created2() {
    provide("vcTriggerContext", this);
  },
  deactivated: function deactivated() {
    this.setPopupVisible(false);
  },
  mounted: function mounted4() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.updatedCal();
    });
  },
  updated: function updated3() {
    var _this3 = this;
    this.$nextTick(function() {
      _this3.updatedCal();
    });
  },
  beforeUnmount: function beforeUnmount3() {
    this.clearDelayTimer();
    this.clearOutsideHandler();
    clearTimeout(this.mouseDownTimeout);
  },
  methods: {
    updatedCal: function updatedCal() {
      var props2 = this.$props;
      var state2 = this.$data;
      if (state2.sPopupVisible) {
        var currentDocument;
        if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextmenuToShow())) {
          currentDocument = props2.getDocument();
          this.clickOutsideHandler = addEventListenerWrap(currentDocument, "mousedown", this.onDocumentClick);
        }
        if (!this.touchOutsideHandler) {
          currentDocument = currentDocument || props2.getDocument();
          this.touchOutsideHandler = addEventListenerWrap(currentDocument, "touchstart", this.onDocumentClick, supportsPassive$1 ? {
            passive: false
          } : false);
        }
        if (!this.contextmenuOutsideHandler1 && this.isContextmenuToShow()) {
          currentDocument = currentDocument || props2.getDocument();
          this.contextmenuOutsideHandler1 = addEventListenerWrap(currentDocument, "scroll", this.onContextmenuClose);
        }
        if (!this.contextmenuOutsideHandler2 && this.isContextmenuToShow()) {
          this.contextmenuOutsideHandler2 = addEventListenerWrap(window, "blur", this.onContextmenuClose);
        }
      } else {
        this.clearOutsideHandler();
      }
    },
    onMouseenter: function onMouseenter(e2) {
      var mouseEnterDelay = this.$props.mouseEnterDelay;
      this.fireEvents("onMouseenter", e2);
      this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e2);
    },
    onMouseMove: function onMouseMove2(e2) {
      this.fireEvents("onMousemove", e2);
      this.setPoint(e2);
    },
    onMouseleave: function onMouseleave(e2) {
      this.fireEvents("onMouseleave", e2);
      this.delaySetPopupVisible(false, this.$props.mouseLeaveDelay);
    },
    onPopupMouseenter: function onPopupMouseenter() {
      this.clearDelayTimer();
    },
    onPopupMouseleave: function onPopupMouseleave(e2) {
      if (e2 && e2.relatedTarget && !e2.relatedTarget.setTimeout && this._component && this._component.getPopupDomNode && contains(this._component.getPopupDomNode(), e2.relatedTarget)) {
        return;
      }
      this.delaySetPopupVisible(false, this.$props.mouseLeaveDelay);
    },
    onFocus: function onFocus(e2) {
      this.fireEvents("onFocus", e2);
      this.clearDelayTimer();
      if (this.isFocusToShow()) {
        this.focusTime = Date.now();
        this.delaySetPopupVisible(true, this.$props.focusDelay);
      }
    },
    onMousedown: function onMousedown(e2) {
      this.fireEvents("onMousedown", e2);
      this.preClickTime = Date.now();
    },
    onTouchstart: function onTouchstart(e2) {
      this.fireEvents("onTouchstart", e2);
      this.preTouchTime = Date.now();
    },
    onBlur: function onBlur(e2) {
      if (!contains(e2.target, e2.relatedTarget || document.activeElement)) {
        this.fireEvents("onBlur", e2);
        this.clearDelayTimer();
        if (this.isBlurToHide()) {
          this.delaySetPopupVisible(false, this.$props.blurDelay);
        }
      }
    },
    onContextmenu: function onContextmenu(e2) {
      e2.preventDefault();
      this.fireEvents("onContextmenu", e2);
      this.setPopupVisible(true, e2);
    },
    onContextmenuClose: function onContextmenuClose() {
      if (this.isContextmenuToShow()) {
        this.close();
      }
    },
    onClick: function onClick(event) {
      this.fireEvents("onClick", event);
      if (this.focusTime) {
        var preTime;
        if (this.preClickTime && this.preTouchTime) {
          preTime = Math.min(this.preClickTime, this.preTouchTime);
        } else if (this.preClickTime) {
          preTime = this.preClickTime;
        } else if (this.preTouchTime) {
          preTime = this.preTouchTime;
        }
        if (Math.abs(preTime - this.focusTime) < 20) {
          return;
        }
        this.focusTime = 0;
      }
      this.preClickTime = 0;
      this.preTouchTime = 0;
      if (this.isClickToShow() && (this.isClickToHide() || this.isBlurToHide()) && event && event.preventDefault) {
        event.preventDefault();
      }
      if (event && event.domEvent) {
        event.domEvent.preventDefault();
      }
      var nextVisible = !this.$data.sPopupVisible;
      if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {
        this.setPopupVisible(!this.$data.sPopupVisible, event);
      }
    },
    onPopupMouseDown: function onPopupMouseDown() {
      var _this4 = this;
      var _this$vcTriggerContex = this.vcTriggerContext, vcTriggerContext = _this$vcTriggerContex === void 0 ? {} : _this$vcTriggerContex;
      this.hasPopupMouseDown = true;
      clearTimeout(this.mouseDownTimeout);
      this.mouseDownTimeout = setTimeout(function() {
        _this4.hasPopupMouseDown = false;
      }, 0);
      if (vcTriggerContext.onPopupMouseDown) {
        vcTriggerContext.onPopupMouseDown.apply(vcTriggerContext, arguments);
      }
    },
    onDocumentClick: function onDocumentClick(event) {
      if (this.$props.mask && !this.$props.maskClosable) {
        return;
      }
      var target = event.target;
      var root2 = findDOMNode(this);
      if (!contains(root2, target) && !this.hasPopupMouseDown) {
        this.close();
      }
    },
    getPopupDomNode: function getPopupDomNode2() {
      if (this._component && this._component.getPopupDomNode) {
        return this._component.getPopupDomNode();
      }
      return null;
    },
    getRootDomNode: function getRootDomNode() {
      return findDOMNode(this);
    },
    handleGetPopupClassFromAlign: function handleGetPopupClassFromAlign(align) {
      var className = [];
      var props2 = this.$props;
      var popupPlacement = props2.popupPlacement, builtinPlacements = props2.builtinPlacements, prefixCls2 = props2.prefixCls, alignPoint2 = props2.alignPoint, getPopupClassNameFromAlign = props2.getPopupClassNameFromAlign;
      if (popupPlacement && builtinPlacements) {
        className.push(getAlignPopupClassName(builtinPlacements, prefixCls2, align, alignPoint2));
      }
      if (getPopupClassNameFromAlign) {
        className.push(getPopupClassNameFromAlign(align));
      }
      return className.join(" ");
    },
    getPopupAlign: function getPopupAlign() {
      var props2 = this.$props;
      var popupPlacement = props2.popupPlacement, popupAlign = props2.popupAlign, builtinPlacements = props2.builtinPlacements;
      if (popupPlacement && builtinPlacements) {
        return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
      }
      return popupAlign;
    },
    savePopup: function savePopup(node) {
      this._component = node;
      this.savePopupRef(node);
    },
    getComponent: function getComponent$1() {
      var self2 = this;
      var mouseProps = {};
      if (this.isMouseEnterToShow()) {
        mouseProps.onMouseenter = self2.onPopupMouseenter;
      }
      if (this.isMouseLeaveToHide()) {
        mouseProps.onMouseleave = self2.onPopupMouseleave;
      }
      mouseProps.onMousedown = this.onPopupMouseDown;
      mouseProps[supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart"] = this.onPopupMouseDown;
      var handleGetPopupClassFromAlign2 = self2.handleGetPopupClassFromAlign, getRootDomNode2 = self2.getRootDomNode, getContainer5 = self2.getContainer, $attrs = self2.$attrs;
      var _self$$props = self2.$props, prefixCls2 = _self$$props.prefixCls, destroyPopupOnHide = _self$$props.destroyPopupOnHide, popupClassName = _self$$props.popupClassName, action = _self$$props.action, popupAnimation = _self$$props.popupAnimation, popupTransitionName = _self$$props.popupTransitionName, popupStyle = _self$$props.popupStyle, mask = _self$$props.mask, maskAnimation = _self$$props.maskAnimation, maskTransitionName = _self$$props.maskTransitionName, zIndex = _self$$props.zIndex, stretch = _self$$props.stretch, alignPoint2 = _self$$props.alignPoint;
      var _this$$data = this.$data, sPopupVisible = _this$$data.sPopupVisible, point = _this$$data.point;
      var align = this.getPopupAlign();
      var popupProps = _extends$1(_extends$1({
        prefixCls: prefixCls2,
        destroyPopupOnHide,
        visible: sPopupVisible,
        point: alignPoint2 ? point : null,
        action,
        align,
        animation: popupAnimation,
        getClassNameFromAlign: handleGetPopupClassFromAlign2,
        stretch,
        getRootDomNode: getRootDomNode2,
        mask,
        zIndex,
        transitionName: popupTransitionName,
        maskAnimation,
        maskTransitionName,
        getContainer: getContainer5,
        popupClassName,
        popupStyle,
        onAlign: $attrs.onPopupAlign || noop$I
      }, mouseProps), {
        ref: this.savePopup
      });
      return createVNode(Popup, popupProps, {
        default: function _default8() {
          return [getComponent(self2, "popup")];
        }
      });
    },
    getContainer: function getContainer2() {
      var props2 = this.$props, dialogContext = this.dialogContext;
      var popupContainer = document.createElement("div");
      popupContainer.style.position = "absolute";
      popupContainer.style.top = "0";
      popupContainer.style.left = "0";
      popupContainer.style.width = "100%";
      var mountNode = props2.getPopupContainer ? props2.getPopupContainer(findDOMNode(this), dialogContext) : props2.getDocument().body;
      mountNode.appendChild(popupContainer);
      this.popupContainer = popupContainer;
      return popupContainer;
    },
    setPopupVisible: function setPopupVisible(sPopupVisible, event) {
      var alignPoint2 = this.alignPoint, prevPopupVisible = this.sPopupVisible, onPopupVisibleChange = this.onPopupVisibleChange;
      this.clearDelayTimer();
      if (prevPopupVisible !== sPopupVisible) {
        if (!hasProp(this, "popupVisible")) {
          this.setState({
            sPopupVisible,
            prevPopupVisible
          });
        }
        onPopupVisibleChange && onPopupVisibleChange(sPopupVisible);
      }
      if (alignPoint2 && event) {
        this.setPoint(event);
      }
    },
    setPoint: function setPoint(point) {
      var alignPoint2 = this.$props.alignPoint;
      if (!alignPoint2 || !point)
        return;
      this.setState({
        point: {
          pageX: point.pageX,
          pageY: point.pageY
        }
      });
    },
    handlePortalUpdate: function handlePortalUpdate() {
      if (this.prevPopupVisible !== this.sPopupVisible) {
        this.afterPopupVisibleChange(this.sPopupVisible);
      }
    },
    delaySetPopupVisible: function delaySetPopupVisible(visible9, delayS, event) {
      var _this5 = this;
      var delay = delayS * 1e3;
      this.clearDelayTimer();
      if (delay) {
        var point = event ? {
          pageX: event.pageX,
          pageY: event.pageY
        } : null;
        this.delayTimer = requestAnimationTimeout(function() {
          _this5.setPopupVisible(visible9, point);
          _this5.clearDelayTimer();
        }, delay);
      } else {
        this.setPopupVisible(visible9, event);
      }
    },
    clearDelayTimer: function clearDelayTimer() {
      if (this.delayTimer) {
        cancelAnimationTimeout(this.delayTimer);
        this.delayTimer = null;
      }
    },
    clearOutsideHandler: function clearOutsideHandler() {
      if (this.clickOutsideHandler) {
        this.clickOutsideHandler.remove();
        this.clickOutsideHandler = null;
      }
      if (this.contextmenuOutsideHandler1) {
        this.contextmenuOutsideHandler1.remove();
        this.contextmenuOutsideHandler1 = null;
      }
      if (this.contextmenuOutsideHandler2) {
        this.contextmenuOutsideHandler2.remove();
        this.contextmenuOutsideHandler2 = null;
      }
      if (this.touchOutsideHandler) {
        this.touchOutsideHandler.remove();
        this.touchOutsideHandler = null;
      }
    },
    createTwoChains: function createTwoChains(event) {
      var fn = function fn2() {
      };
      var events = getEvents(this);
      if (this.childOriginEvents[event] && events[event]) {
        return this["fire".concat(event)];
      }
      fn = this.childOriginEvents[event] || events[event] || fn;
      return fn;
    },
    isClickToShow: function isClickToShow() {
      var _this$$props = this.$props, action = _this$$props.action, showAction = _this$$props.showAction;
      return action.indexOf("click") !== -1 || showAction.indexOf("click") !== -1;
    },
    isContextmenuToShow: function isContextmenuToShow() {
      var _this$$props2 = this.$props, action = _this$$props2.action, showAction = _this$$props2.showAction;
      return action.indexOf("contextmenu") !== -1 || showAction.indexOf("contextmenu") !== -1;
    },
    isClickToHide: function isClickToHide() {
      var _this$$props3 = this.$props, action = _this$$props3.action, hideAction = _this$$props3.hideAction;
      return action.indexOf("click") !== -1 || hideAction.indexOf("click") !== -1;
    },
    isMouseEnterToShow: function isMouseEnterToShow() {
      var _this$$props4 = this.$props, action = _this$$props4.action, showAction = _this$$props4.showAction;
      return action.indexOf("hover") !== -1 || showAction.indexOf("mouseenter") !== -1;
    },
    isMouseLeaveToHide: function isMouseLeaveToHide() {
      var _this$$props5 = this.$props, action = _this$$props5.action, hideAction = _this$$props5.hideAction;
      return action.indexOf("hover") !== -1 || hideAction.indexOf("mouseleave") !== -1;
    },
    isFocusToShow: function isFocusToShow() {
      var _this$$props6 = this.$props, action = _this$$props6.action, showAction = _this$$props6.showAction;
      return action.indexOf("focus") !== -1 || showAction.indexOf("focus") !== -1;
    },
    isBlurToHide: function isBlurToHide() {
      var _this$$props7 = this.$props, action = _this$$props7.action, hideAction = _this$$props7.hideAction;
      return action.indexOf("focus") !== -1 || hideAction.indexOf("blur") !== -1;
    },
    forcePopupAlign: function forcePopupAlign() {
      if (this.$data.sPopupVisible && this._component && this._component.alignInstance) {
        this._component.alignInstance.forceAlign();
      }
    },
    fireEvents: function fireEvents(type3, e2) {
      if (this.childOriginEvents[type3]) {
        this.childOriginEvents[type3](e2);
      }
      var event = this.$props[type3] || this.$attrs[type3];
      if (event) {
        event(e2);
      }
    },
    close: function close() {
      this.setPopupVisible(false);
    }
  },
  render: function render11() {
    var _this6 = this;
    var sPopupVisible = this.sPopupVisible, $attrs = this.$attrs;
    var children = filterEmpty(getSlot(this));
    var _this$$props8 = this.$props, forceRender = _this$$props8.forceRender, alignPoint2 = _this$$props8.alignPoint;
    if (children.length > 1) {
      warning$4(false, "Trigger children just support only one default", true);
    }
    var child = children[0];
    this.childOriginEvents = getEvents(child);
    var newChildProps = {
      key: "trigger"
    };
    if (this.isContextmenuToShow()) {
      newChildProps.onContextmenu = this.onContextmenu;
    } else {
      newChildProps.onContextmenu = this.createTwoChains("onContextmenu");
    }
    if (this.isClickToHide() || this.isClickToShow()) {
      newChildProps.onClick = this.onClick;
      newChildProps.onMousedown = this.onMousedown;
      newChildProps[supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart"] = this.onTouchstart;
    } else {
      newChildProps.onClick = this.createTwoChains("onClick");
      newChildProps.onMousedown = this.createTwoChains("onMousedown");
      newChildProps[supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart"] = this.createTwoChains("onTouchstart");
    }
    if (this.isMouseEnterToShow()) {
      newChildProps.onMouseenter = this.onMouseenter;
      if (alignPoint2) {
        newChildProps.onMousemove = this.onMouseMove;
      }
    } else {
      newChildProps.onMouseenter = this.createTwoChains("onMouseenter");
    }
    if (this.isMouseLeaveToHide()) {
      newChildProps.onMouseleave = this.onMouseleave;
    } else {
      newChildProps.onMouseleave = this.createTwoChains("onMouseleave");
    }
    if (this.isFocusToShow() || this.isBlurToHide()) {
      newChildProps.onFocus = this.onFocus;
      newChildProps.onBlur = this.onBlur;
    } else {
      newChildProps.onFocus = this.createTwoChains("onFocus");
      newChildProps.onBlur = function(e2) {
        if (e2 && (!e2.relatedTarget || !contains(e2.target, e2.relatedTarget))) {
          _this6.createTwoChains("onBlur")(e2);
        }
      };
    }
    var childrenClassName = classNames(child && child.props && child.props.class, $attrs.class);
    if (childrenClassName) {
      newChildProps.class = childrenClassName;
    }
    var trigger2 = cloneElement(child, newChildProps);
    var portal;
    if (sPopupVisible || this._component || forceRender) {
      portal = createVNode(Portal$1, {
        "key": "portal",
        "children": this.getComponent(),
        "getContainer": this.getContainer,
        "didUpdate": this.handlePortalUpdate
      }, null);
    }
    return [portal, trigger2];
  }
});
var __rest$Q = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var getBuiltInPlacements = function getBuiltInPlacements2(dropdownMatchSelectWidth) {
  var adjustX = typeof dropdownMatchSelectWidth !== "number" ? 0 : 1;
  return {
    bottomLeft: {
      points: ["tl", "bl"],
      offset: [0, 4],
      overflow: {
        adjustX,
        adjustY: 1
      }
    },
    bottomRight: {
      points: ["tr", "br"],
      offset: [0, 4],
      overflow: {
        adjustX,
        adjustY: 1
      }
    },
    topLeft: {
      points: ["bl", "tl"],
      offset: [0, -4],
      overflow: {
        adjustX,
        adjustY: 1
      }
    },
    topRight: {
      points: ["br", "tr"],
      offset: [0, -4],
      overflow: {
        adjustX,
        adjustY: 1
      }
    }
  };
};
var SelectTrigger$2 = defineComponent({
  name: "SelectTrigger",
  inheritAttrs: false,
  created: function created3() {
    this.popupRef = createRef$1();
  },
  methods: {
    getPopupElement: function getPopupElement2() {
      return this.popupRef.current;
    }
  },
  render: function render12() {
    var _this = this;
    var _a = _extends$1(_extends$1({}, this.$props), this.$attrs), _a$empty = _a.empty, empty2 = _a$empty === void 0 ? false : _a$empty, props2 = __rest$Q(_a, ["empty"]);
    var visible9 = props2.visible, dropdownAlign = props2.dropdownAlign, prefixCls2 = props2.prefixCls, popupElement = props2.popupElement, dropdownClassName = props2.dropdownClassName, dropdownStyle = props2.dropdownStyle, dropdownMatchSelectWidth = props2.dropdownMatchSelectWidth, containerWidth = props2.containerWidth, dropdownRender = props2.dropdownRender, animation2 = props2.animation, transitionName2 = props2.transitionName, direction = props2.direction, getPopupContainer = props2.getPopupContainer;
    var dropdownPrefixCls = "".concat(prefixCls2, "-dropdown");
    var popupNode = popupElement;
    if (dropdownRender) {
      popupNode = dropdownRender({
        menuNode: popupElement,
        props: props2
      });
    }
    var builtInPlacements = getBuiltInPlacements(dropdownMatchSelectWidth);
    var mergedTransitionName = animation2 ? "".concat(dropdownPrefixCls, "-").concat(animation2) : transitionName2;
    var popupStyle = _extends$1({
      minWidth: "".concat(containerWidth, "px")
    }, dropdownStyle);
    if (typeof dropdownMatchSelectWidth === "number") {
      popupStyle.width = "".concat(dropdownMatchSelectWidth, "px");
    } else if (dropdownMatchSelectWidth) {
      popupStyle.width = "".concat(containerWidth, "px");
    }
    return createVNode(Trigger, _objectSpread2$2(_objectSpread2$2({}, props2), {}, {
      "showAction": [],
      "hideAction": [],
      "popupPlacement": direction === "rtl" ? "bottomRight" : "bottomLeft",
      "builtinPlacements": builtInPlacements,
      "prefixCls": dropdownPrefixCls,
      "popupTransitionName": mergedTransitionName,
      "popup": createVNode("div", {
        "ref": this.popupRef
      }, [popupNode]),
      "popupAlign": dropdownAlign,
      "popupVisible": visible9,
      "getPopupContainer": getPopupContainer,
      "popupClassName": classNames(dropdownClassName, _defineProperty$U({}, "".concat(dropdownPrefixCls, "-empty"), empty2)),
      "popupStyle": popupStyle
    }), {
      default: function _default8() {
        return [getSlot(_this)[0]];
      }
    });
  }
});
SelectTrigger$2.props = {
  dropdownAlign: PropsTypes.object,
  visible: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  dropdownClassName: PropsTypes.string,
  dropdownStyle: PropsTypes.object,
  empty: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  popupClassName: PropsTypes.string,
  animation: PropsTypes.string,
  transitionName: PropsTypes.string,
  getPopupContainer: PropsTypes.func,
  dropdownRender: PropsTypes.func,
  containerWidth: PropsTypes.number,
  dropdownMatchSelectWidth: PropsTypes.oneOfType([Number, Boolean]).def(true),
  popupElement: PropsTypes.any,
  direction: PropsTypes.string,
  getTriggerDOMNode: PropsTypes.func
};
var SelectTrigger$3 = SelectTrigger$2;
var INTERNAL_PROPS_MARK = "RC_SELECT_INTERNAL_PROPS_MARK";
function useDelayReset() {
  var timeout = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;
  var bool = ref(false);
  var delay;
  var cancelLatest = function cancelLatest2() {
    window.clearTimeout(delay);
  };
  onMounted(function() {
    cancelLatest();
  });
  var delaySetBool = function delaySetBool2(value26, callback) {
    cancelLatest();
    delay = window.setTimeout(function() {
      bool.value = value26;
      if (callback) {
        callback();
      }
    }, timeout);
  };
  return [bool, delaySetBool, cancelLatest];
}
function useSelectTriggerControl(refs, open6, triggerOpen) {
  function onGlobalMouseDown(event) {
    var _a, _b, _c;
    var target = event.target;
    if (target.shadowRoot && event.composed) {
      target = event.composedPath()[0] || target;
    }
    var elements = [(_a = refs[0]) === null || _a === void 0 ? void 0 : _a.value, (_c = (_b = refs[1]) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.getPopupElement()];
    if (open6.value && elements.every(function(element) {
      return element && !element.contains(target) && element !== target;
    })) {
      triggerOpen(false);
    }
  }
  onMounted(function() {
    window.addEventListener("mousedown", onGlobalMouseDown);
  });
  onBeforeUnmount(function() {
    window.removeEventListener("mousedown", onGlobalMouseDown);
  });
}
function useCacheDisplayValue(values) {
  var prevValues = _toConsumableArray(values.value);
  var mergedValues = computed(function() {
    var valueLabels = new Map();
    prevValues.forEach(function(_ref) {
      var value26 = _ref.value, label = _ref.label;
      if (value26 !== label) {
        valueLabels.set(value26, label);
      }
    });
    var resultValues = values.value.map(function(item) {
      var cacheLabel = valueLabels.get(item.value);
      if (item.isCacheable && cacheLabel) {
        return _extends$1(_extends$1({}, item), {
          label: cacheLabel
        });
      }
      return item;
    });
    prevValues = resultValues;
    return resultValues;
  });
  return mergedValues;
}
function useCacheOptions(options2) {
  var optionMap = computed(function() {
    var map2 = new Map();
    options2.value.forEach(function(item) {
      var value26 = item.data.value;
      map2.set(value26, item);
    });
    return map2;
  });
  var getValueOption = function getValueOption2(vals) {
    return vals.map(function(value26) {
      return optionMap.value.get(value26);
    }).filter(Boolean);
  };
  return getValueOption;
}
var initDefaultProps = function initDefaultProps3(types2, defaultProps2) {
  var propTypes2 = _extends$1({}, types2);
  Object.keys(defaultProps2).forEach(function(k2) {
    var prop = propTypes2[k2];
    if (prop) {
      prop.default = defaultProps2[k2];
    } else {
      throw new Error("not have ".concat(k2, " prop"));
    }
  });
  return propTypes2;
};
var initDefaultProps$1 = initDefaultProps;
var isMobile$2 = function() {
  if (typeof navigator === "undefined" || typeof window === "undefined") {
    return false;
  }
  var agent = navigator.userAgent || navigator.vendor || window.opera;
  if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4))) {
    return true;
  }
  return false;
};
var __rest$P = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var DEFAULT_OMIT_PROPS = ["children", "removeIcon", "placeholder", "autofocus", "maxTagCount", "maxTagTextLength", "maxTagPlaceholder", "choiceTransitionName", "onInputKeyDown", "tabindex"];
var BaseProps = function BaseProps2() {
  return {
    prefixCls: PropsTypes.string,
    id: PropsTypes.string,
    class: PropsTypes.string,
    style: PropsTypes.any,
    options: PropsTypes.array,
    mode: PropsTypes.string,
    value: PropsTypes.any,
    defaultValue: PropsTypes.any,
    labelInValue: PropsTypes.looseBool,
    inputValue: PropsTypes.string,
    searchValue: PropsTypes.string,
    optionFilterProp: PropsTypes.string,
    filterOption: PropsTypes.any,
    filterSort: PropsTypes.func,
    showSearch: PropsTypes.looseBool,
    autoClearSearchValue: PropsTypes.looseBool,
    onSearch: PropsTypes.func,
    onClear: PropsTypes.func,
    allowClear: PropsTypes.looseBool,
    clearIcon: PropsTypes.VNodeChild,
    showArrow: PropsTypes.looseBool,
    inputIcon: PropsTypes.VNodeChild,
    removeIcon: PropsTypes.VNodeChild,
    menuItemSelectedIcon: PropsTypes.VNodeChild,
    open: PropsTypes.looseBool,
    defaultOpen: PropsTypes.looseBool,
    listHeight: PropsTypes.number,
    listItemHeight: PropsTypes.number,
    dropdownStyle: PropsTypes.object,
    dropdownClassName: PropsTypes.string,
    dropdownMatchSelectWidth: withUndefined(PropsTypes.oneOfType([Boolean, Number])),
    virtual: PropsTypes.looseBool,
    dropdownRender: PropsTypes.func,
    dropdownAlign: PropsTypes.any,
    animation: PropsTypes.string,
    transitionName: PropsTypes.string,
    getPopupContainer: PropsTypes.func,
    direction: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    loading: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    defaultActiveFirstOption: PropsTypes.looseBool,
    notFoundContent: PropsTypes.VNodeChild,
    placeholder: PropsTypes.VNodeChild,
    backfill: PropsTypes.looseBool,
    getInputElement: PropsTypes.func,
    optionLabelProp: PropsTypes.string,
    maxTagTextLength: PropsTypes.number,
    maxTagCount: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    maxTagPlaceholder: PropsTypes.any,
    tokenSeparators: PropsTypes.arrayOf(PropsTypes.string),
    tagRender: PropsTypes.func,
    showAction: PropsTypes.array,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    onKeyup: PropsTypes.func,
    onKeydown: PropsTypes.func,
    onPopupScroll: PropsTypes.func,
    onDropdownVisibleChange: PropsTypes.func,
    onSelect: PropsTypes.func,
    onDeselect: PropsTypes.func,
    onInputKeyDown: {
      type: Function
    },
    onClick: PropsTypes.func,
    onChange: PropsTypes.func,
    onBlur: PropsTypes.func,
    onFocus: PropsTypes.func,
    onMousedown: PropsTypes.func,
    onMouseenter: PropsTypes.func,
    onMouseleave: PropsTypes.func,
    choiceTransitionName: PropsTypes.string,
    internalProps: PropsTypes.object,
    children: PropsTypes.array
  };
};
function generateSelector$1(config2) {
  var defaultPrefixCls = config2.prefixCls, OptionList2 = config2.components.optionList, convertChildrenToData2 = config2.convertChildrenToData, flattenOptions2 = config2.flattenOptions, getLabeledValue3 = config2.getLabeledValue, filterOptions2 = config2.filterOptions, isValueDisabled2 = config2.isValueDisabled, findValueOption2 = config2.findValueOption;
  config2.warningProps;
  var fillOptionsWithMissingValue2 = config2.fillOptionsWithMissingValue, omitDOMProps = config2.omitDOMProps;
  var Select2 = defineComponent({
    name: "Select",
    slots: ["option"],
    props: initDefaultProps$1(BaseProps(), {}),
    setup: function setup161(props2) {
      var _a;
      var useInternalProps = computed(function() {
        return props2.internalProps && props2.internalProps.mark === INTERNAL_PROPS_MARK;
      });
      warning$4(props2.optionFilterProp !== "children", "Select", "optionFilterProp not support children, please use label instead");
      var containerRef = ref(null);
      var triggerRef = ref(null);
      var selectorRef = ref(null);
      var listRef = ref(null);
      var tokenWithEnter = computed(function() {
        return (props2.tokenSeparators || []).some(function(tokenSeparator) {
          return ["\n", "\r\n"].includes(tokenSeparator);
        });
      });
      var _useDelayReset = useDelayReset(), _useDelayReset2 = _slicedToArray$2(_useDelayReset, 3), mockFocused = _useDelayReset2[0], setMockFocused = _useDelayReset2[1], cancelSetMockFocused = _useDelayReset2[2];
      var mergedId = computed(function() {
        return props2.id || "rc_select_".concat(getUUID());
      });
      var mergedOptionLabelProp = computed(function() {
        var mergedOptionLabelProp2 = props2.optionLabelProp;
        if (mergedOptionLabelProp2 === void 0) {
          mergedOptionLabelProp2 = props2.options ? "label" : "children";
        }
        return mergedOptionLabelProp2;
      });
      var mergedLabelInValue = computed(function() {
        return props2.mode === "combobox" ? false : props2.labelInValue;
      });
      var isMultiple2 = computed(function() {
        return props2.mode === "tags" || props2.mode === "multiple";
      });
      var mergedShowSearch = computed(function() {
        return props2.showSearch !== void 0 ? props2.showSearch : isMultiple2.value || props2.mode === "combobox";
      });
      var mobile = ref(false);
      onMounted(function() {
        mobile.value = isMobile$2();
      });
      var selectorDomRef = createRef$1();
      var innerSearchValue = ref("");
      var setInnerSearchValue = function setInnerSearchValue2(val) {
        innerSearchValue.value = val;
      };
      var mergedValue = ref(props2.value !== void 0 ? props2.value : props2.defaultValue);
      watch(function() {
        return props2.value;
      }, function() {
        mergedValue.value = props2.value;
        innerSearchValue.value = "";
      });
      var mergedRawValueArr = computed(function() {
        return toInnerValue(mergedValue.value, {
          labelInValue: mergedLabelInValue.value,
          combobox: props2.mode === "combobox"
        });
      });
      var mergedRawValue = computed(function() {
        return mergedRawValueArr.value[0];
      });
      var mergedValueMap = computed(function() {
        return mergedRawValueArr.value[1];
      });
      var rawValues = computed(function() {
        return new Set(mergedRawValue.value);
      });
      var activeValue = ref(null);
      var setActiveValue = function setActiveValue2(val) {
        activeValue.value = val;
      };
      var mergedSearchValue = computed(function() {
        var mergedSearchValue2 = innerSearchValue.value;
        if (props2.mode === "combobox" && mergedValue.value !== void 0) {
          mergedSearchValue2 = mergedValue.value;
        } else if (props2.searchValue !== void 0) {
          mergedSearchValue2 = props2.searchValue;
        } else if (props2.inputValue) {
          mergedSearchValue2 = props2.inputValue;
        }
        return mergedSearchValue2;
      });
      var mergedOptions = computed(function() {
        var newOptions = props2.options;
        if (newOptions === void 0) {
          newOptions = convertChildrenToData2(props2.children);
        }
        if (props2.mode === "tags" && fillOptionsWithMissingValue2) {
          newOptions = fillOptionsWithMissingValue2(newOptions, mergedValue.value, mergedOptionLabelProp.value, props2.labelInValue);
        }
        return newOptions || [];
      });
      var mergedFlattenOptions = computed(function() {
        return flattenOptions2(mergedOptions.value, props2);
      });
      var getValueOption = useCacheOptions(mergedFlattenOptions);
      var displayOptions = computed(function() {
        if (!mergedSearchValue.value || !mergedShowSearch.value) {
          return _toConsumableArray(mergedOptions.value);
        }
        var _props$optionFilterPr = props2.optionFilterProp, optionFilterProp = _props$optionFilterPr === void 0 ? "value" : _props$optionFilterPr, mode4 = props2.mode, filterOption2 = props2.filterOption;
        var filteredOptions = filterOptions2(mergedSearchValue.value, mergedOptions.value, {
          optionFilterProp,
          filterOption: mode4 === "combobox" && filterOption2 === void 0 ? function() {
            return true;
          } : filterOption2
        });
        if (mode4 === "tags" && filteredOptions.every(function(opt) {
          return opt[optionFilterProp] !== mergedSearchValue.value;
        })) {
          filteredOptions.unshift({
            value: mergedSearchValue.value,
            label: mergedSearchValue.value,
            key: "__RC_SELECT_TAG_PLACEHOLDER__"
          });
        }
        if (props2.filterSort && Array.isArray(filteredOptions)) {
          return _toConsumableArray(filteredOptions).sort(props2.filterSort);
        }
        return filteredOptions;
      });
      var displayFlattenOptions = computed(function() {
        return flattenOptions2(displayOptions.value, props2);
      });
      onMounted(function() {
        watch(mergedSearchValue, function() {
          if (listRef.value && listRef.value.scrollTo) {
            listRef.value.scrollTo(0);
          }
        }, {
          flush: "post",
          immediate: true
        });
      });
      var displayValues = computed(function() {
        var tmpValues = mergedRawValue.value.map(function(val) {
          var valueOptions = getValueOption([val]);
          var displayValue = getLabeledValue3(val, {
            options: valueOptions,
            prevValueMap: mergedValueMap.value,
            labelInValue: mergedLabelInValue.value,
            optionLabelProp: mergedOptionLabelProp.value
          });
          return _extends$1(_extends$1({}, displayValue), {
            disabled: isValueDisabled2(val, valueOptions)
          });
        });
        if (!props2.mode && tmpValues.length === 1 && tmpValues[0].value === null && tmpValues[0].label === null) {
          return [];
        }
        return tmpValues;
      });
      displayValues = useCacheDisplayValue(displayValues);
      var triggerSelect2 = function triggerSelect3(newValue, isSelect, source2) {
        var newValueOption = getValueOption([newValue]);
        var outOption = findValueOption2([newValue], newValueOption)[0];
        var _props$internalProps = props2.internalProps, internalProps = _props$internalProps === void 0 ? {} : _props$internalProps;
        if (!internalProps.skipTriggerSelect) {
          var selectValue = mergedLabelInValue.value ? getLabeledValue3(newValue, {
            options: newValueOption,
            prevValueMap: mergedValueMap.value,
            labelInValue: mergedLabelInValue.value,
            optionLabelProp: mergedOptionLabelProp.value
          }) : newValue;
          if (isSelect && props2.onSelect) {
            props2.onSelect(selectValue, outOption);
          } else if (!isSelect && props2.onDeselect) {
            props2.onDeselect(selectValue, outOption);
          }
        }
        if (useInternalProps.value) {
          if (isSelect && internalProps.onRawSelect) {
            internalProps.onRawSelect(newValue, outOption, source2);
          } else if (!isSelect && internalProps.onRawDeselect) {
            internalProps.onRawDeselect(newValue, outOption, source2);
          }
        }
      };
      var prevValueOptions = ref([]);
      var setPrevValueOptions = function setPrevValueOptions2(val) {
        prevValueOptions.value = val;
      };
      var triggerChange5 = function triggerChange6(newRawValues) {
        if (useInternalProps.value && props2.internalProps && props2.internalProps.skipTriggerChange) {
          return;
        }
        var newRawValuesOptions = getValueOption(newRawValues);
        var outValues = toOuterValues(Array.from(newRawValues), {
          labelInValue: mergedLabelInValue.value,
          options: newRawValuesOptions,
          getLabeledValue: getLabeledValue3,
          prevValueMap: mergedValueMap.value,
          optionLabelProp: mergedOptionLabelProp.value
        });
        var outValue = isMultiple2.value ? outValues : outValues[0];
        if (props2.onChange && (mergedRawValue.value.length !== 0 || outValues.length !== 0)) {
          var outOptions = findValueOption2(newRawValues, newRawValuesOptions, {
            prevValueOptions: prevValueOptions.value
          });
          setPrevValueOptions(outOptions.map(function(option, index2) {
            var clone4 = _extends$1({}, option);
            Object.defineProperty(clone4, "_INTERNAL_OPTION_VALUE_", {
              get: function get2() {
                return newRawValues[index2];
              }
            });
            return clone4;
          }));
          props2.onChange(outValue, isMultiple2.value ? outOptions : outOptions[0]);
        }
        mergedValue.value = outValue;
      };
      var onInternalSelect = function onInternalSelect2(newValue, _ref) {
        var selected = _ref.selected, source2 = _ref.source;
        var _props$autoClearSearc = props2.autoClearSearchValue, autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc;
        if (props2.disabled) {
          return;
        }
        var newRawValue;
        if (isMultiple2.value) {
          newRawValue = new Set(mergedRawValue.value);
          if (selected) {
            newRawValue.add(newValue);
          } else {
            newRawValue.delete(newValue);
          }
        } else {
          newRawValue = new Set();
          newRawValue.add(newValue);
        }
        if (isMultiple2.value || !isMultiple2.value && Array.from(mergedRawValue.value)[0] !== newValue) {
          triggerChange5(Array.from(newRawValue));
        }
        triggerSelect2(newValue, !isMultiple2.value || selected, source2);
        if (props2.mode === "combobox") {
          setInnerSearchValue(String(newValue));
          setActiveValue("");
        } else if (!isMultiple2.value || autoClearSearchValue) {
          setInnerSearchValue("");
          setActiveValue("");
        }
      };
      var onInternalOptionSelect = function onInternalOptionSelect2(newValue, info3) {
        onInternalSelect(newValue, _extends$1(_extends$1({}, info3), {
          source: "option"
        }));
      };
      var onInternalSelectionSelect = function onInternalSelectionSelect2(newValue, info3) {
        onInternalSelect(newValue, _extends$1(_extends$1({}, info3), {
          source: "selection"
        }));
      };
      var initOpen = props2.open !== void 0 ? props2.open : props2.defaultOpen;
      var innerOpen = ref(initOpen);
      var mergedOpen = ref(initOpen);
      var setInnerOpen = function setInnerOpen2(val) {
        innerOpen.value = props2.open !== void 0 ? props2.open : val;
        mergedOpen.value = innerOpen.value;
      };
      watch(function() {
        return props2.open;
      }, function() {
        setInnerOpen(props2.open);
      });
      var emptyListContent = computed(function() {
        return !props2.notFoundContent && !displayOptions.value.length;
      });
      watchEffect(function() {
        mergedOpen.value = innerOpen.value;
        if (props2.disabled || emptyListContent.value && mergedOpen.value && props2.mode === "combobox") {
          mergedOpen.value = false;
        }
      });
      var triggerOpen = computed(function() {
        return emptyListContent.value ? false : mergedOpen.value;
      });
      var onToggleOpen = function onToggleOpen2(newOpen) {
        var nextOpen = newOpen !== void 0 ? newOpen : !mergedOpen.value;
        if (innerOpen.value !== nextOpen && !props2.disabled) {
          setInnerOpen(nextOpen);
          if (props2.onDropdownVisibleChange) {
            props2.onDropdownVisibleChange(nextOpen);
          }
        }
      };
      useSelectTriggerControl([containerRef, triggerRef], triggerOpen, onToggleOpen);
      var triggerSearch = function triggerSearch2(searchText, fromTyping, isCompositing) {
        var ret = true;
        var newSearchText = searchText;
        var preSearchValue = mergedSearchValue.value;
        setActiveValue(null);
        var patchLabels = isCompositing ? null : getSeparatedContent(searchText, props2.tokenSeparators);
        var patchRawValues = patchLabels;
        if (props2.mode === "combobox") {
          if (fromTyping) {
            triggerChange5([newSearchText]);
          }
        } else if (patchLabels) {
          newSearchText = "";
          if (props2.mode !== "tags") {
            patchRawValues = patchLabels.map(function(label) {
              var item = mergedFlattenOptions.value.find(function(_ref2) {
                var data80 = _ref2.data;
                return data80[mergedOptionLabelProp.value] === label;
              });
              return item ? item.data.value : null;
            }).filter(function(val) {
              return val !== null;
            });
          }
          var newRawValues = Array.from(new Set([].concat(_toConsumableArray(mergedRawValue.value), _toConsumableArray(patchRawValues))));
          triggerChange5(newRawValues);
          newRawValues.forEach(function(newRawValue) {
            triggerSelect2(newRawValue, true, "input");
          });
          onToggleOpen(false);
          ret = false;
        }
        setInnerSearchValue(newSearchText);
        if (props2.onSearch && preSearchValue !== newSearchText) {
          props2.onSearch(newSearchText);
        }
        return ret;
      };
      var onSearchSubmit = function onSearchSubmit2(searchText) {
        if (!searchText || !searchText.trim()) {
          return;
        }
        var newRawValues = Array.from(new Set([].concat(_toConsumableArray(mergedRawValue.value), [searchText])));
        triggerChange5(newRawValues);
        newRawValues.forEach(function(newRawValue) {
          triggerSelect2(newRawValue, true, "input");
        });
        setInnerSearchValue("");
      };
      watch(function() {
        return props2.disabled;
      }, function() {
        if (innerOpen.value && !!props2.disabled) {
          setInnerOpen(false);
        }
      }, {
        immediate: true
      });
      watch(mergedOpen, function() {
        if (!mergedOpen.value && !isMultiple2.value && props2.mode !== "combobox") {
          triggerSearch("", false, false);
        }
      }, {
        immediate: true
      });
      var _useLock = useLock(), _useLock2 = _slicedToArray$2(_useLock, 2), getClearLock = _useLock2[0], setClearLock = _useLock2[1];
      var onInternalKeyDown = function onInternalKeyDown2(event) {
        var clearLock = getClearLock();
        var which = event.which;
        if (which === KeyCode$2.ENTER) {
          if (props2.mode !== "combobox") {
            event.preventDefault();
          }
          if (!mergedOpen.value) {
            onToggleOpen(true);
          }
        }
        setClearLock(!!mergedSearchValue.value);
        if (which === KeyCode$2.BACKSPACE && !clearLock && isMultiple2.value && !mergedSearchValue.value && mergedRawValue.value.length) {
          var removeInfo = removeLastEnabledValue(displayValues.value, mergedRawValue.value);
          if (removeInfo.removedValue !== null) {
            triggerChange5(removeInfo.values);
            triggerSelect2(removeInfo.removedValue, false, "input");
          }
        }
        if (mergedOpen.value && listRef.value) {
          listRef.value.onKeydown(event);
        }
        if (props2.onKeydown) {
          props2.onKeydown(event);
        }
      };
      var onInternalKeyUp = function onInternalKeyUp2(event) {
        if (mergedOpen.value && listRef.value) {
          listRef.value.onKeyup(event);
        }
        if (props2.onKeyup) {
          props2.onKeyup(event);
        }
      };
      var focusRef = ref(false);
      var onContainerFocus = function onContainerFocus2() {
        setMockFocused(true);
        if (!props2.disabled) {
          if (props2.onFocus && !focusRef.value) {
            props2.onFocus(arguments.length <= 0 ? void 0 : arguments[0]);
          }
          if (props2.showAction && props2.showAction.includes("focus")) {
            onToggleOpen(true);
          }
        }
        focusRef.value = true;
      };
      var onContainerBlur = function onContainerBlur2() {
        setMockFocused(false, function() {
          focusRef.value = false;
          onToggleOpen(false);
        });
        if (props2.disabled) {
          return;
        }
        var searchVal = mergedSearchValue.value;
        if (searchVal) {
          if (props2.mode === "tags") {
            triggerSearch("", false, false);
            triggerChange5(Array.from(new Set([].concat(_toConsumableArray(mergedRawValue.value), [searchVal]))));
          } else if (props2.mode === "multiple") {
            setInnerSearchValue("");
          }
        }
        if (props2.onBlur) {
          props2.onBlur(arguments.length <= 0 ? void 0 : arguments[0]);
        }
      };
      provide("VCSelectContainerEvent", {
        focus: onContainerFocus,
        blur: onContainerBlur
      });
      var activeTimeoutIds = [];
      onMounted(function() {
        activeTimeoutIds.forEach(function(timeoutId) {
          return window.clearTimeout(timeoutId);
        });
        activeTimeoutIds.splice(0, activeTimeoutIds.length);
      });
      onBeforeUnmount(function() {
        activeTimeoutIds.forEach(function(timeoutId) {
          return window.clearTimeout(timeoutId);
        });
        activeTimeoutIds.splice(0, activeTimeoutIds.length);
      });
      var onInternalMouseDown = function onInternalMouseDown2(event) {
        var target = event.target;
        var popupElement = triggerRef.value && triggerRef.value.getPopupElement();
        if (popupElement && popupElement.contains(target)) {
          var timeoutId = window.setTimeout(function() {
            var index2 = activeTimeoutIds.indexOf(timeoutId);
            if (index2 !== -1) {
              activeTimeoutIds.splice(index2, 1);
            }
            cancelSetMockFocused();
            if (!mobile.value && !popupElement.contains(document.activeElement)) {
              selectorRef.value.focus();
            }
          });
          activeTimeoutIds.push(timeoutId);
        }
        if (props2.onMousedown) {
          props2.onMousedown(event);
        }
      };
      var accessibilityIndex = ref(0);
      var mergedDefaultActiveFirstOption = computed(function() {
        return props2.defaultActiveFirstOption !== void 0 ? props2.defaultActiveFirstOption : props2.mode !== "combobox";
      });
      var onActiveValue = function onActiveValue2(active, index2) {
        var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref3$source = _ref3.source, source2 = _ref3$source === void 0 ? "keyboard" : _ref3$source;
        accessibilityIndex.value = index2;
        if (props2.backfill && props2.mode === "combobox" && active !== null && source2 === "keyboard") {
          setActiveValue(String(active));
        }
      };
      var containerWidth = ref(null);
      onMounted(function() {
        watch(triggerOpen, function() {
          if (triggerOpen.value) {
            var newWidth = Math.ceil(containerRef.value.offsetWidth);
            if (containerWidth.value !== newWidth) {
              containerWidth.value = newWidth;
            }
          }
        }, {
          immediate: true
        });
      });
      var focus27 = function focus28() {
        selectorRef.value.focus();
      };
      var blur24 = function blur25() {
        selectorRef.value.blur();
      };
      return {
        focus: focus27,
        blur: blur24,
        scrollTo: (_a = listRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo,
        tokenWithEnter,
        mockFocused,
        mergedId,
        containerWidth,
        onActiveValue,
        accessibilityIndex,
        mergedDefaultActiveFirstOption,
        onInternalMouseDown,
        onContainerFocus,
        onContainerBlur,
        onInternalKeyDown,
        isMultiple: isMultiple2,
        mergedOpen,
        displayOptions,
        displayFlattenOptions,
        rawValues,
        onInternalOptionSelect,
        onToggleOpen,
        mergedSearchValue,
        useInternalProps,
        triggerChange: triggerChange5,
        triggerSearch,
        mergedRawValue,
        mergedShowSearch,
        onInternalKeyUp,
        triggerOpen,
        mergedOptions,
        onInternalSelectionSelect,
        selectorDomRef,
        displayValues,
        activeValue,
        onSearchSubmit,
        containerRef,
        listRef,
        triggerRef,
        selectorRef
      };
    },
    methods: {
      onPopupMouseEnter: function onPopupMouseEnter() {
        this.$forceUpdate();
      }
    },
    render: function render166() {
      var _classNames2, _this = this;
      var tokenWithEnter = this.tokenWithEnter, mockFocused = this.mockFocused, mergedId = this.mergedId, containerWidth = this.containerWidth, onActiveValue = this.onActiveValue, accessibilityIndex = this.accessibilityIndex, mergedDefaultActiveFirstOption = this.mergedDefaultActiveFirstOption, onInternalMouseDown = this.onInternalMouseDown, onInternalKeyDown = this.onInternalKeyDown, isMultiple2 = this.isMultiple, mergedOpen = this.mergedOpen, displayOptions = this.displayOptions, displayFlattenOptions = this.displayFlattenOptions, rawValues = this.rawValues, onInternalOptionSelect = this.onInternalOptionSelect, onToggleOpen = this.onToggleOpen, mergedSearchValue = this.mergedSearchValue, onPopupMouseEnter = this.onPopupMouseEnter, useInternalProps = this.useInternalProps, triggerChange5 = this.triggerChange, triggerSearch = this.triggerSearch, mergedRawValue = this.mergedRawValue, mergedShowSearch = this.mergedShowSearch, onInternalKeyUp = this.onInternalKeyUp, triggerOpen = this.triggerOpen, mergedOptions = this.mergedOptions, onInternalSelectionSelect = this.onInternalSelectionSelect, selectorDomRef = this.selectorDomRef, displayValues = this.displayValues, activeValue = this.activeValue, onSearchSubmit = this.onSearchSubmit, slots = this.$slots;
      var _a = this.$props, _a$prefixCls = _a.prefixCls, prefixCls2 = _a$prefixCls === void 0 ? defaultPrefixCls : _a$prefixCls, className = _a.class;
      _a.id;
      _a.open;
      _a.defaultOpen;
      var options2 = _a.options;
      _a.children;
      var mode4 = _a.mode;
      _a.value;
      _a.defaultValue;
      _a.labelInValue;
      _a.showSearch;
      _a.inputValue;
      _a.searchValue;
      _a.filterOption;
      _a.optionFilterProp;
      _a.autoClearSearchValue;
      _a.onSearch;
      var allowClear = _a.allowClear, clearIcon = _a.clearIcon, showArrow = _a.showArrow, inputIcon = _a.inputIcon, menuItemSelectedIcon = _a.menuItemSelectedIcon, disabled = _a.disabled, loading = _a.loading;
      _a.defaultActiveFirstOption;
      var _a$notFoundContent = _a.notFoundContent, notFoundContent = _a$notFoundContent === void 0 ? "Not Found" : _a$notFoundContent;
      _a.optionLabelProp;
      _a.backfill;
      var getInputElement2 = _a.getInputElement, getPopupContainer = _a.getPopupContainer, _a$listHeight = _a.listHeight, listHeight = _a$listHeight === void 0 ? 200 : _a$listHeight, _a$listItemHeight = _a.listItemHeight, listItemHeight = _a$listItemHeight === void 0 ? 20 : _a$listItemHeight, animation2 = _a.animation, transitionName2 = _a.transitionName, virtual = _a.virtual, dropdownStyle = _a.dropdownStyle, dropdownClassName = _a.dropdownClassName, dropdownMatchSelectWidth = _a.dropdownMatchSelectWidth, dropdownRender = _a.dropdownRender, dropdownAlign = _a.dropdownAlign;
      _a.showAction;
      var direction = _a.direction;
      _a.tokenSeparators;
      var tagRender = _a.tagRender, onPopupScroll = _a.onPopupScroll;
      _a.onDropdownVisibleChange;
      _a.onFocus;
      _a.onBlur;
      _a.onKeyup;
      _a.onKeydown;
      _a.onMousedown;
      _a.onChange;
      _a.onSelect;
      _a.onDeselect;
      var onClear4 = _a.onClear, _a$internalProps = _a.internalProps, internalProps = _a$internalProps === void 0 ? {} : _a$internalProps, restProps = __rest$P(_a, ["prefixCls", "class", "id", "open", "defaultOpen", "options", "children", "mode", "value", "defaultValue", "labelInValue", "showSearch", "inputValue", "searchValue", "filterOption", "optionFilterProp", "autoClearSearchValue", "onSearch", "allowClear", "clearIcon", "showArrow", "inputIcon", "menuItemSelectedIcon", "disabled", "loading", "defaultActiveFirstOption", "notFoundContent", "optionLabelProp", "backfill", "getInputElement", "getPopupContainer", "listHeight", "listItemHeight", "animation", "transitionName", "virtual", "dropdownStyle", "dropdownClassName", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "showAction", "direction", "tokenSeparators", "tagRender", "onPopupScroll", "onDropdownVisibleChange", "onFocus", "onBlur", "onKeyup", "onKeydown", "onMousedown", "onChange", "onSelect", "onDeselect", "onClear", "internalProps"]);
      var customizeInputElement = mode4 === "combobox" && getInputElement2 && getInputElement2() || null;
      var domProps = omitDOMProps ? omitDOMProps(restProps) : restProps;
      DEFAULT_OMIT_PROPS.forEach(function(prop) {
        delete domProps[prop];
      });
      var popupNode = createVNode(OptionList2, {
        "ref": "listRef",
        "prefixCls": prefixCls2,
        "id": mergedId,
        "open": mergedOpen,
        "childrenAsData": !options2,
        "options": displayOptions,
        "flattenOptions": displayFlattenOptions,
        "multiple": isMultiple2,
        "values": rawValues,
        "height": listHeight,
        "itemHeight": listItemHeight,
        "onSelect": onInternalOptionSelect,
        "onToggleOpen": onToggleOpen,
        "onActiveValue": onActiveValue,
        "defaultActiveFirstOption": mergedDefaultActiveFirstOption,
        "notFoundContent": notFoundContent,
        "onScroll": onPopupScroll,
        "searchValue": mergedSearchValue,
        "menuItemSelectedIcon": menuItemSelectedIcon,
        "virtual": virtual !== false && dropdownMatchSelectWidth !== false,
        "onMouseenter": onPopupMouseEnter
      }, {
        option: slots.option
      });
      var clearNode;
      var onClearMouseDown = function onClearMouseDown2() {
        if (useInternalProps && internalProps.onClear) {
          internalProps.onClear();
        }
        if (onClear4) {
          onClear4();
        }
        triggerChange5([]);
        triggerSearch("", false, false);
      };
      if (!disabled && allowClear && (mergedRawValue.length || mergedSearchValue)) {
        clearNode = createVNode(TransBtn$1, {
          "class": "".concat(prefixCls2, "-clear"),
          "onMousedown": onClearMouseDown,
          "customizeIcon": clearIcon
        }, {
          default: function _default8() {
            return [createTextVNode("\xD7")];
          }
        });
      }
      var mergedShowArrow = showArrow !== void 0 ? showArrow : loading || !isMultiple2 && mode4 !== "combobox";
      var arrowNode;
      if (mergedShowArrow) {
        arrowNode = createVNode(TransBtn$1, {
          "class": classNames("".concat(prefixCls2, "-arrow"), _defineProperty$U({}, "".concat(prefixCls2, "-arrow-loading"), loading)),
          "customizeIcon": inputIcon,
          "customizeIconProps": {
            loading,
            searchValue: mergedSearchValue,
            open: mergedOpen,
            focused: mockFocused,
            showSearch: mergedShowSearch
          }
        }, null);
      }
      var mergedClassName = classNames(prefixCls2, className, (_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(prefixCls2, "-focused"), mockFocused), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-multiple"), isMultiple2), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-single"), !isMultiple2), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-allow-clear"), allowClear), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-show-arrow"), mergedShowArrow), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-loading"), loading), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-open"), mergedOpen), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-customize-input"), customizeInputElement), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-show-search"), mergedShowSearch), _classNames2));
      return createVNode("div", _objectSpread2$2(_objectSpread2$2({
        "class": mergedClassName
      }, domProps), {}, {
        "ref": "containerRef",
        "onMousedown": onInternalMouseDown,
        "onKeydown": onInternalKeyDown,
        "onKeyup": onInternalKeyUp
      }), [mockFocused && !mergedOpen && createVNode("span", {
        "style": {
          width: 0,
          height: 0,
          display: "flex",
          overflow: "hidden",
          opacity: 0
        },
        "aria-live": "polite"
      }, ["".concat(mergedRawValue.join(", "))]), createVNode(SelectTrigger$3, {
        "ref": "triggerRef",
        "disabled": disabled,
        "prefixCls": prefixCls2,
        "visible": triggerOpen,
        "popupElement": popupNode,
        "containerWidth": containerWidth,
        "animation": animation2,
        "transitionName": transitionName2,
        "dropdownStyle": dropdownStyle,
        "dropdownClassName": dropdownClassName,
        "direction": direction,
        "dropdownMatchSelectWidth": dropdownMatchSelectWidth,
        "dropdownRender": dropdownRender,
        "dropdownAlign": dropdownAlign,
        "getPopupContainer": getPopupContainer,
        "empty": !mergedOptions.length,
        "getTriggerDOMNode": function getTriggerDOMNode() {
          return selectorDomRef.current;
        }
      }, {
        default: function _default8() {
          return [createVNode(Selector$3, _objectSpread2$2(_objectSpread2$2({}, _this.$props), {}, {
            "domRef": selectorDomRef,
            "prefixCls": prefixCls2,
            "inputElement": customizeInputElement,
            "ref": "selectorRef",
            "id": mergedId,
            "showSearch": mergedShowSearch,
            "mode": mode4,
            "accessibilityIndex": accessibilityIndex,
            "multiple": isMultiple2,
            "tagRender": tagRender,
            "values": displayValues,
            "open": mergedOpen,
            "onToggleOpen": onToggleOpen,
            "searchValue": mergedSearchValue,
            "activeValue": activeValue,
            "onSearch": triggerSearch,
            "onSearchSubmit": onSearchSubmit,
            "onSelect": onInternalSelectionSelect,
            "tokenWithEnter": tokenWithEnter
          }), null)];
        }
      }), arrowNode, clearNode]);
    }
  });
  return Select2;
}
function warningProps(props2) {
  var mode4 = props2.mode, options2 = props2.options, children = props2.children, backfill = props2.backfill, allowClear = props2.allowClear, placeholder = props2.placeholder, getInputElement2 = props2.getInputElement, showSearch = props2.showSearch, onSearch = props2.onSearch, defaultOpen = props2.defaultOpen, autofocus = props2.autofocus, labelInValue = props2.labelInValue, value26 = props2.value, inputValue = props2.inputValue, optionLabelProp = props2.optionLabelProp;
  var multiple = mode4 === "multiple" || mode4 === "tags";
  var mergedShowSearch = showSearch !== void 0 ? showSearch : multiple || mode4 === "combobox";
  var mergedOptions = options2 || convertChildrenToData$1(children);
  warningOnce(mode4 !== "tags" || mergedOptions.every(function(opt) {
    return !opt.disabled;
  }), "Please avoid setting option to disabled in tags mode since user can always type text as tag.");
  warningOnce(mode4 !== "combobox" || !optionLabelProp, "`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.");
  warningOnce(mode4 === "combobox" || !backfill, "`backfill` only works with `combobox` mode.");
  warningOnce(mode4 === "combobox" || !getInputElement2, "`getInputElement` only work with `combobox` mode.");
  noteOnce(mode4 !== "combobox" || !getInputElement2 || !allowClear || !placeholder, "Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.");
  if (onSearch && !mergedShowSearch && mode4 !== "combobox" && mode4 !== "tags") {
    warningOnce(false, "`onSearch` should work with `showSearch` instead of use alone.");
  }
  noteOnce(!defaultOpen || autofocus, "`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autofocus` if needed.");
  if (value26 !== void 0 && value26 !== null) {
    var values = toArray$5(value26);
    warningOnce(!labelInValue || values.every(function(val) {
      return _typeof$2(val) === "object" && ("key" in val || "value" in val);
    }), "`value` should in shape of `{ value: string | number, label?: any }` when you set `labelInValue` to `true`");
    warningOnce(!multiple || Array.isArray(value26), "`value` should be array when `mode` is `multiple` or `tags`");
  }
  if (children) {
    var invalidateChildType = null;
    children.some(function(node) {
      var _a;
      if (!isValidElement(node) || !node.type) {
        return false;
      }
      var type3 = node.type;
      if (type3.isSelectOption) {
        return false;
      }
      if (type3.isSelectOptGroup) {
        var childs = ((_a = node.children) === null || _a === void 0 ? void 0 : _a.default()) || [];
        var allChildrenValid = childs.every(function(subNode) {
          if (!isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {
            return true;
          }
          invalidateChildType = subNode.type;
          return false;
        });
        if (allChildrenValid) {
          return false;
        }
        return true;
      }
      invalidateChildType = type3;
      return true;
    });
    if (invalidateChildType) {
      warningOnce(false, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, "`."));
    }
    warningOnce(inputValue === void 0, "`inputValue` is deprecated, please use `searchValue` instead.");
  }
}
function arrayMap(array3, iteratee) {
  var index2 = -1, length = array3 == null ? 0 : array3.length, result = Array(length);
  while (++index2 < length) {
    result[index2] = iteratee(array3[index2], index2, array3);
  }
  return result;
}
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
function eq(value26, other) {
  return value26 === other || value26 !== value26 && other !== other;
}
function assocIndexOf(array3, key2) {
  var length = array3.length;
  while (length--) {
    if (eq(array3[length][0], key2)) {
      return length;
    }
  }
  return -1;
}
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key2) {
  var data80 = this.__data__, index2 = assocIndexOf(data80, key2);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data80.length - 1;
  if (index2 == lastIndex) {
    data80.pop();
  } else {
    splice.call(data80, index2, 1);
  }
  --this.size;
  return true;
}
function listCacheGet(key2) {
  var data80 = this.__data__, index2 = assocIndexOf(data80, key2);
  return index2 < 0 ? void 0 : data80[index2][1];
}
function listCacheHas(key2) {
  return assocIndexOf(this.__data__, key2) > -1;
}
function listCacheSet(key2, value26) {
  var data80 = this.__data__, index2 = assocIndexOf(data80, key2);
  if (index2 < 0) {
    ++this.size;
    data80.push([key2, value26]);
  } else {
    data80[index2][1] = value26;
  }
  return this;
}
function ListCache(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}
function stackDelete(key2) {
  var data80 = this.__data__, result = data80["delete"](key2);
  this.size = data80.size;
  return result;
}
function stackGet(key2) {
  return this.__data__.get(key2);
}
function stackHas(key2) {
  return this.__data__.has(key2);
}
function isObject$2(value26) {
  var type3 = typeof value26;
  return value26 != null && (type3 == "object" || type3 == "function");
}
var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$1(value26) {
  if (!isObject$2(value26)) {
    return false;
  }
  var tag = baseGetTag(value26);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}
var coreJsData = root$1["__core-js_shared__"];
var coreJsData$1 = coreJsData;
var maskSrcKey = function() {
  var uid2 = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || "");
  return uid2 ? "Symbol(src)_1." + uid2 : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var funcProto$1 = Function.prototype;
var funcToString$1 = funcProto$1.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e2) {
    }
    try {
      return func + "";
    } catch (e2) {
    }
  }
  return "";
}
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto$c = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$a = objectProto$c.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty$a).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value26) {
  if (!isObject$2(value26) || isMasked(value26)) {
    return false;
  }
  var pattern2 = isFunction$1(value26) ? reIsNative : reIsHostCtor;
  return pattern2.test(toSource(value26));
}
function getValue$1(object3, key2) {
  return object3 == null ? void 0 : object3[key2];
}
function getNative(object3, key2) {
  var value26 = getValue$1(object3, key2);
  return baseIsNative(value26) ? value26 : void 0;
}
var Map$1 = getNative(root$1, "Map");
var Map$2 = Map$1;
var nativeCreate = getNative(Object, "create");
var nativeCreate$1 = nativeCreate;
function hashClear() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
  this.size = 0;
}
function hashDelete(key2) {
  var result = this.has(key2) && delete this.__data__[key2];
  this.size -= result ? 1 : 0;
  return result;
}
var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
var objectProto$b = Object.prototype;
var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
function hashGet(key2) {
  var data80 = this.__data__;
  if (nativeCreate$1) {
    var result = data80[key2];
    return result === HASH_UNDEFINED$2 ? void 0 : result;
  }
  return hasOwnProperty$9.call(data80, key2) ? data80[key2] : void 0;
}
var objectProto$a = Object.prototype;
var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
function hashHas(key2) {
  var data80 = this.__data__;
  return nativeCreate$1 ? data80[key2] !== void 0 : hasOwnProperty$8.call(data80, key2);
}
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
function hashSet(key2, value26) {
  var data80 = this.__data__;
  this.size += this.has(key2) ? 0 : 1;
  data80[key2] = nativeCreate$1 && value26 === void 0 ? HASH_UNDEFINED$1 : value26;
  return this;
}
function Hash(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$2 || ListCache)(),
    "string": new Hash()
  };
}
function isKeyable(value26) {
  var type3 = typeof value26;
  return type3 == "string" || type3 == "number" || type3 == "symbol" || type3 == "boolean" ? value26 !== "__proto__" : value26 === null;
}
function getMapData(map2, key2) {
  var data80 = map2.__data__;
  return isKeyable(key2) ? data80[typeof key2 == "string" ? "string" : "hash"] : data80.map;
}
function mapCacheDelete(key2) {
  var result = getMapData(this, key2)["delete"](key2);
  this.size -= result ? 1 : 0;
  return result;
}
function mapCacheGet(key2) {
  return getMapData(this, key2).get(key2);
}
function mapCacheHas(key2) {
  return getMapData(this, key2).has(key2);
}
function mapCacheSet(key2, value26) {
  var data80 = getMapData(this, key2), size2 = data80.size;
  data80.set(key2, value26);
  this.size += data80.size == size2 ? 0 : 1;
  return this;
}
function MapCache(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
var LARGE_ARRAY_SIZE$1 = 200;
function stackSet(key2, value26) {
  var data80 = this.__data__;
  if (data80 instanceof ListCache) {
    var pairs = data80.__data__;
    if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
      pairs.push([key2, value26]);
      this.size = ++data80.size;
      return this;
    }
    data80 = this.__data__ = new MapCache(pairs);
  }
  data80.set(key2, value26);
  this.size = data80.size;
  return this;
}
function Stack(entries) {
  var data80 = this.__data__ = new ListCache(entries);
  this.size = data80.size;
}
Stack.prototype.clear = stackClear;
Stack.prototype["delete"] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
function arrayEach(array3, iteratee) {
  var index2 = -1, length = array3 == null ? 0 : array3.length;
  while (++index2 < length) {
    if (iteratee(array3[index2], index2, array3) === false) {
      break;
    }
  }
  return array3;
}
var defineProperty = function() {
  try {
    var func = getNative(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e2) {
  }
}();
var defineProperty$1 = defineProperty;
function baseAssignValue(object3, key2, value26) {
  if (key2 == "__proto__" && defineProperty$1) {
    defineProperty$1(object3, key2, {
      "configurable": true,
      "enumerable": true,
      "value": value26,
      "writable": true
    });
  } else {
    object3[key2] = value26;
  }
}
var objectProto$9 = Object.prototype;
var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
function assignValue(object3, key2, value26) {
  var objValue = object3[key2];
  if (!(hasOwnProperty$7.call(object3, key2) && eq(objValue, value26)) || value26 === void 0 && !(key2 in object3)) {
    baseAssignValue(object3, key2, value26);
  }
}
function copyObject(source2, props2, object3, customizer) {
  var isNew = !object3;
  object3 || (object3 = {});
  var index2 = -1, length = props2.length;
  while (++index2 < length) {
    var key2 = props2[index2];
    var newValue = customizer ? customizer(object3[key2], source2[key2], key2, object3, source2) : void 0;
    if (newValue === void 0) {
      newValue = source2[key2];
    }
    if (isNew) {
      baseAssignValue(object3, key2, newValue);
    } else {
      assignValue(object3, key2, newValue);
    }
  }
  return object3;
}
function baseTimes(n2, iteratee) {
  var index2 = -1, result = Array(n2);
  while (++index2 < n2) {
    result[index2] = iteratee(index2);
  }
  return result;
}
var argsTag$3 = "[object Arguments]";
function baseIsArguments(value26) {
  return isObjectLike(value26) && baseGetTag(value26) == argsTag$3;
}
var objectProto$8 = Object.prototype;
var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
var propertyIsEnumerable$1 = objectProto$8.propertyIsEnumerable;
var isArguments = baseIsArguments(function() {
  return arguments;
}()) ? baseIsArguments : function(value26) {
  return isObjectLike(value26) && hasOwnProperty$6.call(value26, "callee") && !propertyIsEnumerable$1.call(value26, "callee");
};
var isArguments$1 = isArguments;
var isArray$1 = Array.isArray;
var isArray$2 = isArray$1;
function stubFalse() {
  return false;
}
var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
var Buffer$1 = moduleExports$2 ? root$1.Buffer : void 0;
var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;
var isBuffer$1 = nativeIsBuffer || stubFalse;
var isBuffer$2 = isBuffer$1;
var MAX_SAFE_INTEGER$3 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value26, length) {
  var type3 = typeof value26;
  length = length == null ? MAX_SAFE_INTEGER$3 : length;
  return !!length && (type3 == "number" || type3 != "symbol" && reIsUint.test(value26)) && (value26 > -1 && value26 % 1 == 0 && value26 < length);
}
var MAX_SAFE_INTEGER$2 = 9007199254740991;
function isLength(value26) {
  return typeof value26 == "number" && value26 > -1 && value26 % 1 == 0 && value26 <= MAX_SAFE_INTEGER$2;
}
var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$5 = "[object Map]", numberTag$4 = "[object Number]", objectTag$3 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
function baseIsTypedArray(value26) {
  return isObjectLike(value26) && isLength(value26.length) && !!typedArrayTags[baseGetTag(value26)];
}
function baseUnary(func) {
  return function(value26) {
    return func(value26);
  };
}
var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
var freeProcess = moduleExports$1 && freeGlobal$1.process;
var nodeUtil = function() {
  try {
    var types2 = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
    if (types2) {
      return types2;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e2) {
  }
}();
var nodeUtil$1 = nodeUtil;
var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
var isTypedArray$1 = isTypedArray;
var objectProto$7 = Object.prototype;
var hasOwnProperty$5 = objectProto$7.hasOwnProperty;
function arrayLikeKeys(value26, inherited) {
  var isArr = isArray$2(value26), isArg = !isArr && isArguments$1(value26), isBuff = !isArr && !isArg && isBuffer$2(value26), isType = !isArr && !isArg && !isBuff && isTypedArray$1(value26), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value26.length, String) : [], length = result.length;
  for (var key2 in value26) {
    if ((inherited || hasOwnProperty$5.call(value26, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || isIndex(key2, length)))) {
      result.push(key2);
    }
  }
  return result;
}
var objectProto$6 = Object.prototype;
function isPrototype(value26) {
  var Ctor = value26 && value26.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$6;
  return value26 === proto2;
}
var nativeKeys = overArg(Object.keys, Object);
var nativeKeys$1 = nativeKeys;
var objectProto$5 = Object.prototype;
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
function baseKeys(object3) {
  if (!isPrototype(object3)) {
    return nativeKeys$1(object3);
  }
  var result = [];
  for (var key2 in Object(object3)) {
    if (hasOwnProperty$4.call(object3, key2) && key2 != "constructor") {
      result.push(key2);
    }
  }
  return result;
}
function isArrayLike(value26) {
  return value26 != null && isLength(value26.length) && !isFunction$1(value26);
}
function keys(object3) {
  return isArrayLike(object3) ? arrayLikeKeys(object3) : baseKeys(object3);
}
function baseAssign(object3, source2) {
  return object3 && copyObject(source2, keys(source2), object3);
}
function nativeKeysIn(object3) {
  var result = [];
  if (object3 != null) {
    for (var key2 in Object(object3)) {
      result.push(key2);
    }
  }
  return result;
}
var objectProto$4 = Object.prototype;
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
function baseKeysIn(object3) {
  if (!isObject$2(object3)) {
    return nativeKeysIn(object3);
  }
  var isProto = isPrototype(object3), result = [];
  for (var key2 in object3) {
    if (!(key2 == "constructor" && (isProto || !hasOwnProperty$3.call(object3, key2)))) {
      result.push(key2);
    }
  }
  return result;
}
function keysIn(object3) {
  return isArrayLike(object3) ? arrayLikeKeys(object3, true) : baseKeysIn(object3);
}
function baseAssignIn(object3, source2) {
  return object3 && copyObject(source2, keysIn(source2), object3);
}
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer = moduleExports ? root$1.Buffer : void 0, allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}
function copyArray(source2, array3) {
  var index2 = -1, length = source2.length;
  array3 || (array3 = Array(length));
  while (++index2 < length) {
    array3[index2] = source2[index2];
  }
  return array3;
}
function arrayFilter(array3, predicate) {
  var index2 = -1, length = array3 == null ? 0 : array3.length, resIndex = 0, result = [];
  while (++index2 < length) {
    var value26 = array3[index2];
    if (predicate(value26, index2, array3)) {
      result[resIndex++] = value26;
    }
  }
  return result;
}
function stubArray() {
  return [];
}
var objectProto$3 = Object.prototype;
var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object3) {
  if (object3 == null) {
    return [];
  }
  object3 = Object(object3);
  return arrayFilter(nativeGetSymbols$1(object3), function(symbol) {
    return propertyIsEnumerable.call(object3, symbol);
  });
};
var getSymbols$1 = getSymbols;
function copySymbols(source2, object3) {
  return copyObject(source2, getSymbols$1(source2), object3);
}
function arrayPush(array3, values) {
  var index2 = -1, length = values.length, offset4 = array3.length;
  while (++index2 < length) {
    array3[offset4 + index2] = values[index2];
  }
  return array3;
}
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object3) {
  var result = [];
  while (object3) {
    arrayPush(result, getSymbols$1(object3));
    object3 = getPrototype$1(object3);
  }
  return result;
};
var getSymbolsIn$1 = getSymbolsIn;
function copySymbolsIn(source2, object3) {
  return copyObject(source2, getSymbolsIn$1(source2), object3);
}
function baseGetAllKeys(object3, keysFunc, symbolsFunc) {
  var result = keysFunc(object3);
  return isArray$2(object3) ? result : arrayPush(result, symbolsFunc(object3));
}
function getAllKeys(object3) {
  return baseGetAllKeys(object3, keys, getSymbols$1);
}
function getAllKeysIn(object3) {
  return baseGetAllKeys(object3, keysIn, getSymbolsIn$1);
}
var DataView = getNative(root$1, "DataView");
var DataView$1 = DataView;
var Promise$1 = getNative(root$1, "Promise");
var Promise$2 = Promise$1;
var Set$1 = getNative(root$1, "Set");
var Set$2 = Set$1;
var WeakMap$1 = getNative(root$1, "WeakMap");
var WeakMap$2 = WeakMap$1;
var mapTag$4 = "[object Map]", objectTag$2 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
var dataViewTag$3 = "[object DataView]";
var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$2), promiseCtorString = toSource(Promise$2), setCtorString = toSource(Set$2), weakMapCtorString = toSource(WeakMap$2);
var getTag = baseGetTag;
if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3 || Map$2 && getTag(new Map$2()) != mapTag$4 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$2 && getTag(new Set$2()) != setTag$4 || WeakMap$2 && getTag(new WeakMap$2()) != weakMapTag$1) {
  getTag = function(value26) {
    var result = baseGetTag(value26), Ctor = result == objectTag$2 ? value26.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag$3;
        case mapCtorString:
          return mapTag$4;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag$4;
        case weakMapCtorString:
          return weakMapTag$1;
      }
    }
    return result;
  };
}
var getTag$1 = getTag;
var objectProto$2 = Object.prototype;
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
function initCloneArray(array3) {
  var length = array3.length, result = new array3.constructor(length);
  if (length && typeof array3[0] == "string" && hasOwnProperty$2.call(array3, "index")) {
    result.index = array3.index;
    result.input = array3.input;
  }
  return result;
}
var Uint8Array = root$1.Uint8Array;
var Uint8Array$1 = Uint8Array;
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
  return result;
}
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var reFlags = /\w*$/;
function cloneRegExp(regexp3) {
  var result = new regexp3.constructor(regexp3.source, reFlags.exec(regexp3));
  result.lastIndex = regexp3.lastIndex;
  return result;
}
var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$3 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$3 = "[object Symbol]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
function initCloneByTag(object3, tag, isDeep) {
  var Ctor = object3.constructor;
  switch (tag) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(object3);
    case boolTag$2:
    case dateTag$2:
      return new Ctor(+object3);
    case dataViewTag$2:
      return cloneDataView(object3, isDeep);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return cloneTypedArray(object3, isDeep);
    case mapTag$3:
      return new Ctor();
    case numberTag$3:
    case stringTag$2:
      return new Ctor(object3);
    case regexpTag$2:
      return cloneRegExp(object3);
    case setTag$3:
      return new Ctor();
    case symbolTag$3:
      return cloneSymbol(object3);
  }
}
var objectCreate = Object.create;
var baseCreate = function() {
  function object3() {
  }
  return function(proto2) {
    if (!isObject$2(proto2)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto2);
    }
    object3.prototype = proto2;
    var result = new object3();
    object3.prototype = void 0;
    return result;
  };
}();
var baseCreate$1 = baseCreate;
function initCloneObject(object3) {
  return typeof object3.constructor == "function" && !isPrototype(object3) ? baseCreate$1(getPrototype$1(object3)) : {};
}
var mapTag$2 = "[object Map]";
function baseIsMap(value26) {
  return isObjectLike(value26) && getTag$1(value26) == mapTag$2;
}
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
var isMap$1 = isMap;
var setTag$2 = "[object Set]";
function baseIsSet(value26) {
  return isObjectLike(value26) && getTag$1(value26) == setTag$2;
}
var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
var isSet$1 = isSet;
var CLONE_DEEP_FLAG$2 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$2 = 4;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$2 = "[object Number]", objectTag$1 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$1 = "[object String]", symbolTag$2 = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$2] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
function baseClone(value26, bitmask, customizer, key2, object3, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG$2, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
  if (customizer) {
    result = object3 ? customizer(value26, key2, object3, stack) : customizer(value26);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject$2(value26)) {
    return value26;
  }
  var isArr = isArray$2(value26);
  if (isArr) {
    result = initCloneArray(value26);
    if (!isDeep) {
      return copyArray(value26, result);
    }
  } else {
    var tag = getTag$1(value26), isFunc = tag == funcTag || tag == genTag;
    if (isBuffer$2(value26)) {
      return cloneBuffer(value26, isDeep);
    }
    if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object3) {
      result = isFlat || isFunc ? {} : initCloneObject(value26);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value26, baseAssignIn(result, value26)) : copySymbols(value26, baseAssign(result, value26));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object3 ? value26 : {};
      }
      result = initCloneByTag(value26, tag, isDeep);
    }
  }
  stack || (stack = new Stack());
  var stacked = stack.get(value26);
  if (stacked) {
    return stacked;
  }
  stack.set(value26, result);
  if (isSet$1(value26)) {
    value26.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value26, stack));
    });
  } else if (isMap$1(value26)) {
    value26.forEach(function(subValue, key3) {
      result.set(key3, baseClone(subValue, bitmask, customizer, key3, value26, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
  var props2 = isArr ? void 0 : keysFunc(value26);
  arrayEach(props2 || value26, function(subValue, key3) {
    if (props2) {
      key3 = subValue;
      subValue = value26[key3];
    }
    assignValue(result, key3, baseClone(subValue, bitmask, customizer, key3, value26, stack));
  });
  return result;
}
var symbolTag$1 = "[object Symbol]";
function isSymbol(value26) {
  return typeof value26 == "symbol" || isObjectLike(value26) && baseGetTag(value26) == symbolTag$1;
}
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey(value26, object3) {
  if (isArray$2(value26)) {
    return false;
  }
  var type3 = typeof value26;
  if (type3 == "number" || type3 == "symbol" || type3 == "boolean" || value26 == null || isSymbol(value26)) {
    return true;
  }
  return reIsPlainProp.test(value26) || !reIsDeepProp.test(value26) || object3 != null && value26 in Object(object3);
}
var FUNC_ERROR_TEXT$2 = "Expected a function";
function memoize(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$2);
  }
  var memoized = function() {
    var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key2)) {
      return cache.get(key2);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key2, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}
memoize.Cache = MapCache;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func) {
  var result = memoize(func, function(key2) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key2;
  });
  var cache = result.cache;
  return result;
}
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped(function(string2) {
  var result = [];
  if (string2.charCodeAt(0) === 46) {
    result.push("");
  }
  string2.replace(rePropName, function(match5, number3, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match5);
  });
  return result;
});
var stringToPath$1 = stringToPath;
var INFINITY$3 = 1 / 0;
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
function baseToString(value26) {
  if (typeof value26 == "string") {
    return value26;
  }
  if (isArray$2(value26)) {
    return arrayMap(value26, baseToString) + "";
  }
  if (isSymbol(value26)) {
    return symbolToString ? symbolToString.call(value26) : "";
  }
  var result = value26 + "";
  return result == "0" && 1 / value26 == -INFINITY$3 ? "-0" : result;
}
function toString$2(value26) {
  return value26 == null ? "" : baseToString(value26);
}
function castPath(value26, object3) {
  if (isArray$2(value26)) {
    return value26;
  }
  return isKey(value26, object3) ? [value26] : stringToPath$1(toString$2(value26));
}
function last(array3) {
  var length = array3 == null ? 0 : array3.length;
  return length ? array3[length - 1] : void 0;
}
var INFINITY$2 = 1 / 0;
function toKey(value26) {
  if (typeof value26 == "string" || isSymbol(value26)) {
    return value26;
  }
  var result = value26 + "";
  return result == "0" && 1 / value26 == -INFINITY$2 ? "-0" : result;
}
function baseGet(object3, path2) {
  path2 = castPath(path2, object3);
  var index2 = 0, length = path2.length;
  while (object3 != null && index2 < length) {
    object3 = object3[toKey(path2[index2++])];
  }
  return index2 && index2 == length ? object3 : void 0;
}
function baseSlice(array3, start, end) {
  var index2 = -1, length = array3.length;
  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);
  while (++index2 < length) {
    result[index2] = array3[index2 + start];
  }
  return result;
}
function parent(object3, path2) {
  return path2.length < 2 ? object3 : baseGet(object3, baseSlice(path2, 0, -1));
}
function baseUnset(object3, path2) {
  path2 = castPath(path2, object3);
  object3 = parent(object3, path2);
  return object3 == null || delete object3[toKey(last(path2))];
}
function customOmitClone(value26) {
  return isPlainObject$1(value26) ? void 0 : value26;
}
var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;
function isFlattenable(value26) {
  return isArray$2(value26) || isArguments$1(value26) || !!(spreadableSymbol && value26 && value26[spreadableSymbol]);
}
function baseFlatten(array3, depth, predicate, isStrict, result) {
  var index2 = -1, length = array3.length;
  predicate || (predicate = isFlattenable);
  result || (result = []);
  while (++index2 < length) {
    var value26 = array3[index2];
    if (depth > 0 && predicate(value26)) {
      if (depth > 1) {
        baseFlatten(value26, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value26);
      }
    } else if (!isStrict) {
      result[result.length] = value26;
    }
  }
  return result;
}
function flatten(array3) {
  var length = array3 == null ? 0 : array3.length;
  return length ? baseFlatten(array3, 1) : [];
}
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var nativeMax$3 = Math.max;
function overRest(func, start, transform) {
  start = nativeMax$3(start === void 0 ? func.length - 1 : start, 0);
  return function() {
    var args = arguments, index2 = -1, length = nativeMax$3(args.length - start, 0), array3 = Array(length);
    while (++index2 < length) {
      array3[index2] = args[start + index2];
    }
    index2 = -1;
    var otherArgs = Array(start + 1);
    while (++index2 < start) {
      otherArgs[index2] = args[index2];
    }
    otherArgs[start] = transform(array3);
    return apply(func, this, otherArgs);
  };
}
function constant(value26) {
  return function() {
    return value26;
  };
}
function identity(value26) {
  return value26;
}
var baseSetToString = !defineProperty$1 ? identity : function(func, string2) {
  return defineProperty$1(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string2),
    "writable": true
  });
};
var baseSetToString$1 = baseSetToString;
var HOT_COUNT = 800, HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var setToString = shortOut(baseSetToString$1);
var setToString$1 = setToString;
function flatRest(func) {
  return setToString$1(overRest(func, void 0, flatten), func + "");
}
var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG$1 = 4;
var omit = flatRest(function(object3, paths) {
  var result = {};
  if (object3 == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path2) {
    path2 = castPath(path2, object3);
    isDeep || (isDeep = path2.length > 1);
    return path2;
  });
  copyObject(object3, getAllKeysIn(object3), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG$1 | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG$1, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});
var omit$1 = omit;
var RefSelect = generateSelector$1({
  prefixCls: "rc-select",
  components: {
    optionList: SelectOptionList
  },
  convertChildrenToData: convertChildrenToData$1,
  flattenOptions,
  getLabeledValue,
  filterOptions,
  isValueDisabled,
  findValueOption,
  warningProps,
  fillOptionsWithMissingValue
});
var Select$5 = defineComponent({
  setup: function setup21(props2, _ref) {
    var attrs = _ref.attrs, expose = _ref.expose, slots = _ref.slots;
    var selectRef = ref(null);
    expose({
      focus: function focus27() {
        var _a;
        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();
      },
      blur: function blur24() {
        var _a;
        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();
      }
    });
    return function() {
      var _a;
      return createVNode(RefSelect, _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({
        "ref": selectRef
      }, props2), attrs), {}, {
        "children": ((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)) || []
      }), slots);
    };
  }
});
Select$5.inheritAttrs = false;
Select$5.props = omit$1(RefSelect.props, ["children"]);
Select$5.Option = Option$5;
Select$5.OptGroup = OptGroup$3;
var Select$6 = Select$5;
var DownOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z" } }] }, "name": "down", "theme": "outlined" };
var DownOutlinedSvg = DownOutlined$2;
function bound01(n2, max4) {
  if (isOnePointZero(n2)) {
    n2 = "100%";
  }
  var isPercent = isPercentage(n2);
  n2 = max4 === 360 ? n2 : Math.min(max4, Math.max(0, parseFloat(n2)));
  if (isPercent) {
    n2 = parseInt(String(n2 * max4), 10) / 100;
  }
  if (Math.abs(n2 - max4) < 1e-6) {
    return 1;
  }
  if (max4 === 360) {
    n2 = (n2 < 0 ? n2 % max4 + max4 : n2 % max4) / parseFloat(String(max4));
  } else {
    n2 = n2 % max4 / parseFloat(String(max4));
  }
  return n2;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n2) {
  return typeof n2 === "string" && n2.indexOf(".") !== -1 && parseFloat(n2) === 1;
}
function isPercentage(n2) {
  return typeof n2 === "string" && n2.indexOf("%") !== -1;
}
function boundAlpha(a2) {
  a2 = parseFloat(a2);
  if (isNaN(a2) || a2 < 0 || a2 > 1) {
    a2 = 1;
  }
  return a2;
}
function convertToPercentage(n2) {
  if (n2 <= 1) {
    return Number(n2) * 100 + "%";
  }
  return n2;
}
function pad2(c2) {
  return c2.length === 1 ? "0" + c2 : String(c2);
}
function rgbToRgb(r2, g2, b2) {
  return {
    r: bound01(r2, 255) * 255,
    g: bound01(g2, 255) * 255,
    b: bound01(b2, 255) * 255
  };
}
function rgbToHsl(r2, g2, b2) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b2 = bound01(b2, 255);
  var max4 = Math.max(r2, g2, b2);
  var min4 = Math.min(r2, g2, b2);
  var h2 = 0;
  var s2 = 0;
  var l2 = (max4 + min4) / 2;
  if (max4 === min4) {
    s2 = 0;
    h2 = 0;
  } else {
    var d2 = max4 - min4;
    s2 = l2 > 0.5 ? d2 / (2 - max4 - min4) : d2 / (max4 + min4);
    switch (max4) {
      case r2:
        h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
        break;
      case g2:
        h2 = (b2 - r2) / d2 + 2;
        break;
      case b2:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return { h: h2, s: s2, l: l2 };
}
function hue2rgb(p2, q2, t2) {
  if (t2 < 0) {
    t2 += 1;
  }
  if (t2 > 1) {
    t2 -= 1;
  }
  if (t2 < 1 / 6) {
    return p2 + (q2 - p2) * (6 * t2);
  }
  if (t2 < 1 / 2) {
    return q2;
  }
  if (t2 < 2 / 3) {
    return p2 + (q2 - p2) * (2 / 3 - t2) * 6;
  }
  return p2;
}
function hslToRgb(h2, s2, l2) {
  var r2;
  var g2;
  var b2;
  h2 = bound01(h2, 360);
  s2 = bound01(s2, 100);
  l2 = bound01(l2, 100);
  if (s2 === 0) {
    g2 = l2;
    b2 = l2;
    r2 = l2;
  } else {
    var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
    var p2 = 2 * l2 - q2;
    r2 = hue2rgb(p2, q2, h2 + 1 / 3);
    g2 = hue2rgb(p2, q2, h2);
    b2 = hue2rgb(p2, q2, h2 - 1 / 3);
  }
  return { r: r2 * 255, g: g2 * 255, b: b2 * 255 };
}
function rgbToHsv(r2, g2, b2) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b2 = bound01(b2, 255);
  var max4 = Math.max(r2, g2, b2);
  var min4 = Math.min(r2, g2, b2);
  var h2 = 0;
  var v2 = max4;
  var d2 = max4 - min4;
  var s2 = max4 === 0 ? 0 : d2 / max4;
  if (max4 === min4) {
    h2 = 0;
  } else {
    switch (max4) {
      case r2:
        h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
        break;
      case g2:
        h2 = (b2 - r2) / d2 + 2;
        break;
      case b2:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return { h: h2, s: s2, v: v2 };
}
function hsvToRgb(h2, s2, v2) {
  h2 = bound01(h2, 360) * 6;
  s2 = bound01(s2, 100);
  v2 = bound01(v2, 100);
  var i2 = Math.floor(h2);
  var f2 = h2 - i2;
  var p2 = v2 * (1 - s2);
  var q2 = v2 * (1 - f2 * s2);
  var t2 = v2 * (1 - (1 - f2) * s2);
  var mod2 = i2 % 6;
  var r2 = [v2, q2, p2, p2, t2, v2][mod2];
  var g2 = [t2, v2, v2, q2, p2, p2][mod2];
  var b2 = [p2, p2, t2, v2, v2, q2][mod2];
  return { r: r2 * 255, g: g2 * 255, b: b2 * 255 };
}
function rgbToHex(r2, g2, b2, allow3Char) {
  var hex2 = [
    pad2(Math.round(r2).toString(16)),
    pad2(Math.round(g2).toString(16)),
    pad2(Math.round(b2).toString(16))
  ];
  if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
  }
  return hex2.join("");
}
function rgbaToHex(r2, g2, b2, a2, allow4Char) {
  var hex2 = [
    pad2(Math.round(r2).toString(16)),
    pad2(Math.round(g2).toString(16)),
    pad2(Math.round(b2).toString(16)),
    pad2(convertDecimalToHex(a2))
  ];
  if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
  }
  return hex2.join("");
}
function convertDecimalToHex(d2) {
  return Math.round(parseFloat(d2) * 255).toString(16);
}
function convertHexToDecimal(h2) {
  return parseIntFromHex(h2) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color) {
  return {
    r: color >> 16,
    g: (color & 65280) >> 8,
    b: color & 255
  };
}
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};
function inputToRGB(color) {
  var rgb = { r: 0, g: 0, b: 0 };
  var a2 = 1;
  var s2 = null;
  var v2 = null;
  var l2 = null;
  var ok = false;
  var format3 = false;
  if (typeof color === "string") {
    color = stringInputToObject(color);
  }
  if (typeof color === "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format3 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s2 = convertToPercentage(color.s);
      v2 = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s2, v2);
      ok = true;
      format3 = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s2 = convertToPercentage(color.s);
      l2 = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s2, l2);
      ok = true;
      format3 = "hsl";
    }
    if (Object.prototype.hasOwnProperty.call(color, "a")) {
      a2 = color.a;
    }
  }
  a2 = boundAlpha(a2);
  return {
    ok,
    format: color.format || format3,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a: a2
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
  color = color.trim().toLowerCase();
  if (color.length === 0) {
    return false;
  }
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color === "transparent") {
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  }
  var match5 = matchers.rgb.exec(color);
  if (match5) {
    return { r: match5[1], g: match5[2], b: match5[3] };
  }
  match5 = matchers.rgba.exec(color);
  if (match5) {
    return { r: match5[1], g: match5[2], b: match5[3], a: match5[4] };
  }
  match5 = matchers.hsl.exec(color);
  if (match5) {
    return { h: match5[1], s: match5[2], l: match5[3] };
  }
  match5 = matchers.hsla.exec(color);
  if (match5) {
    return { h: match5[1], s: match5[2], l: match5[3], a: match5[4] };
  }
  match5 = matchers.hsv.exec(color);
  if (match5) {
    return { h: match5[1], s: match5[2], v: match5[3] };
  }
  match5 = matchers.hsva.exec(color);
  if (match5) {
    return { h: match5[1], s: match5[2], v: match5[3], a: match5[4] };
  }
  match5 = matchers.hex8.exec(color);
  if (match5) {
    return {
      r: parseIntFromHex(match5[1]),
      g: parseIntFromHex(match5[2]),
      b: parseIntFromHex(match5[3]),
      a: convertHexToDecimal(match5[4]),
      format: named ? "name" : "hex8"
    };
  }
  match5 = matchers.hex6.exec(color);
  if (match5) {
    return {
      r: parseIntFromHex(match5[1]),
      g: parseIntFromHex(match5[2]),
      b: parseIntFromHex(match5[3]),
      format: named ? "name" : "hex"
    };
  }
  match5 = matchers.hex4.exec(color);
  if (match5) {
    return {
      r: parseIntFromHex(match5[1] + match5[1]),
      g: parseIntFromHex(match5[2] + match5[2]),
      b: parseIntFromHex(match5[3] + match5[3]),
      a: convertHexToDecimal(match5[4] + match5[4]),
      format: named ? "name" : "hex8"
    };
  }
  match5 = matchers.hex3.exec(color);
  if (match5) {
    return {
      r: parseIntFromHex(match5[1] + match5[1]),
      g: parseIntFromHex(match5[2] + match5[2]),
      b: parseIntFromHex(match5[3] + match5[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color) {
  return Boolean(matchers.CSS_UNIT.exec(String(color)));
}
var TinyColor = function() {
  function TinyColor2(color, opts2) {
    if (color === void 0) {
      color = "";
    }
    if (opts2 === void 0) {
      opts2 = {};
    }
    var _a;
    if (color instanceof TinyColor2) {
      return color;
    }
    if (typeof color === "number") {
      color = numberInputToObject(color);
    }
    this.originalInput = color;
    var rgb = inputToRGB(color);
    this.originalInput = color;
    this.r = rgb.r;
    this.g = rgb.g;
    this.b = rgb.b;
    this.a = rgb.a;
    this.roundA = Math.round(100 * this.a) / 100;
    this.format = (_a = opts2.format) !== null && _a !== void 0 ? _a : rgb.format;
    this.gradientType = opts2.gradientType;
    if (this.r < 1) {
      this.r = Math.round(this.r);
    }
    if (this.g < 1) {
      this.g = Math.round(this.g);
    }
    if (this.b < 1) {
      this.b = Math.round(this.b);
    }
    this.isValid = rgb.ok;
  }
  TinyColor2.prototype.isDark = function() {
    return this.getBrightness() < 128;
  };
  TinyColor2.prototype.isLight = function() {
    return !this.isDark();
  };
  TinyColor2.prototype.getBrightness = function() {
    var rgb = this.toRgb();
    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
  };
  TinyColor2.prototype.getLuminance = function() {
    var rgb = this.toRgb();
    var R2;
    var G;
    var B2;
    var RsRGB = rgb.r / 255;
    var GsRGB = rgb.g / 255;
    var BsRGB = rgb.b / 255;
    if (RsRGB <= 0.03928) {
      R2 = RsRGB / 12.92;
    } else {
      R2 = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    }
    if (GsRGB <= 0.03928) {
      G = GsRGB / 12.92;
    } else {
      G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    }
    if (BsRGB <= 0.03928) {
      B2 = BsRGB / 12.92;
    } else {
      B2 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    }
    return 0.2126 * R2 + 0.7152 * G + 0.0722 * B2;
  };
  TinyColor2.prototype.getAlpha = function() {
    return this.a;
  };
  TinyColor2.prototype.setAlpha = function(alpha) {
    this.a = boundAlpha(alpha);
    this.roundA = Math.round(100 * this.a) / 100;
    return this;
  };
  TinyColor2.prototype.toHsv = function() {
    var hsv = rgbToHsv(this.r, this.g, this.b);
    return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
  };
  TinyColor2.prototype.toHsvString = function() {
    var hsv = rgbToHsv(this.r, this.g, this.b);
    var h2 = Math.round(hsv.h * 360);
    var s2 = Math.round(hsv.s * 100);
    var v2 = Math.round(hsv.v * 100);
    return this.a === 1 ? "hsv(" + h2 + ", " + s2 + "%, " + v2 + "%)" : "hsva(" + h2 + ", " + s2 + "%, " + v2 + "%, " + this.roundA + ")";
  };
  TinyColor2.prototype.toHsl = function() {
    var hsl = rgbToHsl(this.r, this.g, this.b);
    return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
  };
  TinyColor2.prototype.toHslString = function() {
    var hsl = rgbToHsl(this.r, this.g, this.b);
    var h2 = Math.round(hsl.h * 360);
    var s2 = Math.round(hsl.s * 100);
    var l2 = Math.round(hsl.l * 100);
    return this.a === 1 ? "hsl(" + h2 + ", " + s2 + "%, " + l2 + "%)" : "hsla(" + h2 + ", " + s2 + "%, " + l2 + "%, " + this.roundA + ")";
  };
  TinyColor2.prototype.toHex = function(allow3Char) {
    if (allow3Char === void 0) {
      allow3Char = false;
    }
    return rgbToHex(this.r, this.g, this.b, allow3Char);
  };
  TinyColor2.prototype.toHexString = function(allow3Char) {
    if (allow3Char === void 0) {
      allow3Char = false;
    }
    return "#" + this.toHex(allow3Char);
  };
  TinyColor2.prototype.toHex8 = function(allow4Char) {
    if (allow4Char === void 0) {
      allow4Char = false;
    }
    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
  };
  TinyColor2.prototype.toHex8String = function(allow4Char) {
    if (allow4Char === void 0) {
      allow4Char = false;
    }
    return "#" + this.toHex8(allow4Char);
  };
  TinyColor2.prototype.toRgb = function() {
    return {
      r: Math.round(this.r),
      g: Math.round(this.g),
      b: Math.round(this.b),
      a: this.a
    };
  };
  TinyColor2.prototype.toRgbString = function() {
    var r2 = Math.round(this.r);
    var g2 = Math.round(this.g);
    var b2 = Math.round(this.b);
    return this.a === 1 ? "rgb(" + r2 + ", " + g2 + ", " + b2 + ")" : "rgba(" + r2 + ", " + g2 + ", " + b2 + ", " + this.roundA + ")";
  };
  TinyColor2.prototype.toPercentageRgb = function() {
    var fmt = function(x2) {
      return Math.round(bound01(x2, 255) * 100) + "%";
    };
    return {
      r: fmt(this.r),
      g: fmt(this.g),
      b: fmt(this.b),
      a: this.a
    };
  };
  TinyColor2.prototype.toPercentageRgbString = function() {
    var rnd = function(x2) {
      return Math.round(bound01(x2, 255) * 100);
    };
    return this.a === 1 ? "rgb(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%)" : "rgba(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%, " + this.roundA + ")";
  };
  TinyColor2.prototype.toName = function() {
    if (this.a === 0) {
      return "transparent";
    }
    if (this.a < 1) {
      return false;
    }
    var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
    for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
      var _b = _a[_i], key2 = _b[0], value26 = _b[1];
      if (hex2 === value26) {
        return key2;
      }
    }
    return false;
  };
  TinyColor2.prototype.toString = function(format3) {
    var formatSet = Boolean(format3);
    format3 = format3 !== null && format3 !== void 0 ? format3 : this.format;
    var formattedString = false;
    var hasAlpha = this.a < 1 && this.a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format3.startsWith("hex") || format3 === "name");
    if (needsAlphaFormat) {
      if (format3 === "name" && this.a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format3 === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format3 === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format3 === "hex" || format3 === "hex6") {
      formattedString = this.toHexString();
    }
    if (format3 === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format3 === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format3 === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format3 === "name") {
      formattedString = this.toName();
    }
    if (format3 === "hsl") {
      formattedString = this.toHslString();
    }
    if (format3 === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  };
  TinyColor2.prototype.toNumber = function() {
    return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
  };
  TinyColor2.prototype.clone = function() {
    return new TinyColor2(this.toString());
  };
  TinyColor2.prototype.lighten = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.brighten = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var rgb = this.toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return new TinyColor2(rgb);
  };
  TinyColor2.prototype.darken = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.tint = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    return this.mix("white", amount);
  };
  TinyColor2.prototype.shade = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    return this.mix("black", amount);
  };
  TinyColor2.prototype.desaturate = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.saturate = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.greyscale = function() {
    return this.desaturate(100);
  };
  TinyColor2.prototype.spin = function(amount) {
    var hsl = this.toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.mix = function(color, amount) {
    if (amount === void 0) {
      amount = 50;
    }
    var rgb1 = this.toRgb();
    var rgb2 = new TinyColor2(color).toRgb();
    var p2 = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
      g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
      b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
      a: (rgb2.a - rgb1.a) * p2 + rgb1.a
    };
    return new TinyColor2(rgba);
  };
  TinyColor2.prototype.analogous = function(results, slices) {
    if (results === void 0) {
      results = 6;
    }
    if (slices === void 0) {
      slices = 30;
    }
    var hsl = this.toHsl();
    var part = 360 / slices;
    var ret = [this];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(new TinyColor2(hsl));
    }
    return ret;
  };
  TinyColor2.prototype.complement = function() {
    var hsl = this.toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.monochromatic = function(results) {
    if (results === void 0) {
      results = 6;
    }
    var hsv = this.toHsv();
    var h2 = hsv.h;
    var s2 = hsv.s;
    var v2 = hsv.v;
    var res = [];
    var modification = 1 / results;
    while (results--) {
      res.push(new TinyColor2({ h: h2, s: s2, v: v2 }));
      v2 = (v2 + modification) % 1;
    }
    return res;
  };
  TinyColor2.prototype.splitcomplement = function() {
    var hsl = this.toHsl();
    var h2 = hsl.h;
    return [
      this,
      new TinyColor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
      new TinyColor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
    ];
  };
  TinyColor2.prototype.onBackground = function(background) {
    var fg = this.toRgb();
    var bg = new TinyColor2(background).toRgb();
    return new TinyColor2({
      r: bg.r + (fg.r - bg.r) * fg.a,
      g: bg.g + (fg.g - bg.g) * fg.a,
      b: bg.b + (fg.b - bg.b) * fg.a
    });
  };
  TinyColor2.prototype.triad = function() {
    return this.polyad(3);
  };
  TinyColor2.prototype.tetrad = function() {
    return this.polyad(4);
  };
  TinyColor2.prototype.polyad = function(n2) {
    var hsl = this.toHsl();
    var h2 = hsl.h;
    var result = [this];
    var increment = 360 / n2;
    for (var i2 = 1; i2 < n2; i2++) {
      result.push(new TinyColor2({ h: (h2 + i2 * increment) % 360, s: hsl.s, l: hsl.l }));
    }
    return result;
  };
  TinyColor2.prototype.equals = function(color) {
    return this.toRgbString() === new TinyColor2(color).toRgbString();
  };
  return TinyColor2;
}();
var hueStep = 2;
var saturationStep = 0.16;
var saturationStep2 = 0.05;
var brightnessStep1 = 0.05;
var brightnessStep2 = 0.15;
var lightColorCount = 5;
var darkColorCount = 4;
var darkColorMap = [{
  index: 7,
  opacity: 0.15
}, {
  index: 6,
  opacity: 0.25
}, {
  index: 5,
  opacity: 0.3
}, {
  index: 5,
  opacity: 0.45
}, {
  index: 5,
  opacity: 0.65
}, {
  index: 5,
  opacity: 0.85
}, {
  index: 4,
  opacity: 0.9
}, {
  index: 3,
  opacity: 0.95
}, {
  index: 2,
  opacity: 0.97
}, {
  index: 1,
  opacity: 0.98
}];
function getHue(hsv, i2, light) {
  var hue;
  if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
    hue = light ? Math.round(hsv.h) - hueStep * i2 : Math.round(hsv.h) + hueStep * i2;
  } else {
    hue = light ? Math.round(hsv.h) + hueStep * i2 : Math.round(hsv.h) - hueStep * i2;
  }
  if (hue < 0) {
    hue += 360;
  } else if (hue >= 360) {
    hue -= 360;
  }
  return hue;
}
function getSaturation(hsv, i2, light) {
  if (hsv.h === 0 && hsv.s === 0) {
    return hsv.s;
  }
  var saturation;
  if (light) {
    saturation = hsv.s - saturationStep * i2;
  } else if (i2 === darkColorCount) {
    saturation = hsv.s + saturationStep;
  } else {
    saturation = hsv.s + saturationStep2 * i2;
  }
  if (saturation > 1) {
    saturation = 1;
  }
  if (light && i2 === lightColorCount && saturation > 0.1) {
    saturation = 0.1;
  }
  if (saturation < 0.06) {
    saturation = 0.06;
  }
  return Number(saturation.toFixed(2));
}
function getValue(hsv, i2, light) {
  var value26;
  if (light) {
    value26 = hsv.v + brightnessStep1 * i2;
  } else {
    value26 = hsv.v - brightnessStep2 * i2;
  }
  if (value26 > 1) {
    value26 = 1;
  }
  return Number(value26.toFixed(2));
}
function generate$1(color) {
  var opts2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var patterns = [];
  var pColor = new TinyColor(color);
  for (var i2 = lightColorCount; i2 > 0; i2 -= 1) {
    var hsv = pColor.toHsv();
    var colorString = new TinyColor({
      h: getHue(hsv, i2, true),
      s: getSaturation(hsv, i2, true),
      v: getValue(hsv, i2, true)
    }).toHexString();
    patterns.push(colorString);
  }
  patterns.push(pColor.toHexString());
  for (var _i = 1; _i <= darkColorCount; _i += 1) {
    var _hsv = pColor.toHsv();
    var _colorString = new TinyColor({
      h: getHue(_hsv, _i),
      s: getSaturation(_hsv, _i),
      v: getValue(_hsv, _i)
    }).toHexString();
    patterns.push(_colorString);
  }
  if (opts2.theme === "dark") {
    return darkColorMap.map(function(_ref) {
      var index2 = _ref.index, opacity = _ref.opacity;
      var darkColorString = new TinyColor(opts2.backgroundColor || "#141414").mix(patterns[index2], opacity * 100).toHexString();
      return darkColorString;
    });
  }
  return patterns;
}
var presetPrimaryColors = {
  red: "#F5222D",
  volcano: "#FA541C",
  orange: "#FA8C16",
  gold: "#FAAD14",
  yellow: "#FADB14",
  lime: "#A0D911",
  green: "#52C41A",
  cyan: "#13C2C2",
  blue: "#1890FF",
  geekblue: "#2F54EB",
  purple: "#722ED1",
  magenta: "#EB2F96",
  grey: "#666666"
};
var presetPalettes = {};
var presetDarkPalettes = {};
Object.keys(presetPrimaryColors).forEach(function(key2) {
  presetPalettes[key2] = generate$1(presetPrimaryColors[key2]);
  presetPalettes[key2].primary = presetPalettes[key2][5];
  presetDarkPalettes[key2] = generate$1(presetPrimaryColors[key2], {
    theme: "dark",
    backgroundColor: "#141414"
  });
  presetDarkPalettes[key2].primary = presetDarkPalettes[key2][5];
});
presetPalettes.red;
presetPalettes.volcano;
presetPalettes.gold;
presetPalettes.orange;
presetPalettes.yellow;
presetPalettes.lime;
presetPalettes.green;
presetPalettes.cyan;
presetPalettes.blue;
presetPalettes.geekblue;
presetPalettes.purple;
presetPalettes.magenta;
presetPalettes.grey;
var containers = [];
var styleElements = [];
var usage = "insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).";
function createStyleElement() {
  var styleElement = document.createElement("style");
  styleElement.setAttribute("type", "text/css");
  return styleElement;
}
function insertCss(css2, options2) {
  options2 = options2 || {};
  if (css2 === void 0) {
    throw new Error(usage);
  }
  var position = options2.prepend === true ? "prepend" : "append";
  var container = options2.container !== void 0 ? options2.container : document.querySelector("head");
  var containerId = containers.indexOf(container);
  if (containerId === -1) {
    containerId = containers.push(container) - 1;
    styleElements[containerId] = {};
  }
  var styleElement;
  if (styleElements[containerId] !== void 0 && styleElements[containerId][position] !== void 0) {
    styleElement = styleElements[containerId][position];
  } else {
    styleElement = styleElements[containerId][position] = createStyleElement();
    if (position === "prepend") {
      container.insertBefore(styleElement, container.childNodes[0]);
    } else {
      container.appendChild(styleElement);
    }
  }
  if (css2.charCodeAt(0) === 65279) {
    css2 = css2.substr(1, css2.length);
  }
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText += css2;
  } else {
    styleElement.textContent += css2;
  }
  return styleElement;
}
function _objectSpread$R(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$S(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$S(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
function warning$3(valid, message2) {
}
function isIconDefinition(target) {
  return typeof target === "object" && typeof target.name === "string" && typeof target.theme === "string" && (typeof target.icon === "object" || typeof target.icon === "function");
}
function generate(node, key2, rootProps) {
  if (!rootProps) {
    return h$2(node.tag, _objectSpread$R({
      key: key2
    }, node.attrs), (node.children || []).map(function(child, index2) {
      return generate(child, "".concat(key2, "-").concat(node.tag, "-").concat(index2));
    }));
  }
  return h$2(node.tag, _objectSpread$R({
    key: key2
  }, rootProps, node.attrs), (node.children || []).map(function(child, index2) {
    return generate(child, "".concat(key2, "-").concat(node.tag, "-").concat(index2));
  }));
}
function getSecondaryColor(primaryColor) {
  return generate$1(primaryColor)[0];
}
function normalizeTwoToneColors(twoToneColor) {
  if (!twoToneColor) {
    return [];
  }
  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
}
var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
var cssInjectedFlag = false;
var useInsertStyles = function useInsertStyles2() {
  var styleStr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : iconStyles;
  nextTick(function() {
    if (!cssInjectedFlag) {
      if (typeof window !== "undefined" && window.document && window.document.documentElement) {
        insertCss(styleStr, {
          prepend: true
        });
      }
      cssInjectedFlag = true;
    }
  });
};
function _objectWithoutProperties$1(source2, excluded) {
  if (source2 == null)
    return {};
  var target = _objectWithoutPropertiesLoose$1(source2, excluded);
  var key2, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key2 = sourceSymbolKeys[i2];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source2, key2))
        continue;
      target[key2] = source2[key2];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose$1(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source2[key2];
  }
  return target;
}
function _objectSpread$Q(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$R(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$R(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var twoToneColorPalette = {
  primaryColor: "#333",
  secondaryColor: "#E6E6E6",
  calculated: false
};
function setTwoToneColors(_ref) {
  var primaryColor = _ref.primaryColor, secondaryColor = _ref.secondaryColor;
  twoToneColorPalette.primaryColor = primaryColor;
  twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
  twoToneColorPalette.calculated = !!secondaryColor;
}
function getTwoToneColors() {
  return _objectSpread$Q({}, twoToneColorPalette);
}
var IconBase = function IconBase2(props2, context2) {
  var _props$context$attrs = _objectSpread$Q({}, props2, context2.attrs), icon = _props$context$attrs.icon, primaryColor = _props$context$attrs.primaryColor, secondaryColor = _props$context$attrs.secondaryColor, restProps = _objectWithoutProperties$1(_props$context$attrs, ["icon", "primaryColor", "secondaryColor"]);
  var colors = twoToneColorPalette;
  if (primaryColor) {
    colors = {
      primaryColor,
      secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
    };
  }
  useInsertStyles();
  warning$3(isIconDefinition(icon));
  if (!isIconDefinition(icon)) {
    return null;
  }
  var target = icon;
  if (target && typeof target.icon === "function") {
    target = _objectSpread$Q({}, target, {
      icon: target.icon(colors.primaryColor, colors.secondaryColor)
    });
  }
  return generate(target.icon, "svg-".concat(target.name), _objectSpread$Q({}, restProps, {
    "data-icon": target.name,
    width: "1em",
    height: "1em",
    fill: "currentColor",
    "aria-hidden": "true"
  }));
};
IconBase.props = {
  icon: Object,
  primaryColor: String,
  secondaryColor: String,
  focusable: String
};
IconBase.inheritAttrs = false;
IconBase.displayName = "IconBase";
IconBase.getTwoToneColors = getTwoToneColors;
IconBase.setTwoToneColors = setTwoToneColors;
var VueIcon = IconBase;
function _slicedToArray$1(arr, i2) {
  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i2) || _unsupportedIterableToArray$1(arr, i2) || _nonIterableRest$1();
}
function _nonIterableRest$1() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray$1(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray$1(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray$1(o2, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit$1(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles$1(arr) {
  if (Array.isArray(arr))
    return arr;
}
function setTwoToneColor(twoToneColor) {
  var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray$1(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
  return VueIcon.setTwoToneColors({
    primaryColor,
    secondaryColor
  });
}
function getTwoToneColor() {
  var colors = VueIcon.getTwoToneColors();
  if (!colors.calculated) {
    return colors.primaryColor;
  }
  return [colors.primaryColor, colors.secondaryColor];
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
    arr2[i2] = arr[i2];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i2) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i2 && _arr.length === i2)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _objectSpread$P(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$Q(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$Q(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
function _objectWithoutProperties(source2, excluded) {
  if (source2 == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source2, excluded);
  var key2, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key2 = sourceSymbolKeys[i2];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source2, key2))
        continue;
      target[key2] = source2[key2];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source2[key2];
  }
  return target;
}
setTwoToneColor("#1890ff");
var Icon = function Icon2(props2, context2) {
  var _classObj;
  var _props$context$attrs = _objectSpread$P({}, props2, context2.attrs), cls = _props$context$attrs["class"], icon = _props$context$attrs.icon, spin = _props$context$attrs.spin, rotate = _props$context$attrs.rotate, tabindex = _props$context$attrs.tabindex, twoToneColor = _props$context$attrs.twoToneColor, onClick7 = _props$context$attrs.onClick, restProps = _objectWithoutProperties(_props$context$attrs, ["class", "icon", "spin", "rotate", "tabindex", "twoToneColor", "onClick"]);
  var classObj = (_classObj = {
    anticon: true
  }, _defineProperty$Q(_classObj, "anticon-".concat(icon.name), Boolean(icon.name)), _defineProperty$Q(_classObj, cls, cls), _classObj);
  var svgClassString = spin === "" || !!spin || icon.name === "loading" ? "anticon-spin" : "";
  var iconTabIndex = tabindex;
  if (iconTabIndex === void 0 && onClick7) {
    iconTabIndex = -1;
    restProps.tabindex = iconTabIndex;
  }
  var svgStyle = rotate ? {
    msTransform: "rotate(".concat(rotate, "deg)"),
    transform: "rotate(".concat(rotate, "deg)")
  } : void 0;
  var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor), _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2), primaryColor = _normalizeTwoToneColo2[0], secondaryColor = _normalizeTwoToneColo2[1];
  return createVNode("span", mergeProps$1(restProps, {
    "role": "img",
    "aria-label": icon.name,
    "onClick": onClick7,
    "class": classObj
  }), [createVNode(VueIcon, {
    "class": svgClassString,
    "icon": icon,
    "primaryColor": primaryColor,
    "secondaryColor": secondaryColor,
    "style": svgStyle
  }, null)]);
};
Icon.props = {
  spin: Boolean,
  rotate: Number,
  icon: Object,
  twoToneColor: String
};
Icon.displayName = "AntdIcon";
Icon.inheritAttrs = false;
Icon.getTwoToneColor = getTwoToneColor;
Icon.setTwoToneColor = setTwoToneColor;
var AntdIcon = Icon;
function _objectSpread$O(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$P(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$P(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var DownOutlined = function DownOutlined2(props2, context2) {
  var p2 = _objectSpread$O({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": DownOutlinedSvg
  }), null);
};
DownOutlined.displayName = "DownOutlined";
DownOutlined.inheritAttrs = false;
var DownOutlined$1 = DownOutlined;
var LoadingOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z" } }] }, "name": "loading", "theme": "outlined" };
var LoadingOutlinedSvg = LoadingOutlined$2;
function _objectSpread$N(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$O(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$O(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var LoadingOutlined = function LoadingOutlined2(props2, context2) {
  var p2 = _objectSpread$N({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": LoadingOutlinedSvg
  }), null);
};
LoadingOutlined.displayName = "LoadingOutlined";
LoadingOutlined.inheritAttrs = false;
var LoadingOutlined$1 = LoadingOutlined;
var CheckOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" } }] }, "name": "check", "theme": "outlined" };
var CheckOutlinedSvg = CheckOutlined$2;
function _objectSpread$M(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$N(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$N(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CheckOutlined = function CheckOutlined2(props2, context2) {
  var p2 = _objectSpread$M({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CheckOutlinedSvg
  }), null);
};
CheckOutlined.displayName = "CheckOutlined";
CheckOutlined.inheritAttrs = false;
var CheckOutlined$1 = CheckOutlined;
var CloseOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z" } }] }, "name": "close", "theme": "outlined" };
var CloseOutlinedSvg = CloseOutlined$2;
function _objectSpread$L(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$M(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$M(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CloseOutlined = function CloseOutlined2(props2, context2) {
  var p2 = _objectSpread$L({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CloseOutlinedSvg
  }), null);
};
CloseOutlined.displayName = "CloseOutlined";
CloseOutlined.inheritAttrs = false;
var CloseOutlined$1 = CloseOutlined;
var CloseCircleFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z" } }] }, "name": "close-circle", "theme": "filled" };
var CloseCircleFilledSvg = CloseCircleFilled$2;
function _objectSpread$K(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$L(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$L(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CloseCircleFilled = function CloseCircleFilled2(props2, context2) {
  var p2 = _objectSpread$K({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CloseCircleFilledSvg
  }), null);
};
CloseCircleFilled.displayName = "CloseCircleFilled";
CloseCircleFilled.inheritAttrs = false;
var CloseCircleFilled$1 = CloseCircleFilled;
var SearchOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z" } }] }, "name": "search", "theme": "outlined" };
var SearchOutlinedSvg = SearchOutlined$2;
function _objectSpread$J(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$K(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$K(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var SearchOutlined = function SearchOutlined2(props2, context2) {
  var p2 = _objectSpread$J({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": SearchOutlinedSvg
  }), null);
};
SearchOutlined.displayName = "SearchOutlined";
SearchOutlined.inheritAttrs = false;
var SearchOutlined$1 = SearchOutlined;
function getIcons(props2) {
  var slots = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var loading = props2.loading, multiple = props2.multiple, prefixCls2 = props2.prefixCls;
  var suffixIcon = props2.suffixIcon || slots.suffixIcon && slots.suffixIcon();
  var clearIcon = props2.clearIcon || slots.clearIcon && slots.clearIcon();
  var menuItemSelectedIcon = props2.menuItemSelectedIcon || slots.menuItemSelectedIcon && slots.menuItemSelectedIcon();
  var removeIcon = props2.removeIcon || slots.removeIcon && slots.removeIcon();
  var mergedClearIcon = clearIcon;
  if (!clearIcon) {
    mergedClearIcon = createVNode(CloseCircleFilled$1, null, null);
  }
  var mergedSuffixIcon = null;
  if (suffixIcon !== void 0) {
    mergedSuffixIcon = suffixIcon;
  } else if (loading) {
    mergedSuffixIcon = createVNode(LoadingOutlined$1, {
      "spin": true
    }, null);
  } else {
    var iconCls = "".concat(prefixCls2, "-suffix");
    mergedSuffixIcon = function mergedSuffixIcon2(_ref) {
      var open6 = _ref.open, showSearch = _ref.showSearch;
      if (open6 && showSearch) {
        return createVNode(SearchOutlined$1, {
          "class": iconCls
        }, null);
      }
      return createVNode(DownOutlined$1, {
        "class": iconCls
      }, null);
    };
  }
  var mergedItemIcon = null;
  if (menuItemSelectedIcon !== void 0) {
    mergedItemIcon = menuItemSelectedIcon;
  } else if (multiple) {
    mergedItemIcon = createVNode(CheckOutlined$1, null, null);
  } else {
    mergedItemIcon = null;
  }
  var mergedRemoveIcon = null;
  if (removeIcon !== void 0) {
    mergedRemoveIcon = removeIcon;
  } else {
    mergedRemoveIcon = createVNode(CloseOutlined$1, null, null);
  }
  return {
    clearIcon: mergedClearIcon,
    suffixIcon: mergedSuffixIcon,
    itemIcon: mergedItemIcon,
    removeIcon: mergedRemoveIcon
  };
}
var SelectProps = function SelectProps2() {
  return _extends$1(_extends$1({}, omit$2(BaseProps(), ["inputIcon", "mode", "getInputElement", "backfill", "class", "style"])), {
    value: {
      type: [Array, Object, String, Number]
    },
    defaultValue: {
      type: [Array, Object, String, Number]
    },
    notFoundContent: PropsTypes.VNodeChild,
    suffixIcon: PropsTypes.VNodeChild,
    itemIcon: PropsTypes.VNodeChild,
    size: PropsTypes.oneOf(tuple("small", "middle", "large", "default")),
    mode: PropsTypes.oneOf(tuple("multiple", "tags", "SECRET_COMBOBOX_MODE_DO_NOT_USE")),
    bordered: PropsTypes.looseBool.def(true),
    transitionName: PropsTypes.string.def("slide-up"),
    choiceTransitionName: PropsTypes.string.def("")
  });
};
var Select$4 = defineComponent({
  name: "ASelect",
  Option: Option$5,
  OptGroup: OptGroup$3,
  inheritAttrs: false,
  props: SelectProps(),
  SECRET_COMBOBOX_MODE_DO_NOT_USE: "SECRET_COMBOBOX_MODE_DO_NOT_USE",
  emits: ["change", "update:value"],
  slots: ["notFoundContent", "suffixIcon", "itemIcon", "removeIcon", "clearIcon", "dropdownRender", "option"],
  setup: function setup22(props2, _ref) {
    var attrs = _ref.attrs, emit = _ref.emit, slots = _ref.slots, expose = _ref.expose;
    var selectRef = ref(null);
    var focus27 = function focus28() {
      if (selectRef.value) {
        selectRef.value.focus();
      }
    };
    var blur24 = function blur25() {
      if (selectRef.value) {
        selectRef.value.blur();
      }
    };
    var mode4 = computed(function() {
      var mode5 = props2.mode;
      if (mode5 === "combobox") {
        return void 0;
      }
      if (mode5 === Select$4.SECRET_COMBOBOX_MODE_DO_NOT_USE) {
        return "combobox";
      }
      return mode5;
    });
    var _useConfigInject = useConfigInject("select", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction, configProvider = _useConfigInject.configProvider;
    var mergedClassName = computed(function() {
      var _classNames;
      return classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-lg"), props2.size === "large"), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-sm"), props2.size === "small"), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-borderless"), !props2.bordered), _classNames));
    });
    var triggerChange5 = function triggerChange6() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      emit("update:value", args[0]);
      emit.apply(void 0, ["change"].concat(args));
    };
    expose({
      blur: blur24,
      focus: focus27
    });
    return function() {
      var _a;
      var notFoundContent = props2.notFoundContent, _props$listHeight = props2.listHeight, listHeight = _props$listHeight === void 0 ? 256 : _props$listHeight, _props$listItemHeight = props2.listItemHeight, listItemHeight = _props$listItemHeight === void 0 ? 24 : _props$listItemHeight, getPopupContainer = props2.getPopupContainer, dropdownClassName = props2.dropdownClassName, virtual = props2.virtual, dropdownMatchSelectWidth = props2.dropdownMatchSelectWidth;
      var renderEmpty2 = configProvider.renderEmpty, getContextPopupContainer = configProvider.getPopupContainer;
      var isMultiple2 = mode4.value === "multiple" || mode4.value === "tags";
      var mergedNotFound;
      if (notFoundContent !== void 0) {
        mergedNotFound = notFoundContent;
      } else if (slots.notFoundContent) {
        mergedNotFound = slots.notFoundContent();
      } else if (mode4.value === "combobox") {
        mergedNotFound = null;
      } else {
        mergedNotFound = renderEmpty2("Select");
      }
      var _getIcons = getIcons(_extends$1(_extends$1({}, props2), {
        multiple: isMultiple2,
        prefixCls: prefixCls2.value
      }), slots), suffixIcon = _getIcons.suffixIcon, itemIcon = _getIcons.itemIcon, removeIcon = _getIcons.removeIcon, clearIcon = _getIcons.clearIcon;
      var selectProps = omit$2(props2, ["prefixCls", "suffixIcon", "itemIcon", "removeIcon", "clearIcon", "size", "bordered"]);
      var rcSelectRtlDropDownClassName = classNames(dropdownClassName, _defineProperty$U({}, "".concat(prefixCls2.value, "-dropdown-").concat(direction.value), direction.value === "rtl"));
      return createVNode(Select$6, _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({
        "ref": selectRef,
        "virtual": virtual,
        "dropdownMatchSelectWidth": dropdownMatchSelectWidth
      }, selectProps), attrs), {}, {
        "listHeight": listHeight,
        "listItemHeight": listItemHeight,
        "mode": mode4.value,
        "prefixCls": prefixCls2.value,
        "direction": direction.value,
        "inputIcon": suffixIcon,
        "menuItemSelectedIcon": itemIcon,
        "removeIcon": removeIcon,
        "clearIcon": clearIcon,
        "notFoundContent": mergedNotFound,
        "class": [mergedClassName.value, attrs.class],
        "getPopupContainer": getPopupContainer || getContextPopupContainer,
        "dropdownClassName": rcSelectRtlDropDownClassName,
        "onChange": triggerChange5,
        "dropdownRender": selectProps.dropdownRender || slots.dropdownRender
      }), {
        default: function _default8() {
          return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
        },
        option: slots.option
      });
    };
  }
});
Select$4.install = function(app) {
  app.component(Select$4.name, Select$4);
  app.component(Select$4.Option.displayName, Select$4.Option);
  app.component(Select$4.OptGroup.displayName, Select$4.OptGroup);
  return app;
};
var SelectOption = Select$4.Option;
var SelectOptGroup = Select$4.OptGroup;
var VcSelect = Select$4;
var inputProps = {
  prefixCls: PropsTypes.string,
  inputPrefixCls: PropsTypes.string,
  defaultValue: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  value: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  placeholder: {
    type: [String, Number]
  },
  type: PropsTypes.string.def("text"),
  name: PropsTypes.string,
  size: {
    type: String
  },
  disabled: PropsTypes.looseBool,
  readonly: PropsTypes.looseBool,
  addonBefore: PropsTypes.VNodeChild,
  addonAfter: PropsTypes.VNodeChild,
  prefix: PropsTypes.VNodeChild,
  suffix: PropsTypes.VNodeChild,
  autofocus: PropsTypes.looseBool,
  allowClear: PropsTypes.looseBool,
  lazy: PropsTypes.looseBool.def(true),
  maxlength: PropsTypes.number,
  loading: PropsTypes.looseBool,
  onPressEnter: PropsTypes.func,
  onKeydown: PropsTypes.func,
  onKeyup: PropsTypes.func,
  onFocus: PropsTypes.func,
  onBlur: PropsTypes.func,
  onChange: PropsTypes.func,
  onInput: PropsTypes.func,
  "onUpdate:value": PropsTypes.func
};
function hasPrefixSuffix(instance) {
  return !!(getComponent(instance, "prefix") || getComponent(instance, "suffix") || instance.$props.allowClear);
}
var ClearableInputType = ["text", "input"];
var ClearableLabeledInput = defineComponent({
  name: "ClearableLabeledInput",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    inputType: PropsTypes.oneOf(tuple("text", "input")),
    value: PropsTypes.any,
    defaultValue: PropsTypes.any,
    allowClear: PropsTypes.looseBool,
    element: PropsTypes.VNodeChild,
    handleReset: PropsTypes.func,
    disabled: PropsTypes.looseBool,
    size: PropsTypes.oneOf(tuple("small", "large", "default")),
    suffix: PropsTypes.VNodeChild,
    prefix: PropsTypes.VNodeChild,
    addonBefore: PropsTypes.VNodeChild,
    addonAfter: PropsTypes.VNodeChild,
    readonly: PropsTypes.looseBool,
    isFocused: PropsTypes.looseBool
  },
  methods: {
    renderClearIcon: function renderClearIcon(prefixCls2) {
      var _this$$props = this.$props, allowClear = _this$$props.allowClear, value26 = _this$$props.value, disabled = _this$$props.disabled, readonly2 = _this$$props.readonly, inputType = _this$$props.inputType, handleReset3 = _this$$props.handleReset;
      if (!allowClear) {
        return null;
      }
      var showClearIcon = !disabled && !readonly2 && value26 !== void 0 && value26 !== null && value26 !== "";
      var className = inputType === ClearableInputType[0] ? "".concat(prefixCls2, "-textarea-clear-icon") : "".concat(prefixCls2, "-clear-icon");
      return createVNode(CloseCircleFilled$1, {
        "onClick": handleReset3,
        "class": classNames(className, _defineProperty$U({}, "".concat(className, "-hidden"), !showClearIcon)),
        "role": "button"
      }, null);
    },
    renderSuffix: function renderSuffix(prefixCls2) {
      var _this$$props2 = this.$props, suffix = _this$$props2.suffix, allowClear = _this$$props2.allowClear;
      if (suffix || allowClear) {
        return createVNode("span", {
          "class": "".concat(prefixCls2, "-suffix")
        }, [this.renderClearIcon(prefixCls2), suffix]);
      }
      return null;
    },
    renderLabeledIcon: function renderLabeledIcon(prefixCls2, element) {
      var _classNames2;
      var _a;
      var props2 = this.$props;
      var style3 = this.$attrs.style;
      var suffix = this.renderSuffix(prefixCls2);
      if (!hasPrefixSuffix(this)) {
        return cloneElement(element, {
          value: props2.value
        });
      }
      var prefix = props2.prefix ? createVNode("span", {
        "class": "".concat(prefixCls2, "-prefix")
      }, [props2.prefix]) : null;
      var affixWrapperCls = classNames((_a = this.$attrs) === null || _a === void 0 ? void 0 : _a.class, "".concat(prefixCls2, "-affix-wrapper"), (_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(prefixCls2, "-affix-wrapper-focused"), props2.isFocused), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-affix-wrapper-disabled"), props2.disabled), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-affix-wrapper-sm"), props2.size === "small"), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-affix-wrapper-lg"), props2.size === "large"), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-affix-wrapper-input-with-clear-btn"), props2.suffix && props2.allowClear && this.$props.value), _classNames2));
      return createVNode("span", {
        "class": affixWrapperCls,
        "style": style3
      }, [prefix, cloneElement(element, {
        style: null,
        value: props2.value,
        class: getInputClassName(prefixCls2, props2.size, props2.disabled)
      }), suffix]);
    },
    renderInputWithLabel: function renderInputWithLabel(prefixCls2, labeledElement) {
      var _classNames4;
      var _this$$props3 = this.$props, addonBefore = _this$$props3.addonBefore, addonAfter = _this$$props3.addonAfter, size2 = _this$$props3.size;
      var _this$$attrs = this.$attrs, style3 = _this$$attrs.style, className = _this$$attrs.class;
      if (!addonBefore && !addonAfter) {
        return labeledElement;
      }
      var wrapperClassName = "".concat(prefixCls2, "-group");
      var addonClassName = "".concat(wrapperClassName, "-addon");
      var addonBeforeNode = addonBefore ? createVNode("span", {
        "class": addonClassName
      }, [addonBefore]) : null;
      var addonAfterNode = addonAfter ? createVNode("span", {
        "class": addonClassName
      }, [addonAfter]) : null;
      var mergedWrapperClassName = classNames("".concat(prefixCls2, "-wrapper"), _defineProperty$U({}, wrapperClassName, addonBefore || addonAfter));
      var mergedGroupClassName = classNames(className, "".concat(prefixCls2, "-group-wrapper"), (_classNames4 = {}, _defineProperty$U(_classNames4, "".concat(prefixCls2, "-group-wrapper-sm"), size2 === "small"), _defineProperty$U(_classNames4, "".concat(prefixCls2, "-group-wrapper-lg"), size2 === "large"), _classNames4));
      return createVNode("span", {
        "class": mergedGroupClassName,
        "style": style3
      }, [createVNode("span", {
        "class": mergedWrapperClassName
      }, [addonBeforeNode, cloneElement(labeledElement, {
        style: null
      }), addonAfterNode])]);
    },
    renderTextAreaWithClearIcon: function renderTextAreaWithClearIcon(prefixCls2, element) {
      var _this$$props4 = this.$props, value26 = _this$$props4.value, allowClear = _this$$props4.allowClear;
      var _this$$attrs2 = this.$attrs, style3 = _this$$attrs2.style, className = _this$$attrs2.class;
      if (!allowClear) {
        return cloneElement(element, {
          value: value26
        });
      }
      var affixWrapperCls = classNames(className, "".concat(prefixCls2, "-affix-wrapper"), "".concat(prefixCls2, "-affix-wrapper-textarea-with-clear-btn"));
      return createVNode("span", {
        "class": affixWrapperCls,
        "style": style3
      }, [cloneElement(element, {
        style: null,
        value: value26
      }), this.renderClearIcon(prefixCls2)]);
    },
    renderClearableLabeledInput: function renderClearableLabeledInput() {
      var _this$$props5 = this.$props, prefixCls2 = _this$$props5.prefixCls, inputType = _this$$props5.inputType, element = _this$$props5.element;
      if (inputType === ClearableInputType[0]) {
        return this.renderTextAreaWithClearIcon(prefixCls2, element);
      }
      return this.renderInputWithLabel(prefixCls2, this.renderLabeledIcon(prefixCls2, element));
    }
  },
  render: function render13() {
    return this.renderClearableLabeledInput();
  }
});
var ClearableLabeledInput$1 = ClearableLabeledInput;
function fixControlledValue(value26) {
  if (typeof value26 === "undefined" || value26 === null) {
    return "";
  }
  return value26;
}
function resolveOnChange(target, e2, onChange9) {
  if (onChange9) {
    var event = e2;
    if (e2.type === "click") {
      Object.defineProperty(event, "target", {
        writable: true
      });
      Object.defineProperty(event, "currentTarget", {
        writable: true
      });
      event.target = target;
      event.currentTarget = target;
      var originalInputValue = target.value;
      target.value = "";
      onChange9(event);
      target.value = originalInputValue;
      return;
    }
    onChange9(event);
  }
}
function getInputClassName(prefixCls2, size2, disabled) {
  var _classNames;
  return classNames(prefixCls2, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-sm"), size2 === "small"), _defineProperty$U(_classNames, "".concat(prefixCls2, "-lg"), size2 === "large"), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _classNames));
}
var Input = defineComponent({
  name: "AInput",
  inheritAttrs: false,
  props: _extends$1({}, inputProps),
  setup: function setup23() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      removePasswordTimeout: void 0,
      input: null,
      clearableInput: null
    };
  },
  data: function data5() {
    var props2 = this.$props;
    var value26 = typeof props2.value === "undefined" ? props2.defaultValue : props2.value;
    return {
      stateValue: typeof value26 === "undefined" ? "" : value26,
      isFocused: false
    };
  },
  watch: {
    value: function value(val) {
      this.stateValue = val;
    }
  },
  mounted: function mounted5() {
    var _this = this;
    nextTick(function() {
      _this.clearPasswordValueAttribute();
    });
  },
  beforeUnmount: function beforeUnmount4() {
    if (this.removePasswordTimeout) {
      clearTimeout(this.removePasswordTimeout);
    }
  },
  methods: {
    handleInputFocus: function handleInputFocus(e2) {
      this.isFocused = true;
      this.onFocus && this.onFocus(e2);
    },
    handleInputBlur: function handleInputBlur(e2) {
      this.isFocused = false;
      this.onBlur && this.onBlur(e2);
    },
    focus: function focus() {
      this.input.focus();
    },
    blur: function blur() {
      this.input.blur();
    },
    select: function select() {
      this.input.select();
    },
    saveClearableInput: function saveClearableInput(input) {
      this.clearableInput = input;
    },
    saveInput: function saveInput(input) {
      this.input = input;
    },
    setValue: function setValue(value26, callback) {
      if (this.stateValue === value26) {
        return;
      }
      if (!hasProp(this, "value")) {
        this.stateValue = value26;
      } else {
        this.$forceUpdate();
      }
      nextTick(function() {
        callback && callback();
      });
    },
    triggerChange: function triggerChange(e2) {
      this.$emit("update:value", e2.target.value);
      this.$emit("change", e2);
      this.$emit("input", e2);
    },
    handleReset: function handleReset(e2) {
      var _this2 = this;
      this.setValue("", function() {
        _this2.focus();
      });
      resolveOnChange(this.input, e2, this.triggerChange);
    },
    renderInput: function renderInput(prefixCls2, _ref) {
      var addonBefore = _ref.addonBefore, addonAfter = _ref.addonAfter;
      var otherProps = omit$2(this.$props, ["prefixCls", "onPressEnter", "addonBefore", "addonAfter", "prefix", "suffix", "allowClear", "defaultValue", "lazy", "size", "inputPrefixCls", "loading"]);
      var handleKeyDown7 = this.handleKeyDown, handleChange22 = this.handleChange, handleInputFocus3 = this.handleInputFocus, handleInputBlur3 = this.handleInputBlur, size2 = this.size, disabled = this.disabled, $attrs = this.$attrs;
      var inputProps2 = _extends$1(_extends$1(_extends$1({}, otherProps), $attrs), {
        onKeydown: handleKeyDown7,
        class: classNames(getInputClassName(prefixCls2, size2, disabled), _defineProperty$U({}, $attrs.class, $attrs.class && !addonBefore && !addonAfter)),
        ref: this.saveInput,
        key: "ant-input",
        onInput: handleChange22,
        onChange: handleChange22,
        onFocus: handleInputFocus3,
        onBlur: handleInputBlur3
      });
      if (!inputProps2.autofocus) {
        delete inputProps2.autofocus;
      }
      var inputNode = createVNode("input", inputProps2, null);
      return withDirectives(inputNode, [[antInput$1]]);
    },
    clearPasswordValueAttribute: function clearPasswordValueAttribute() {
      var _this3 = this;
      this.removePasswordTimeout = setTimeout(function() {
        if (_this3.input && _this3.input.getAttribute && _this3.input.getAttribute("type") === "password" && _this3.input.hasAttribute("value")) {
          _this3.input.removeAttribute("value");
        }
      });
    },
    handleChange: function handleChange(e2) {
      var _e$target = e2.target, value26 = _e$target.value, composing = _e$target.composing, isComposing = _e$target.isComposing;
      if ((isComposing || composing) && this.lazy || this.stateValue === value26)
        return;
      this.setValue(value26, this.clearPasswordValueAttribute);
      resolveOnChange(this.input, e2, this.triggerChange);
    },
    handleKeyDown: function handleKeyDown(e2) {
      if (e2.keyCode === 13) {
        this.$emit("pressEnter", e2);
      }
      this.$emit("keydown", e2);
    }
  },
  render: function render14() {
    var customizePrefixCls = this.$props.prefixCls;
    var _this$$data = this.$data, stateValue = _this$$data.stateValue, isFocused = _this$$data.isFocused;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("input", customizePrefixCls);
    var addonAfter = getComponent(this, "addonAfter");
    var addonBefore = getComponent(this, "addonBefore");
    var suffix = getComponent(this, "suffix");
    var prefix = getComponent(this, "prefix");
    var props2 = _extends$1(_extends$1(_extends$1({}, this.$attrs), getOptionProps(this)), {
      prefixCls: prefixCls2,
      inputType: "input",
      value: fixControlledValue(stateValue),
      element: this.renderInput(prefixCls2, {
        addonAfter,
        addonBefore
      }),
      handleReset: this.handleReset,
      addonAfter,
      addonBefore,
      suffix,
      prefix,
      isFocused
    });
    return createVNode(ClearableLabeledInput$1, _objectSpread2$2(_objectSpread2$2({}, props2), {}, {
      "ref": this.saveClearableInput
    }), null);
  }
});
var Group$3 = defineComponent({
  name: "AInputGroup",
  props: {
    prefixCls: PropsTypes.string,
    size: PropsTypes.oneOf(tuple("small", "large", "default")),
    compact: PropsTypes.looseBool
  },
  setup: function setup24() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  computed: {
    classes: function classes2() {
      var _ref;
      var customizePrefixCls = this.prefixCls, size2 = this.size, _this$compact = this.compact, compact = _this$compact === void 0 ? false : _this$compact, configProvider = this.configProvider;
      var getPrefixCls2 = configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("input-group", customizePrefixCls);
      return _ref = {}, _defineProperty$U(_ref, "".concat(prefixCls2), true), _defineProperty$U(_ref, "".concat(prefixCls2, "-lg"), size2 === "large"), _defineProperty$U(_ref, "".concat(prefixCls2, "-sm"), size2 === "small"), _defineProperty$U(_ref, "".concat(prefixCls2, "-compact"), compact), _ref;
    }
  },
  render: function render15() {
    return createVNode("span", {
      "class": this.classes
    }, [getSlot(this)]);
  }
});
var applePhone = /iPhone/i;
var appleIpod = /iPod/i;
var appleTablet = /iPad/i;
var androidPhone = /\bAndroid(?:.+)Mobile\b/i;
var androidTablet = /Android/i;
var amazonPhone = /\bAndroid(?:.+)SD4930UR\b/i;
var amazonTablet = /\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i;
var windowsPhone = /Windows Phone/i;
var windowsTablet = /\bWindows(?:.+)ARM\b/i;
var otherBlackberry = /BlackBerry/i;
var otherBlackberry10 = /BB10/i;
var otherOpera = /Opera Mini/i;
var otherChrome = /\b(CriOS|Chrome)(?:.+)Mobile/i;
var otherFirefox = /Mobile(?:.+)Firefox\b/i;
function match(regex, userAgent) {
  return regex.test(userAgent);
}
function isMobile(userAgent) {
  var ua = userAgent || (typeof navigator !== "undefined" ? navigator.userAgent : "");
  var tmp = ua.split("[FBAN");
  if (typeof tmp[1] !== "undefined") {
    var _tmp = tmp;
    var _tmp2 = _slicedToArray$2(_tmp, 1);
    ua = _tmp2[0];
  }
  tmp = ua.split("Twitter");
  if (typeof tmp[1] !== "undefined") {
    var _tmp3 = tmp;
    var _tmp4 = _slicedToArray$2(_tmp3, 1);
    ua = _tmp4[0];
  }
  var result = {
    apple: {
      phone: match(applePhone, ua) && !match(windowsPhone, ua),
      ipod: match(appleIpod, ua),
      tablet: !match(applePhone, ua) && match(appleTablet, ua) && !match(windowsPhone, ua),
      device: (match(applePhone, ua) || match(appleIpod, ua) || match(appleTablet, ua)) && !match(windowsPhone, ua)
    },
    amazon: {
      phone: match(amazonPhone, ua),
      tablet: !match(amazonPhone, ua) && match(amazonTablet, ua),
      device: match(amazonPhone, ua) || match(amazonTablet, ua)
    },
    android: {
      phone: !match(windowsPhone, ua) && match(amazonPhone, ua) || !match(windowsPhone, ua) && match(androidPhone, ua),
      tablet: !match(windowsPhone, ua) && !match(amazonPhone, ua) && !match(androidPhone, ua) && (match(amazonTablet, ua) || match(androidTablet, ua)),
      device: !match(windowsPhone, ua) && (match(amazonPhone, ua) || match(amazonTablet, ua) || match(androidPhone, ua) || match(androidTablet, ua)) || match(/\bokhttp\b/i, ua)
    },
    windows: {
      phone: match(windowsPhone, ua),
      tablet: match(windowsTablet, ua),
      device: match(windowsPhone, ua) || match(windowsTablet, ua)
    },
    other: {
      blackberry: match(otherBlackberry, ua),
      blackberry10: match(otherBlackberry10, ua),
      opera: match(otherOpera, ua),
      firefox: match(otherFirefox, ua),
      chrome: match(otherChrome, ua),
      device: match(otherBlackberry, ua) || match(otherBlackberry10, ua) || match(otherOpera, ua) || match(otherFirefox, ua) || match(otherChrome, ua)
    },
    any: null,
    phone: null,
    tablet: null
  };
  result.any = result.apple.device || result.android.device || result.windows.device || result.other.device;
  result.phone = result.apple.phone || result.android.phone || result.windows.phone;
  result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;
  return result;
}
var defaultResult = _extends$1(_extends$1({}, isMobile()), {
  isMobile
});
var isMobile$1 = defaultResult;
var START_EVENT_NAME_MAP = {
  transitionstart: {
    transition: "transitionstart",
    WebkitTransition: "webkitTransitionStart",
    MozTransition: "mozTransitionStart",
    OTransition: "oTransitionStart",
    msTransition: "MSTransitionStart"
  },
  animationstart: {
    animation: "animationstart",
    WebkitAnimation: "webkitAnimationStart",
    MozAnimation: "mozAnimationStart",
    OAnimation: "oAnimationStart",
    msAnimation: "MSAnimationStart"
  }
};
var END_EVENT_NAME_MAP = {
  transitionend: {
    transition: "transitionend",
    WebkitTransition: "webkitTransitionEnd",
    MozTransition: "mozTransitionEnd",
    OTransition: "oTransitionEnd",
    msTransition: "MSTransitionEnd"
  },
  animationend: {
    animation: "animationend",
    WebkitAnimation: "webkitAnimationEnd",
    MozAnimation: "mozAnimationEnd",
    OAnimation: "oAnimationEnd",
    msAnimation: "MSAnimationEnd"
  }
};
var startEvents = [];
var endEvents = [];
function detectEvents() {
  var testEl = document.createElement("div");
  var style3 = testEl.style;
  if (!("AnimationEvent" in window)) {
    delete START_EVENT_NAME_MAP.animationstart.animation;
    delete END_EVENT_NAME_MAP.animationend.animation;
  }
  if (!("TransitionEvent" in window)) {
    delete START_EVENT_NAME_MAP.transitionstart.transition;
    delete END_EVENT_NAME_MAP.transitionend.transition;
  }
  function process2(EVENT_NAME_MAP, events) {
    for (var baseEventName in EVENT_NAME_MAP) {
      if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
        var baseEvents = EVENT_NAME_MAP[baseEventName];
        for (var styleName in baseEvents) {
          if (styleName in style3) {
            events.push(baseEvents[styleName]);
            break;
          }
        }
      }
    }
  }
  process2(START_EVENT_NAME_MAP, startEvents);
  process2(END_EVENT_NAME_MAP, endEvents);
}
if (typeof window !== "undefined" && typeof document !== "undefined") {
  detectEvents();
}
function addEventListener$1(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}
function removeEventListener$1(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}
var TransitionEvents = {
  startEvents,
  addStartEventListener: function addStartEventListener(node, eventListener) {
    if (startEvents.length === 0) {
      window.setTimeout(eventListener, 0);
      return;
    }
    startEvents.forEach(function(startEvent) {
      addEventListener$1(node, startEvent, eventListener);
    });
  },
  removeStartEventListener: function removeStartEventListener(node, eventListener) {
    if (startEvents.length === 0) {
      return;
    }
    startEvents.forEach(function(startEvent) {
      removeEventListener$1(node, startEvent, eventListener);
    });
  },
  endEvents,
  addEndEventListener: function addEndEventListener(node, eventListener) {
    if (endEvents.length === 0) {
      window.setTimeout(eventListener, 0);
      return;
    }
    endEvents.forEach(function(endEvent) {
      addEventListener$1(node, endEvent, eventListener);
    });
  },
  removeEndEventListener: function removeEndEventListener(node, eventListener) {
    if (endEvents.length === 0) {
      return;
    }
    endEvents.forEach(function(endEvent) {
      removeEventListener$1(node, endEvent, eventListener);
    });
  }
};
var Event$1 = TransitionEvents;
var styleForPesudo;
function isHidden$1(element) {
  return !element || element.offsetParent === null;
}
function isNotGrey(color) {
  var match5 = (color || "").match(/rgba?\((\d*), (\d*), (\d*)(, [\.\d]*)?\)/);
  if (match5 && match5[1] && match5[2] && match5[3]) {
    return !(match5[1] === match5[2] && match5[2] === match5[3]);
  }
  return true;
}
var Wave = defineComponent({
  name: "Wave",
  props: ["insertExtraNode"],
  setup: function setup25() {
    var configProvider = inject("configProvider", defaultConfigProvider);
    return {
      configProvider
    };
  },
  mounted: function mounted6() {
    var _this = this;
    nextTick(function() {
      var node = findDOMNode(_this);
      if (node.nodeType !== 1) {
        return;
      }
      _this.instance = _this.bindAnimationEvent(node);
    });
  },
  beforeUnmount: function beforeUnmount5() {
    if (this.instance) {
      this.instance.cancel();
    }
    if (this.clickWaveTimeoutId) {
      clearTimeout(this.clickWaveTimeoutId);
    }
  },
  methods: {
    onClick: function onClick2(node, waveColor) {
      if (!node || isHidden$1(node) || node.className.indexOf("-leave") >= 0) {
        return;
      }
      var insertExtraNode = this.$props.insertExtraNode;
      this.extraNode = document.createElement("div");
      var extraNode = this.extraNode;
      extraNode.className = "ant-click-animating-node";
      var attributeName = this.getAttributeName();
      node.removeAttribute(attributeName);
      node.setAttribute(attributeName, "true");
      styleForPesudo = styleForPesudo || document.createElement("style");
      if (waveColor && waveColor !== "#ffffff" && waveColor !== "rgb(255, 255, 255)" && isNotGrey(waveColor) && !/rgba\(\d*, \d*, \d*, 0\)/.test(waveColor) && waveColor !== "transparent") {
        if (this.csp && this.csp.nonce) {
          styleForPesudo.nonce = this.csp.nonce;
        }
        extraNode.style.borderColor = waveColor;
        styleForPesudo.innerHTML = "\n        [ant-click-animating-without-extra-node='true']::after, .ant-click-animating-node {\n          --antd-wave-shadow-color: ".concat(waveColor, ";\n        }");
        if (!document.body.contains(styleForPesudo)) {
          document.body.appendChild(styleForPesudo);
        }
      }
      if (insertExtraNode) {
        node.appendChild(extraNode);
      }
      Event$1.addStartEventListener(node, this.onTransitionStart);
      Event$1.addEndEventListener(node, this.onTransitionEnd);
    },
    onTransitionStart: function onTransitionStart(e2) {
      if (this._.isUnmounted)
        return;
      var node = findDOMNode(this);
      if (!e2 || e2.target !== node) {
        return;
      }
      if (!this.animationStart) {
        this.resetEffect(node);
      }
    },
    onTransitionEnd: function onTransitionEnd(e2) {
      if (!e2 || e2.animationName !== "fadeEffect") {
        return;
      }
      this.resetEffect(e2.target);
    },
    getAttributeName: function getAttributeName() {
      var insertExtraNode = this.$props.insertExtraNode;
      return insertExtraNode ? "ant-click-animating" : "ant-click-animating-without-extra-node";
    },
    bindAnimationEvent: function bindAnimationEvent(node) {
      var _this2 = this;
      if (!node || !node.getAttribute || node.getAttribute("disabled") || node.className.indexOf("disabled") >= 0) {
        return;
      }
      var onClick7 = function onClick8(e2) {
        if (e2.target.tagName === "INPUT" || isHidden$1(e2.target)) {
          return;
        }
        _this2.resetEffect(node);
        var waveColor = getComputedStyle(node).getPropertyValue("border-top-color") || getComputedStyle(node).getPropertyValue("border-color") || getComputedStyle(node).getPropertyValue("background-color");
        _this2.clickWaveTimeoutId = window.setTimeout(function() {
          return _this2.onClick(node, waveColor);
        }, 0);
        wrapperRaf.cancel(_this2.animationStartId);
        _this2.animationStart = true;
        _this2.animationStartId = wrapperRaf(function() {
          _this2.animationStart = false;
        }, 10);
      };
      node.addEventListener("click", onClick7, true);
      return {
        cancel: function cancel2() {
          node.removeEventListener("click", onClick7, true);
        }
      };
    },
    resetEffect: function resetEffect(node) {
      if (!node || node === this.extraNode || !(node instanceof Element)) {
        return;
      }
      var insertExtraNode = this.$props.insertExtraNode;
      var attributeName = this.getAttributeName();
      node.setAttribute(attributeName, "false");
      if (styleForPesudo) {
        styleForPesudo.innerHTML = "";
      }
      if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {
        node.removeChild(this.extraNode);
      }
      Event$1.removeStartEventListener(node, this.onTransitionStart);
      Event$1.removeEndEventListener(node, this.onTransitionEnd);
    }
  },
  render: function render16() {
    var _a, _b;
    var csp = this.configProvider.csp;
    if (csp) {
      this.csp = csp;
    }
    return (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)[0];
  }
});
var ButtonTypes = tuple("default", "primary", "ghost", "dashed", "link", "text");
var ButtonShapes = tuple("circle", "round");
var ButtonHTMLTypes = tuple("submit", "button", "reset");
function convertLegacyProps(type3) {
  if (type3 === "danger") {
    return {
      danger: true
    };
  }
  return {
    type: type3
  };
}
var buttonProps = function buttonProps2() {
  return {
    prefixCls: PropsTypes.string,
    type: PropsTypes.oneOf(ButtonTypes),
    htmlType: PropsTypes.oneOf(ButtonHTMLTypes).def("button"),
    shape: PropsTypes.oneOf(ButtonShapes),
    size: {
      type: String
    },
    loading: {
      type: [Boolean, Object],
      default: function _default8() {
        return false;
      }
    },
    disabled: PropsTypes.looseBool,
    ghost: PropsTypes.looseBool,
    block: PropsTypes.looseBool,
    danger: PropsTypes.looseBool,
    icon: PropsTypes.VNodeChild,
    href: PropsTypes.string,
    target: PropsTypes.string,
    title: PropsTypes.string,
    onClick: {
      type: Function
    }
  };
};
var buttonTypes = buttonProps;
var devWarning = function(valid, component, message2) {
  warningOnce(valid, "[ant-design-vue: ".concat(component, "] ").concat(message2));
};
var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);
var props$2 = buttonTypes();
function isUnborderedButtonType(type3) {
  return type3 === "text" || type3 === "link";
}
var Button = defineComponent({
  name: "AButton",
  inheritAttrs: false,
  __ANT_BUTTON: true,
  props: props$2,
  slots: ["icon"],
  emits: ["click"],
  setup: function setup26(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit;
    var _useConfigInject = useConfigInject("btn", props2), prefixCls2 = _useConfigInject.prefixCls, autoInsertSpaceInButton = _useConfigInject.autoInsertSpaceInButton, direction = _useConfigInject.direction;
    var buttonNodeRef = ref(null);
    var delayTimeoutRef = ref(void 0);
    var isNeedInserted = false;
    var innerLoading = ref(false);
    var hasTwoCNChar = ref(false);
    var autoInsertSpace = computed(function() {
      return autoInsertSpaceInButton.value !== false;
    });
    var loadingOrDelay = computed(function() {
      return _typeof$2(props2.loading) === "object" && props2.loading.delay ? props2.loading.delay || true : !!props2.loading;
    });
    watch(loadingOrDelay, function(val) {
      clearTimeout(delayTimeoutRef.value);
      if (typeof loadingOrDelay.value === "number") {
        delayTimeoutRef.value = window.setTimeout(function() {
          innerLoading.value = val;
        }, loadingOrDelay.value);
      } else {
        innerLoading.value = val;
      }
    }, {
      immediate: true
    });
    var classes4 = computed(function() {
      var _ref2;
      var type3 = props2.type, shape = props2.shape, size2 = props2.size, ghost = props2.ghost, block = props2.block, danger = props2.danger;
      var pre = prefixCls2.value;
      var sizeCls = "";
      switch (size2) {
        case "large":
          sizeCls = "lg";
          break;
        case "small":
          sizeCls = "sm";
          break;
      }
      return _ref2 = {}, _defineProperty$U(_ref2, "".concat(pre), true), _defineProperty$U(_ref2, "".concat(pre, "-").concat(type3), type3), _defineProperty$U(_ref2, "".concat(pre, "-").concat(shape), shape), _defineProperty$U(_ref2, "".concat(pre, "-").concat(sizeCls), sizeCls), _defineProperty$U(_ref2, "".concat(pre, "-loading"), innerLoading.value), _defineProperty$U(_ref2, "".concat(pre, "-background-ghost"), ghost && !isUnborderedButtonType(type3)), _defineProperty$U(_ref2, "".concat(pre, "-two-chinese-chars"), hasTwoCNChar.value && autoInsertSpace.value), _defineProperty$U(_ref2, "".concat(pre, "-block"), block), _defineProperty$U(_ref2, "".concat(pre, "-dangerous"), !!danger), _defineProperty$U(_ref2, "".concat(pre, "-rtl"), direction.value === "rtl"), _ref2;
    });
    var fixTwoCNChar = function fixTwoCNChar2() {
      var node = buttonNodeRef.value;
      if (!node || autoInsertSpaceInButton.value === false) {
        return;
      }
      var buttonText = node.textContent;
      if (isNeedInserted && isTwoCNChar(buttonText)) {
        if (!hasTwoCNChar.value) {
          hasTwoCNChar.value = true;
        }
      } else if (hasTwoCNChar.value) {
        hasTwoCNChar.value = false;
      }
    };
    var handleClick5 = function handleClick6(event) {
      if (innerLoading.value || props2.disabled) {
        event.preventDefault();
        return;
      }
      emit("click", event);
    };
    var insertSpace = function insertSpace2(child, needInserted) {
      var SPACE = needInserted ? " " : "";
      if (child.type === Text$2) {
        var text = child.children.trim();
        if (isTwoCNChar(text)) {
          text = text.split("").join(SPACE);
        }
        return createVNode("span", null, [text]);
      }
      return child;
    };
    watchEffect(function() {
      devWarning(!(props2.ghost && isUnborderedButtonType(props2.type)), "Button", "`link` or `text` button can't be a `ghost` button.");
    });
    onMounted(fixTwoCNChar);
    onUpdated(fixTwoCNChar);
    onBeforeUnmount(function() {
      delayTimeoutRef.value && clearTimeout(delayTimeoutRef.value);
    });
    return function() {
      var children = flattenChildren(getPropsSlot(slots, props2));
      var icon = getPropsSlot(slots, props2, "icon");
      isNeedInserted = children.length === 1 && !icon && !isUnborderedButtonType(props2.type);
      var type3 = props2.type, htmlType = props2.htmlType, disabled = props2.disabled, href = props2.href, title2 = props2.title, target = props2.target;
      var iconType = innerLoading.value ? "loading" : icon;
      var buttonProps3 = _extends$1(_extends$1({}, attrs), {
        title: title2,
        disabled,
        class: [classes4.value, attrs.class, _defineProperty$U({}, "".concat(prefixCls2.value, "-icon-only"), children.length === 0 && !!iconType)],
        onClick: handleClick5
      });
      var iconNode = innerLoading.value ? createVNode(LoadingOutlined$1, null, null) : icon;
      var kids = children.map(function(child) {
        return insertSpace(child, isNeedInserted && autoInsertSpace.value);
      });
      if (href !== void 0) {
        return createVNode("a", _objectSpread2$2(_objectSpread2$2({}, buttonProps3), {}, {
          "href": href,
          "target": target,
          "ref": buttonNodeRef
        }), [iconNode, kids]);
      }
      var buttonNode = createVNode("button", _objectSpread2$2(_objectSpread2$2({}, buttonProps3), {}, {
        "ref": buttonNodeRef,
        "type": htmlType
      }), [iconNode, kids]);
      if (isUnborderedButtonType(type3)) {
        return buttonNode;
      }
      return createVNode(Wave, {
        "ref": "wave"
      }, {
        default: function _default8() {
          return [buttonNode];
        }
      });
    };
  }
});
var buttonGroupProps = {
  prefixCls: PropsTypes.string,
  size: {
    type: String
  }
};
var ButtonGroup$1 = defineComponent({
  name: "AButtonGroup",
  props: buttonGroupProps,
  setup: function setup27(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("btn-group", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var classes4 = computed(function() {
      var _ref2;
      var size2 = props2.size;
      var sizeCls = "";
      switch (size2) {
        case "large":
          sizeCls = "lg";
          break;
        case "small":
          sizeCls = "sm";
          break;
      }
      return _ref2 = {}, _defineProperty$U(_ref2, "".concat(prefixCls2.value), true), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-").concat(sizeCls), sizeCls), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _ref2;
    });
    return function() {
      var _a;
      return createVNode("div", {
        "class": classes4.value
      }, [flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots))]);
    };
  }
});
Button.Group = ButtonGroup$1;
Button.install = function(app) {
  app.component(Button.name, Button);
  app.component(ButtonGroup$1.name, ButtonGroup$1);
  return app;
};
var __rest$O = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Search$1 = defineComponent({
  name: "AInputSearch",
  inheritAttrs: false,
  props: _extends$1(_extends$1({}, inputProps), {
    enterButton: PropsTypes.VNodeChild,
    onSearch: PropsTypes.func
  }),
  setup: function setup28() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      input: null
    };
  },
  methods: {
    saveInput: function saveInput2(node) {
      this.input = node;
    },
    handleChange: function handleChange2(e2) {
      this.$emit("update:value", e2.target.value);
      if (e2 && e2.target && e2.type === "click") {
        this.$emit("search", e2.target.value, e2);
      }
      this.$emit("change", e2);
    },
    handleSearch: function handleSearch(e2) {
      if (this.loading || this.disabled) {
        return;
      }
      this.$emit("search", this.input.stateValue, e2);
      if (!isMobile$1.tablet) {
        this.input.focus();
      }
    },
    focus: function focus2() {
      this.input.focus();
    },
    blur: function blur2() {
      this.input.blur();
    },
    renderLoading: function renderLoading(prefixCls2) {
      var size2 = this.$props.size;
      var enterButton = getComponent(this, "enterButton");
      enterButton = enterButton || enterButton === "";
      if (enterButton) {
        return createVNode(Button, {
          "class": "".concat(prefixCls2, "-button"),
          "type": "primary",
          "size": size2,
          "key": "enterButton"
        }, {
          default: function _default8() {
            return [createVNode(LoadingOutlined$1, null, null)];
          }
        });
      }
      return createVNode(LoadingOutlined$1, {
        "class": "".concat(prefixCls2, "-icon"),
        "key": "loadingIcon"
      }, null);
    },
    renderSuffix: function renderSuffix2(prefixCls2) {
      var loading = this.loading;
      var suffix = getComponent(this, "suffix");
      var enterButton = getComponent(this, "enterButton");
      enterButton = enterButton || enterButton === "";
      if (loading && !enterButton) {
        return [suffix, this.renderLoading(prefixCls2)];
      }
      if (enterButton)
        return suffix;
      var icon = createVNode(SearchOutlined$1, {
        "class": "".concat(prefixCls2, "-icon"),
        "key": "searchIcon",
        "onClick": this.handleSearch
      }, null);
      if (suffix) {
        return [suffix, icon];
      }
      return icon;
    },
    renderAddonAfter: function renderAddonAfter(prefixCls2) {
      var size2 = this.size, disabled = this.disabled, loading = this.loading;
      var btnClassName = "".concat(prefixCls2, "-button");
      var enterButton = getComponent(this, "enterButton");
      enterButton = enterButton || enterButton === "";
      var addonAfter = getComponent(this, "addonAfter");
      if (loading && enterButton) {
        return [this.renderLoading(prefixCls2), addonAfter];
      }
      if (!enterButton)
        return addonAfter;
      var enterButtonAsElement = Array.isArray(enterButton) ? enterButton[0] : enterButton;
      var button;
      var isAntdButton = enterButtonAsElement.type && isPlainObject$1(enterButtonAsElement.type) && enterButtonAsElement.type.__ANT_BUTTON;
      if (enterButtonAsElement.tagName === "button" || isAntdButton) {
        button = cloneElement(enterButtonAsElement, _extends$1(_extends$1({
          key: "enterButton",
          class: isAntdButton ? btnClassName : ""
        }, isAntdButton ? {
          size: size2
        } : {}), {
          onClick: this.handleSearch
        }));
      } else {
        button = createVNode(Button, {
          "class": btnClassName,
          "type": "primary",
          "size": size2,
          "disabled": disabled,
          "key": "enterButton",
          "onClick": this.handleSearch
        }, {
          default: function _default8() {
            return [enterButton === true || enterButton === "" ? createVNode(SearchOutlined$1, null, null) : enterButton];
          }
        });
      }
      if (addonAfter) {
        return [button, addonAfter];
      }
      return button;
    }
  },
  render: function render17() {
    var _a = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs), customizePrefixCls = _a.prefixCls, customizeInputPrefixCls = _a.inputPrefixCls, size2 = _a.size, className = _a.class, restProps = __rest$O(_a, ["prefixCls", "inputPrefixCls", "size", "class"]);
    delete restProps.onSearch;
    delete restProps.loading;
    delete restProps.enterButton;
    delete restProps.addonBefore;
    delete restProps["onUpdate:value"];
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("input-search", customizePrefixCls);
    var inputPrefixCls = getPrefixCls2("input", customizeInputPrefixCls);
    var enterButton = getComponent(this, "enterButton");
    var addonBefore = getComponent(this, "addonBefore");
    enterButton = enterButton || enterButton === "";
    var inputClassName;
    if (enterButton) {
      var _classNames;
      inputClassName = classNames(prefixCls2, className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-enter-button"), !!enterButton), _defineProperty$U(_classNames, "".concat(prefixCls2, "-").concat(size2), !!size2), _classNames));
    } else {
      inputClassName = classNames(prefixCls2, className);
    }
    var inputProps2 = _extends$1(_extends$1({}, restProps), {
      prefixCls: inputPrefixCls,
      size: size2,
      suffix: this.renderSuffix(prefixCls2),
      prefix: getComponent(this, "prefix"),
      addonAfter: this.renderAddonAfter(prefixCls2),
      addonBefore,
      class: inputClassName,
      onPressEnter: this.handleSearch,
      onChange: this.handleChange
    });
    return createVNode(Input, _objectSpread2$2(_objectSpread2$2({}, inputProps2), {}, {
      "ref": this.saveInput
    }), null);
  }
});
var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
var SIZING_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
var computedStyleCache = {};
var hiddenTextarea;
function calculateNodeStyling(node) {
  var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var nodeRef = node.getAttribute("id") || node.getAttribute("data-reactid") || node.getAttribute("name");
  if (useCache && computedStyleCache[nodeRef]) {
    return computedStyleCache[nodeRef];
  }
  var style3 = window.getComputedStyle(node);
  var boxSizing = style3.getPropertyValue("box-sizing") || style3.getPropertyValue("-moz-box-sizing") || style3.getPropertyValue("-webkit-box-sizing");
  var paddingSize = parseFloat(style3.getPropertyValue("padding-bottom")) + parseFloat(style3.getPropertyValue("padding-top"));
  var borderSize = parseFloat(style3.getPropertyValue("border-bottom-width")) + parseFloat(style3.getPropertyValue("border-top-width"));
  var sizingStyle = SIZING_STYLE.map(function(name2) {
    return "".concat(name2, ":").concat(style3.getPropertyValue(name2));
  }).join(";");
  var nodeInfo = {
    sizingStyle,
    paddingSize,
    borderSize,
    boxSizing
  };
  if (useCache && nodeRef) {
    computedStyleCache[nodeRef] = nodeInfo;
  }
  return nodeInfo;
}
function calculateNodeHeight(uiTextNode) {
  var useCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var minRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
  var maxRows = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    document.body.appendChild(hiddenTextarea);
  }
  if (uiTextNode.getAttribute("wrap")) {
    hiddenTextarea.setAttribute("wrap", uiTextNode.getAttribute("wrap"));
  } else {
    hiddenTextarea.removeAttribute("wrap");
  }
  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, sizingStyle = _calculateNodeStyling.sizingStyle;
  hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || "";
  var minHeight = Number.MIN_SAFE_INTEGER;
  var maxHeight = Number.MAX_SAFE_INTEGER;
  var height = hiddenTextarea.scrollHeight;
  var overflowY;
  if (boxSizing === "border-box") {
    height += borderSize;
  } else if (boxSizing === "content-box") {
    height -= paddingSize;
  }
  if (minRows !== null || maxRows !== null) {
    hiddenTextarea.value = " ";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
    if (minRows !== null) {
      minHeight = singleRowHeight * minRows;
      if (boxSizing === "border-box") {
        minHeight = minHeight + paddingSize + borderSize;
      }
      height = Math.max(minHeight, height);
    }
    if (maxRows !== null) {
      maxHeight = singleRowHeight * maxRows;
      if (boxSizing === "border-box") {
        maxHeight = maxHeight + paddingSize + borderSize;
      }
      overflowY = height > maxHeight ? "" : "hidden";
      height = Math.min(maxHeight, height);
    }
  }
  return {
    height: "".concat(height, "px"),
    minHeight: "".concat(minHeight, "px"),
    maxHeight: "".concat(maxHeight, "px"),
    overflowY,
    resize: "none"
  };
}
var RESIZE_STATUS_NONE = 0;
var RESIZE_STATUS_RESIZING = 1;
var RESIZE_STATUS_RESIZED = 2;
var TextAreaProps$1 = _extends$1(_extends$1({}, inputProps), {
  autosize: {
    type: [Boolean, Object],
    default: void 0
  },
  autoSize: {
    type: [Boolean, Object],
    default: void 0
  },
  onResize: PropsTypes.func
});
var ResizableTextArea = defineComponent({
  name: "ResizableTextArea",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: TextAreaProps$1,
  setup: function setup29() {
    return {
      nextFrameActionId: void 0,
      textArea: null,
      resizeFrameId: void 0
    };
  },
  data: function data6() {
    return {
      textareaStyles: {},
      resizeStatus: RESIZE_STATUS_NONE
    };
  },
  watch: {
    value: function value2() {
      var _this = this;
      nextTick(function() {
        _this.resizeTextarea();
      });
    }
  },
  mounted: function mounted7() {
    this.resizeTextarea();
  },
  beforeUnmount: function beforeUnmount6() {
    wrapperRaf.cancel(this.nextFrameActionId);
    wrapperRaf.cancel(this.resizeFrameId);
  },
  methods: {
    saveTextArea: function saveTextArea(textArea) {
      this.textArea = textArea;
    },
    handleResize: function handleResize(size2) {
      var resizeStatus = this.$data.resizeStatus;
      if (resizeStatus !== RESIZE_STATUS_NONE) {
        return;
      }
      this.$emit("resize", size2);
    },
    resizeOnNextFrame: function resizeOnNextFrame() {
      wrapperRaf.cancel(this.nextFrameActionId);
      this.nextFrameActionId = wrapperRaf(this.resizeTextarea);
    },
    resizeTextarea: function resizeTextarea() {
      var _this2 = this;
      var autoSize = this.$props.autoSize || this.$props.autosize;
      if (!autoSize || !this.textArea) {
        return;
      }
      var minRows = autoSize.minRows, maxRows = autoSize.maxRows;
      var textareaStyles = calculateNodeHeight(this.textArea, false, minRows, maxRows);
      this.setState({
        textareaStyles,
        resizeStatus: RESIZE_STATUS_RESIZING
      }, function() {
        wrapperRaf.cancel(_this2.resizeFrameId);
        _this2.resizeFrameId = wrapperRaf(function() {
          _this2.setState({
            resizeStatus: RESIZE_STATUS_RESIZED
          }, function() {
            _this2.resizeFrameId = wrapperRaf(function() {
              _this2.setState({
                resizeStatus: RESIZE_STATUS_NONE
              });
              _this2.fixFirefoxAutoScroll();
            });
          });
        });
      });
    },
    fixFirefoxAutoScroll: function fixFirefoxAutoScroll() {
      try {
        if (document.activeElement === this.textArea) {
          var currentStart = this.textArea.selectionStart;
          var currentEnd = this.textArea.selectionEnd;
          this.textArea.setSelectionRange(currentStart, currentEnd);
        }
      } catch (e2) {
      }
    },
    renderTextArea: function renderTextArea() {
      var _this3 = this;
      var props2 = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs);
      var prefixCls2 = props2.prefixCls, autoSize = props2.autoSize, autosize = props2.autosize, disabled = props2.disabled, className = props2.class;
      var _this$$data = this.$data, textareaStyles = _this$$data.textareaStyles, resizeStatus = _this$$data.resizeStatus;
      warning$4(autosize === void 0, "Input.TextArea", "autosize is deprecated, please use autoSize instead.");
      var otherProps = omit$2(props2, ["prefixCls", "onPressEnter", "autoSize", "autosize", "defaultValue", "allowClear", "type", "lazy"]);
      var cls = classNames(prefixCls2, className, _defineProperty$U({}, "".concat(prefixCls2, "-disabled"), disabled));
      if ("value" in otherProps) {
        otherProps.value = otherProps.value || "";
      }
      var style3 = _extends$1(_extends$1(_extends$1({}, props2.style), textareaStyles), resizeStatus === RESIZE_STATUS_RESIZING ? {
        overflowX: "hidden",
        overflowY: "hidden"
      } : null);
      var textareaProps = _extends$1(_extends$1({}, otherProps), {
        style: style3,
        class: cls
      });
      if (!textareaProps.autofocus) {
        delete textareaProps.autofocus;
      }
      return createVNode(ResizeObserver, {
        "onResize": this.handleResize,
        "disabled": !(autoSize || autosize)
      }, {
        default: function _default8() {
          return [withDirectives(createVNode("textarea", _objectSpread2$2(_objectSpread2$2({}, textareaProps), {}, {
            "ref": _this3.saveTextArea
          }), null), [[antInput$1]])];
        }
      });
    }
  },
  render: function render18() {
    return this.renderTextArea();
  }
});
var ResizableTextArea$1 = ResizableTextArea;
var TextAreaProps = _extends$1(_extends$1({}, inputProps), {
  autosize: withUndefined(PropsTypes.oneOfType([Object, Boolean])),
  autoSize: withUndefined(PropsTypes.oneOfType([Object, Boolean])),
  showCount: PropsTypes.looseBool,
  onCompositionstart: PropsTypes.func,
  onCompositionend: PropsTypes.func
});
var __unplugin_components_10 = defineComponent({
  name: "ATextarea",
  inheritAttrs: false,
  props: _extends$1({}, TextAreaProps),
  setup: function setup30() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      resizableTextArea: null,
      clearableInput: null
    };
  },
  data: function data7() {
    var value26 = typeof this.value === "undefined" ? this.defaultValue : this.value;
    return {
      stateValue: typeof value26 === "undefined" ? "" : value26
    };
  },
  watch: {
    value: function value3(val) {
      this.stateValue = val;
    }
  },
  mounted: function mounted8() {
    nextTick(function() {
    });
  },
  methods: {
    setValue: function setValue2(value26, callback) {
      if (!hasProp(this, "value")) {
        this.stateValue = value26;
      } else {
        this.$forceUpdate();
      }
      nextTick(function() {
        callback && callback();
      });
    },
    handleKeyDown: function handleKeyDown2(e2) {
      if (e2.keyCode === 13) {
        this.$emit("pressEnter", e2);
      }
      this.$emit("keydown", e2);
    },
    triggerChange: function triggerChange2(e2) {
      this.$emit("update:value", e2.target.value);
      this.$emit("change", e2);
      this.$emit("input", e2);
    },
    handleChange: function handleChange3(e2) {
      var _this2 = this;
      var _e$target = e2.target, value26 = _e$target.value, composing = _e$target.composing, isComposing = _e$target.isComposing;
      if ((isComposing || composing) && this.lazy || this.stateValue === value26)
        return;
      this.setValue(e2.target.value, function() {
        var _a;
        (_a = _this2.resizableTextArea) === null || _a === void 0 ? void 0 : _a.resizeTextarea();
      });
      resolveOnChange(this.resizableTextArea.textArea, e2, this.triggerChange);
    },
    focus: function focus3() {
      this.resizableTextArea.textArea.focus();
    },
    blur: function blur3() {
      this.resizableTextArea.textArea.blur();
    },
    saveTextArea: function saveTextArea2(resizableTextArea) {
      this.resizableTextArea = resizableTextArea;
    },
    saveClearableInput: function saveClearableInput2(clearableInput) {
      this.clearableInput = clearableInput;
    },
    handleReset: function handleReset2(e2) {
      var _this3 = this;
      this.setValue("", function() {
        _this3.resizableTextArea.renderTextArea();
        _this3.focus();
      });
      resolveOnChange(this.resizableTextArea.textArea, e2, this.triggerChange);
    },
    renderTextArea: function renderTextArea2(prefixCls2) {
      var props2 = getOptionProps(this);
      var _this$$attrs = this.$attrs, style3 = _this$$attrs.style, customClass = _this$$attrs.class;
      var resizeProps = _extends$1(_extends$1(_extends$1({}, props2), this.$attrs), {
        style: !props2.showCount && style3,
        class: !props2.showCount && customClass,
        showCount: null,
        prefixCls: prefixCls2,
        onInput: this.handleChange,
        onChange: this.handleChange,
        onKeydown: this.handleKeyDown
      });
      return createVNode(ResizableTextArea$1, _objectSpread2$2(_objectSpread2$2({}, resizeProps), {}, {
        "ref": this.saveTextArea
      }), null);
    }
  },
  render: function render19() {
    var stateValue = this.stateValue, customizePrefixCls = this.prefixCls, maxlength = this.maxlength, showCount = this.showCount;
    var _this$$attrs2 = this.$attrs, style3 = _this$$attrs2.style, customClass = _this$$attrs2.class;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("input", customizePrefixCls);
    var value26 = fixControlledValue(stateValue);
    var hasMaxlength = Number(maxlength) > 0;
    value26 = hasMaxlength ? value26.slice(0, maxlength) : value26;
    var props2 = _extends$1(_extends$1(_extends$1({}, getOptionProps(this)), this.$attrs), {
      prefixCls: prefixCls2,
      inputType: "text",
      element: this.renderTextArea(prefixCls2),
      handleReset: this.handleReset
    });
    var textareaNode = createVNode(ClearableLabeledInput$1, _objectSpread2$2(_objectSpread2$2({}, props2), {}, {
      "value": value26,
      "ref": this.saveClearableInput
    }), null);
    if (showCount) {
      var valueLength = _toConsumableArray(value26).length;
      var dataCount = "".concat(valueLength).concat(hasMaxlength ? " / ".concat(maxlength) : "");
      textareaNode = createVNode("div", {
        "class": classNames("".concat(prefixCls2, "-textarea"), "".concat(prefixCls2, "-textarea-show-count"), customClass),
        "style": style3,
        "data-count": dataCount
      }, [textareaNode]);
    }
    return textareaNode;
  }
});
var EyeOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z" } }] }, "name": "eye", "theme": "outlined" };
var EyeOutlinedSvg = EyeOutlined$2;
function _objectSpread$I(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$J(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$J(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var EyeOutlined = function EyeOutlined2(props2, context2) {
  var p2 = _objectSpread$I({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": EyeOutlinedSvg
  }), null);
};
EyeOutlined.displayName = "EyeOutlined";
EyeOutlined.inheritAttrs = false;
var EyeOutlined$1 = EyeOutlined;
var EyeInvisibleOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z" } }, { "tag": "path", "attrs": { "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z" } }] }, "name": "eye-invisible", "theme": "outlined" };
var EyeInvisibleOutlinedSvg = EyeInvisibleOutlined$2;
function _objectSpread$H(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$I(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$I(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var EyeInvisibleOutlined = function EyeInvisibleOutlined2(props2, context2) {
  var p2 = _objectSpread$H({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": EyeInvisibleOutlinedSvg
  }), null);
};
EyeInvisibleOutlined.displayName = "EyeInvisibleOutlined";
EyeInvisibleOutlined.inheritAttrs = false;
var EyeInvisibleOutlined$1 = EyeInvisibleOutlined;
var __rest$N = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var ActionMap = {
  click: "onClick",
  hover: "onMouseover"
};
var __unplugin_components_9 = defineComponent({
  name: "AInputPassword",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _extends$1(_extends$1({}, inputProps), {
    prefixCls: PropsTypes.string,
    inputPrefixCls: PropsTypes.string,
    action: PropsTypes.string.def("click"),
    visibilityToggle: PropsTypes.looseBool.def(true),
    iconRender: PropsTypes.func.def(function(visible9) {
      return visible9 ? createVNode(EyeOutlined$1, null, null) : createVNode(EyeInvisibleOutlined$1, null, null);
    })
  }),
  setup: function setup31() {
    return {
      input: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data8() {
    return {
      visible: false
    };
  },
  methods: {
    saveInput: function saveInput3(node) {
      this.input = node;
    },
    focus: function focus4() {
      this.input.focus();
    },
    blur: function blur4() {
      this.input.blur();
    },
    onVisibleChange: function onVisibleChange() {
      if (this.disabled) {
        return;
      }
      this.setState({
        visible: !this.visible
      });
    },
    getIcon: function getIcon2(prefixCls2) {
      var _iconProps;
      var action = this.$props.action;
      var iconTrigger = ActionMap[action] || "";
      var iconRender = this.$slots.iconRender || this.$props.iconRender;
      var icon = iconRender(this.visible);
      var iconProps = (_iconProps = {}, _defineProperty$U(_iconProps, iconTrigger, this.onVisibleChange), _defineProperty$U(_iconProps, "onMousedown", function onMousedown2(e2) {
        e2.preventDefault();
      }), _defineProperty$U(_iconProps, "onMouseup", function onMouseup(e2) {
        e2.preventDefault();
      }), _defineProperty$U(_iconProps, "class", "".concat(prefixCls2, "-icon")), _defineProperty$U(_iconProps, "key", "passwordIcon"), _iconProps);
      return cloneElement(icon, iconProps);
    }
  },
  render: function render20() {
    var _a = getOptionProps(this), customizePrefixCls = _a.prefixCls, customizeInputPrefixCls = _a.inputPrefixCls, size2 = _a.size;
    _a.suffix;
    _a.action;
    var visibilityToggle = _a.visibilityToggle;
    _a.iconRender;
    var restProps = __rest$N(_a, ["prefixCls", "inputPrefixCls", "size", "suffix", "action", "visibilityToggle", "iconRender"]);
    var className = this.$attrs.class;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var inputPrefixCls = getPrefixCls2("input", customizeInputPrefixCls);
    var prefixCls2 = getPrefixCls2("input-password", customizePrefixCls);
    var suffixIcon = visibilityToggle && this.getIcon(prefixCls2);
    var inputClassName = classNames(prefixCls2, className, _defineProperty$U({}, "".concat(prefixCls2, "-").concat(size2), !!size2));
    var inputProps2 = _extends$1(_extends$1(_extends$1(_extends$1({}, restProps), {
      prefixCls: inputPrefixCls,
      size: size2,
      suffix: suffixIcon,
      prefix: getComponent(this, "prefix"),
      addonAfter: getComponent(this, "addonAfter"),
      addonBefore: getComponent(this, "addonBefore")
    }), this.$attrs), {
      type: this.visible ? "text" : "password",
      class: inputClassName,
      ref: "input"
    });
    return createVNode(Input, _objectSpread2$2(_objectSpread2$2({}, inputProps2), {}, {
      "ref": this.saveInput
    }), null);
  }
});
Input.Group = Group$3;
Input.Search = Search$1;
Input.TextArea = __unplugin_components_10;
Input.Password = __unplugin_components_9;
Input.install = function(app) {
  app.component(Input.name, Input);
  app.component(Input.Group.name, Input.Group);
  app.component(Input.Search.name, Input.Search);
  app.component(Input.TextArea.name, Input.TextArea);
  app.component(Input.Password.name, Input.Password);
  return app;
};
var Option$2 = function Option3() {
  return null;
};
Option$2.isSelectOption = true;
Option$2.displayName = "AAutoCompleteOption";
var Option$3 = Option$2;
var OptGroup = function OptGroup3() {
  return null;
};
OptGroup.isSelectOptGroup = true;
OptGroup.displayName = "AAutoCompleteOptGroup";
var OptGroup$1 = OptGroup;
function isSelectOptionOrSelectOptGroup(child) {
  var _a, _b;
  return ((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.isSelectOption) || ((_b = child === null || child === void 0 ? void 0 : child.type) === null || _b === void 0 ? void 0 : _b.isSelectOptGroup);
}
var autoCompleteProps = _extends$1(_extends$1({}, SelectProps()), {
  dataSource: PropsTypes.array,
  dropdownMenuStyle: PropsTypes.style,
  optionLabelProp: PropsTypes.string,
  dropdownMatchSelectWidth: PropsTypes.looseBool
});
var AutoCompleteOption = Option$3;
var AutoCompleteOptGroup = OptGroup$1;
var AutoComplete = defineComponent({
  name: "AAutoComplete",
  inheritAttrs: false,
  props: _extends$1(_extends$1({}, autoCompleteProps), {
    prefixCls: PropsTypes.string,
    showSearch: PropsTypes.looseBool,
    transitionName: PropsTypes.string.def("slide-up"),
    choiceTransitionName: PropsTypes.string.def("zoom"),
    autofocus: PropsTypes.looseBool,
    backfill: PropsTypes.looseBool,
    optionLabelProp: PropsTypes.string.def("children"),
    filterOption: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func]).def(false),
    defaultActiveFirstOption: PropsTypes.looseBool.def(true)
  }),
  emits: ["change", "select", "focus", "blur"],
  Option: Option$3,
  OptGroup: OptGroup$1,
  setup: function setup32(props2, _ref) {
    var slots = _ref.slots;
    warning$4(!(props2.dataSource !== void 0 || "dataSource" in slots), "AutoComplete", "`dataSource` is deprecated, please use `options` instead.");
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      popupRef: null,
      select: null
    };
  },
  created: function created4() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    savePopupRef: function savePopupRef(ref2) {
      this.popupRef = ref2;
    },
    saveSelect: function saveSelect(node) {
      this.select = node;
    },
    getInputElement: function getInputElement() {
      var children = getSlot(this);
      var element = children.length ? children[0] : createVNode(Input, {
        "lazy": false
      }, null);
      return element;
    },
    focus: function focus5() {
      if (this.select) {
        this.select.focus();
      }
    },
    blur: function blur5() {
      if (this.select) {
        this.select.blur();
      }
    }
  },
  render: function render21() {
    var _cls;
    var size2 = this.size, customizePrefixCls = this.prefixCls, dataSource3 = this.dataSource;
    var optionChildren;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("select", customizePrefixCls);
    var className = this.$attrs.class;
    var cls = (_cls = {}, _defineProperty$U(_cls, className, !!className), _defineProperty$U(_cls, "".concat(prefixCls2, "-lg"), size2 === "large"), _defineProperty$U(_cls, "".concat(prefixCls2, "-sm"), size2 === "small"), _defineProperty$U(_cls, "".concat(prefixCls2, "-show-search"), true), _defineProperty$U(_cls, "".concat(prefixCls2, "-auto-complete"), true), _cls);
    var childArray = getSlot(this, "dataSource");
    if ("options" in this.$slots) {
      childArray = getSlot(this, "options");
    }
    if (childArray.length && isSelectOptionOrSelectOptGroup(childArray[0])) {
      optionChildren = childArray;
    } else {
      optionChildren = dataSource3 ? dataSource3.map(function(item) {
        if (isValidElement(item)) {
          return item;
        }
        switch (_typeof$2(item)) {
          case "string":
            return createVNode(Option$3, {
              "key": item,
              "value": item
            }, {
              default: function _default8() {
                return [item];
              }
            });
          case "object":
            return createVNode(Option$3, {
              "key": item.value,
              "value": item.value
            }, {
              default: function _default8() {
                return [item.text];
              }
            });
          default:
            throw new Error("AutoComplete[dataSource] only supports type `string[] | Object[]`.");
        }
      }) : [];
    }
    var selectProps = _extends$1(_extends$1(_extends$1({}, omit$2(getOptionProps(this), ["dataSource", "optionLabelProp"])), this.$attrs), {
      mode: VcSelect.SECRET_COMBOBOX_MODE_DO_NOT_USE,
      getInputElement: this.getInputElement,
      notFoundContent: getComponent(this, "notFoundContent"),
      class: cls,
      ref: this.saveSelect
    });
    return createVNode(VcSelect, selectProps, {
      default: function _default8() {
        return [optionChildren];
      }
    });
  }
});
AutoComplete.install = function(app) {
  app.component(AutoComplete.name, AutoComplete);
  app.component(AutoComplete.Option.displayName, AutoComplete.Option);
  app.component(AutoComplete.OptGroup.displayName, AutoComplete.OptGroup);
  return app;
};
var AutoComplete$1 = AutoComplete;
var CheckCircleOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z" } }, { "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "check-circle", "theme": "outlined" };
var CheckCircleOutlinedSvg = CheckCircleOutlined$2;
function _objectSpread$G(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$H(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$H(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CheckCircleOutlined = function CheckCircleOutlined2(props2, context2) {
  var p2 = _objectSpread$G({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CheckCircleOutlinedSvg
  }), null);
};
CheckCircleOutlined.displayName = "CheckCircleOutlined";
CheckCircleOutlined.inheritAttrs = false;
var CheckCircleOutlined$1 = CheckCircleOutlined;
var ExclamationCircleOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z" } }] }, "name": "exclamation-circle", "theme": "outlined" };
var ExclamationCircleOutlinedSvg = ExclamationCircleOutlined$2;
function _objectSpread$F(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$G(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$G(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var ExclamationCircleOutlined = function ExclamationCircleOutlined2(props2, context2) {
  var p2 = _objectSpread$F({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": ExclamationCircleOutlinedSvg
  }), null);
};
ExclamationCircleOutlined.displayName = "ExclamationCircleOutlined";
ExclamationCircleOutlined.inheritAttrs = false;
var ExclamationCircleOutlined$1 = ExclamationCircleOutlined;
var InfoCircleOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z" } }] }, "name": "info-circle", "theme": "outlined" };
var InfoCircleOutlinedSvg = InfoCircleOutlined$2;
function _objectSpread$E(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$F(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$F(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var InfoCircleOutlined = function InfoCircleOutlined2(props2, context2) {
  var p2 = _objectSpread$E({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": InfoCircleOutlinedSvg
  }), null);
};
InfoCircleOutlined.displayName = "InfoCircleOutlined";
InfoCircleOutlined.inheritAttrs = false;
var InfoCircleOutlined$1 = InfoCircleOutlined;
var CloseCircleOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z" } }, { "tag": "path", "attrs": { "d": "M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "close-circle", "theme": "outlined" };
var CloseCircleOutlinedSvg = CloseCircleOutlined$2;
function _objectSpread$D(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$E(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$E(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CloseCircleOutlined = function CloseCircleOutlined2(props2, context2) {
  var p2 = _objectSpread$D({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CloseCircleOutlinedSvg
  }), null);
};
CloseCircleOutlined.displayName = "CloseCircleOutlined";
CloseCircleOutlined.inheritAttrs = false;
var CloseCircleOutlined$1 = CloseCircleOutlined;
var CheckCircleFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z" } }] }, "name": "check-circle", "theme": "filled" };
var CheckCircleFilledSvg = CheckCircleFilled$2;
function _objectSpread$C(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$D(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$D(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CheckCircleFilled = function CheckCircleFilled2(props2, context2) {
  var p2 = _objectSpread$C({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CheckCircleFilledSvg
  }), null);
};
CheckCircleFilled.displayName = "CheckCircleFilled";
CheckCircleFilled.inheritAttrs = false;
var CheckCircleFilled$1 = CheckCircleFilled;
var ExclamationCircleFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "exclamation-circle", "theme": "filled" };
var ExclamationCircleFilledSvg = ExclamationCircleFilled$2;
function _objectSpread$B(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$C(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$C(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var ExclamationCircleFilled = function ExclamationCircleFilled2(props2, context2) {
  var p2 = _objectSpread$B({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": ExclamationCircleFilledSvg
  }), null);
};
ExclamationCircleFilled.displayName = "ExclamationCircleFilled";
ExclamationCircleFilled.inheritAttrs = false;
var ExclamationCircleFilled$1 = ExclamationCircleFilled;
var InfoCircleFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "info-circle", "theme": "filled" };
var InfoCircleFilledSvg = InfoCircleFilled$2;
function _objectSpread$A(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$B(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$B(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var InfoCircleFilled = function InfoCircleFilled2(props2, context2) {
  var p2 = _objectSpread$A({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": InfoCircleFilledSvg
  }), null);
};
InfoCircleFilled.displayName = "InfoCircleFilled";
InfoCircleFilled.inheritAttrs = false;
var InfoCircleFilled$1 = InfoCircleFilled;
function noop$H() {
}
var iconMapFilled = {
  success: CheckCircleFilled$1,
  info: InfoCircleFilled$1,
  error: CloseCircleFilled$1,
  warning: ExclamationCircleFilled$1
};
var iconMapOutlined = {
  success: CheckCircleOutlined$1,
  info: InfoCircleOutlined$1,
  error: CloseCircleOutlined$1,
  warning: ExclamationCircleOutlined$1
};
var AlertTypes = tuple("success", "info", "warning", "error");
var alertProps = {
  type: PropsTypes.oneOf(AlertTypes),
  closable: PropsTypes.looseBool,
  closeText: PropsTypes.VNodeChild,
  message: PropsTypes.VNodeChild,
  description: PropsTypes.VNodeChild,
  afterClose: PropsTypes.func.def(noop$H),
  showIcon: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  banner: PropsTypes.looseBool,
  icon: PropsTypes.VNodeChild,
  onClose: PropsTypes.VNodeChild
};
var Alert = defineComponent({
  name: "AAlert",
  inheritAttrs: false,
  props: alertProps,
  emits: ["close"],
  setup: function setup33(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs, expose = _ref.expose;
    var configProvider = inject("configProvider", defaultConfigProvider);
    var closing = ref(false);
    var closed = ref(false);
    var alertNode = ref();
    var handleClose2 = function handleClose3(e2) {
      e2.preventDefault();
      var dom = alertNode.value;
      dom.style.height = "".concat(dom.offsetHeight, "px");
      dom.style.height = "".concat(dom.offsetHeight, "px");
      closing.value = true;
      emit("close", e2);
    };
    var animationEnd = function animationEnd2() {
      var _a;
      closing.value = false;
      closed.value = true;
      (_a = props2.afterClose) === null || _a === void 0 ? void 0 : _a.call(props2);
    };
    expose({
      animationEnd
    });
    return function() {
      var _classNames;
      var customizePrefixCls = props2.prefixCls, banner = props2.banner;
      var getPrefixCls2 = configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("alert", customizePrefixCls);
      var closable = props2.closable, type3 = props2.type, showIcon = props2.showIcon;
      var closeText = getPropsSlot(slots, props2, "closeText");
      var description2 = getPropsSlot(slots, props2, "description");
      var message2 = getPropsSlot(slots, props2, "message");
      var icon = getPropsSlot(slots, props2, "icon");
      showIcon = banner && showIcon === void 0 ? true : showIcon;
      type3 = banner && type3 === void 0 ? "warning" : type3 || "info";
      var IconType = (description2 ? iconMapOutlined : iconMapFilled)[type3] || null;
      if (closeText) {
        closable = true;
      }
      var alertCls = classNames(prefixCls2, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-").concat(type3), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-closing"), closing.value), _defineProperty$U(_classNames, "".concat(prefixCls2, "-with-description"), !!description2), _defineProperty$U(_classNames, "".concat(prefixCls2, "-no-icon"), !showIcon), _defineProperty$U(_classNames, "".concat(prefixCls2, "-banner"), !!banner), _defineProperty$U(_classNames, "".concat(prefixCls2, "-closable"), closable), _classNames));
      var closeIcon = closable ? createVNode("button", {
        "type": "button",
        "onClick": handleClose2,
        "class": "".concat(prefixCls2, "-close-icon"),
        "tabindex": 0
      }, [closeText ? createVNode("span", {
        "class": "".concat(prefixCls2, "-close-text")
      }, [closeText]) : createVNode(CloseOutlined$1, null, null)]) : null;
      var iconNode = icon && (isValidElement(icon) ? cloneVNode(icon, {
        class: "".concat(prefixCls2, "-icon")
      }) : createVNode("span", {
        "class": "".concat(prefixCls2, "-icon")
      }, [icon])) || createVNode(IconType, {
        "class": "".concat(prefixCls2, "-icon")
      }, null);
      var transitionProps = getTransitionProps("".concat(prefixCls2, "-slide-up"), {
        appear: false,
        onAfterLeave: animationEnd
      });
      return closed.value ? null : createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [withDirectives(createVNode("div", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
            "class": [attrs.class, alertCls],
            "data-show": !closing.value,
            "ref": alertNode
          }), [showIcon ? iconNode : null, createVNode("div", {
            "class": "".concat(prefixCls2, "-content")
          }, [createVNode("div", {
            "class": "".concat(prefixCls2, "-message")
          }, [message2]), createVNode("div", {
            "class": "".concat(prefixCls2, "-description")
          }, [description2])]), closeIcon]), [[vShow, !closing.value]])];
        }
      });
    };
  }
});
var index$B = withInstall(Alert);
var responsiveArray = ["xxl", "xl", "lg", "md", "sm", "xs"];
var responsiveMap = {
  xs: "(max-width: 575px)",
  sm: "(min-width: 576px)",
  md: "(min-width: 768px)",
  lg: "(min-width: 992px)",
  xl: "(min-width: 1200px)",
  xxl: "(min-width: 1600px)"
};
var subscribers = new Map();
var subUid = -1;
var screens = {};
var responsiveObserve = {
  matchHandlers: {},
  dispatch: function dispatch(pointMap) {
    screens = pointMap;
    subscribers.forEach(function(func) {
      return func(screens);
    });
    return subscribers.size >= 1;
  },
  subscribe: function subscribe(func) {
    if (!subscribers.size)
      this.register();
    subUid += 1;
    subscribers.set(subUid, func);
    func(screens);
    return subUid;
  },
  unsubscribe: function unsubscribe(token2) {
    subscribers.delete(token2);
    if (!subscribers.size)
      this.unregister();
  },
  unregister: function unregister() {
    var _this = this;
    Object.keys(responsiveMap).forEach(function(screen) {
      var matchMediaQuery = responsiveMap[screen];
      var handler8 = _this.matchHandlers[matchMediaQuery];
      handler8 === null || handler8 === void 0 ? void 0 : handler8.mql.removeListener(handler8 === null || handler8 === void 0 ? void 0 : handler8.listener);
    });
    subscribers.clear();
  },
  register: function register() {
    var _this2 = this;
    Object.keys(responsiveMap).forEach(function(screen) {
      var matchMediaQuery = responsiveMap[screen];
      var listener = function listener2(_ref) {
        var matches = _ref.matches;
        _this2.dispatch(_extends$1(_extends$1({}, screens), _defineProperty$U({}, screen, matches)));
      };
      var mql = window.matchMedia(matchMediaQuery);
      mql.addListener(listener);
      _this2.matchHandlers[matchMediaQuery] = {
        mql,
        listener
      };
      listener(mql);
    });
  }
};
var ResponsiveObserve = responsiveObserve;
function useBreakpoint() {
  var screens2 = ref({});
  var token2 = null;
  onMounted(function() {
    token2 = ResponsiveObserve.subscribe(function(supportScreens) {
      screens2.value = supportScreens;
    });
  });
  onUnmounted(function() {
    ResponsiveObserve.unsubscribe(token2);
  });
  return screens2;
}
var sizeProvider = Symbol("SizeProvider");
var useProvideSize = function useProvideSize2(props2) {
  var configProvider = inject("configProvider", defaultConfigProvider);
  var size2 = computed(function() {
    return props2.size || configProvider.componentSize;
  });
  provide(sizeProvider, size2);
  return size2;
};
var useInjectSize = function useInjectSize2(props2) {
  var size2 = props2 ? computed(function() {
    return props2.size;
  }) : inject(sizeProvider, computed(function() {
    return "default";
  }));
  return size2;
};
var useProvideSize$1 = useProvideSize;
var avatarProps$1 = {
  prefixCls: PropsTypes.string,
  shape: PropsTypes.oneOf(tuple("circle", "square")).def("circle"),
  size: {
    type: [Number, String, Object],
    default: function _default2() {
      return "default";
    }
  },
  src: PropsTypes.string,
  srcset: PropsTypes.string,
  icon: PropsTypes.VNodeChild,
  alt: PropsTypes.string,
  gap: PropsTypes.number,
  draggable: PropsTypes.bool,
  loadError: {
    type: Function
  }
};
var Avatar = defineComponent({
  name: "AAvatar",
  inheritAttrs: false,
  props: avatarProps$1,
  slots: ["icon"],
  setup: function setup34(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var isImgExist = ref(true);
    var isMounted = ref(false);
    var scale = ref(1);
    var avatarChildrenRef = ref(null);
    var avatarNodeRef = ref(null);
    var _useConfigInject = useConfigInject("avatar", props2), prefixCls2 = _useConfigInject.prefixCls;
    var groupSize = useInjectSize();
    var screens2 = useBreakpoint();
    var responsiveSize = computed(function() {
      if (_typeof$2(props2.size) !== "object") {
        return void 0;
      }
      var currentBreakpoint = responsiveArray.find(function(screen) {
        return screens2.value[screen];
      });
      var currentSize = props2.size[currentBreakpoint];
      return currentSize;
    });
    var responsiveSizeStyle = function responsiveSizeStyle2(hasIcon) {
      if (responsiveSize.value) {
        return {
          width: "".concat(responsiveSize.value, "px"),
          height: "".concat(responsiveSize.value, "px"),
          lineHeight: "".concat(responsiveSize.value, "px"),
          fontSize: "".concat(hasIcon ? responsiveSize.value / 2 : 18, "px")
        };
      }
      return {};
    };
    var setScaleParam = function setScaleParam2() {
      if (!avatarChildrenRef.value || !avatarNodeRef.value) {
        return;
      }
      var childrenWidth = avatarChildrenRef.value.offsetWidth;
      var nodeWidth = avatarNodeRef.value.offsetWidth;
      if (childrenWidth !== 0 && nodeWidth !== 0) {
        var _props$gap = props2.gap, gap = _props$gap === void 0 ? 4 : _props$gap;
        if (gap * 2 < nodeWidth) {
          scale.value = nodeWidth - gap * 2 < childrenWidth ? (nodeWidth - gap * 2) / childrenWidth : 1;
        }
      }
    };
    var handleImgLoadError = function handleImgLoadError2() {
      var loadError = props2.loadError;
      var errorFlag = loadError === null || loadError === void 0 ? void 0 : loadError();
      if (errorFlag !== false) {
        isImgExist.value = false;
      }
    };
    watch(function() {
      return props2.src;
    }, function() {
      nextTick(function() {
        isImgExist.value = true;
        scale.value = 1;
      });
    });
    watch(function() {
      return props2.gap;
    }, function() {
      nextTick(function() {
        setScaleParam();
      });
    });
    onMounted(function() {
      nextTick(function() {
        setScaleParam();
        isMounted.value = true;
      });
    });
    return function() {
      var _classString;
      var _a;
      var shape = props2.shape, customSize = props2.size, src = props2.src, alt = props2.alt, srcset = props2.srcset, draggable = props2.draggable;
      var icon = getPropsSlot(slots, props2, "icon");
      var pre = prefixCls2.value;
      var size2 = customSize === "default" ? groupSize.value : customSize;
      var classString = (_classString = {}, _defineProperty$U(_classString, "".concat(attrs.class), !!attrs.class), _defineProperty$U(_classString, pre, true), _defineProperty$U(_classString, "".concat(pre, "-lg"), size2 === "large"), _defineProperty$U(_classString, "".concat(pre, "-sm"), size2 === "small"), _defineProperty$U(_classString, "".concat(pre, "-").concat(shape), shape), _defineProperty$U(_classString, "".concat(pre, "-image"), src && isImgExist.value), _defineProperty$U(_classString, "".concat(pre, "-icon"), icon), _classString);
      var sizeStyle = typeof size2 === "number" ? {
        width: "".concat(size2, "px"),
        height: "".concat(size2, "px"),
        lineHeight: "".concat(size2, "px"),
        fontSize: icon ? "".concat(size2 / 2, "px") : "18px"
      } : {};
      var children = (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
      var childrenToRender;
      if (src && isImgExist.value) {
        childrenToRender = createVNode("img", {
          "draggable": draggable,
          "src": src,
          "srcset": srcset,
          "onError": handleImgLoadError,
          "alt": alt
        }, null);
      } else if (icon) {
        childrenToRender = icon;
      } else if (isMounted.value || scale.value !== 1) {
        var transformString = "scale(".concat(scale.value, ") translateX(-50%)");
        var childrenStyle = {
          msTransform: transformString,
          WebkitTransform: transformString,
          transform: transformString
        };
        var sizeChildrenStyle = typeof size2 === "number" ? {
          lineHeight: "".concat(size2, "px")
        } : {};
        childrenToRender = createVNode(ResizeObserver, {
          "onResize": setScaleParam
        }, {
          default: function _default8() {
            return [createVNode("span", {
              "class": "".concat(pre, "-string"),
              "ref": avatarChildrenRef,
              "style": _extends$1(_extends$1({}, sizeChildrenStyle), childrenStyle)
            }, [children])];
          }
        });
      } else {
        childrenToRender = createVNode("span", {
          "class": "".concat(pre, "-string"),
          "ref": avatarChildrenRef,
          "style": {
            opacity: 0
          }
        }, [children]);
      }
      return createVNode("span", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "ref": avatarNodeRef,
        "class": classString,
        "style": _extends$1(_extends$1(_extends$1({}, sizeStyle), responsiveSizeStyle(!!icon)), attrs.style)
      }), [childrenToRender]);
    };
  }
});
var Avatar$1 = Avatar;
var autoAdjustOverflow$4 = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset$4 = [0, 0];
var placements$7 = {
  left: {
    points: ["cr", "cl"],
    overflow: autoAdjustOverflow$4,
    offset: [-4, 0],
    targetOffset: targetOffset$4
  },
  right: {
    points: ["cl", "cr"],
    overflow: autoAdjustOverflow$4,
    offset: [4, 0],
    targetOffset: targetOffset$4
  },
  top: {
    points: ["bc", "tc"],
    overflow: autoAdjustOverflow$4,
    offset: [0, -4],
    targetOffset: targetOffset$4
  },
  bottom: {
    points: ["tc", "bc"],
    overflow: autoAdjustOverflow$4,
    offset: [0, 4],
    targetOffset: targetOffset$4
  },
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$4,
    offset: [0, -4],
    targetOffset: targetOffset$4
  },
  leftTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflow$4,
    offset: [-4, 0],
    targetOffset: targetOffset$4
  },
  topRight: {
    points: ["br", "tr"],
    overflow: autoAdjustOverflow$4,
    offset: [0, -4],
    targetOffset: targetOffset$4
  },
  rightTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflow$4,
    offset: [4, 0],
    targetOffset: targetOffset$4
  },
  bottomRight: {
    points: ["tr", "br"],
    overflow: autoAdjustOverflow$4,
    offset: [0, 4],
    targetOffset: targetOffset$4
  },
  rightBottom: {
    points: ["bl", "br"],
    overflow: autoAdjustOverflow$4,
    offset: [4, 0],
    targetOffset: targetOffset$4
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$4,
    offset: [0, 4],
    targetOffset: targetOffset$4
  },
  leftBottom: {
    points: ["br", "bl"],
    overflow: autoAdjustOverflow$4,
    offset: [-4, 0],
    targetOffset: targetOffset$4
  }
};
var Content$1 = {
  name: "Content",
  props: {
    prefixCls: PropsTypes.string,
    overlay: PropsTypes.any,
    trigger: PropsTypes.any,
    overlayInnerStyle: PropsTypes.any
  },
  updated: function updated4() {
    var trigger2 = this.trigger;
    if (trigger2) {
      trigger2.forcePopupAlign();
    }
  },
  render: function render22() {
    var overlay = this.overlay, prefixCls2 = this.prefixCls, overlayInnerStyle = this.overlayInnerStyle;
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-inner"),
      "role": "tooltip",
      "style": overlayInnerStyle
    }, [typeof overlay === "function" ? overlay() : overlay]);
  }
};
var __rest$M = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$G() {
}
var Tooltip$1 = defineComponent({
  name: "Tooltip",
  inheritAttrs: false,
  props: {
    trigger: PropsTypes.any.def(["hover"]),
    defaultVisible: PropsTypes.looseBool,
    visible: PropsTypes.looseBool,
    placement: PropsTypes.string.def("right"),
    transitionName: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
    animation: PropsTypes.any,
    afterVisibleChange: PropsTypes.func.def(function() {
    }),
    overlay: PropsTypes.any,
    overlayStyle: PropsTypes.object,
    overlayClassName: PropsTypes.string,
    prefixCls: PropsTypes.string.def("rc-tooltip"),
    mouseEnterDelay: PropsTypes.number.def(0),
    mouseLeaveDelay: PropsTypes.number.def(0.1),
    getTooltipContainer: PropsTypes.func,
    destroyTooltipOnHide: PropsTypes.looseBool.def(false),
    align: PropsTypes.object.def(function() {
      return {};
    }),
    arrowContent: PropsTypes.any.def(null),
    tipId: PropsTypes.string,
    builtinPlacements: PropsTypes.object,
    overlayInnerStyle: PropsTypes.style
  },
  methods: {
    getPopupElement: function getPopupElement3() {
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, tipId = _this$$props.tipId, overlayInnerStyle = _this$$props.overlayInnerStyle;
      return [createVNode("div", {
        "class": "".concat(prefixCls2, "-arrow"),
        "key": "arrow"
      }, [getComponent(this, "arrowContent")]), createVNode(Content$1, {
        "key": "content",
        "trigger": this.$refs.trigger,
        "prefixCls": prefixCls2,
        "id": tipId,
        "overlay": getComponent(this, "overlay"),
        "overlayInnerStyle": overlayInnerStyle
      }, null)];
    },
    getPopupDomNode: function getPopupDomNode3() {
      return this.$refs.trigger.getPopupDomNode();
    }
  },
  render: function render23(h2) {
    var _this = this;
    var _a = getOptionProps(this), overlayClassName = _a.overlayClassName, trigger2 = _a.trigger, mouseEnterDelay = _a.mouseEnterDelay, mouseLeaveDelay = _a.mouseLeaveDelay, overlayStyle = _a.overlayStyle, prefixCls2 = _a.prefixCls, afterVisibleChange2 = _a.afterVisibleChange, transitionName2 = _a.transitionName, animation2 = _a.animation, placement2 = _a.placement, align = _a.align, destroyTooltipOnHide = _a.destroyTooltipOnHide, defaultVisible = _a.defaultVisible, getTooltipContainer = _a.getTooltipContainer, restProps = __rest$M(_a, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "afterVisibleChange", "transitionName", "animation", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer"]);
    var extraProps = _extends$1({}, restProps);
    if (hasProp(this, "visible")) {
      extraProps.popupVisible = this.$props.visible;
    }
    var $attrs = this.$attrs;
    var triggerProps = _extends$1(_extends$1(_extends$1({
      popupClassName: overlayClassName,
      prefixCls: prefixCls2,
      action: trigger2,
      builtinPlacements: placements$7,
      popupPlacement: placement2,
      popupAlign: align,
      getPopupContainer: getTooltipContainer,
      afterPopupVisibleChange: afterVisibleChange2,
      popupTransitionName: transitionName2,
      popupAnimation: animation2,
      defaultPopupVisible: defaultVisible,
      destroyPopupOnHide: destroyTooltipOnHide,
      mouseLeaveDelay,
      popupStyle: overlayStyle,
      mouseEnterDelay
    }, extraProps), $attrs), {
      onPopupVisibleChange: $attrs.onVisibleChange || noop$G,
      onPopupAlign: $attrs.onPopupAlign || noop$G,
      ref: "trigger",
      popup: this.getPopupElement()
    });
    return createVNode(Trigger, triggerProps, {
      default: function _default8() {
        return [getSlot(_this)[0]];
      }
    });
  }
});
var autoAdjustOverflowEnabled = {
  adjustX: 1,
  adjustY: 1
};
var autoAdjustOverflowDisabled = {
  adjustX: 0,
  adjustY: 0
};
var targetOffset$3 = [0, 0];
function getOverflowOptions(autoAdjustOverflow2) {
  if (typeof autoAdjustOverflow2 === "boolean") {
    return autoAdjustOverflow2 ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
  }
  return _extends$1(_extends$1({}, autoAdjustOverflowDisabled), autoAdjustOverflow2);
}
function getPlacements(config2) {
  var _config$arrowWidth = config2.arrowWidth, arrowWidth = _config$arrowWidth === void 0 ? 5 : _config$arrowWidth, _config$horizontalArr = config2.horizontalArrowShift, horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr, _config$verticalArrow = config2.verticalArrowShift, verticalArrowShift = _config$verticalArrow === void 0 ? 12 : _config$verticalArrow, _config$autoAdjustOve = config2.autoAdjustOverflow, autoAdjustOverflow2 = _config$autoAdjustOve === void 0 ? true : _config$autoAdjustOve;
  var placementMap = {
    left: {
      points: ["cr", "cl"],
      offset: [-4, 0]
    },
    right: {
      points: ["cl", "cr"],
      offset: [4, 0]
    },
    top: {
      points: ["bc", "tc"],
      offset: [0, -4]
    },
    bottom: {
      points: ["tc", "bc"],
      offset: [0, 4]
    },
    topLeft: {
      points: ["bl", "tc"],
      offset: [-(horizontalArrowShift + arrowWidth), -4]
    },
    leftTop: {
      points: ["tr", "cl"],
      offset: [-4, -(verticalArrowShift + arrowWidth)]
    },
    topRight: {
      points: ["br", "tc"],
      offset: [horizontalArrowShift + arrowWidth, -4]
    },
    rightTop: {
      points: ["tl", "cr"],
      offset: [4, -(verticalArrowShift + arrowWidth)]
    },
    bottomRight: {
      points: ["tr", "bc"],
      offset: [horizontalArrowShift + arrowWidth, 4]
    },
    rightBottom: {
      points: ["bl", "cr"],
      offset: [4, verticalArrowShift + arrowWidth]
    },
    bottomLeft: {
      points: ["tl", "bc"],
      offset: [-(horizontalArrowShift + arrowWidth), 4]
    },
    leftBottom: {
      points: ["br", "cl"],
      offset: [-4, verticalArrowShift + arrowWidth]
    }
  };
  Object.keys(placementMap).forEach(function(key2) {
    placementMap[key2] = config2.arrowPointAtCenter ? _extends$1(_extends$1({}, placementMap[key2]), {
      overflow: getOverflowOptions(autoAdjustOverflow2),
      targetOffset: targetOffset$3
    }) : _extends$1(_extends$1({}, placements$7[key2]), {
      overflow: getOverflowOptions(autoAdjustOverflow2)
    });
    placementMap[key2].ignoreShake = true;
  });
  return placementMap;
}
var PresetStatusColorTypes = tuple("success", "processing", "error", "default", "warning");
var PresetColorTypes = tuple("pink", "red", "yellow", "orange", "cyan", "green", "blue", "purple", "geekblue", "magenta", "volcano", "gold", "lime");
var triggerType = PropsTypes.oneOf(tuple("hover", "focus", "click", "contextmenu"));
var abstractTooltipProps = function() {
  return {
    trigger: PropsTypes.oneOfType([triggerType, PropsTypes.arrayOf(triggerType)]).def("hover"),
    visible: PropsTypes.looseBool,
    defaultVisible: PropsTypes.looseBool,
    placement: PropsTypes.oneOf(tuple("top", "left", "right", "bottom", "topLeft", "topRight", "bottomLeft", "bottomRight", "leftTop", "leftBottom", "rightTop", "rightBottom")).def("top"),
    color: PropsTypes.string,
    transitionName: PropsTypes.string.def("zoom-big-fast"),
    overlayStyle: PropsTypes.object.def(function() {
      return {};
    }),
    overlayClassName: PropsTypes.string,
    openClassName: PropsTypes.string,
    prefixCls: PropsTypes.string,
    mouseEnterDelay: PropsTypes.number.def(0.1),
    mouseLeaveDelay: PropsTypes.number.def(0.1),
    getPopupContainer: PropsTypes.func,
    arrowPointAtCenter: PropsTypes.looseBool.def(false),
    autoAdjustOverflow: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]).def(true),
    destroyTooltipOnHide: PropsTypes.looseBool.def(false),
    align: PropsTypes.object.def(function() {
      return {};
    }),
    builtinPlacements: PropsTypes.object,
    children: PropsTypes.array,
    onVisibleChange: PropsTypes.func,
    "onUpdate:visible": PropsTypes.func
  };
};
var splitObject = function splitObject2(obj, keys2) {
  var picked = {};
  var omitted = _extends$1({}, obj);
  keys2.forEach(function(key2) {
    if (obj && key2 in obj) {
      picked[key2] = obj[key2];
      delete omitted[key2];
    }
  });
  return {
    picked,
    omitted
  };
};
var props$1 = abstractTooltipProps();
var PresetColorRegex$1 = new RegExp("^(".concat(PresetColorTypes.join("|"), ")(-inverse)?$"));
var tooltipProps$2 = _extends$1(_extends$1({}, props$1), {
  title: PropsTypes.VNodeChild
});
var ToolTip = defineComponent({
  name: "ATooltip",
  inheritAttrs: false,
  props: tooltipProps$2,
  emits: ["update:visible", "visibleChange"],
  setup: function setup35() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data9() {
    return {
      sVisible: !!this.$props.visible || !!this.$props.defaultVisible
    };
  },
  watch: {
    visible: function visible(val) {
      this.sVisible = val;
    }
  },
  methods: {
    handleVisibleChange: function handleVisibleChange(visible9) {
      if (!hasProp(this, "visible")) {
        this.sVisible = this.isNoTitle() ? false : visible9;
      }
      if (!this.isNoTitle()) {
        this.$emit("update:visible", visible9);
        this.$emit("visibleChange", visible9);
      }
    },
    getPopupDomNode: function getPopupDomNode4() {
      return this.$refs.tooltip.getPopupDomNode();
    },
    getPlacements: function getPlacements$1() {
      var _this$$props = this.$props, builtinPlacements = _this$$props.builtinPlacements, arrowPointAtCenter = _this$$props.arrowPointAtCenter, autoAdjustOverflow2 = _this$$props.autoAdjustOverflow;
      return builtinPlacements || getPlacements({
        arrowPointAtCenter,
        verticalArrowShift: 8,
        autoAdjustOverflow: autoAdjustOverflow2
      });
    },
    getDisabledCompatibleChildren: function getDisabledCompatibleChildren(ele) {
      if ((_typeof$2(ele.type) === "object" && (ele.type.__ANT_BUTTON === true || ele.type.__ANT_SWITCH === true || ele.type.__ANT_CHECKBOX === true) || ele.type === "button") && ele.props && (ele.props.disabled || ele.props.disabled === "")) {
        var _splitObject = splitObject(getStyle$1(ele), ["position", "left", "right", "top", "bottom", "float", "display", "zIndex"]), picked = _splitObject.picked, omitted = _splitObject.omitted;
        var spanStyle = _extends$1(_extends$1({
          display: "inline-block"
        }, picked), {
          cursor: "not-allowed",
          width: ele.props && ele.props.block ? "100%" : null
        });
        var buttonStyle = _extends$1(_extends$1({}, omitted), {
          pointerEvents: "none"
        });
        var child = cloneElement(ele, {
          style: buttonStyle
        }, true);
        return createVNode("span", {
          "style": spanStyle
        }, [child]);
      }
      return ele;
    },
    isNoTitle: function isNoTitle() {
      var title2 = getComponent(this, "title");
      return !title2 && title2 !== 0;
    },
    getOverlay: function getOverlay() {
      var title2 = getComponent(this, "title");
      if (title2 === 0) {
        return title2;
      }
      return title2 || "";
    },
    onPopupAlign: function onPopupAlign(domNode, align) {
      var placements2 = this.getPlacements();
      var placement2 = Object.keys(placements2).filter(function(key2) {
        return placements2[key2].points[0] === align.points[0] && placements2[key2].points[1] === align.points[1];
      })[0];
      if (!placement2) {
        return;
      }
      var rect = domNode.getBoundingClientRect();
      var transformOrigin = {
        top: "50%",
        left: "50%"
      };
      if (placement2.indexOf("top") >= 0 || placement2.indexOf("Bottom") >= 0) {
        transformOrigin.top = "".concat(rect.height - align.offset[1], "px");
      } else if (placement2.indexOf("Top") >= 0 || placement2.indexOf("bottom") >= 0) {
        transformOrigin.top = "".concat(-align.offset[1], "px");
      }
      if (placement2.indexOf("left") >= 0 || placement2.indexOf("Right") >= 0) {
        transformOrigin.left = "".concat(rect.width - align.offset[0], "px");
      } else if (placement2.indexOf("right") >= 0 || placement2.indexOf("Left") >= 0) {
        transformOrigin.left = "".concat(-align.offset[0], "px");
      }
      domNode.style.transformOrigin = "".concat(transformOrigin.left, " ").concat(transformOrigin.top);
    }
  },
  render: function render24() {
    var _classNames;
    var $props = this.$props, $data = this.$data, $attrs = this.$attrs;
    var customizePrefixCls = $props.prefixCls, openClassName = $props.openClassName, getPopupContainer = $props.getPopupContainer, color = $props.color, overlayClassName = $props.overlayClassName;
    var getContextPopupContainer = this.configProvider.getPopupContainer;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("tooltip", customizePrefixCls);
    var children = this.children || filterEmpty(getSlot(this));
    children = children.length === 1 ? children[0] : children;
    var sVisible = $data.sVisible;
    if (!hasProp(this, "visible") && this.isNoTitle()) {
      sVisible = false;
    }
    if (!children) {
      return null;
    }
    var child = this.getDisabledCompatibleChildren(isValidElement(children) ? children : createVNode("span", null, [children]));
    var childCls = classNames((_classNames = {}, _defineProperty$U(_classNames, openClassName || "".concat(prefixCls2, "-open"), sVisible), _defineProperty$U(_classNames, child.props && child.props.class, child.props && child.props.class), _classNames));
    var customOverlayClassName = classNames(overlayClassName, _defineProperty$U({}, "".concat(prefixCls2, "-").concat(color), color && PresetColorRegex$1.test(color)));
    var formattedOverlayInnerStyle;
    var arrowContentStyle;
    if (color && !PresetColorRegex$1.test(color)) {
      formattedOverlayInnerStyle = {
        backgroundColor: color
      };
      arrowContentStyle = {
        backgroundColor: color
      };
    }
    var vcTooltipProps = _extends$1(_extends$1(_extends$1({}, $attrs), $props), {
      prefixCls: prefixCls2,
      getTooltipContainer: getPopupContainer || getContextPopupContainer,
      builtinPlacements: this.getPlacements(),
      overlay: this.getOverlay(),
      visible: sVisible,
      ref: "tooltip",
      overlayClassName: customOverlayClassName,
      overlayInnerStyle: formattedOverlayInnerStyle,
      arrowContent: createVNode("span", {
        "class": "".concat(prefixCls2, "-arrow-content"),
        "style": arrowContentStyle
      }, null),
      onVisibleChange: this.handleVisibleChange,
      onPopupAlign: this.onPopupAlign
    });
    return createVNode(Tooltip$1, vcTooltipProps, {
      default: function _default8() {
        return [sVisible ? cloneElement(child, {
          class: childCls
        }) : child];
      }
    });
  }
});
var Tooltip = withInstall(ToolTip);
var props = abstractTooltipProps();
var Popover = defineComponent({
  name: "APopover",
  props: _extends$1(_extends$1({}, props), {
    prefixCls: PropsTypes.string,
    transitionName: PropsTypes.string.def("zoom-big"),
    content: PropsTypes.any,
    title: PropsTypes.any
  }),
  setup: function setup36() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    getPopupDomNode: function getPopupDomNode5() {
      return this.$refs.tooltip.getPopupDomNode();
    }
  },
  render: function render25() {
    var _this = this;
    var title2 = this.title, customizePrefixCls = this.prefixCls, $slots = this.$slots;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("popover", customizePrefixCls);
    var props2 = getOptionProps(this);
    delete props2.title;
    delete props2.content;
    var tooltipProps2 = _extends$1(_extends$1({}, props2), {
      prefixCls: prefixCls2,
      ref: "tooltip",
      title: createVNode("div", null, [(title2 || $slots.title) && createVNode("div", {
        "class": "".concat(prefixCls2, "-title")
      }, [getComponent(this, "title")]), createVNode("div", {
        "class": "".concat(prefixCls2, "-inner-content")
      }, [getComponent(this, "content")])])
    });
    return createVNode(Tooltip, tooltipProps2, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
var Popover$1 = withInstall(Popover);
var groupProps = {
  prefixCls: PropsTypes.string,
  maxCount: PropsTypes.number,
  maxStyle: {
    type: Object,
    default: function _default3() {
      return {};
    }
  },
  maxPopoverPlacement: PropsTypes.oneOf(tuple("top", "bottom")).def("top"),
  size: avatarProps$1.size
};
var Group$1 = defineComponent({
  name: "AAvatarGroup",
  inheritAttrs: false,
  props: groupProps,
  setup: function setup37(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("avatar-group", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    useProvideSize$1(props2);
    return function() {
      var _cls;
      var _props$maxPopoverPlac = props2.maxPopoverPlacement, maxPopoverPlacement = _props$maxPopoverPlac === void 0 ? "top" : _props$maxPopoverPlac, maxCount2 = props2.maxCount, maxStyle = props2.maxStyle;
      var cls = (_cls = {}, _defineProperty$U(_cls, prefixCls2.value, true), _defineProperty$U(_cls, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty$U(_cls, "".concat(attrs.class), !!attrs.class), _cls);
      var children = getPropsSlot(slots, props2);
      var childrenWithProps = flattenChildren(children).map(function(child, index2) {
        return cloneElement(child, {
          key: "avatar-key-".concat(index2)
        });
      });
      var numOfChildren = childrenWithProps.length;
      if (maxCount2 && maxCount2 < numOfChildren) {
        var childrenShow = childrenWithProps.slice(0, maxCount2);
        var childrenHidden = childrenWithProps.slice(maxCount2, numOfChildren);
        childrenShow.push(createVNode(Popover$1, {
          "key": "avatar-popover-key",
          "content": childrenHidden,
          "trigger": "hover",
          "placement": maxPopoverPlacement,
          "overlayClassName": "".concat(prefixCls2.value, "-popover")
        }, {
          default: function _default8() {
            return [createVNode(Avatar$1, {
              "style": maxStyle
            }, {
              default: function _default9() {
                return ["+".concat(numOfChildren - maxCount2)];
              }
            })];
          }
        }));
        return createVNode("div", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
          "class": cls,
          "style": attrs.style
        }), [childrenShow]);
      }
      return createVNode("div", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "class": cls,
        "style": attrs.style
      }), [childrenWithProps]);
    };
  }
});
var Group$2 = Group$1;
Avatar$1.Group = Group$2;
Avatar$1.install = function(app) {
  app.component(Avatar$1.name, Avatar$1);
  app.component(Group$2.name, Group$2);
  return app;
};
var VerticalAlignTopOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M859.9 168H164.1c-4.5 0-8.1 3.6-8.1 8v60c0 4.4 3.6 8 8.1 8h695.8c4.5 0 8.1-3.6 8.1-8v-60c0-4.4-3.6-8-8.1-8zM518.3 355a8 8 0 00-12.6 0l-112 141.7a7.98 7.98 0 006.3 12.9h73.9V848c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V509.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 355z" } }] }, "name": "vertical-align-top", "theme": "outlined" };
var VerticalAlignTopOutlinedSvg = VerticalAlignTopOutlined$2;
function _objectSpread$z(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$A(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$A(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var VerticalAlignTopOutlined = function VerticalAlignTopOutlined2(props2, context2) {
  var p2 = _objectSpread$z({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": VerticalAlignTopOutlinedSvg
  }), null);
};
VerticalAlignTopOutlined.displayName = "VerticalAlignTopOutlined";
VerticalAlignTopOutlined.inheritAttrs = false;
var VerticalAlignTopOutlined$1 = VerticalAlignTopOutlined;
var backTopProps = {
  visibilityHeight: PropsTypes.number.def(400),
  duration: PropsTypes.number.def(450),
  target: Function,
  prefixCls: PropsTypes.string,
  onClick: PropsTypes.func
};
var BackTop = defineComponent({
  name: "ABackTop",
  inheritAttrs: false,
  props: backTopProps,
  emits: ["click"],
  setup: function setup38(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit;
    var configProvider = inject("configProvider", defaultConfigProvider);
    var domRef = ref();
    var state2 = reactive({
      visible: false,
      scrollEvent: null
    });
    var getDefaultTarget2 = function getDefaultTarget3() {
      return domRef.value && domRef.value.ownerDocument ? domRef.value.ownerDocument : window;
    };
    var scrollToTop = function scrollToTop2(e2) {
      var _props$target = props2.target, target = _props$target === void 0 ? getDefaultTarget2 : _props$target, duration2 = props2.duration;
      scrollTo$1(0, {
        getContainer: target,
        duration: duration2
      });
      emit("click", e2);
    };
    var handleScroll4 = throttleByAnimationFrame(function(e2) {
      var visibilityHeight = props2.visibilityHeight;
      var scrollTop2 = getScroll$4(e2.target, true);
      state2.visible = scrollTop2 > visibilityHeight;
    });
    var bindScrollEvent = function bindScrollEvent2() {
      var target = props2.target;
      var getTarget = target || getDefaultTarget2;
      var container = getTarget();
      state2.scrollEvent = addEventListenerWrap(container, "scroll", function(e2) {
        handleScroll4(e2);
      });
      handleScroll4({
        target: container
      });
    };
    var scrollRemove = function scrollRemove2() {
      if (state2.scrollEvent) {
        state2.scrollEvent.remove();
      }
      handleScroll4.cancel();
    };
    watch(function() {
      return props2.target;
    }, function() {
      scrollRemove();
      nextTick(function() {
        bindScrollEvent();
      });
    });
    onMounted(function() {
      nextTick(function() {
        bindScrollEvent();
      });
    });
    onActivated(function() {
      nextTick(function() {
        bindScrollEvent();
      });
    });
    onDeactivated(function() {
      scrollRemove();
    });
    onBeforeUnmount(function() {
      scrollRemove();
    });
    var prefixCls2 = computed(function() {
      return configProvider.getPrefixCls("back-top", props2.prefixCls);
    });
    return function() {
      var _class;
      var _a;
      var defaultElement = createVNode("div", {
        "class": "".concat(prefixCls2.value, "-content")
      }, [createVNode("div", {
        "class": "".concat(prefixCls2.value, "-icon")
      }, [createVNode(VerticalAlignTopOutlined$1, null, null)])]);
      var divProps = _extends$1(_extends$1({}, attrs), {
        onClick: scrollToTop,
        class: (_class = {}, _defineProperty$U(_class, "".concat(prefixCls2.value), true), _defineProperty$U(_class, "".concat(attrs.class), attrs.class), _defineProperty$U(_class, "".concat(prefixCls2.value, "-rtl"), configProvider.direction === "rtl"), _class)
      });
      var backTopBtn = state2.visible ? createVNode("div", _objectSpread2$2(_objectSpread2$2({}, divProps), {}, {
        "ref": domRef
      }), [((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)) || defaultElement]) : null;
      var transitionProps = getTransitionProps("fade");
      return createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [backTopBtn];
        }
      });
    };
  }
});
var index$A = withInstall(BackTop);
function UnitNumber(_ref) {
  var prefixCls2 = _ref.prefixCls, value26 = _ref.value, current2 = _ref.current, _ref$offset = _ref.offset, offset4 = _ref$offset === void 0 ? 0 : _ref$offset;
  var style3;
  if (offset4) {
    style3 = {
      position: "absolute",
      top: "".concat(offset4, "00%"),
      left: 0
    };
  }
  return createVNode("p", {
    "style": style3,
    "class": classNames("".concat(prefixCls2, "-only-unit"), {
      current: current2
    })
  }, [value26]);
}
function getOffset$2(start, end, unit) {
  var index2 = start;
  var offset4 = 0;
  while ((index2 + 10) % 10 !== end) {
    index2 += unit;
    offset4 += unit;
  }
  return offset4;
}
var SingleNumber = defineComponent({
  name: "SingleNumber",
  props: {
    prefixCls: String,
    value: String,
    count: Number
  },
  setup: function setup39(props2) {
    var originValue = computed(function() {
      return Number(props2.value);
    });
    var originCount = computed(function() {
      return Math.abs(props2.count);
    });
    var state2 = reactive({
      prevValue: originValue.value,
      prevCount: originCount.value
    });
    var onTransitionEnd2 = function onTransitionEnd3() {
      state2.prevValue = originValue.value;
      state2.prevCount = originCount.value;
    };
    var timeout = ref();
    watch(originValue, function() {
      clearTimeout(timeout.value);
      timeout.value = setTimeout(function() {
        onTransitionEnd2();
      }, 1e3);
    }, {
      flush: "post"
    });
    onUnmounted(function() {
      clearTimeout(timeout.value);
    });
    return function() {
      var unitNodes;
      var offsetStyle = {};
      var value26 = originValue.value;
      if (state2.prevValue === value26 || Number.isNaN(value26) || Number.isNaN(state2.prevValue)) {
        unitNodes = [UnitNumber(_extends$1(_extends$1({}, props2), {
          current: true
        }))];
        offsetStyle = {
          transition: "none"
        };
      } else {
        unitNodes = [];
        var end = value26 + 10;
        var unitNumberList = [];
        for (var index2 = value26; index2 <= end; index2 += 1) {
          unitNumberList.push(index2);
        }
        var prevIndex = unitNumberList.findIndex(function(n2) {
          return n2 % 10 === state2.prevValue;
        });
        unitNodes = unitNumberList.map(function(n2, index3) {
          var singleUnit = n2 % 10;
          return UnitNumber(_extends$1(_extends$1({}, props2), {
            value: singleUnit,
            offset: index3 - prevIndex,
            current: index3 === prevIndex
          }));
        });
        var unit = state2.prevCount < originCount.value ? 1 : -1;
        offsetStyle = {
          transform: "translateY(".concat(-getOffset$2(state2.prevValue, value26, unit), "00%)")
        };
      }
      return createVNode("span", {
        "class": "".concat(props2.prefixCls, "-only"),
        "style": offsetStyle,
        "onTransitionend": function onTransitionend() {
          return onTransitionEnd2();
        }
      }, [unitNodes]);
    };
  }
});
var __rest$L = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var scrollNumberProps = {
  prefixCls: PropsTypes.string,
  count: PropsTypes.any,
  component: PropsTypes.string,
  title: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string, null]),
  show: Boolean
};
var ScrollNumber = defineComponent({
  name: "ScrollNumber",
  inheritAttrs: false,
  props: scrollNumberProps,
  setup: function setup40(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots;
    var _useConfigInject = useConfigInject("scroll-number", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a;
      var _b = _extends$1(_extends$1({}, props2), attrs);
      _b.prefixCls;
      var count = _b.count, title2 = _b.title;
      _b.show;
      var _b$component = _b.component, Tag2 = _b$component === void 0 ? "sup" : _b$component, className = _b.class, style3 = _b.style, restProps = __rest$L(_b, ["prefixCls", "count", "title", "show", "component", "class", "style"]);
      var newProps = _extends$1(_extends$1({}, restProps), {
        style: style3,
        "data-show": props2.show,
        class: classNames(prefixCls2.value, className),
        title: title2
      });
      var numberNodes = count;
      if (count && Number(count) % 1 === 0) {
        var numberList = String(count).split("");
        numberNodes = numberList.map(function(num, i2) {
          return createVNode(SingleNumber, {
            "prefixCls": prefixCls2.value,
            "count": Number(count),
            "value": num,
            "key": numberList.length - i2
          }, null);
        });
      }
      if (style3 && style3.borderColor) {
        newProps.style = _extends$1(_extends$1({}, style3), {
          boxShadow: "0 0 0 1px ".concat(style3.borderColor, " inset")
        });
      }
      var children = filterEmpty((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      if (children && children.length) {
        return cloneElement(children, {
          class: classNames("".concat(prefixCls2.value, "-custom-component"))
        }, false);
      }
      return createVNode(Tag2, newProps, {
        default: function _default8() {
          return [numberNodes];
        }
      });
    };
  }
});
function isPresetColor(color) {
  return PresetColorTypes.indexOf(color) !== -1;
}
var __rest$K = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var ribbonProps = {
  prefix: PropsTypes.string,
  color: {
    type: String
  },
  text: PropsTypes.any,
  placement: PropsTypes.oneOf(tuple("start", "end")).def("end")
};
var Ribbon = defineComponent({
  name: "ABadgeRibbon",
  inheritAttrs: false,
  props: ribbonProps,
  slots: ["text"],
  setup: function setup41(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots;
    var _useConfigInject = useConfigInject("ribbon", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var colorInPreset = computed(function() {
      return isPresetColor(props2.color);
    });
    var ribbonCls = computed(function() {
      var _ref2;
      return [prefixCls2.value, "".concat(prefixCls2.value, "-placement-").concat(props2.placement), (_ref2 = {}, _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-color-").concat(props2.color), colorInPreset.value), _ref2)];
    });
    return function() {
      var _a, _b;
      var className = attrs.class, style3 = attrs.style, restAttrs = __rest$K(attrs, ["class", "style"]);
      var colorStyle = {};
      var cornerColorStyle = {};
      if (props2.color && !colorInPreset.value) {
        colorStyle.background = props2.color;
        cornerColorStyle.color = props2.color;
      }
      return createVNode("div", _objectSpread2$2({
        "class": "".concat(prefixCls2.value, "-wrapper")
      }, restAttrs), [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots), createVNode("div", {
        "class": [ribbonCls.value, className],
        "style": _extends$1(_extends$1({}, colorStyle), style3)
      }, [createVNode("span", {
        "class": "".concat(prefixCls2.value, "-text")
      }, [props2.text || ((_b = slots.text) === null || _b === void 0 ? void 0 : _b.call(slots))]), createVNode("div", {
        "class": "".concat(prefixCls2.value, "-corner"),
        "style": cornerColorStyle
      }, null)])]);
    };
  }
});
var isNumeric$1 = function isNumeric2(value26) {
  return !isNaN(parseFloat(value26)) && isFinite(value26);
};
var isNumeric$2 = isNumeric$1;
var badgeProps = {
  count: PropsTypes.any,
  showZero: PropsTypes.looseBool,
  overflowCount: PropsTypes.number.def(99),
  dot: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  scrollNumberPrefixCls: PropsTypes.string,
  status: PropsTypes.oneOf(tuple("success", "processing", "default", "error", "warning")),
  size: PropsTypes.oneOf(tuple("default", "small")).def("default"),
  color: PropsTypes.string,
  text: PropsTypes.VNodeChild,
  offset: PropsTypes.arrayOf(PropsTypes.oneOfType([String, Number])),
  numberStyle: PropsTypes.style,
  title: PropsTypes.string
};
var Badge = defineComponent({
  name: "ABadge",
  Ribbon,
  inheritAttrs: false,
  props: badgeProps,
  slots: ["text", "count"],
  setup: function setup42(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("badge", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var numberedDisplayCount = computed(function() {
      return props2.count > props2.overflowCount ? "".concat(props2.overflowCount, "+") : props2.count;
    });
    var hasStatus = computed(function() {
      return props2.status !== null && props2.status !== void 0 || props2.color !== null && props2.color !== void 0;
    });
    var isZero = computed(function() {
      return numberedDisplayCount.value === "0" || numberedDisplayCount.value === 0;
    });
    var showAsDot = computed(function() {
      return props2.dot && !isZero.value || hasStatus.value;
    });
    var mergedCount = computed(function() {
      return showAsDot.value ? "" : numberedDisplayCount.value;
    });
    var isHidden3 = computed(function() {
      var isEmpty = mergedCount.value === null || mergedCount.value === void 0 || mergedCount.value === "";
      return (isEmpty || isZero.value && !props2.showZero) && !showAsDot.value;
    });
    var livingCount = ref(props2.count);
    var displayCount = ref(mergedCount.value);
    var isDotRef = ref(showAsDot.value);
    watch([function() {
      return props2.count;
    }, mergedCount, showAsDot], function() {
      if (!isHidden3.value) {
        livingCount.value = props2.count;
        displayCount.value = mergedCount.value;
        isDotRef.value = showAsDot.value;
      }
    }, {
      immediate: true
    });
    var statusCls = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-status-dot"), hasStatus.value), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-status-").concat(props2.status), !!props2.status), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-status-").concat(props2.color), isPresetColor(props2.color)), _ref2;
    });
    var statusStyle = computed(function() {
      if (props2.color && !isPresetColor(props2.color)) {
        return {
          background: props2.color
        };
      } else {
        return {};
      }
    });
    var scrollNumberCls = computed(function() {
      var _ref3;
      return _ref3 = {}, _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-dot"), isDotRef.value), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-count"), !isDotRef.value), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-count-sm"), props2.size === "small"), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-multiple-words"), !isDotRef.value && displayCount.value && displayCount.value.toString().length > 1), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-status-").concat(props2.status), !!props2.status), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-status-").concat(props2.color), isPresetColor(props2.color)), _ref3;
    });
    return function() {
      var _classNames;
      var _a, _b;
      var offset4 = props2.offset, title2 = props2.title, color = props2.color;
      var style3 = attrs.style;
      var text = getPropsSlot(slots, props2, "text");
      var pre = prefixCls2.value;
      var count = livingCount.value;
      var children = flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      children = children.length ? children : null;
      var visible9 = !!(!isHidden3.value || slots.count);
      var mergedStyle = function() {
        if (!offset4) {
          return _extends$1({}, style3);
        }
        var offsetStyle = {
          marginTop: isNumeric$2(offset4[1]) ? "".concat(offset4[1], "px") : offset4[1]
        };
        if (direction.value === "rtl") {
          offsetStyle.left = "".concat(parseInt(offset4[0], 10), "px");
        } else {
          offsetStyle.right = "".concat(-parseInt(offset4[0], 10), "px");
        }
        return _extends$1(_extends$1({}, offsetStyle), style3);
      }();
      var titleNode = title2 !== null && title2 !== void 0 ? title2 : typeof count === "string" || typeof count === "number" ? count : void 0;
      var statusTextNode = visible9 || !text ? null : createVNode("span", {
        "class": "".concat(pre, "-status-text")
      }, [text]);
      var displayNode = _typeof$2(count) === "object" || count === void 0 && slots.count ? cloneElement(count !== null && count !== void 0 ? count : (_b = slots.count) === null || _b === void 0 ? void 0 : _b.call(slots), {
        style: mergedStyle
      }, false) : null;
      var badgeClassName = classNames(pre, (_classNames = {}, _defineProperty$U(_classNames, "".concat(pre, "-status"), hasStatus.value), _defineProperty$U(_classNames, "".concat(pre, "-not-a-wrapper"), !children), _defineProperty$U(_classNames, "".concat(pre, "-rtl"), direction.value === "rtl"), _classNames), attrs.class);
      if (!children && hasStatus.value) {
        var statusTextColor = mergedStyle.color;
        return createVNode("span", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
          "class": badgeClassName,
          "style": mergedStyle
        }), [createVNode("span", {
          "class": statusCls.value,
          "style": statusStyle.value
        }, null), createVNode("span", {
          "style": {
            color: statusTextColor
          },
          "class": "".concat(pre, "-status-text")
        }, [text])]);
      }
      var transitionProps = getTransitionProps(children ? "".concat(pre, "-zoom") : "", {
        appear: false
      });
      var scrollNumberStyle = _extends$1(_extends$1({}, mergedStyle), props2.numberStyle);
      if (color && !isPresetColor(color)) {
        scrollNumberStyle = scrollNumberStyle || {};
        scrollNumberStyle.background = color;
      }
      return createVNode("span", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "class": badgeClassName
      }), [children, createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [withDirectives(createVNode(ScrollNumber, {
            "prefixCls": props2.scrollNumberPrefixCls,
            "show": visible9,
            "class": scrollNumberCls.value,
            "count": displayCount.value,
            "title": titleNode,
            "style": scrollNumberStyle,
            "key": "scrollNumber"
          }, {
            default: function _default9() {
              return [displayNode];
            }
          }), [[vShow, visible9]])];
        }
      }), statusTextNode]);
    };
  }
});
Badge.install = function(app) {
  app.component(Badge.name, Badge);
  app.component(Ribbon.name, Ribbon);
  return app;
};
var autoAdjustOverflow$3 = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset$2 = [0, 0];
var placements$5 = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$3,
    offset: [0, -4],
    targetOffset: targetOffset$2
  },
  topCenter: {
    points: ["bc", "tc"],
    overflow: autoAdjustOverflow$3,
    offset: [0, -4],
    targetOffset: targetOffset$2
  },
  topRight: {
    points: ["br", "tr"],
    overflow: autoAdjustOverflow$3,
    offset: [0, -4],
    targetOffset: targetOffset$2
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$3,
    offset: [0, 4],
    targetOffset: targetOffset$2
  },
  bottomCenter: {
    points: ["tc", "bc"],
    overflow: autoAdjustOverflow$3,
    offset: [0, 4],
    targetOffset: targetOffset$2
  },
  bottomRight: {
    points: ["tr", "br"],
    overflow: autoAdjustOverflow$3,
    offset: [0, 4],
    targetOffset: targetOffset$2
  }
};
var placements$6 = placements$5;
var __rest$J = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Dropdown$2 = defineComponent({
  mixins: [BaseMixin],
  props: {
    minOverlayWidthMatchTrigger: PropsTypes.looseBool,
    prefixCls: PropsTypes.string.def("rc-dropdown"),
    transitionName: PropsTypes.string,
    overlayClassName: PropsTypes.string.def(""),
    openClassName: PropsTypes.string,
    animation: PropsTypes.any,
    align: PropsTypes.object,
    overlayStyle: PropsTypes.object.def(function() {
      return {};
    }),
    placement: PropsTypes.string.def("bottomLeft"),
    overlay: PropsTypes.any,
    trigger: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string)]).def("hover"),
    alignPoint: PropsTypes.looseBool,
    showAction: PropsTypes.array,
    hideAction: PropsTypes.array,
    getPopupContainer: PropsTypes.func,
    visible: PropsTypes.looseBool,
    defaultVisible: PropsTypes.looseBool.def(false),
    mouseEnterDelay: PropsTypes.number.def(0.15),
    mouseLeaveDelay: PropsTypes.number.def(0.1)
  },
  data: function data10() {
    var sVisible = this.defaultVisible;
    if (hasProp(this, "visible")) {
      sVisible = this.visible;
    }
    return {
      sVisible
    };
  },
  watch: {
    visible: function visible2(val) {
      if (val !== void 0) {
        this.setState({
          sVisible: val
        });
      }
    }
  },
  methods: {
    onClick: function onClick3(e2) {
      var overlayProps = this.getOverlayElement().props;
      if (!hasProp(this, "visible")) {
        this.setState({
          sVisible: false
        });
      }
      this.__emit("overlayClick", e2);
      if (overlayProps.onClick) {
        overlayProps.onClick(e2);
      }
    },
    onVisibleChange: function onVisibleChange2(visible9) {
      if (!hasProp(this, "visible")) {
        this.setState({
          sVisible: visible9
        });
      }
      this.__emit("update:visible", visible9);
      this.__emit("visibleChange", visible9);
    },
    getMinOverlayWidthMatchTrigger: function getMinOverlayWidthMatchTrigger() {
      var props2 = getOptionProps(this);
      var minOverlayWidthMatchTrigger = props2.minOverlayWidthMatchTrigger, alignPoint2 = props2.alignPoint;
      if ("minOverlayWidthMatchTrigger" in props2) {
        return minOverlayWidthMatchTrigger;
      }
      return !alignPoint2;
    },
    getOverlayElement: function getOverlayElement() {
      var overlay = getComponent(this, "overlay");
      return Array.isArray(overlay) ? overlay[0] : overlay;
    },
    getMenuElement: function getMenuElement() {
      var _this = this;
      var onClick7 = this.onClick, prefixCls2 = this.prefixCls;
      var overlayElement = this.getOverlayElement();
      var extraOverlayProps = {
        prefixCls: "".concat(prefixCls2, "-menu"),
        getPopupContainer: function getPopupContainer() {
          return _this.getPopupDomNode();
        },
        onClick: onClick7
      };
      if (overlayElement && overlayElement.type === Text$2) {
        delete extraOverlayProps.prefixCls;
      }
      return cloneElement(overlayElement, extraOverlayProps);
    },
    getMenuElementOrLambda: function getMenuElementOrLambda() {
      var overlay = this.overlay || this.$slots.overlay;
      if (typeof overlay === "function") {
        return this.getMenuElement;
      }
      return this.getMenuElement();
    },
    getPopupDomNode: function getPopupDomNode6() {
      return this.triggerRef.getPopupDomNode();
    },
    getOpenClassName: function getOpenClassName() {
      var _this$$props = this.$props, openClassName = _this$$props.openClassName, prefixCls2 = _this$$props.prefixCls;
      if (openClassName !== void 0) {
        return openClassName;
      }
      return "".concat(prefixCls2, "-open");
    },
    afterVisibleChange: function afterVisibleChange(visible9) {
      if (visible9 && this.getMinOverlayWidthMatchTrigger()) {
        var overlayNode = this.getPopupDomNode();
        var rootNode = findDOMNode(this);
        if (rootNode && overlayNode && rootNode.offsetWidth > overlayNode.offsetWidth) {
          overlayNode.style.minWidth = "".concat(rootNode.offsetWidth, "px");
          if (this.triggerRef && this.triggerRef._component && this.triggerRef._component.alignInstance) {
            this.triggerRef._component.alignInstance.forceAlign();
          }
        }
      }
    },
    renderChildren: function renderChildren2() {
      var children = getSlot(this);
      var sVisible = this.sVisible;
      return sVisible && children ? cloneElement(children[0], {
        class: this.getOpenClassName()
      }, false) : children;
    },
    saveTrigger: function saveTrigger(node) {
      this.triggerRef = node;
    }
  },
  render: function render26() {
    var _this2 = this;
    var _a = this.$props, prefixCls2 = _a.prefixCls, transitionName2 = _a.transitionName, animation2 = _a.animation, align = _a.align, placement2 = _a.placement, getPopupContainer = _a.getPopupContainer, showAction = _a.showAction, hideAction = _a.hideAction, overlayClassName = _a.overlayClassName, overlayStyle = _a.overlayStyle, trigger2 = _a.trigger, otherProps = __rest$J(_a, ["prefixCls", "transitionName", "animation", "align", "placement", "getPopupContainer", "showAction", "hideAction", "overlayClassName", "overlayStyle", "trigger"]);
    var triggerHideAction = hideAction;
    if (!triggerHideAction && trigger2.indexOf("contextmenu") !== -1) {
      triggerHideAction = ["click"];
    }
    var triggerProps = _extends$1(_extends$1({}, otherProps), {
      prefixCls: prefixCls2,
      popupClassName: overlayClassName,
      popupStyle: overlayStyle,
      builtinPlacements: placements$6,
      action: trigger2,
      showAction,
      hideAction: triggerHideAction || [],
      popupPlacement: placement2,
      popupAlign: align,
      popupTransitionName: transitionName2,
      popupAnimation: animation2,
      popupVisible: this.sVisible,
      afterPopupVisibleChange: this.afterVisibleChange,
      getPopupContainer,
      onPopupVisibleChange: this.onVisibleChange,
      popup: this.getMenuElementOrLambda(),
      ref: this.saveTrigger
    });
    return createVNode(Trigger, triggerProps, {
      default: function _default8() {
        return [_this2.renderChildren()];
      }
    });
  }
});
var getDropdownProps = function() {
  return {
    trigger: {
      type: [Array, String],
      default: "hover"
    },
    overlay: PropsTypes.any,
    visible: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    align: PropsTypes.object,
    getPopupContainer: PropsTypes.func,
    prefixCls: PropsTypes.string,
    transitionName: PropsTypes.string,
    placement: PropsTypes.oneOf(tuple("topLeft", "topCenter", "topRight", "bottomLeft", "bottomCenter", "bottomRight")),
    overlayClassName: PropsTypes.string,
    overlayStyle: PropsTypes.style,
    forceRender: PropsTypes.looseBool,
    mouseEnterDelay: PropsTypes.number,
    mouseLeaveDelay: PropsTypes.number,
    openClassName: PropsTypes.string,
    minOverlayWidthMatchTrigger: PropsTypes.looseBool
  };
};
var EllipsisOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "ellipsis", "theme": "outlined" };
var EllipsisOutlinedSvg = EllipsisOutlined$2;
function _objectSpread$y(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$z(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$z(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var EllipsisOutlined = function EllipsisOutlined2(props2, context2) {
  var p2 = _objectSpread$y({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": EllipsisOutlinedSvg
  }), null);
};
EllipsisOutlined.displayName = "EllipsisOutlined";
EllipsisOutlined.inheritAttrs = false;
var EllipsisOutlined$1 = EllipsisOutlined;
var __rest$I = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var ButtonTypesProps = buttonTypes();
var DropdownProps = getDropdownProps();
var ButtonGroup = Button.Group;
var dropdownButtonProps = _extends$1(_extends$1({}, DropdownProps), {
  type: PropsTypes.oneOf(tuple("primary", "ghost", "dashed", "danger", "default")).def("default"),
  size: PropsTypes.oneOf(tuple("small", "large", "default")).def("default"),
  htmlType: ButtonTypesProps.htmlType,
  href: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  placement: DropdownProps.placement.def("bottomRight"),
  icon: PropsTypes.any,
  title: PropsTypes.string,
  onClick: PropsTypes.func,
  onVisibleChange: PropsTypes.func,
  "onUpdate:visible": PropsTypes.func
});
var DropdownButton = defineComponent({
  name: "ADropdownButton",
  inheritAttrs: false,
  props: dropdownButtonProps,
  emits: ["click", "visibleChange", "update:visible"],
  setup: function setup43() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      popupRef: null
    };
  },
  created: function created5() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    savePopupRef: function savePopupRef2(ref2) {
      this.popupRef = ref2;
    },
    handleClick: function handleClick(e2) {
      this.$emit("click", e2);
    },
    handleVisibleChange: function handleVisibleChange2(val) {
      this.$emit("update:visible", val);
      this.$emit("visibleChange", val);
    }
  },
  render: function render27() {
    var _this = this;
    var _a = _extends$1(_extends$1({}, this.$props), this.$attrs), type3 = _a.type, disabled = _a.disabled;
    _a.onClick;
    var htmlType = _a.htmlType, className = _a.class, customizePrefixCls = _a.prefixCls;
    _a.overlay;
    var trigger2 = _a.trigger, align = _a.align, visible9 = _a.visible;
    _a.onVisibleChange;
    var placement2 = _a.placement, getPopupContainer = _a.getPopupContainer, href = _a.href, title2 = _a.title, restProps = __rest$I(_a, ["type", "disabled", "onClick", "htmlType", "class", "prefixCls", "overlay", "trigger", "align", "visible", "onVisibleChange", "placement", "getPopupContainer", "href", "title"]);
    var icon = getComponent(this, "icon") || createVNode(EllipsisOutlined$1, null, null);
    var getContextPopupContainer = this.configProvider.getPopupContainer;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("dropdown-button", customizePrefixCls);
    var dropdownProps2 = {
      align,
      disabled,
      trigger: disabled ? [] : trigger2,
      placement: placement2,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      onVisibleChange: this.handleVisibleChange
    };
    if (hasProp(this, "visible")) {
      dropdownProps2.visible = visible9;
    }
    var buttonGroupProps2 = _extends$1(_extends$1({}, restProps), {
      class: classNames(prefixCls2, className)
    });
    return createVNode(ButtonGroup, buttonGroupProps2, {
      default: function _default8() {
        return [createVNode(Button, {
          "type": type3,
          "disabled": disabled,
          "onClick": _this.handleClick,
          "htmlType": htmlType,
          "href": href,
          "title": title2
        }, {
          default: function _default9() {
            return [getSlot(_this)];
          }
        }), createVNode(Dropdown$1, _objectSpread2$2(_objectSpread2$2({}, dropdownProps2), {}, {
          "overlay": getComponent(_this, "overlay")
        }), {
          default: function _default9() {
            return [createVNode(Button, {
              "type": type3
            }, {
              default: function _default10() {
                return [icon];
              }
            })];
          }
        })];
      }
    });
  }
});
var RightOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z" } }] }, "name": "right", "theme": "outlined" };
var RightOutlinedSvg = RightOutlined$2;
function _objectSpread$x(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$y(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$y(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var RightOutlined = function RightOutlined2(props2, context2) {
  var p2 = _objectSpread$x({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": RightOutlinedSvg
  }), null);
};
RightOutlined.displayName = "RightOutlined";
RightOutlined.inheritAttrs = false;
var RightOutlined$1 = RightOutlined;
var dropdownProps = getDropdownProps();
var Dropdown = defineComponent({
  name: "ADropdown",
  inheritAttrs: false,
  props: _extends$1(_extends$1({}, dropdownProps), {
    prefixCls: PropsTypes.string,
    mouseEnterDelay: PropsTypes.number.def(0.15),
    mouseLeaveDelay: PropsTypes.number.def(0.1),
    placement: dropdownProps.placement.def("bottomLeft"),
    onVisibleChange: PropsTypes.func,
    "onUpdate:visible": PropsTypes.func
  }),
  emits: ["visibleChange", "update:visible"],
  setup: function setup44() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      popupRef: null
    };
  },
  created: function created6() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    savePopupRef: function savePopupRef3(ref2) {
      this.popupRef = ref2;
    },
    getTransitionName: function getTransitionName3() {
      var _this$$props = this.$props, _this$$props$placemen = _this$$props.placement, placement2 = _this$$props$placemen === void 0 ? "" : _this$$props$placemen, transitionName2 = _this$$props.transitionName;
      if (transitionName2 !== void 0) {
        return transitionName2;
      }
      if (placement2.indexOf("top") >= 0) {
        return "slide-down";
      }
      return "slide-up";
    },
    renderOverlay: function renderOverlay(prefixCls2) {
      var overlay = getComponent(this, "overlay");
      var overlayNode = Array.isArray(overlay) ? overlay[0] : overlay;
      var overlayProps = overlayNode && getPropsData(overlayNode);
      var _ref = overlayProps || {}, _ref$selectable = _ref.selectable, selectable = _ref$selectable === void 0 ? false : _ref$selectable, _ref$focusable = _ref.focusable, focusable = _ref$focusable === void 0 ? true : _ref$focusable;
      var expandIcon = function expandIcon2() {
        return createVNode("span", {
          "class": "".concat(prefixCls2, "-menu-submenu-arrow")
        }, [createVNode(RightOutlined$1, {
          "class": "".concat(prefixCls2, "-menu-submenu-arrow-icon")
        }, null)]);
      };
      var fixedModeOverlay = isValidElement(overlayNode) ? cloneVNode(overlayNode, {
        mode: "vertical",
        selectable,
        focusable,
        expandIcon
      }) : overlay;
      return fixedModeOverlay;
    },
    handleVisibleChange: function handleVisibleChange3(val) {
      this.$emit("update:visible", val);
      this.$emit("visibleChange", val);
    }
  },
  render: function render28() {
    var _a;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, trigger2 = props2.trigger, disabled = props2.disabled, getPopupContainer = props2.getPopupContainer;
    var getContextPopupContainer = this.configProvider.getPopupContainer;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("dropdown", customizePrefixCls);
    var child = getSlot(this)[0];
    var dropdownTrigger = cloneElement(child, {
      class: classNames((_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.class, "".concat(prefixCls2, "-trigger")),
      disabled
    });
    var triggerActions = disabled ? [] : typeof trigger2 === "string" ? [trigger2] : trigger2;
    var alignPoint2;
    if (triggerActions && triggerActions.indexOf("contextmenu") !== -1) {
      alignPoint2 = true;
    }
    var dropdownProps2 = _extends$1(_extends$1(_extends$1({
      alignPoint: alignPoint2
    }, props2), this.$attrs), {
      prefixCls: prefixCls2,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      transitionName: this.getTransitionName(),
      trigger: triggerActions,
      overlay: this.renderOverlay(prefixCls2),
      onVisibleChange: this.handleVisibleChange
    });
    return createVNode(Dropdown$2, dropdownProps2, {
      default: function _default8() {
        return [dropdownTrigger];
      }
    });
  }
});
Dropdown.Button = DropdownButton;
var Dropdown$1 = Dropdown;
var breadcrumbItemProps = {
  prefixCls: PropsTypes.string,
  href: PropsTypes.string,
  separator: PropsTypes.any,
  overlay: PropsTypes.any
};
var BreadcrumbItem = defineComponent({
  name: "ABreadcrumbItem",
  __ANT_BREADCRUMB_ITEM: true,
  props: breadcrumbItemProps,
  slots: ["separator", "overlay"],
  setup: function setup45(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("breadcrumb", props2), prefixCls2 = _useConfigInject.prefixCls;
    var renderBreadcrumbNode = function renderBreadcrumbNode2(breadcrumbItem, prefixCls3) {
      var overlay = getPropsSlot(slots, props2, "overlay");
      if (overlay) {
        return createVNode(Dropdown$1, {
          "overlay": overlay,
          "placement": "bottomCenter"
        }, {
          default: function _default8() {
            return [createVNode("span", {
              "class": "".concat(prefixCls3, "-overlay-link")
            }, [breadcrumbItem, createVNode(DownOutlined$1, null, null)])];
          }
        });
      }
      return breadcrumbItem;
    };
    return function() {
      var _a;
      var separator = (_a = getPropsSlot(slots, props2, "separator")) !== null && _a !== void 0 ? _a : "/";
      var children = getPropsSlot(slots, props2);
      var link;
      if (props2.href !== void 0) {
        link = createVNode("a", {
          "class": "".concat(prefixCls2.value, "-link")
        }, [children]);
      } else {
        link = createVNode("span", {
          "class": "".concat(prefixCls2.value, "-link")
        }, [children]);
      }
      link = renderBreadcrumbNode(link, prefixCls2.value);
      if (children) {
        return createVNode("span", null, [link, separator && createVNode("span", {
          "class": "".concat(prefixCls2.value, "-separator")
        }, [separator])]);
      }
      return null;
    };
  }
});
function shallowEqual(objA, objB, compare2, compareContext) {
  var ret = compare2 ? compare2.call(compareContext, objA, objB) : void 0;
  if (ret !== void 0) {
    return !!ret;
  }
  if (objA === objB) {
    return true;
  }
  if (_typeof$2(objA) !== "object" || !objA || _typeof$2(objB) !== "object" || !objB) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
  for (var idx = 0; idx < keysA.length; idx++) {
    var key2 = keysA[idx];
    if (!bHasOwnProperty(key2)) {
      return false;
    }
    var valueA = objA[key2];
    var valueB = objB[key2];
    ret = compare2 ? compare2.call(compareContext, valueA, valueB, key2) : void 0;
    if (ret === false || ret === void 0 && valueA !== valueB) {
      return false;
    }
  }
  return true;
}
function shallowEqual$1(value26, other, customizer, thisArg) {
  return shallowEqual(toRaw(value26), toRaw(other), customizer, thisArg);
}
var MenuContextKey = Symbol("menuContextKey");
var useProvideMenu = function useProvideMenu2(props2) {
  provide(MenuContextKey, props2);
};
var useInjectMenu = function useInjectMenu2() {
  return inject(MenuContextKey);
};
var MenuFirstLevelContextKey = Symbol("menuFirstLevelContextKey");
var useProvideFirstLevel = function useProvideFirstLevel2(firstLevel) {
  provide(MenuFirstLevelContextKey, firstLevel);
};
var useInjectFirstLevel = function useInjectFirstLevel2() {
  return inject(MenuFirstLevelContextKey, true);
};
var MenuContextProvider = defineComponent({
  name: "MenuContextProvider",
  inheritAttrs: false,
  props: {
    mode: {
      type: String,
      default: void 0
    },
    overflowDisabled: {
      type: Boolean,
      default: void 0
    },
    isRootMenu: {
      type: Boolean,
      default: void 0
    }
  },
  setup: function setup46(props2, _ref) {
    var slots = _ref.slots;
    var menuContext = useInjectMenu();
    var newContext = _extends$1({}, menuContext);
    if (props2.mode !== void 0) {
      newContext.mode = toRef(props2, "mode");
    }
    if (props2.isRootMenu !== void 0) {
      newContext.isRootMenu = toRef(props2, "isRootMenu");
    }
    if (props2.overflowDisabled !== void 0) {
      newContext.overflowDisabled = toRef(props2, "overflowDisabled");
    }
    useProvideMenu(newContext);
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
var useProvideMenu$1 = useProvideMenu;
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function setCacheAdd(value26) {
  this.__data__.set(value26, HASH_UNDEFINED);
  return this;
}
function setCacheHas(value26) {
  return this.__data__.has(value26);
}
function SetCache(values) {
  var index2 = -1, length = values == null ? 0 : values.length;
  this.__data__ = new MapCache();
  while (++index2 < length) {
    this.add(values[index2]);
  }
}
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
function baseFindIndex(array3, predicate, fromIndex, fromRight) {
  var length = array3.length, index2 = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index2-- : ++index2 < length) {
    if (predicate(array3[index2], index2, array3)) {
      return index2;
    }
  }
  return -1;
}
function baseIsNaN(value26) {
  return value26 !== value26;
}
function strictIndexOf(array3, value26, fromIndex) {
  var index2 = fromIndex - 1, length = array3.length;
  while (++index2 < length) {
    if (array3[index2] === value26) {
      return index2;
    }
  }
  return -1;
}
function baseIndexOf(array3, value26, fromIndex) {
  return value26 === value26 ? strictIndexOf(array3, value26, fromIndex) : baseFindIndex(array3, baseIsNaN, fromIndex);
}
function arrayIncludes(array3, value26) {
  var length = array3 == null ? 0 : array3.length;
  return !!length && baseIndexOf(array3, value26, 0) > -1;
}
function arrayIncludesWith(array3, value26, comparator) {
  var index2 = -1, length = array3 == null ? 0 : array3.length;
  while (++index2 < length) {
    if (comparator(value26, array3[index2])) {
      return true;
    }
  }
  return false;
}
function cacheHas(cache, key2) {
  return cache.has(key2);
}
function noop$F() {
}
function setToArray(set2) {
  var index2 = -1, result = Array(set2.size);
  set2.forEach(function(value26) {
    result[++index2] = value26;
  });
  return result;
}
var INFINITY$1 = 1 / 0;
var createSet = !(Set$2 && 1 / setToArray(new Set$2([, -0]))[1] == INFINITY$1) ? noop$F : function(values) {
  return new Set$2(values);
};
var createSet$1 = createSet;
var LARGE_ARRAY_SIZE = 200;
function baseUniq(array3, iteratee, comparator) {
  var index2 = -1, includes = arrayIncludes, length = array3.length, isCommon = true, result = [], seen = result;
  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  } else if (length >= LARGE_ARRAY_SIZE) {
    var set2 = iteratee ? null : createSet$1(array3);
    if (set2) {
      return setToArray(set2);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache();
  } else {
    seen = iteratee ? [] : result;
  }
  outer:
    while (++index2 < length) {
      var value26 = array3[index2], computed2 = iteratee ? iteratee(value26) : value26;
      value26 = comparator || value26 !== 0 ? value26 : 0;
      if (isCommon && computed2 === computed2) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed2) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed2);
        }
        result.push(value26);
      } else if (!includes(seen, computed2, comparator)) {
        if (seen !== result) {
          seen.push(computed2);
        }
        result.push(value26);
      }
    }
  return result;
}
function uniq(array3) {
  return array3 && array3.length ? baseUniq(array3) : [];
}
var SiderCollapsedKey = Symbol("siderCollapsed");
var SiderHookProviderKey = Symbol("siderHookProvider");
var KeyPathContext = Symbol("KeyPathContext");
var useInjectKeyPath = function useInjectKeyPath2() {
  return inject(KeyPathContext, {
    parentEventKeys: computed(function() {
      return [];
    }),
    parentKeys: computed(function() {
      return [];
    }),
    parentInfo: {}
  });
};
var useProvideKeyPath = function useProvideKeyPath2(eventKey, key2, menuInfo) {
  var _useInjectKeyPath = useInjectKeyPath(), parentEventKeys = _useInjectKeyPath.parentEventKeys, parentKeys = _useInjectKeyPath.parentKeys;
  var eventKeys = computed(function() {
    return [].concat(_toConsumableArray(parentEventKeys.value), [eventKey]);
  });
  var keys2 = computed(function() {
    return [].concat(_toConsumableArray(parentKeys.value), [key2]);
  });
  provide(KeyPathContext, {
    parentEventKeys: eventKeys,
    parentKeys: keys2,
    parentInfo: menuInfo
  });
  return keys2;
};
var useProvideKeyPath$1 = useProvideKeyPath;
function useDirectionStyle(level2) {
  var _useInjectMenu = useInjectMenu(), mode4 = _useInjectMenu.mode, rtl = _useInjectMenu.rtl, inlineIndent = _useInjectMenu.inlineIndent;
  return computed(function() {
    return mode4.value !== "inline" ? null : rtl.value ? {
      paddingRight: "".concat(level2.value * inlineIndent.value, "px")
    } : {
      paddingLeft: "".concat(level2.value * inlineIndent.value, "px")
    };
  });
}
var indexGuid$2 = 0;
var menuItemProps = {
  role: String,
  disabled: Boolean,
  danger: Boolean,
  title: {
    type: [String, Boolean],
    default: void 0
  },
  icon: PropsTypes.VNodeChild
};
var MenuItem = defineComponent({
  name: "AMenuItem",
  inheritAttrs: false,
  props: menuItemProps,
  emits: ["mouseenter", "mouseleave", "click", "keydown", "focus"],
  slots: ["icon", "title"],
  setup: function setup47(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs;
    var instance = getCurrentInstance();
    var key2 = _typeof$2(instance.vnode.key) === "symbol" ? String(instance.vnode.key) : instance.vnode.key;
    devWarning(_typeof$2(instance.vnode.key) !== "symbol", "MenuItem", 'MenuItem `:key="'.concat(String(key2), '"` not support Symbol type'));
    var eventKey = "menu_item_".concat(++indexGuid$2, "_$$_").concat(key2);
    var _useInjectKeyPath = useInjectKeyPath(), parentEventKeys = _useInjectKeyPath.parentEventKeys, parentKeys = _useInjectKeyPath.parentKeys;
    var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls, activeKeys = _useInjectMenu.activeKeys, disabled = _useInjectMenu.disabled, changeActiveKeys = _useInjectMenu.changeActiveKeys, rtl = _useInjectMenu.rtl, inlineCollapsed = _useInjectMenu.inlineCollapsed, siderCollapsed = _useInjectMenu.siderCollapsed, onItemClick2 = _useInjectMenu.onItemClick, selectedKeys3 = _useInjectMenu.selectedKeys, registerMenuInfo = _useInjectMenu.registerMenuInfo, unRegisterMenuInfo = _useInjectMenu.unRegisterMenuInfo;
    var firstLevel = useInjectFirstLevel();
    var isActive = ref(false);
    var keysPath = computed(function() {
      return [].concat(_toConsumableArray(parentKeys.value), [key2]);
    });
    var menuInfo = {
      eventKey,
      key: key2,
      parentEventKeys,
      parentKeys,
      isLeaf: true
    };
    registerMenuInfo(eventKey, menuInfo);
    onBeforeUnmount(function() {
      unRegisterMenuInfo(eventKey);
    });
    watch(activeKeys, function() {
      isActive.value = !!activeKeys.value.find(function(val) {
        return val === key2;
      });
    }, {
      immediate: true
    });
    var mergedDisabled = computed(function() {
      return disabled.value || props2.disabled;
    });
    var selected = computed(function() {
      return selectedKeys3.value.includes(key2);
    });
    var classNames2 = computed(function() {
      var _ref2;
      var itemCls = "".concat(prefixCls2.value, "-item");
      return _ref2 = {}, _defineProperty$U(_ref2, "".concat(itemCls), true), _defineProperty$U(_ref2, "".concat(itemCls, "-danger"), props2.danger), _defineProperty$U(_ref2, "".concat(itemCls, "-active"), isActive.value), _defineProperty$U(_ref2, "".concat(itemCls, "-selected"), selected.value), _defineProperty$U(_ref2, "".concat(itemCls, "-disabled"), mergedDisabled.value), _ref2;
    });
    var getEventInfo = function getEventInfo2(e2) {
      return {
        key: key2,
        eventKey,
        keyPath: keysPath.value,
        eventKeyPath: [].concat(_toConsumableArray(parentEventKeys.value), [eventKey]),
        domEvent: e2,
        item: _extends$1(_extends$1({}, props2), attrs)
      };
    };
    var onInternalClick = function onInternalClick2(e2) {
      if (mergedDisabled.value) {
        return;
      }
      var info3 = getEventInfo(e2);
      emit("click", e2);
      onItemClick2(info3);
    };
    var onMouseEnter4 = function onMouseEnter5(event) {
      if (!mergedDisabled.value) {
        changeActiveKeys(keysPath.value);
        emit("mouseenter", event);
      }
    };
    var onMouseLeave5 = function onMouseLeave6(event) {
      if (!mergedDisabled.value) {
        changeActiveKeys([]);
        emit("mouseleave", event);
      }
    };
    var onInternalKeyDown = function onInternalKeyDown2(e2) {
      emit("keydown", e2);
      if (e2.which === KeyCode$2.ENTER) {
        var info3 = getEventInfo(e2);
        emit("click", e2);
        onItemClick2(info3);
      }
    };
    var onInternalFocus = function onInternalFocus2(e2) {
      changeActiveKeys(keysPath.value);
      emit("focus", e2);
    };
    var renderItemChildren = function renderItemChildren2(icon, children) {
      var wrapNode = createVNode("span", {
        "class": "".concat(prefixCls2.value, "-title-content")
      }, [children]);
      if (!icon || isValidElement(children) && children.type === "span") {
        if (children && inlineCollapsed.value && firstLevel && typeof children === "string") {
          return createVNode("div", {
            "class": "".concat(prefixCls2.value, "-inline-collapsed-noicon")
          }, [children.charAt(0)]);
        }
      }
      return wrapNode;
    };
    var directionStyle = useDirectionStyle(computed(function() {
      return keysPath.value.length;
    }));
    return function() {
      var _ref3;
      var _a, _b, _c;
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var children = flattenChildren((_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots));
      var childrenLength = children.length;
      var tooltipTitle = title2;
      if (typeof title2 === "undefined") {
        tooltipTitle = firstLevel && childrenLength ? children : "";
      } else if (title2 === false) {
        tooltipTitle = "";
      }
      var tooltipProps2 = {
        title: tooltipTitle
      };
      if (!siderCollapsed.value && !inlineCollapsed.value) {
        tooltipProps2.title = null;
        tooltipProps2.visible = false;
      }
      var optionRoleProps = {};
      if (props2.role === "option") {
        optionRoleProps["aria-selected"] = selected.value;
      }
      var icon = getPropsSlot(slots, props2, "icon");
      return createVNode(Tooltip, _objectSpread2$2(_objectSpread2$2({}, tooltipProps2), {}, {
        "placement": rtl.value ? "left" : "right",
        "overlayClassName": "".concat(prefixCls2.value, "-inline-collapsed-tooltip")
      }), {
        default: function _default8() {
          return [createVNode(Overflow$1.Item, _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({
            "component": "li"
          }, attrs), {}, {
            "style": _extends$1(_extends$1({}, attrs.style || {}), directionStyle.value),
            "class": [classNames2.value, (_ref3 = {}, _defineProperty$U(_ref3, "".concat(attrs.class), !!attrs.class), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-item-only-child"), (icon ? childrenLength + 1 : childrenLength) === 1), _ref3)],
            "role": props2.role || "menuitem",
            "tabindex": props2.disabled ? null : -1,
            "data-menu-id": key2,
            "aria-disabled": props2.disabled
          }, optionRoleProps), {}, {
            "onMouseenter": onMouseEnter4,
            "onMouseleave": onMouseLeave5,
            "onClick": onInternalClick,
            "onKeydown": onInternalKeyDown,
            "onFocus": onInternalFocus,
            "title": typeof title2 === "string" ? title2 : void 0
          }), {
            default: function _default9() {
              return [cloneElement(icon, {
                class: "".concat(prefixCls2.value, "-item-icon")
              }), renderItemChildren(icon, children)];
            }
          })];
        }
      });
    };
  }
});
var autoAdjustOverflow$2 = {
  adjustX: 1,
  adjustY: 1
};
var placements$4 = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$2,
    offset: [0, -7]
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$2,
    offset: [0, 7]
  },
  leftTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflow$2,
    offset: [-4, 0]
  },
  rightTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflow$2,
    offset: [4, 0]
  }
};
var placementsRtl = {
  topLeft: {
    points: ["bl", "tl"],
    overflow: autoAdjustOverflow$2,
    offset: [0, -7]
  },
  bottomLeft: {
    points: ["tl", "bl"],
    overflow: autoAdjustOverflow$2,
    offset: [0, 7]
  },
  rightTop: {
    points: ["tr", "tl"],
    overflow: autoAdjustOverflow$2,
    offset: [-4, 0]
  },
  leftTop: {
    points: ["tl", "tr"],
    overflow: autoAdjustOverflow$2,
    offset: [4, 0]
  }
};
var popupPlacementMap = {
  horizontal: "bottomLeft",
  vertical: "rightTop",
  "vertical-left": "rightTop",
  "vertical-right": "leftTop"
};
var PopupTrigger = defineComponent({
  name: "PopupTrigger",
  inheritAttrs: false,
  props: {
    prefixCls: String,
    mode: String,
    visible: Boolean,
    popupClassName: String,
    popupOffset: Array,
    disabled: Boolean,
    onVisibleChange: Function
  },
  slots: ["popup"],
  emits: ["visibleChange"],
  setup: function setup48(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var innerVisible = ref(false);
    var _useInjectMenu = useInjectMenu(), getPopupContainer = _useInjectMenu.getPopupContainer, rtl = _useInjectMenu.rtl, subMenuOpenDelay = _useInjectMenu.subMenuOpenDelay, subMenuCloseDelay = _useInjectMenu.subMenuCloseDelay, builtinPlacements = _useInjectMenu.builtinPlacements, triggerSubMenuAction = _useInjectMenu.triggerSubMenuAction, isRootMenu = _useInjectMenu.isRootMenu;
    var placement2 = computed(function() {
      return rtl.value ? _extends$1(_extends$1({}, placementsRtl), builtinPlacements.value) : _extends$1(_extends$1({}, placements$4), builtinPlacements.value);
    });
    var popupPlacement = computed(function() {
      return popupPlacementMap[props2.mode];
    });
    var visibleRef = ref();
    watch(function() {
      return props2.visible;
    }, function(visible9) {
      wrapperRaf.cancel(visibleRef.value);
      visibleRef.value = wrapperRaf(function() {
        innerVisible.value = visible9;
      });
    }, {
      immediate: true
    });
    onBeforeUnmount(function() {
      wrapperRaf.cancel(visibleRef.value);
    });
    var onVisibleChange6 = function onVisibleChange7(visible9) {
      emit("visibleChange", visible9);
    };
    return function() {
      var prefixCls2 = props2.prefixCls, popupClassName = props2.popupClassName, mode4 = props2.mode, popupOffset = props2.popupOffset, disabled = props2.disabled;
      return createVNode(Trigger, {
        "prefixCls": prefixCls2,
        "popupClassName": classNames("".concat(prefixCls2, "-popup"), _defineProperty$U({}, "".concat(prefixCls2, "-rtl"), rtl.value), popupClassName),
        "stretch": mode4 === "horizontal" ? "minWidth" : null,
        "getPopupContainer": isRootMenu.value ? getPopupContainer.value : function(triggerNode) {
          return triggerNode.parentNode;
        },
        "builtinPlacements": placement2.value,
        "popupPlacement": popupPlacement.value,
        "popupVisible": innerVisible.value,
        "popupAlign": popupOffset && {
          offset: popupOffset
        },
        "action": disabled ? [] : [triggerSubMenuAction.value],
        "mouseEnterDelay": subMenuOpenDelay.value,
        "mouseLeaveDelay": subMenuCloseDelay.value,
        "onPopupVisibleChange": onVisibleChange6,
        "forceRender": true
      }, {
        popup: function popup() {
          var _a;
          return (_a = slots.popup) === null || _a === void 0 ? void 0 : _a.call(slots, {
            visible: innerVisible.value
          });
        },
        default: slots.default
      });
    };
  }
});
var InternalSubMenuList = function InternalSubMenuList2(_props, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var _a;
  var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls, mode4 = _useInjectMenu.mode;
  return createVNode("ul", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
    "class": classNames(prefixCls2.value, "".concat(prefixCls2.value, "-sub"), "".concat(prefixCls2.value, "-").concat(mode4.value === "inline" ? "inline" : "vertical")),
    "data-menu-list": true
  }), [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
};
InternalSubMenuList.displayName = "SubMenuList";
var SubMenuList = InternalSubMenuList;
var InlineSubMenuList = defineComponent({
  name: "InlineSubMenuList",
  inheritAttrs: false,
  props: {
    id: String,
    open: Boolean,
    keyPath: Array
  },
  setup: function setup49(props2, _ref) {
    var slots = _ref.slots;
    var fixedMode = computed(function() {
      return "inline";
    });
    var _useInjectMenu = useInjectMenu(), motion = _useInjectMenu.motion, mode4 = _useInjectMenu.mode, defaultMotions = _useInjectMenu.defaultMotions;
    var sameModeRef = computed(function() {
      return mode4.value === fixedMode.value;
    });
    var destroy3 = ref(!sameModeRef.value);
    var mergedOpen = computed(function() {
      return sameModeRef.value ? props2.open : false;
    });
    watch(mode4, function() {
      if (sameModeRef.value) {
        destroy3.value = false;
      }
    }, {
      flush: "post"
    });
    var style3 = ref({});
    var className = ref("");
    var mergedMotion = computed(function() {
      var _a, _b;
      var m2 = motion.value || ((_a = defaultMotions.value) === null || _a === void 0 ? void 0 : _a[fixedMode.value]) || ((_b = defaultMotions.value) === null || _b === void 0 ? void 0 : _b.other);
      var res = typeof m2 === "function" ? m2(style3, className) : m2;
      return _extends$1(_extends$1({}, res), {
        appear: props2.keyPath.length <= 1
      });
    });
    return function() {
      var _a;
      if (destroy3.value) {
        return null;
      }
      return createVNode(MenuContextProvider, {
        "mode": fixedMode.value
      }, {
        default: function _default8() {
          return [createVNode(Transition, mergedMotion.value, {
            default: function _default9() {
              return [withDirectives(createVNode(SubMenuList, {
                "id": props2.id,
                "style": style3.value,
                "class": className.value
              }, {
                default: function _default10() {
                  return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
                }
              }), [[vShow, mergedOpen.value]])];
            }
          })];
        }
      });
    };
  }
});
var indexGuid$1 = 0;
var subMenuProps = {
  icon: PropsTypes.VNodeChild,
  title: PropsTypes.VNodeChild,
  disabled: Boolean,
  level: Number,
  popupClassName: String,
  popupOffset: Array,
  internalPopupClose: Boolean,
  eventKey: String,
  expandIcon: Function
};
var SubMenu = defineComponent({
  name: "ASubMenu",
  inheritAttrs: false,
  props: subMenuProps,
  slots: ["icon", "title", "expandIcon"],
  emits: ["titleClick", "mouseenter", "mouseleave"],
  setup: function setup50(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit;
    var _a, _b;
    useProvideFirstLevel(false);
    var instance = getCurrentInstance();
    var vnodeKey = _typeof$2(instance.vnode.key) === "symbol" ? String(instance.vnode.key) : instance.vnode.key;
    devWarning(_typeof$2(instance.vnode.key) !== "symbol", "SubMenu", 'SubMenu `:key="'.concat(String(vnodeKey), '"` not support Symbol type'));
    var key2 = isValid$4(vnodeKey) ? vnodeKey : "sub_menu_".concat(++indexGuid$1, "_$$_not_set_key");
    var eventKey = (_a = props2.eventKey) !== null && _a !== void 0 ? _a : isValid$4(vnodeKey) ? "sub_menu_".concat(++indexGuid$1, "_$$_").concat(vnodeKey) : key2;
    var _useInjectKeyPath = useInjectKeyPath(), parentEventKeys = _useInjectKeyPath.parentEventKeys, parentInfo = _useInjectKeyPath.parentInfo, parentKeys = _useInjectKeyPath.parentKeys;
    var keysPath = computed(function() {
      return [].concat(_toConsumableArray(parentKeys.value), [key2]);
    });
    var eventKeysPath = computed(function() {
      return [].concat(_toConsumableArray(parentEventKeys.value), [eventKey]);
    });
    var childrenEventKeys = ref([]);
    var menuInfo = {
      eventKey,
      key: key2,
      parentEventKeys,
      childrenEventKeys,
      parentKeys
    };
    (_b = parentInfo.childrenEventKeys) === null || _b === void 0 ? void 0 : _b.value.push(eventKey);
    onBeforeUnmount(function() {
      var _a2;
      if (parentInfo.childrenEventKeys) {
        parentInfo.childrenEventKeys.value = (_a2 = parentInfo.childrenEventKeys) === null || _a2 === void 0 ? void 0 : _a2.value.filter(function(k2) {
          return k2 != eventKey;
        });
      }
    });
    useProvideKeyPath$1(eventKey, key2, menuInfo);
    var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls, activeKeys = _useInjectMenu.activeKeys, contextDisabled = _useInjectMenu.disabled, changeActiveKeys = _useInjectMenu.changeActiveKeys, mode4 = _useInjectMenu.mode, inlineCollapsed = _useInjectMenu.inlineCollapsed, antdMenuTheme = _useInjectMenu.antdMenuTheme, openKeys = _useInjectMenu.openKeys, overflowDisabled = _useInjectMenu.overflowDisabled, onOpenChange = _useInjectMenu.onOpenChange, registerMenuInfo = _useInjectMenu.registerMenuInfo, unRegisterMenuInfo = _useInjectMenu.unRegisterMenuInfo, selectedSubMenuEventKeys = _useInjectMenu.selectedSubMenuEventKeys, motion = _useInjectMenu.motion, defaultMotions = _useInjectMenu.defaultMotions, menuExpandIcon = _useInjectMenu.expandIcon;
    registerMenuInfo(eventKey, menuInfo);
    onBeforeUnmount(function() {
      unRegisterMenuInfo(eventKey);
    });
    var subMenuPrefixCls = computed(function() {
      return "".concat(prefixCls2.value, "-submenu");
    });
    var mergedDisabled = computed(function() {
      return contextDisabled.value || props2.disabled;
    });
    var elementRef = ref();
    var popupRef = ref();
    var originOpen = computed(function() {
      return openKeys.value.includes(key2);
    });
    var open6 = computed(function() {
      return !overflowDisabled.value && originOpen.value;
    });
    var childrenSelected = computed(function() {
      return selectedSubMenuEventKeys.value.includes(eventKey);
    });
    var isActive = ref(false);
    watch(activeKeys, function() {
      isActive.value = !!activeKeys.value.find(function(val) {
        return val === key2;
      });
    }, {
      immediate: true
    });
    var onInternalTitleClick = function onInternalTitleClick2(e2) {
      if (mergedDisabled.value) {
        return;
      }
      emit("titleClick", e2, key2);
      if (mode4.value === "inline") {
        onOpenChange(eventKey, !originOpen.value);
      }
    };
    var onMouseEnter4 = function onMouseEnter5(event) {
      if (!mergedDisabled.value) {
        changeActiveKeys(keysPath.value);
        emit("mouseenter", event);
      }
    };
    var onMouseLeave5 = function onMouseLeave6(event) {
      if (!mergedDisabled.value) {
        changeActiveKeys([]);
        emit("mouseleave", event);
      }
    };
    var directionStyle = useDirectionStyle(computed(function() {
      return eventKeysPath.value.length;
    }));
    var onPopupVisibleChange = function onPopupVisibleChange2(newVisible) {
      if (mode4.value !== "inline") {
        onOpenChange(eventKey, newVisible);
      }
    };
    var onInternalFocus = function onInternalFocus2() {
      changeActiveKeys(keysPath.value);
    };
    var popupId = eventKey && "".concat(eventKey, "-popup");
    var popupClassName = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-").concat(antdMenuTheme.value), props2.popupClassName);
    });
    var renderTitle2 = function renderTitle3(title2, icon) {
      if (!icon) {
        return inlineCollapsed.value && !parentEventKeys.value.length && title2 && typeof title2 === "string" ? createVNode("div", {
          "class": "".concat(prefixCls2.value, "-inline-collapsed-noicon")
        }, [title2.charAt(0)]) : createVNode("span", {
          "class": "".concat(prefixCls2.value, "-title-content")
        }, [title2]);
      }
      var titleIsSpan = isValidElement(title2) && title2.type === "span";
      return createVNode(Fragment, null, [cloneElement(icon, {
        class: "".concat(prefixCls2.value, "-item-icon")
      }, false), titleIsSpan ? title2 : createVNode("span", {
        "class": "".concat(prefixCls2.value, "-title-content")
      }, [title2])]);
    };
    var triggerModeRef = computed(function() {
      return mode4.value !== "inline" && eventKeysPath.value.length > 1 ? "vertical" : mode4.value;
    });
    var renderMode = computed(function() {
      return mode4.value === "horizontal" ? "vertical" : mode4.value;
    });
    var style3 = ref({});
    var className = ref("");
    var mergedMotion = computed(function() {
      var _a2, _b2;
      var m2 = motion.value || ((_a2 = defaultMotions.value) === null || _a2 === void 0 ? void 0 : _a2[mode4.value]) || ((_b2 = defaultMotions.value) === null || _b2 === void 0 ? void 0 : _b2.other);
      var res = typeof m2 === "function" ? m2(style3, className) : m2;
      return res ? getTransitionProps(res.name) : void 0;
    });
    var subMenuTriggerModeRef = computed(function() {
      return triggerModeRef.value === "horizontal" ? "vertical" : triggerModeRef.value;
    });
    return function() {
      var _classNames;
      var _a2;
      var icon = getPropsSlot(slots, props2, "icon");
      var title2 = renderTitle2(getPropsSlot(slots, props2, "title"), icon);
      var subMenuPrefixClsValue = subMenuPrefixCls.value;
      var expandIcon = props2.expandIcon || slots.expandIcon || menuExpandIcon;
      var titleNode = createVNode("div", {
        "style": directionStyle.value,
        "class": "".concat(subMenuPrefixClsValue, "-title"),
        "tabindex": mergedDisabled.value ? null : -1,
        "ref": elementRef,
        "title": typeof title2 === "string" ? title2 : null,
        "data-menu-id": key2,
        "aria-expanded": open6.value,
        "aria-haspopup": true,
        "aria-controls": popupId,
        "aria-disabled": mergedDisabled.value,
        "onClick": onInternalTitleClick,
        "onFocus": onInternalFocus
      }, [title2, mode4.value !== "horizontal" && expandIcon ? expandIcon(_extends$1(_extends$1({}, props2), {
        isOpen: open6.value
      })) : createVNode("i", {
        "class": "".concat(subMenuPrefixClsValue, "-arrow")
      }, null)]);
      if (!overflowDisabled.value && mode4.value !== "inline") {
        var triggerMode = triggerModeRef.value;
        var _titleNode = function() {
          return titleNode;
        }();
        titleNode = createVNode(PopupTrigger, {
          "mode": triggerMode,
          "prefixCls": subMenuPrefixClsValue,
          "visible": !props2.internalPopupClose && open6.value,
          "popupClassName": popupClassName.value,
          "popupOffset": props2.popupOffset,
          "disabled": mergedDisabled.value,
          "onVisibleChange": onPopupVisibleChange
        }, {
          default: function _default8() {
            return [_titleNode];
          },
          popup: function popup(_ref2) {
            var visible9 = _ref2.visible;
            var _a3;
            return createVNode(MenuContextProvider, {
              "mode": subMenuTriggerModeRef.value,
              "isRootMenu": false
            }, {
              default: function _default8() {
                return [createVNode(Transition, mergedMotion.value, {
                  default: function _default9() {
                    return [withDirectives(createVNode(SubMenuList, {
                      "id": popupId,
                      "ref": popupRef
                    }, {
                      default: function _default10() {
                        return [(_a3 = slots.default) === null || _a3 === void 0 ? void 0 : _a3.call(slots)];
                      }
                    }), [[vShow, visible9]])];
                  }
                })];
              }
            });
          }
        });
      } else {
        var _titleNode2 = function() {
          return titleNode;
        }();
        titleNode = createVNode(PopupTrigger, null, {
          default: function _default8() {
            return [_titleNode2];
          }
        });
      }
      return createVNode(MenuContextProvider, {
        "mode": renderMode.value
      }, {
        default: function _default8() {
          return [createVNode(Overflow$1.Item, _objectSpread2$2(_objectSpread2$2({
            "component": "li"
          }, attrs), {}, {
            "role": "none",
            "class": classNames(subMenuPrefixClsValue, "".concat(subMenuPrefixClsValue, "-").concat(mode4.value), attrs.class, (_classNames = {}, _defineProperty$U(_classNames, "".concat(subMenuPrefixClsValue, "-open"), open6.value), _defineProperty$U(_classNames, "".concat(subMenuPrefixClsValue, "-active"), isActive.value), _defineProperty$U(_classNames, "".concat(subMenuPrefixClsValue, "-selected"), childrenSelected.value), _defineProperty$U(_classNames, "".concat(subMenuPrefixClsValue, "-disabled"), mergedDisabled.value), _classNames)),
            "onMouseenter": onMouseEnter4,
            "onMouseleave": onMouseLeave5,
            "data-submenu-id": key2
          }), {
            default: function _default9() {
              return [titleNode, !overflowDisabled.value && createVNode(InlineSubMenuList, {
                "id": popupId,
                "open": open6.value,
                "keyPath": keysPath.value
              }, {
                default: function _default10() {
                  return [(_a2 = slots.default) === null || _a2 === void 0 ? void 0 : _a2.call(slots)];
                }
              })];
            }
          })];
        }
      });
    };
  }
});
var menuProps = {
  prefixCls: String,
  disabled: Boolean,
  inlineCollapsed: Boolean,
  disabledOverflow: Boolean,
  openKeys: Array,
  selectedKeys: Array,
  activeKey: String,
  selectable: {
    type: Boolean,
    default: true
  },
  multiple: {
    type: Boolean,
    default: false
  },
  motion: Object,
  theme: {
    type: String,
    default: "light"
  },
  mode: {
    type: String,
    default: "vertical"
  },
  inlineIndent: {
    type: Number,
    default: 24
  },
  subMenuOpenDelay: {
    type: Number,
    default: 0.1
  },
  subMenuCloseDelay: {
    type: Number,
    default: 0.1
  },
  builtinPlacements: {
    type: Object
  },
  triggerSubMenuAction: {
    type: String,
    default: "hover"
  },
  getPopupContainer: Function,
  expandIcon: Function
};
var EMPTY_LIST = [];
var Menu = defineComponent({
  name: "AMenu",
  props: menuProps,
  emits: ["update:openKeys", "openChange", "select", "deselect", "update:selectedKeys", "click", "update:activeKey"],
  slots: ["expandIcon", "overflowedIndicator"],
  setup: function setup51(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var _useConfigInject = useConfigInject("menu", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var store = ref({});
    var siderCollapsed = inject(SiderCollapsedKey, ref(void 0));
    var inlineCollapsed = computed(function() {
      if (siderCollapsed.value !== void 0) {
        return siderCollapsed.value;
      }
      return props2.inlineCollapsed;
    });
    var isMounted = ref(false);
    onMounted(function() {
      isMounted.value = true;
    });
    watchEffect(function() {
      devWarning(!(props2.inlineCollapsed === true && props2.mode !== "inline"), "Menu", "`inlineCollapsed` should only be used when `mode` is inline.");
      devWarning(!(siderCollapsed.value !== void 0 && props2.inlineCollapsed === true), "Menu", "`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.");
    });
    var activeKeys = ref([]);
    var mergedSelectedKeys = ref([]);
    var keyMapStore = ref({});
    watch(store, function() {
      var newKeyMapStore = {};
      for (var _i = 0, _Object$values = Object.values(store.value); _i < _Object$values.length; _i++) {
        var menuInfo = _Object$values[_i];
        newKeyMapStore[menuInfo.key] = menuInfo;
      }
      keyMapStore.value = newKeyMapStore;
    }, {
      flush: "post"
    });
    watchEffect(function() {
      if (props2.activeKey !== void 0) {
        var keys2 = [];
        var menuInfo = props2.activeKey ? keyMapStore.value[props2.activeKey] : void 0;
        if (menuInfo && props2.activeKey !== void 0) {
          keys2 = [].concat(_toConsumableArray(menuInfo.parentKeys), [props2.activeKey]);
        } else {
          keys2 = [];
        }
        if (!shallowEqual$1(activeKeys.value, keys2)) {
          activeKeys.value = keys2;
        }
      }
    });
    watch(function() {
      return props2.selectedKeys;
    }, function(selectedKeys3) {
      mergedSelectedKeys.value = selectedKeys3 || mergedSelectedKeys.value;
    }, {
      immediate: true
    });
    var selectedSubMenuEventKeys = ref([]);
    watch([keyMapStore, mergedSelectedKeys], function() {
      var subMenuParentEventKeys = [];
      mergedSelectedKeys.value.forEach(function(key2) {
        var menuInfo = keyMapStore.value[key2];
        if (menuInfo) {
          var _subMenuParentEventKe;
          (_subMenuParentEventKe = subMenuParentEventKeys).push.apply(_subMenuParentEventKe, _toConsumableArray(unref(menuInfo.parentEventKeys)));
        }
      });
      subMenuParentEventKeys = uniq(subMenuParentEventKeys);
      if (!shallowEqual$1(selectedSubMenuEventKeys.value, subMenuParentEventKeys)) {
        selectedSubMenuEventKeys.value = subMenuParentEventKeys;
      }
    }, {
      immediate: true
    });
    var triggerSelection = function triggerSelection2(info3) {
      if (!props2.selectable) {
        return;
      }
      var targetKey = info3.key;
      var exist = mergedSelectedKeys.value.includes(targetKey);
      var newSelectedKeys;
      if (props2.multiple) {
        if (exist) {
          newSelectedKeys = mergedSelectedKeys.value.filter(function(key2) {
            return key2 !== targetKey;
          });
        } else {
          newSelectedKeys = [].concat(_toConsumableArray(mergedSelectedKeys.value), [targetKey]);
        }
      } else {
        newSelectedKeys = [targetKey];
      }
      var selectInfo = _extends$1(_extends$1({}, info3), {
        selectedKeys: newSelectedKeys
      });
      if (!shallowEqual$1(newSelectedKeys, mergedSelectedKeys.value)) {
        if (props2.selectedKeys === void 0) {
          mergedSelectedKeys.value = newSelectedKeys;
        }
        emit("update:selectedKeys", newSelectedKeys);
        if (exist && props2.multiple) {
          emit("deselect", selectInfo);
        } else {
          emit("select", selectInfo);
        }
      }
      if (mergedMode.value !== "inline" && !props2.multiple && mergedOpenKeys.value.length) {
        triggerOpenKeys(EMPTY_LIST);
      }
    };
    var mergedOpenKeys = ref([]);
    watch(function() {
      return props2.openKeys;
    }, function() {
      var openKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : mergedOpenKeys.value;
      if (!shallowEqual$1(mergedOpenKeys.value, openKeys)) {
        mergedOpenKeys.value = openKeys;
      }
    }, {
      immediate: true
    });
    var timeout;
    var changeActiveKeys = function changeActiveKeys2(keys2) {
      window.clearTimeout(timeout);
      timeout = window.setTimeout(function() {
        if (props2.activeKey === void 0) {
          activeKeys.value = keys2;
        }
        emit("update:activeKey", keys2[keys2.length - 1]);
      });
    };
    var disabled = computed(function() {
      return !!props2.disabled;
    });
    var isRtl = computed(function() {
      return direction.value === "rtl";
    });
    var mergedMode = ref("vertical");
    var mergedInlineCollapsed = ref(false);
    watchEffect(function() {
      if ((props2.mode === "inline" || props2.mode === "vertical") && inlineCollapsed.value) {
        mergedMode.value = "vertical";
        mergedInlineCollapsed.value = inlineCollapsed.value;
      } else {
        mergedMode.value = props2.mode;
        mergedInlineCollapsed.value = false;
      }
    });
    var isInlineMode = computed(function() {
      return mergedMode.value === "inline";
    });
    var triggerOpenKeys = function triggerOpenKeys2(keys2) {
      mergedOpenKeys.value = keys2;
      emit("update:openKeys", keys2);
      emit("openChange", keys2);
    };
    var inlineCacheOpenKeys = ref(mergedOpenKeys.value);
    var mountRef = ref(false);
    watch(mergedOpenKeys, function() {
      if (isInlineMode.value) {
        inlineCacheOpenKeys.value = mergedOpenKeys.value;
      }
    }, {
      immediate: true
    });
    watch(isInlineMode, function() {
      if (!mountRef.value) {
        mountRef.value = true;
        return;
      }
      if (isInlineMode.value) {
        mergedOpenKeys.value = inlineCacheOpenKeys.value;
      } else {
        triggerOpenKeys(EMPTY_LIST);
      }
    }, {
      immediate: true
    });
    var className = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty$U(_ref2, "".concat(prefixCls2.value), true), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-root"), true), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-").concat(mergedMode.value), true), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-inline-collapsed"), mergedInlineCollapsed.value), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-rtl"), isRtl.value), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-").concat(props2.theme), true), _ref2;
    });
    var defaultMotions = {
      horizontal: {
        name: "ant-slide-up"
      },
      inline: collapseMotion,
      other: {
        name: "ant-zoom-big"
      }
    };
    useProvideFirstLevel(true);
    var getChildrenKeys = function getChildrenKeys2() {
      var eventKeys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var keys2 = [];
      var storeValue = store.value;
      eventKeys.forEach(function(eventKey) {
        var _storeValue$eventKey = storeValue[eventKey], key2 = _storeValue$eventKey.key, childrenEventKeys = _storeValue$eventKey.childrenEventKeys;
        keys2.push.apply(keys2, [key2].concat(_toConsumableArray(getChildrenKeys2(childrenEventKeys))));
      });
      return keys2;
    };
    var onInternalClick = function onInternalClick2(info3) {
      emit("click", info3);
      triggerSelection(info3);
    };
    var onInternalOpenChange = function onInternalOpenChange2(eventKey, open6) {
      var _store$value$eventKey = store.value[eventKey], key2 = _store$value$eventKey.key, childrenEventKeys = _store$value$eventKey.childrenEventKeys;
      var newOpenKeys = mergedOpenKeys.value.filter(function(k2) {
        return k2 !== key2;
      });
      if (open6) {
        newOpenKeys.push(key2);
      } else if (mergedMode.value !== "inline") {
        var subPathKeys = getChildrenKeys(childrenEventKeys);
        newOpenKeys = newOpenKeys.filter(function(k2) {
          return !subPathKeys.includes(k2);
        });
      }
      if (!shallowEqual$1(mergedOpenKeys, newOpenKeys)) {
        triggerOpenKeys(newOpenKeys);
      }
    };
    var registerMenuInfo = function registerMenuInfo2(key2, info3) {
      store.value = _extends$1(_extends$1({}, store.value), _defineProperty$U({}, key2, info3));
    };
    var unRegisterMenuInfo = function unRegisterMenuInfo2(key2) {
      delete store.value[key2];
      store.value = _extends$1({}, store.value);
    };
    var lastVisibleIndex = ref(0);
    useProvideMenu$1({
      store,
      prefixCls: prefixCls2,
      activeKeys,
      openKeys: mergedOpenKeys,
      selectedKeys: mergedSelectedKeys,
      changeActiveKeys,
      disabled,
      rtl: isRtl,
      mode: mergedMode,
      inlineIndent: computed(function() {
        return props2.inlineIndent;
      }),
      subMenuCloseDelay: computed(function() {
        return props2.subMenuCloseDelay;
      }),
      subMenuOpenDelay: computed(function() {
        return props2.subMenuOpenDelay;
      }),
      builtinPlacements: computed(function() {
        return props2.builtinPlacements;
      }),
      triggerSubMenuAction: computed(function() {
        return props2.triggerSubMenuAction;
      }),
      getPopupContainer: computed(function() {
        return props2.getPopupContainer;
      }),
      inlineCollapsed: mergedInlineCollapsed,
      antdMenuTheme: computed(function() {
        return props2.theme;
      }),
      siderCollapsed,
      defaultMotions: computed(function() {
        return isMounted.value ? defaultMotions : null;
      }),
      motion: computed(function() {
        return isMounted.value ? props2.motion : null;
      }),
      overflowDisabled: ref(void 0),
      onOpenChange: onInternalOpenChange,
      onItemClick: onInternalClick,
      registerMenuInfo,
      unRegisterMenuInfo,
      selectedSubMenuEventKeys,
      isRootMenu: ref(true),
      expandIcon: props2.expandIcon || slots.expandIcon
    });
    return function() {
      var _a, _b;
      var childList = flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      var allVisible = lastVisibleIndex.value >= childList.length - 1 || mergedMode.value !== "horizontal" || props2.disabledOverflow;
      var wrappedChildList = mergedMode.value !== "horizontal" || props2.disabledOverflow ? childList : childList.map(function(child, index2) {
        return createVNode(MenuContextProvider, {
          "key": child.key,
          "overflowDisabled": index2 > lastVisibleIndex.value
        }, {
          default: function _default8() {
            return [child];
          }
        });
      });
      var overflowedIndicator = ((_b = slots.overflowedIndicator) === null || _b === void 0 ? void 0 : _b.call(slots)) || createVNode(EllipsisOutlined$1, null, null);
      return createVNode(Overflow$1, {
        "prefixCls": "".concat(prefixCls2.value, "-overflow"),
        "component": "ul",
        "itemComponent": MenuItem,
        "class": className.value,
        "role": "menu",
        "data": wrappedChildList,
        "renderRawItem": function renderRawItem(node) {
          return node;
        },
        "renderRawRest": function renderRawRest(omitItems) {
          var len = omitItems.length;
          var originOmitItems = len ? childList.slice(-len) : null;
          return createVNode(SubMenu, {
            "eventKey": Overflow$1.OVERFLOW_KEY,
            "title": overflowedIndicator,
            "disabled": allVisible,
            "internalPopupClose": len === 0
          }, {
            default: function _default8() {
              return [originOmitItems];
            }
          });
        },
        "maxCount": mergedMode.value !== "horizontal" || props2.disabledOverflow ? Overflow$1.INVALIDATE : Overflow$1.RESPONSIVE,
        "ssr": "full",
        "data-menu-list": true,
        "onVisibleChange": function onVisibleChange6(newLastIndex) {
          lastVisibleIndex.value = newLastIndex;
        }
      }, null);
    };
  }
});
var menuItemGroupProps = {
  title: PropsTypes.VNodeChild
};
var ItemGroup = defineComponent({
  name: "AMenuItemGroup",
  inheritAttrs: false,
  props: menuItemGroupProps,
  slots: ["title"],
  setup: function setup52(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls;
    var groupPrefixCls = computed(function() {
      return "".concat(prefixCls2.value, "-item-group");
    });
    return function() {
      var _a;
      return createVNode("li", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "onClick": function onClick7(e2) {
          return e2.stopPropagation();
        },
        "class": groupPrefixCls.value
      }), [createVNode("div", {
        "title": typeof props2.title === "string" ? props2.title : void 0,
        "class": "".concat(groupPrefixCls.value, "-title")
      }, [getPropsSlot(slots, props2, "title")]), createVNode("ul", {
        "class": "".concat(groupPrefixCls.value, "-list")
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)])]);
    };
  }
});
var Divider$1 = defineComponent({
  name: "AMenuDivider",
  setup: function setup53() {
    var _useInjectMenu = useInjectMenu(), prefixCls2 = _useInjectMenu.prefixCls;
    return function() {
      return createVNode("li", {
        "class": "".concat(prefixCls2.value, "-item-divider")
      }, null);
    };
  }
});
Menu.install = function(app) {
  app.component(Menu.name, Menu);
  app.component(MenuItem.name, MenuItem);
  app.component(SubMenu.name, SubMenu);
  app.component(Divider$1.name, Divider$1);
  app.component(ItemGroup.name, ItemGroup);
  return app;
};
Menu.Item = MenuItem;
Menu.Divider = Divider$1;
Menu.SubMenu = SubMenu;
Menu.ItemGroup = ItemGroup;
var breadcrumbProps = {
  prefixCls: PropsTypes.string,
  routes: {
    type: Array
  },
  params: PropsTypes.any,
  separator: PropsTypes.any,
  itemRender: {
    type: Function
  }
};
function getBreadcrumbName(route, params) {
  if (!route.breadcrumbName) {
    return null;
  }
  var paramsKeys = Object.keys(params).join("|");
  var name2 = route.breadcrumbName.replace(new RegExp(":(".concat(paramsKeys, ")"), "g"), function(replacement, key2) {
    return params[key2] || replacement;
  });
  return name2;
}
function defaultItemRender$1(opt) {
  var route = opt.route, params = opt.params, routes2 = opt.routes, paths = opt.paths;
  var isLastItem = routes2.indexOf(route) === routes2.length - 1;
  var name2 = getBreadcrumbName(route, params);
  return isLastItem ? createVNode("span", null, [name2]) : createVNode("a", {
    "href": "#/".concat(paths.join("/"))
  }, [name2]);
}
var Breadcrumb = defineComponent({
  name: "ABreadcrumb",
  props: breadcrumbProps,
  slots: ["separator", "itemRender"],
  setup: function setup54(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("breadcrumb", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var getPath = function getPath2(path2, params) {
      path2 = (path2 || "").replace(/^\//, "");
      Object.keys(params).forEach(function(key2) {
        path2 = path2.replace(":".concat(key2), params[key2]);
      });
      return path2;
    };
    var addChildPath = function addChildPath2(paths) {
      var childPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var params = arguments.length > 2 ? arguments[2] : void 0;
      var originalPaths = _toConsumableArray(paths);
      var path2 = getPath(childPath, params);
      if (path2) {
        originalPaths.push(path2);
      }
      return originalPaths;
    };
    var genForRoutes = function genForRoutes2(_ref2) {
      var _ref2$routes = _ref2.routes, routes2 = _ref2$routes === void 0 ? [] : _ref2$routes, _ref2$params = _ref2.params, params = _ref2$params === void 0 ? {} : _ref2$params, separator = _ref2.separator, _ref2$itemRender = _ref2.itemRender, itemRender = _ref2$itemRender === void 0 ? defaultItemRender$1 : _ref2$itemRender;
      var paths = [];
      return routes2.map(function(route) {
        var path2 = getPath(route.path, params);
        if (path2) {
          paths.push(path2);
        }
        var tempPaths = [].concat(paths);
        var overlay = null;
        if (route.children && route.children.length) {
          overlay = createVNode(Menu, null, {
            default: function _default8() {
              return [route.children.map(function(child) {
                return createVNode(Menu.Item, {
                  "key": child.path || child.breadcrumbName
                }, {
                  default: function _default9() {
                    return [itemRender({
                      route: child,
                      params,
                      routes: routes2,
                      paths: addChildPath(tempPaths, child.path, params)
                    })];
                  }
                });
              })];
            }
          });
        }
        return createVNode(BreadcrumbItem, {
          "overlay": overlay,
          "separator": separator,
          "key": path2 || route.breadcrumbName
        }, {
          default: function _default8() {
            return [itemRender({
              route,
              params,
              routes: routes2,
              paths: tempPaths
            })];
          }
        });
      });
    };
    return function() {
      var _breadcrumbClassName;
      var _a;
      var crumbs;
      var routes2 = props2.routes, _props$params = props2.params, params = _props$params === void 0 ? {} : _props$params;
      var children = flattenChildren(getPropsSlot(slots, props2));
      var separator = (_a = getPropsSlot(slots, props2, "separator")) !== null && _a !== void 0 ? _a : "/";
      var itemRender = props2.itemRender || slots.itemRender || defaultItemRender$1;
      if (routes2 && routes2.length > 0) {
        crumbs = genForRoutes({
          routes: routes2,
          params,
          separator,
          itemRender
        });
      } else if (children.length) {
        crumbs = children.map(function(element, index2) {
          warning$4(_typeof$2(element.type) === "object" && (element.type.__ANT_BREADCRUMB_ITEM || element.type.__ANT_BREADCRUMB_SEPARATOR), "Breadcrumb", "Only accepts Breadcrumb.Item and Breadcrumb.Separator as it's children");
          return cloneVNode(element, {
            separator,
            key: index2
          });
        });
      }
      var breadcrumbClassName = (_breadcrumbClassName = {}, _defineProperty$U(_breadcrumbClassName, prefixCls2.value, true), _defineProperty$U(_breadcrumbClassName, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _breadcrumbClassName);
      return createVNode("div", {
        "class": breadcrumbClassName
      }, [crumbs]);
    };
  }
});
var __rest$H = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var breadcrumbSeparatorProps = {
  prefixCls: PropsTypes.string
};
var BreadcrumbSeparator = defineComponent({
  name: "ABreadcrumbSeparator",
  __ANT_BREADCRUMB_SEPARATOR: true,
  inheritAttrs: false,
  props: breadcrumbSeparatorProps,
  setup: function setup55(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("breadcrumb", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a;
      attrs.separator;
      var className = attrs.class, restAttrs = __rest$H(attrs, ["separator", "class"]);
      var children = flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      return createVNode("span", _objectSpread2$2({
        "class": ["".concat(prefixCls2.value, "-separator"), className]
      }, restAttrs), [children.length > 0 ? children : "/"]);
    };
  }
});
Breadcrumb.Item = BreadcrumbItem;
Breadcrumb.Separator = BreadcrumbSeparator;
Breadcrumb.install = function(app) {
  app.component(Breadcrumb.name, Breadcrumb);
  app.component(BreadcrumbItem.name, BreadcrumbItem);
  app.component(BreadcrumbSeparator.name, BreadcrumbSeparator);
  return app;
};
var DateConstants = {
  DATE_ROW_COUNT: 6,
  DATE_COL_COUNT: 7
};
var DateTHead = function DateTHead2(_2, _ref) {
  var attrs = _ref.attrs;
  var value26 = attrs.value;
  var localeData2 = value26.localeData();
  var prefixCls2 = attrs.prefixCls;
  var veryShortWeekdays = [];
  var weekDays = [];
  var firstDayOfWeek = localeData2.firstDayOfWeek();
  var showWeekNumberEl;
  var now2 = hooks();
  for (var dateColIndex = 0; dateColIndex < DateConstants.DATE_COL_COUNT; dateColIndex++) {
    var index2 = (firstDayOfWeek + dateColIndex) % DateConstants.DATE_COL_COUNT;
    now2.day(index2);
    veryShortWeekdays[dateColIndex] = localeData2.weekdaysMin(now2);
    weekDays[dateColIndex] = localeData2.weekdaysShort(now2);
  }
  if (attrs.showWeekNumber) {
    showWeekNumberEl = createVNode("th", {
      "role": "columnheader",
      "class": "".concat(prefixCls2, "-column-header ").concat(prefixCls2, "-week-number-header")
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-column-header-inner")
    }, [createTextVNode("x")])]);
  }
  var weekDaysEls = weekDays.map(function(day, xindex) {
    return createVNode("th", {
      "key": xindex,
      "role": "columnheader",
      "title": day,
      "class": "".concat(prefixCls2, "-column-header")
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-column-header-inner")
    }, [veryShortWeekdays[xindex]])]);
  });
  return createVNode("thead", null, [createVNode("tr", {
    "role": "row"
  }, [showWeekNumberEl, weekDaysEls])]);
};
DateTHead.inheritAttrs = false;
var DateTHead$1 = DateTHead;
var defaultDisabledTime = {
  disabledHours: function disabledHours() {
    return [];
  },
  disabledMinutes: function disabledMinutes() {
    return [];
  },
  disabledSeconds: function disabledSeconds() {
    return [];
  }
};
function getTodayTime(value26) {
  var today = hooks();
  today.locale(value26.locale()).utcOffset(value26.utcOffset());
  return today;
}
function getTitleString(value26) {
  return value26.format("LL");
}
function getTodayTimeStr(value26) {
  var today = getTodayTime(value26);
  return getTitleString(today);
}
function getMonthName(month) {
  var locale2 = month.locale();
  var localeData2 = month.localeData();
  return localeData2[locale2 === "zh-cn" ? "months" : "monthsShort"](month);
}
function syncTime(from2, to2) {
  if (!hooks.isMoment(from2) || !hooks.isMoment(to2))
    return;
  to2.hour(from2.hour());
  to2.minute(from2.minute());
  to2.second(from2.second());
  to2.millisecond(from2.millisecond());
}
function getTimeConfig(value26, disabledTime) {
  var disabledTimeConfig = disabledTime ? disabledTime(value26) : {};
  disabledTimeConfig = _extends$1(_extends$1({}, defaultDisabledTime), disabledTimeConfig);
  return disabledTimeConfig;
}
function isTimeValidByConfig(value26, disabledTimeConfig) {
  var invalidTime = false;
  if (value26) {
    var hour = value26.hour();
    var minutes2 = value26.minute();
    var seconds2 = value26.second();
    var disabledHours3 = disabledTimeConfig.disabledHours();
    if (disabledHours3.indexOf(hour) === -1) {
      var disabledMinutes2 = disabledTimeConfig.disabledMinutes(hour);
      if (disabledMinutes2.indexOf(minutes2) === -1) {
        var disabledSeconds2 = disabledTimeConfig.disabledSeconds(hour, minutes2);
        invalidTime = disabledSeconds2.indexOf(seconds2) !== -1;
      } else {
        invalidTime = true;
      }
    } else {
      invalidTime = true;
    }
  }
  return !invalidTime;
}
function isTimeValid(value26, disabledTime) {
  var disabledTimeConfig = getTimeConfig(value26, disabledTime);
  return isTimeValidByConfig(value26, disabledTimeConfig);
}
function isAllowedDate(value26, disabledDate, disabledTime) {
  if (disabledDate) {
    if (disabledDate(value26)) {
      return false;
    }
  }
  if (disabledTime) {
    if (!isTimeValid(value26, disabledTime)) {
      return false;
    }
  }
  return true;
}
function formatDate$1(value26, format3) {
  if (!value26) {
    return "";
  }
  if (Array.isArray(format3)) {
    format3 = format3[0];
  }
  if (typeof format3 === "function") {
    var result = format3(value26);
    if (typeof result === "string") {
      return result;
    } else {
      throw new Error("The function of format does not return a string");
    }
  }
  return value26.format(format3);
}
function noop$E() {
}
function isSameDay(one, two) {
  return one && two && one.isSame(two, "day");
}
function beforeCurrentMonthYear(current2, today) {
  if (current2.year() < today.year()) {
    return 1;
  }
  return current2.year() === today.year() && current2.month() < today.month();
}
function afterCurrentMonthYear(current2, today) {
  if (current2.year() > today.year()) {
    return 1;
  }
  return current2.year() === today.year() && current2.month() > today.month();
}
function getIdFromDate(date3) {
  return "rc-calendar-".concat(date3.year(), "-").concat(date3.month(), "-").concat(date3.date());
}
var DateTBody = {
  name: "DateTBody",
  inheritAttrs: false,
  props: {
    contentRender: PropsTypes.func,
    dateRender: PropsTypes.func,
    disabledDate: PropsTypes.func,
    prefixCls: PropsTypes.string,
    selectedValue: PropsTypes.any,
    value: PropsTypes.object,
    hoverValue: PropsTypes.any.def([]),
    showWeekNumber: PropsTypes.looseBool
  },
  render: function render29() {
    var props2 = getOptionProps(this);
    var contentRender = props2.contentRender, prefixCls2 = props2.prefixCls, selectedValue6 = props2.selectedValue, value26 = props2.value, showWeekNumber = props2.showWeekNumber, dateRender = props2.dateRender, disabledDate = props2.disabledDate, hoverValue2 = props2.hoverValue;
    var _this$$attrs = this.$attrs, _this$$attrs$onSelect = _this$$attrs.onSelect, onSelect6 = _this$$attrs$onSelect === void 0 ? noop$E : _this$$attrs$onSelect, _this$$attrs$onDayHov = _this$$attrs.onDayHover, onDayHover2 = _this$$attrs$onDayHov === void 0 ? noop$E : _this$$attrs$onDayHov;
    var iIndex;
    var jIndex;
    var current2;
    var dateTable = [];
    var today = getTodayTime(value26);
    var cellClass = "".concat(prefixCls2, "-cell");
    var weekNumberCellClass = "".concat(prefixCls2, "-week-number-cell");
    var dateClass = "".concat(prefixCls2, "-date");
    var todayClass = "".concat(prefixCls2, "-today");
    var selectedClass = "".concat(prefixCls2, "-selected-day");
    var selectedDateClass = "".concat(prefixCls2, "-selected-date");
    var selectedStartDateClass = "".concat(prefixCls2, "-selected-start-date");
    var selectedEndDateClass = "".concat(prefixCls2, "-selected-end-date");
    var inRangeClass = "".concat(prefixCls2, "-in-range-cell");
    var lastMonthDayClass = "".concat(prefixCls2, "-last-month-cell");
    var nextMonthDayClass = "".concat(prefixCls2, "-next-month-btn-day");
    var disabledClass = "".concat(prefixCls2, "-disabled-cell");
    var firstDisableClass = "".concat(prefixCls2, "-disabled-cell-first-of-row");
    var lastDisableClass = "".concat(prefixCls2, "-disabled-cell-last-of-row");
    var lastDayOfMonthClass = "".concat(prefixCls2, "-last-day-of-month");
    var month1 = value26.clone();
    month1.date(1);
    var day = month1.day();
    var lastMonthDiffDay = (day + 7 - value26.localeData().firstDayOfWeek()) % 7;
    var lastMonth1 = month1.clone();
    lastMonth1.add(0 - lastMonthDiffDay, "days");
    var passed = 0;
    for (iIndex = 0; iIndex < DateConstants.DATE_ROW_COUNT; iIndex++) {
      for (jIndex = 0; jIndex < DateConstants.DATE_COL_COUNT; jIndex++) {
        current2 = lastMonth1;
        if (passed) {
          current2 = current2.clone();
          current2.add(passed, "days");
        }
        dateTable.push(current2);
        passed++;
      }
    }
    var tableHtml = [];
    passed = 0;
    for (iIndex = 0; iIndex < DateConstants.DATE_ROW_COUNT; iIndex++) {
      var _cx;
      var isCurrentWeek = void 0;
      var weekNumberCell = void 0;
      var isActiveWeek = false;
      var dateCells = [];
      if (showWeekNumber) {
        weekNumberCell = createVNode("td", {
          "key": "week-".concat(dateTable[passed].week()),
          "role": "gridcell",
          "class": weekNumberCellClass
        }, [dateTable[passed].week()]);
      }
      for (jIndex = 0; jIndex < DateConstants.DATE_COL_COUNT; jIndex++) {
        var next3 = null;
        var last2 = null;
        current2 = dateTable[passed];
        if (jIndex < DateConstants.DATE_COL_COUNT - 1) {
          next3 = dateTable[passed + 1];
        }
        if (jIndex > 0) {
          last2 = dateTable[passed - 1];
        }
        var cls = cellClass;
        var disabled = false;
        var selected = false;
        if (isSameDay(current2, today)) {
          cls += " ".concat(todayClass);
          isCurrentWeek = true;
        }
        var isBeforeCurrentMonthYear = beforeCurrentMonthYear(current2, value26);
        var isAfterCurrentMonthYear = afterCurrentMonthYear(current2, value26);
        if (selectedValue6 && Array.isArray(selectedValue6)) {
          var rangeValue = hoverValue2.length ? hoverValue2 : selectedValue6;
          if (!isBeforeCurrentMonthYear && !isAfterCurrentMonthYear) {
            var startValue = rangeValue[0];
            var endValue = rangeValue[1];
            if (startValue) {
              if (isSameDay(current2, startValue)) {
                selected = true;
                isActiveWeek = true;
                cls += " ".concat(selectedStartDateClass);
              }
            }
            if (startValue || endValue) {
              if (isSameDay(current2, endValue)) {
                selected = true;
                isActiveWeek = true;
                cls += " ".concat(selectedEndDateClass);
              } else if ((startValue === null || startValue === void 0) && current2.isBefore(endValue, "day")) {
                cls += " ".concat(inRangeClass);
              } else if ((endValue === null || endValue === void 0) && current2.isAfter(startValue, "day")) {
                cls += " ".concat(inRangeClass);
              } else if (current2.isAfter(startValue, "day") && current2.isBefore(endValue, "day")) {
                cls += " ".concat(inRangeClass);
              }
            }
          }
        } else if (isSameDay(current2, value26)) {
          selected = true;
          isActiveWeek = true;
        }
        if (isSameDay(current2, selectedValue6)) {
          cls += " ".concat(selectedDateClass);
        }
        if (isBeforeCurrentMonthYear) {
          cls += " ".concat(lastMonthDayClass);
        }
        if (isAfterCurrentMonthYear) {
          cls += " ".concat(nextMonthDayClass);
        }
        if (current2.clone().endOf("month").date() === current2.date()) {
          cls += " ".concat(lastDayOfMonthClass);
        }
        if (disabledDate) {
          if (disabledDate(current2, value26)) {
            disabled = true;
            if (!last2 || !disabledDate(last2, value26)) {
              cls += " ".concat(firstDisableClass);
            }
            if (!next3 || !disabledDate(next3, value26)) {
              cls += " ".concat(lastDisableClass);
            }
          }
        }
        if (selected) {
          cls += " ".concat(selectedClass);
        }
        if (disabled) {
          cls += " ".concat(disabledClass);
        }
        var dateHtml = void 0;
        if (dateRender) {
          dateHtml = dateRender({
            current: current2,
            today: value26
          });
        } else {
          var content = contentRender ? contentRender({
            current: current2,
            today: value26
          }) : current2.date();
          dateHtml = createVNode("div", {
            "key": getIdFromDate(current2),
            "class": dateClass,
            "aria-selected": selected,
            "aria-disabled": disabled
          }, [content]);
        }
        dateCells.push(createVNode("td", {
          "key": passed,
          "onClick": disabled ? noop$E : onSelect6.bind(null, current2),
          "onMouseenter": disabled ? noop$E : onDayHover2.bind(null, current2),
          "role": "gridcell",
          "title": getTitleString(current2),
          "class": cls
        }, [dateHtml]));
        passed++;
      }
      tableHtml.push(createVNode("tr", {
        "key": iIndex,
        "role": "row",
        "class": classNames((_cx = {}, _defineProperty$U(_cx, "".concat(prefixCls2, "-current-week"), isCurrentWeek), _defineProperty$U(_cx, "".concat(prefixCls2, "-active-week"), isActiveWeek), _cx))
      }, [weekNumberCell, dateCells]));
    }
    return createVNode("tbody", {
      "class": "".concat(prefixCls2, "-tbody")
    }, [tableHtml]);
  }
};
var DateTBody$1 = DateTBody;
var DateTable = function DateTable2(_2, _ref) {
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls;
  return createVNode("table", {
    "class": "".concat(prefixCls2, "-table"),
    "cellspacing": "0",
    "role": "grid"
  }, [createVNode(DateTHead$1, attrs, null), createVNode(DateTBody$1, attrs, null)]);
};
DateTable.inheritAttrs = false;
var DateTable$1 = DateTable;
var ROW$2 = 4;
var COL$2 = 3;
function noop$D() {
}
var MonthTable = {
  name: "MonthTable",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    cellRender: PropsTypes.func,
    prefixCls: PropsTypes.string,
    value: PropsTypes.object,
    locale: PropsTypes.any,
    contentRender: PropsTypes.any,
    disabledDate: PropsTypes.func
  },
  data: function data11() {
    return {
      sValue: this.value
    };
  },
  watch: {
    value: function value4(val) {
      this.setState({
        sValue: val
      });
    }
  },
  methods: {
    setAndSelectValue: function setAndSelectValue(value26) {
      this.setState({
        sValue: value26
      });
      this.__emit("select", value26);
    },
    chooseMonth: function chooseMonth(month) {
      var next3 = this.sValue.clone();
      next3.month(month);
      this.setAndSelectValue(next3);
    },
    months: function months2() {
      var value26 = this.sValue;
      var current2 = value26.clone();
      var months3 = [];
      var index2 = 0;
      for (var rowIndex = 0; rowIndex < ROW$2; rowIndex++) {
        months3[rowIndex] = [];
        for (var colIndex = 0; colIndex < COL$2; colIndex++) {
          current2.month(index2);
          var content = getMonthName(current2);
          months3[rowIndex][colIndex] = {
            value: index2,
            content,
            title: content
          };
          index2++;
        }
      }
      return months3;
    }
  },
  render: function render30() {
    var _this = this;
    var props2 = this.$props;
    var value26 = this.sValue;
    var today = getTodayTime(value26);
    var months3 = this.months();
    var currentMonth = value26.month();
    var prefixCls2 = props2.prefixCls, locale2 = props2.locale, contentRender = props2.contentRender, cellRender = props2.cellRender, disabledDate = props2.disabledDate;
    var monthsEls = months3.map(function(month, index2) {
      var tds = month.map(function(monthData) {
        var _classNameMap;
        var disabled = false;
        if (disabledDate) {
          var testValue = value26.clone();
          testValue.month(monthData.value);
          disabled = disabledDate(testValue);
        }
        var classNameMap = (_classNameMap = {}, _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-cell"), 1), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-cell-disabled"), disabled), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-selected-cell"), monthData.value === currentMonth), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-current-cell"), today.year() === value26.year() && monthData.value === today.month()), _classNameMap);
        var cellEl;
        if (cellRender) {
          var currentValue = value26.clone();
          currentValue.month(monthData.value);
          cellEl = cellRender({
            current: currentValue,
            locale: locale2
          });
        } else {
          var content;
          if (contentRender) {
            var _currentValue = value26.clone();
            _currentValue.month(monthData.value);
            content = contentRender({
              current: _currentValue,
              locale: locale2
            });
          } else {
            content = monthData.content;
          }
          cellEl = createVNode("a", {
            "class": "".concat(prefixCls2, "-month")
          }, [content]);
        }
        return createVNode("td", {
          "role": "gridcell",
          "key": monthData.value,
          "onClick": disabled ? noop$D : function() {
            return _this.chooseMonth(monthData.value);
          },
          "title": monthData.title,
          "class": classNameMap
        }, [cellEl]);
      });
      return createVNode("tr", {
        "key": index2,
        "role": "row"
      }, [tds]);
    });
    return createVNode("table", {
      "class": "".concat(prefixCls2, "-table"),
      "cellspacing": "0",
      "role": "grid"
    }, [createVNode("tbody", {
      "class": "".concat(prefixCls2, "-tbody")
    }, [monthsEls])]);
  }
};
var MonthTable$1 = MonthTable;
function noop$C() {
}
function getNowByCurrentStateValue(value26) {
  var ret;
  if (value26) {
    ret = getTodayTime(value26);
  } else {
    ret = hooks();
  }
  return ret;
}
function isMoment(value26) {
  if (Array.isArray(value26)) {
    return value26.length === 0 || value26.findIndex(function(val) {
      return val === void 0 || hooks.isMoment(val);
    }) !== -1;
  } else {
    return value26 === void 0 || hooks.isMoment(value26);
  }
}
var MomentType = PropsTypes.custom(isMoment);
var CalendarMixin = {
  mixins: [BaseMixin],
  inheritAttrs: false,
  name: "CalendarMixinWrapper",
  props: {
    value: MomentType,
    defaultValue: MomentType
  },
  data: function data12() {
    if (this.onKeyDown === void 0) {
      this.onKeyDown = noop$C;
    }
    if (this.onBlur === void 0) {
      this.onBlur = noop$C;
    }
    var props2 = this.$props;
    var sValue = props2.value || props2.defaultValue || getNowByCurrentStateValue();
    return {
      sValue,
      sSelectedValue: props2.selectedValue || props2.defaultSelectedValue
    };
  },
  watch: {
    value: function value5(val) {
      var sValue = val || this.defaultValue || getNowByCurrentStateValue(this.sValue);
      this.setState({
        sValue
      });
    },
    selectedValue: function selectedValue(val) {
      this.setState({
        sSelectedValue: val
      });
    }
  },
  methods: {
    onSelect: function onSelect(value26, cause) {
      if (value26) {
        this.setValue(value26);
      }
      this.setSelectedValue(value26, cause);
    },
    renderRoot: function renderRoot(newProps) {
      var _className;
      var props2 = _extends$1(_extends$1({}, this.$props), this.$attrs);
      var prefixCls2 = props2.prefixCls;
      var className = (_className = {}, _defineProperty$U(_className, prefixCls2, 1), _defineProperty$U(_className, "".concat(prefixCls2, "-hidden"), !props2.visible), _defineProperty$U(_className, props2.class, !!props2.class), _defineProperty$U(_className, newProps.class, !!newProps.class), _className);
      return createVNode("div", {
        "ref": this.saveRoot,
        "class": className,
        "tabindex": "0",
        "onKeydown": this.onKeyDown || noop$C,
        "onBlur": this.onBlur || noop$C
      }, [newProps.children]);
    },
    setSelectedValue: function setSelectedValue(selectedValue6, cause) {
      if (!hasProp(this, "selectedValue")) {
        this.setState({
          sSelectedValue: selectedValue6
        });
      }
      this.__emit("select", selectedValue6, cause);
    },
    setValue: function setValue3(value26) {
      var originalValue = this.sValue;
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      if (originalValue && value26 && !originalValue.isSame(value26) || !originalValue && value26 || originalValue && !value26) {
        this.__emit("change", value26);
      }
    },
    isAllowedDate: function isAllowedDate$1(value26) {
      var disabledDate = this.disabledDate;
      var disabledTime = this.disabledTime;
      return isAllowedDate(value26, disabledDate, disabledTime);
    }
  }
};
var CalendarMixin$1 = CalendarMixin;
var CommonMixin = {
  methods: {
    getFormat: function getFormat() {
      var format3 = this.format;
      var locale2 = this.locale, timePicker = this.timePicker;
      if (!format3) {
        if (timePicker) {
          format3 = locale2.dateTimeFormat;
        } else {
          format3 = locale2.dateFormat;
        }
      }
      return format3;
    },
    focus: function focus6() {
      if (this.focusElement) {
        this.focusElement.focus();
      } else if (this.rootInstance) {
        this.rootInstance.focus();
      }
    },
    saveFocusElement: function saveFocusElement(focusElement) {
      this.focusElement = focusElement;
    },
    saveRoot: function saveRoot(root2) {
      this.rootInstance = root2;
    }
  }
};
var CalendarHeader$2 = {
  name: "CalendarHeader",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    value: PropsTypes.object,
    locale: PropsTypes.object,
    yearSelectOffset: PropsTypes.number.def(10),
    yearSelectTotal: PropsTypes.number.def(20),
    Select: PropsTypes.object,
    prefixCls: PropsTypes.string,
    type: PropsTypes.string,
    showTypeSwitch: PropsTypes.looseBool,
    headerComponents: PropsTypes.array
  },
  methods: {
    onYearChange: function onYearChange(year) {
      var newValue = this.value.clone();
      newValue.year(parseInt(year, 10));
      this.__emit("valueChange", newValue);
    },
    onMonthChange: function onMonthChange(month) {
      var newValue = this.value.clone();
      newValue.month(parseInt(month, 10));
      this.__emit("valueChange", newValue);
    },
    yearSelectElement: function yearSelectElement(year) {
      var yearSelectOffset = this.yearSelectOffset, yearSelectTotal = this.yearSelectTotal, prefixCls2 = this.prefixCls, Select2 = this.Select;
      var start = year - yearSelectOffset;
      var end = start + yearSelectTotal;
      var options2 = [];
      var _loop = function _loop2(index3) {
        options2.push(createVNode(Select2.Option, {
          "key": "".concat(index3)
        }, {
          default: function _default8() {
            return [function() {
              return index3;
            }()];
          }
        }));
      };
      for (var index2 = start; index2 < end; index2++) {
        _loop(index2);
      }
      return createVNode(Select2, {
        "class": "".concat(prefixCls2, "-header-year-select"),
        "onChange": this.onYearChange,
        "dropdownStyle": {
          zIndex: 2e3
        },
        "dropdownMenuStyle": {
          maxHeight: "250px",
          overflow: "auto",
          fontSize: "12px"
        },
        "optionLabelProp": "children",
        "value": String(year),
        "showSearch": false
      }, {
        default: function _default8() {
          return [options2];
        }
      });
    },
    monthSelectElement: function monthSelectElement(month) {
      var value26 = this.value, Select2 = this.Select, prefixCls2 = this.prefixCls;
      var t2 = value26.clone();
      var options2 = [];
      for (var index2 = 0; index2 < 12; index2++) {
        t2.month(index2);
        options2.push(createVNode(Select2.Option, {
          "key": "".concat(index2)
        }, {
          default: function _default8() {
            return [function() {
              return getMonthName(t2);
            }()];
          }
        }));
      }
      return createVNode(Select2, {
        "class": "".concat(prefixCls2, "-header-month-select"),
        "dropdownStyle": {
          zIndex: 2e3
        },
        "dropdownMenuStyle": {
          maxHeight: "250px",
          overflow: "auto",
          overflowX: "hidden",
          fontSize: "12px"
        },
        "optionLabelProp": "children",
        "value": String(month),
        "showSearch": false,
        "onChange": this.onMonthChange
      }, {
        default: function _default8() {
          return [options2];
        }
      });
    },
    changeTypeToDate: function changeTypeToDate() {
      this.__emit("typeChange", "date");
    },
    changeTypeToMonth: function changeTypeToMonth() {
      this.__emit("typeChange", "month");
    }
  },
  render: function render31() {
    var value26 = this.value, locale2 = this.locale, prefixCls2 = this.prefixCls, type3 = this.type, showTypeSwitch = this.showTypeSwitch, headerComponents = this.headerComponents;
    var year = value26.year();
    var month = value26.month();
    var yearSelect = this.yearSelectElement(year);
    var monthSelect = type3 === "month" ? null : this.monthSelectElement(month);
    var switchCls = "".concat(prefixCls2, "-header-switcher");
    var typeSwitcher = showTypeSwitch ? createVNode("span", {
      "class": switchCls
    }, [type3 === "date" ? createVNode("span", {
      "class": "".concat(switchCls, "-focus")
    }, [locale2.month]) : createVNode("span", {
      "onClick": this.changeTypeToDate,
      "class": "".concat(switchCls, "-normal")
    }, [locale2.month]), type3 === "month" ? createVNode("span", {
      "class": "".concat(switchCls, "-focus")
    }, [locale2.year]) : createVNode("span", {
      "onClick": this.changeTypeToMonth,
      "class": "".concat(switchCls, "-normal")
    }, [locale2.year])]) : null;
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [typeSwitcher, monthSelect, yearSelect, headerComponents]);
  }
};
var CalendarHeader$3 = CalendarHeader$2;
var FullCalendar = defineComponent({
  name: "FullCalendar",
  mixins: [BaseMixin, CommonMixin, CalendarMixin$1],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object.def(enUs),
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array, PropsTypes.func]),
    visible: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("rc-calendar"),
    defaultType: PropsTypes.string.def("date"),
    type: PropsTypes.string,
    fullscreen: PropsTypes.looseBool.def(false),
    monthCellRender: PropsTypes.func,
    dateCellRender: PropsTypes.func,
    showTypeSwitch: PropsTypes.looseBool.def(true),
    Select: PropsTypes.object.isRequired,
    headerComponents: PropsTypes.array,
    headerComponent: PropsTypes.object,
    headerRender: PropsTypes.func,
    showHeader: PropsTypes.looseBool.def(true),
    disabledDate: PropsTypes.func,
    value: PropsTypes.object,
    defaultValue: PropsTypes.object,
    selectedValue: PropsTypes.object,
    defaultSelectedValue: PropsTypes.object,
    renderFooter: PropsTypes.func.def(function() {
      return null;
    }),
    renderSidebar: PropsTypes.func.def(function() {
      return null;
    })
  },
  data: function data13() {
    var type3;
    if (hasProp(this, "type")) {
      type3 = this.type;
    } else {
      type3 = this.defaultType;
    }
    var props2 = this.$props;
    return {
      sType: type3,
      sValue: props2.value || props2.defaultValue || hooks(),
      sSelectedValue: props2.selectedValue || props2.defaultSelectedValue
    };
  },
  watch: {
    type: function type2(val) {
      this.setState({
        sType: val
      });
    },
    value: function value6(val) {
      var sValue = val || this.defaultValue || getNowByCurrentStateValue(this.sValue);
      this.setState({
        sValue
      });
    },
    selectedValue: function selectedValue2(val) {
      this.setState({
        sSelectedValue: val
      });
    }
  },
  methods: {
    onMonthSelect: function onMonthSelect(value26) {
      this.onSelect(value26, {
        target: "month"
      });
    },
    setType: function setType(type3) {
      if (!hasProp(this, "type")) {
        this.setState({
          sType: type3
        });
      }
      this.__emit("typeChange", type3);
    }
  },
  render: function render32() {
    var props2 = getOptionProps(this);
    var locale2 = props2.locale, prefixCls2 = props2.prefixCls, fullscreen = props2.fullscreen, showHeader = props2.showHeader, headerComponent = props2.headerComponent, headerRender = props2.headerRender, disabledDate = props2.disabledDate;
    var value26 = this.sValue, type3 = this.sType;
    var header = null;
    if (showHeader) {
      if (headerRender) {
        header = headerRender(value26, type3, locale2);
      } else {
        var TheHeader = headerComponent || CalendarHeader$3;
        var headerProps = _extends$1(_extends$1(_extends$1({}, props2), this.$attrs), {
          prefixCls: "".concat(prefixCls2, "-full"),
          type: type3,
          value: value26,
          onTypeChange: this.setType,
          onValueChange: this.setValue,
          key: "calendar-header"
        });
        header = createVNode(TheHeader, headerProps, null);
      }
    }
    var table = type3 === "date" ? createVNode(DateTable$1, {
      "dateRender": props2.dateCellRender,
      "contentRender": props2.dateCellContentRender,
      "locale": locale2,
      "prefixCls": prefixCls2,
      "onSelect": this.onSelect,
      "value": value26,
      "disabledDate": disabledDate
    }, null) : createVNode(MonthTable$1, {
      "cellRender": props2.monthCellRender,
      "contentRender": props2.monthCellContentRender,
      "locale": locale2,
      "onSelect": this.onMonthSelect,
      "prefixCls": "".concat(prefixCls2, "-month-panel"),
      "value": value26,
      "disabledDate": disabledDate
    }, null);
    var children = [header, createVNode("div", {
      "key": "calendar-body",
      "class": "".concat(prefixCls2, "-calendar-body")
    }, [table])];
    var className = ["".concat(prefixCls2, "-full")];
    if (fullscreen) {
      className.push("".concat(prefixCls2, "-fullscreen"));
    }
    return this.renderRoot({
      children,
      class: className.join(" ")
    });
  }
});
var FullCalendar$1 = FullCalendar;
var __rest$G = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Checkbox$1 = defineComponent({
  name: "Checkbox",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2({
    prefixCls: PropsTypes.string,
    name: PropsTypes.string,
    id: PropsTypes.string,
    type: PropsTypes.string,
    defaultChecked: withUndefined(PropsTypes.oneOfType([PropsTypes.number, PropsTypes.looseBool])),
    checked: withUndefined(PropsTypes.oneOfType([PropsTypes.number, PropsTypes.looseBool])),
    disabled: PropsTypes.looseBool,
    tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    readonly: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    value: PropsTypes.any
  }, {
    prefixCls: "rc-checkbox",
    type: "checkbox",
    defaultChecked: false
  }),
  data: function data14() {
    var checked2 = hasProp(this, "checked") ? this.checked : this.defaultChecked;
    return {
      sChecked: checked2
    };
  },
  watch: {
    checked: function checked(val) {
      this.sChecked = val;
    }
  },
  mounted: function mounted9() {
    nextTick(function() {
    });
  },
  methods: {
    focus: function focus7() {
      this.$refs.input.focus();
    },
    blur: function blur6() {
      this.$refs.input.blur();
    },
    handleChange: function handleChange4(e2) {
      var props2 = getOptionProps(this);
      if (props2.disabled) {
        return;
      }
      if (!("checked" in props2)) {
        this.sChecked = e2.target.checked;
      }
      e2.shiftKey = this.eventShiftKey;
      var eventObj = {
        target: _extends$1(_extends$1({}, props2), {
          checked: e2.target.checked
        }),
        stopPropagation: function stopPropagation2() {
          e2.stopPropagation();
        },
        preventDefault: function preventDefault2() {
          e2.preventDefault();
        },
        nativeEvent: e2
      };
      if ("checked" in props2) {
        this.$refs.input.checked = props2.checked;
      }
      this.__emit("change", eventObj);
      this.eventShiftKey = false;
    },
    onClick: function onClick4(e2) {
      this.__emit("click", e2);
      this.eventShiftKey = e2.shiftKey;
    }
  },
  render: function render33() {
    var _classNames;
    var _a = getOptionProps(this), prefixCls2 = _a.prefixCls, name2 = _a.name, id2 = _a.id, type3 = _a.type, disabled = _a.disabled, readonly2 = _a.readonly, tabindex = _a.tabindex, autofocus = _a.autofocus, value26 = _a.value, others = __rest$G(_a, ["prefixCls", "name", "id", "type", "disabled", "readonly", "tabindex", "autofocus", "value"]);
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, onFocus6 = _this$$attrs.onFocus, onBlur7 = _this$$attrs.onBlur;
    var globalProps = Object.keys(_extends$1(_extends$1({}, others), this.$attrs)).reduce(function(prev3, key2) {
      if (key2.substr(0, 5) === "aria-" || key2.substr(0, 5) === "data-" || key2 === "role") {
        prev3[key2] = others[key2];
      }
      return prev3;
    }, {});
    var sChecked = this.sChecked;
    var classString = classNames(prefixCls2, className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-checked"), sChecked), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _classNames));
    var inputProps2 = _extends$1(_extends$1({
      name: name2,
      id: id2,
      type: type3,
      readonly: readonly2,
      disabled,
      tabindex,
      class: "".concat(prefixCls2, "-input"),
      checked: !!sChecked,
      autofocus,
      value: value26
    }, globalProps), {
      onChange: this.handleChange,
      onClick: this.onClick,
      onFocus: onFocus6,
      onBlur: onBlur7
    });
    return createVNode("span", {
      "class": classString
    }, [createVNode("input", _objectSpread2$2({
      "ref": "input"
    }, inputProps2), null), createVNode("span", {
      "class": "".concat(prefixCls2, "-inner")
    }, null)]);
  }
});
var __rest$F = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var radioProps = {
  prefixCls: PropsTypes.string,
  defaultChecked: PropsTypes.looseBool,
  checked: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  isGroup: PropsTypes.looseBool,
  value: PropsTypes.any,
  name: PropsTypes.string,
  id: PropsTypes.string,
  autofocus: PropsTypes.looseBool,
  type: PropsTypes.string.def("radio"),
  onChange: PropsTypes.func,
  onFocus: PropsTypes.func,
  onBlur: PropsTypes.func
};
var Radio = defineComponent({
  name: "ARadio",
  props: radioProps,
  emits: ["update:checked", "update:value", "change", "blur", "focus"],
  setup: function setup56() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      radioGroupContext: inject("radioGroupContext", null)
    };
  },
  methods: {
    focus: function focus8() {
      this.$refs.vcCheckbox.focus();
    },
    blur: function blur7() {
      this.$refs.vcCheckbox.blur();
    },
    handleChange: function handleChange5(event) {
      var targetChecked = event.target.checked;
      this.$emit("update:checked", targetChecked);
      this.$emit("update:value", targetChecked);
      this.$emit("change", event);
    },
    onChange2: function onChange2(e2) {
      this.$emit("change", e2);
      if (this.radioGroupContext && this.radioGroupContext.onRadioChange) {
        this.radioGroupContext.onRadioChange(e2);
      }
    }
  },
  render: function render34() {
    var _classNames;
    var $slots = this.$slots, radioGroup = this.radioGroupContext;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, restProps = __rest$F(props2, ["prefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("radio", customizePrefixCls);
    var rProps = _extends$1({
      prefixCls: prefixCls2
    }, restProps);
    if (radioGroup) {
      rProps.name = radioGroup.name;
      rProps.onChange = this.onChange2;
      rProps.checked = props2.value === radioGroup.stateValue;
      rProps.disabled = props2.disabled || radioGroup.disabled;
    } else {
      rProps.onChange = this.handleChange;
    }
    var wrapperClassString = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-wrapper"), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-wrapper-checked"), rProps.checked), _defineProperty$U(_classNames, "".concat(prefixCls2, "-wrapper-disabled"), rProps.disabled), _classNames));
    return createVNode("label", {
      "class": wrapperClassString
    }, [createVNode(Checkbox$1, _objectSpread2$2(_objectSpread2$2({}, rProps), {}, {
      "ref": "vcCheckbox"
    }), null), $slots.default && createVNode("span", null, [$slots.default()])]);
  }
});
var __unplugin_components_8 = defineComponent({
  name: "ARadioGroup",
  props: {
    prefixCls: PropsTypes.string,
    defaultValue: PropsTypes.any,
    value: PropsTypes.any,
    size: PropsTypes.oneOf(tuple("large", "default", "small")).def("default"),
    options: PropsTypes.array,
    disabled: PropsTypes.looseBool,
    name: PropsTypes.string,
    buttonStyle: PropsTypes.string.def("outline"),
    onChange: PropsTypes.func
  },
  emits: ["update:value", "change"],
  setup: function setup57() {
    return {
      updatingValue: false,
      configProvider: inject("configProvider", defaultConfigProvider),
      radioGroupContext: null
    };
  },
  data: function data15() {
    var value26 = this.value, defaultValue = this.defaultValue;
    return {
      stateValue: value26 === void 0 ? defaultValue : value26
    };
  },
  watch: {
    value: function value7(val) {
      this.updatingValue = false;
      this.stateValue = val;
    }
  },
  created: function created7() {
    this.radioGroupContext = provide("radioGroupContext", this);
  },
  methods: {
    onRadioChange: function onRadioChange(ev) {
      var _this = this;
      var lastValue = this.stateValue;
      var value26 = ev.target.value;
      if (!hasProp(this, "value")) {
        this.stateValue = value26;
      }
      if (!this.updatingValue && value26 !== lastValue) {
        this.updatingValue = true;
        this.$emit("update:value", value26);
        this.$emit("change", ev);
      }
      nextTick(function() {
        _this.updatingValue = false;
      });
    }
  },
  render: function render35() {
    var _this2 = this;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, options2 = props2.options, buttonStyle = props2.buttonStyle;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("radio", customizePrefixCls);
    var groupPrefixCls = "".concat(prefixCls2, "-group");
    var classString = classNames(groupPrefixCls, "".concat(groupPrefixCls, "-").concat(buttonStyle), _defineProperty$U({}, "".concat(groupPrefixCls, "-").concat(props2.size), props2.size));
    var children = filterEmpty(getSlot(this));
    if (options2 && options2.length > 0) {
      children = options2.map(function(option) {
        if (typeof option === "string") {
          return createVNode(Radio, {
            "key": option,
            "prefixCls": prefixCls2,
            "disabled": props2.disabled,
            "value": option,
            "checked": _this2.stateValue === option
          }, {
            default: function _default8() {
              return [option];
            }
          });
        }
        return createVNode(Radio, {
          "key": "radio-group-value-options-".concat(option.value),
          "prefixCls": prefixCls2,
          "disabled": option.disabled || props2.disabled,
          "value": option.value,
          "checked": _this2.stateValue === option.value
        }, {
          default: function _default8() {
            return [option.label];
          }
        });
      });
    }
    return createVNode("div", {
      "class": classString
    }, [children]);
  }
});
var __rest$E = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var __unplugin_components_7 = defineComponent({
  name: "ARadioButton",
  props: _extends$1({}, radioProps),
  setup: function setup58() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      radioGroupContext: inject("radioGroupContext", {})
    };
  },
  render: function render36() {
    var _this = this;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, otherProps = __rest$E(props2, ["prefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("radio-button", customizePrefixCls);
    var rProps = _extends$1({
      prefixCls: prefixCls2
    }, otherProps);
    if (this.radioGroupContext) {
      rProps.onChange = this.radioGroupContext.onRadioChange;
      rProps.checked = props2.value === this.radioGroupContext.stateValue;
      rProps.disabled = props2.disabled || this.radioGroupContext.disabled;
    }
    return createVNode(Radio, rProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
Radio.Group = __unplugin_components_8;
Radio.Button = __unplugin_components_7;
Radio.install = function(app) {
  app.component(Radio.name, Radio);
  app.component(Radio.Group.name, Radio.Group);
  app.component(Radio.Button.name, Radio.Button);
  return app;
};
function getMonthsLocale(value26) {
  var current2 = value26.clone();
  var localeData2 = value26.localeData();
  var months3 = [];
  for (var i2 = 0; i2 < 12; i2++) {
    current2.month(i2);
    months3.push(localeData2.monthsShort(current2));
  }
  return months3;
}
var HeaderProps = {
  prefixCls: PropsTypes.string,
  locale: PropsTypes.any,
  fullscreen: PropsTypes.looseBool,
  yearSelectOffset: PropsTypes.number,
  yearSelectTotal: PropsTypes.number,
  type: PropsTypes.string,
  value: {
    type: Object
  },
  validRange: {
    type: Array
  },
  headerRender: PropsTypes.func,
  onValueChange: PropsTypes.func,
  onTypeChange: PropsTypes.func
};
var Header$3 = defineComponent({
  name: "CalendarHeader",
  inheritAttrs: false,
  props: _extends$1(_extends$1({}, HeaderProps), {
    yearSelectOffset: PropsTypes.number.def(10),
    yearSelectTotal: PropsTypes.number.def(20)
  }),
  setup: function setup59() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      calendarHeaderNode: void 0
    };
  },
  methods: {
    getYearSelectElement: function getYearSelectElement(prefixCls2, year) {
      var _this = this;
      var yearSelectOffset = this.yearSelectOffset, yearSelectTotal = this.yearSelectTotal, _this$locale = this.locale, locale2 = _this$locale === void 0 ? {} : _this$locale, fullscreen = this.fullscreen, validRange = this.validRange;
      var start = year - yearSelectOffset;
      var end = start + yearSelectTotal;
      if (validRange) {
        start = validRange[0].get("year");
        end = validRange[1].get("year") + 1;
      }
      var suffix = locale2 && locale2.year === "\u5E74" ? "\u5E74" : "";
      var options2 = [];
      for (var index2 = start; index2 < end; index2++) {
        options2.push({
          label: "".concat(index2).concat(suffix),
          value: index2
        });
      }
      return createVNode(VcSelect, {
        "size": fullscreen ? void 0 : "small",
        "class": "".concat(prefixCls2, "-year-select"),
        "onChange": this.onYearChange,
        "value": year,
        "options": options2,
        "getPopupContainer": function getPopupContainer() {
          return _this.calendarHeaderNode;
        }
      }, null);
    },
    getMonthSelectElement: function getMonthSelectElement(prefixCls2, month, months3) {
      var _this2 = this;
      var fullscreen = this.fullscreen, validRange = this.validRange, value26 = this.value;
      var start = 0;
      var end = 11;
      if (validRange) {
        var _validRange = _slicedToArray$2(validRange, 2), rangeStart = _validRange[0], rangeEnd = _validRange[1];
        var currentYear = value26.get("year");
        if (rangeEnd.get("year") === currentYear) {
          end = rangeEnd.get("month") + 1;
        }
        if (rangeStart.get("year") === currentYear) {
          start = rangeStart.get("month");
        }
      }
      var options2 = [];
      for (var index2 = start; index2 <= end; index2 += 1) {
        options2.push({
          label: months3[index2],
          value: index2
        });
      }
      return createVNode(VcSelect, {
        "size": fullscreen ? void 0 : "small",
        "class": "".concat(prefixCls2, "-month-select"),
        "value": month,
        "options": options2,
        "onChange": this.onMonthChange,
        "getPopupContainer": function getPopupContainer() {
          return _this2.calendarHeaderNode;
        }
      }, null);
    },
    onYearChange: function onYearChange2(year) {
      var value26 = this.value, validRange = this.validRange;
      var newValue = value26.clone();
      newValue.year(parseInt(year, 10));
      if (validRange) {
        var _validRange2 = _slicedToArray$2(validRange, 2), start = _validRange2[0], end = _validRange2[1];
        var newYear = newValue.get("year");
        var newMonth = newValue.get("month");
        if (newYear === end.get("year") && newMonth > end.get("month")) {
          newValue.month(end.get("month"));
        }
        if (newYear === start.get("year") && newMonth < start.get("month")) {
          newValue.month(start.get("month"));
        }
      }
      this.$emit("valueChange", newValue);
    },
    onMonthChange: function onMonthChange2(month) {
      var newValue = this.value.clone();
      newValue.month(parseInt(month, 10));
      this.$emit("valueChange", newValue);
    },
    onInternalTypeChange: function onInternalTypeChange(e2) {
      this.triggerTypeChange(e2.target.value);
    },
    triggerTypeChange: function triggerTypeChange(val) {
      this.$emit("typeChange", val);
    },
    getMonthYearSelections: function getMonthYearSelections(getPrefixCls2) {
      var _this$$props = this.$props, customizePrefixCls = _this$$props.prefixCls, type3 = _this$$props.type, value26 = _this$$props.value;
      var prefixCls2 = getPrefixCls2("fullcalendar", customizePrefixCls);
      var yearReactNode = this.getYearSelectElement(prefixCls2, value26.year());
      var monthReactNode = type3 === "month" ? this.getMonthSelectElement(prefixCls2, value26.month(), getMonthsLocale(value26)) : null;
      return {
        yearReactNode,
        monthReactNode
      };
    },
    getTypeSwitch: function getTypeSwitch() {
      var _this$$props2 = this.$props, _this$$props2$locale = _this$$props2.locale, locale2 = _this$$props2$locale === void 0 ? {} : _this$$props2$locale, type3 = _this$$props2.type, fullscreen = _this$$props2.fullscreen;
      var size2 = fullscreen ? "default" : "small";
      return createVNode(__unplugin_components_8, {
        "onChange": this.onInternalTypeChange,
        "value": type3,
        "size": size2
      }, {
        default: function _default8() {
          return [createVNode(__unplugin_components_7, {
            "value": "month"
          }, {
            default: function _default9() {
              return [locale2.month];
            }
          }), createVNode(__unplugin_components_7, {
            "value": "year"
          }, {
            default: function _default9() {
              return [locale2.year];
            }
          })];
        }
      });
    },
    triggerValueChange: function triggerValueChange() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.$emit.apply(this, ["valueChange"].concat(args));
    },
    saveCalendarHeaderNode: function saveCalendarHeaderNode(node) {
      this.calendarHeaderNode = node;
    },
    headerRenderCustom: function headerRenderCustom(headerRender) {
      var _this$$props3 = this.$props, type3 = _this$$props3.type, value26 = _this$$props3.value;
      return headerRender({
        value: value26,
        type: type3 || "month",
        onChange: this.triggerValueChange,
        onTypeChange: this.triggerTypeChange
      });
    }
  },
  render: function render37() {
    var customizePrefixCls = this.prefixCls, headerRender = this.headerRender;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("fullcalendar", customizePrefixCls);
    var typeSwitch = this.getTypeSwitch();
    var _this$getMonthYearSel = this.getMonthYearSelections(getPrefixCls2), yearReactNode = _this$getMonthYearSel.yearReactNode, monthReactNode = _this$getMonthYearSel.monthReactNode;
    return headerRender ? this.headerRenderCustom(headerRender) : createVNode("div", {
      "class": "".concat(prefixCls2, "-header"),
      "ref": this.saveCalendarHeaderNode
    }, [yearReactNode, monthReactNode, typeSwitch]);
  }
});
function isNil(value26) {
  return value26 == null;
}
var TimeType$1 = {
  validator: function validator2(value26) {
    return typeof value26 === "string" || isNil(value26) || hooks.isMoment(value26);
  }
};
var TimeOrTimesType = {
  validator: function validator3(value26) {
    if (Array.isArray(value26)) {
      return value26.length === 0 || value26.findIndex(function(val) {
        return typeof val !== "string";
      }) === -1 || value26.findIndex(function(val) {
        return !isNil(val) && !hooks.isMoment(val);
      }) === -1;
    } else {
      return typeof value26 === "string" || isNil(value26) || hooks.isMoment(value26);
    }
  }
};
function checkValidate(componentName, value26, propName, valueFormat) {
  var values = Array.isArray(value26) ? value26 : [value26];
  values.forEach(function(val) {
    if (!val)
      return;
    valueFormat && warning$4(interopDefault(hooks)(val, valueFormat).isValid(), componentName, "When set `valueFormat`, `".concat(propName, "` should provides invalidate string time. "));
    !valueFormat && warning$4(interopDefault(hooks).isMoment(val) && val.isValid(), componentName, "`".concat(propName, "` provides invalidate moment time. If you want to set empty value, use `null` instead."));
  });
}
var stringToMoment = function stringToMoment2(value26, valueFormat) {
  if (Array.isArray(value26)) {
    return value26.map(function(val) {
      return typeof val === "string" && val ? interopDefault(hooks)(val, valueFormat) : val || null;
    });
  } else {
    return typeof value26 === "string" && value26 ? interopDefault(hooks)(value26, valueFormat) : value26 || null;
  }
};
var momentToString = function momentToString2(value26, valueFormat) {
  if (Array.isArray(value26)) {
    return value26.map(function(val) {
      return interopDefault(hooks).isMoment(val) ? val.format(valueFormat) : val;
    });
  } else {
    return interopDefault(hooks).isMoment(value26) ? value26.format(valueFormat) : value26;
  }
};
function noop$B() {
  return null;
}
function zerofixed(v2) {
  if (v2 < 10) {
    return "0".concat(v2);
  }
  return "".concat(v2);
}
var CalendarModeTypes = tuple("month", "year");
var CalendarProps = {
  monthCellRender: PropsTypes.func,
  dateCellRender: PropsTypes.func,
  monthFullCellRender: PropsTypes.func,
  dateFullCellRender: PropsTypes.func,
  prefixCls: PropsTypes.string,
  value: TimeType$1,
  defaultValue: TimeType$1,
  mode: PropsTypes.oneOf(CalendarModeTypes),
  fullscreen: PropsTypes.looseBool.def(true),
  locale: PropsTypes.object.def({}),
  disabledDate: PropsTypes.func,
  validRange: {
    type: Array
  },
  headerRender: PropsTypes.func,
  valueFormat: PropsTypes.string,
  onPanelChange: PropsTypes.func,
  onSelect: PropsTypes.func,
  onChange: PropsTypes.func,
  "onUpdate:value": PropsTypes.func
};
var Calendar$2 = defineComponent({
  name: "ACalendar",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: CalendarProps,
  setup: function setup60() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      sPrefixCls: void 0
    };
  },
  data: function data16() {
    var value26 = this.value, defaultValue = this.defaultValue, valueFormat = this.valueFormat;
    var sValue = value26 || defaultValue || interopDefault(hooks)();
    checkValidate("Calendar", defaultValue, "defaultValue", valueFormat);
    checkValidate("Calendar", value26, "value", valueFormat);
    return {
      sValue: stringToMoment(sValue, valueFormat),
      sMode: this.mode || "month"
    };
  },
  watch: {
    value: function value8(val) {
      checkValidate("Calendar", val, "value", this.valueFormat);
      this.setState({
        sValue: stringToMoment(val, this.valueFormat)
      });
    },
    mode: function mode(val) {
      this.setState({
        sMode: val
      });
    }
  },
  methods: {
    onHeaderValueChange: function onHeaderValueChange(value26) {
      this.setValue(value26, "changePanel");
    },
    onHeaderTypeChange: function onHeaderTypeChange(mode4) {
      this.sMode = mode4;
      this.triggerPanelChange(this.sValue, mode4);
    },
    triggerPanelChange: function triggerPanelChange(value26, mode4) {
      var val = this.valueFormat ? momentToString(value26, this.valueFormat) : value26;
      if (value26 !== this.sValue) {
        this.$emit("update:value", val);
        this.$emit("change", val);
      }
      this.$emit("panelChange", val, mode4);
    },
    triggerSelect: function triggerSelect(value26) {
      this.setValue(value26, "select");
    },
    setValue: function setValue4(value26, way) {
      var prevValue = this.value ? stringToMoment(this.value, this.valueFormat) : this.sValue;
      var mode4 = this.sMode, valueFormat = this.valueFormat;
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      if (way === "select") {
        var val = valueFormat ? momentToString(value26, valueFormat) : value26;
        if (prevValue && prevValue.month() !== value26.month()) {
          this.triggerPanelChange(value26, mode4);
        } else {
          this.$emit("update:value", val);
        }
        this.$emit("select", val);
      } else if (way === "changePanel") {
        this.triggerPanelChange(value26, mode4);
      }
    },
    getDateRange: function getDateRange(validRange, disabledDate) {
      return function(current2) {
        if (!current2) {
          return false;
        }
        var _validRange = _slicedToArray$2(validRange, 2), startDate = _validRange[0], endDate = _validRange[1];
        var inRange = !current2.isBetween(startDate, endDate, "days", "[]");
        if (disabledDate) {
          return disabledDate(current2) || inRange;
        }
        return inRange;
      };
    },
    getDefaultLocale: function getDefaultLocale() {
      var result = _extends$1(_extends$1({}, enUS), this.$props.locale);
      result.lang = _extends$1(_extends$1({}, result.lang), (this.$props.locale || {}).lang);
      return result;
    },
    monthCellRender2: function monthCellRender2(_ref) {
      var value26 = _ref.current;
      var sPrefixCls = this.sPrefixCls, $slots = this.$slots;
      var monthCellRender = this.monthCellRender || $slots.monthCellRender || noop$B;
      return createVNode("div", {
        "class": "".concat(sPrefixCls, "-month")
      }, [createVNode("div", {
        "class": "".concat(sPrefixCls, "-value")
      }, [value26.localeData().monthsShort(value26)]), createVNode("div", {
        "class": "".concat(sPrefixCls, "-content")
      }, [monthCellRender({
        current: value26
      })])]);
    },
    dateCellRender2: function dateCellRender2(_ref2) {
      var value26 = _ref2.current;
      var sPrefixCls = this.sPrefixCls, $slots = this.$slots;
      var dateCellRender = this.dateCellRender || $slots.dateCellRender || noop$B;
      return createVNode("div", {
        "class": "".concat(sPrefixCls, "-date")
      }, [createVNode("div", {
        "class": "".concat(sPrefixCls, "-value")
      }, [zerofixed(value26.date())]), createVNode("div", {
        "class": "".concat(sPrefixCls, "-content")
      }, [dateCellRender({
        current: value26
      })])]);
    },
    renderCalendar: function renderCalendar(locale2, localeCode) {
      var props2 = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs);
      var value26 = this.sValue, mode4 = this.sMode, $slots = this.$slots;
      if (value26 && localeCode) {
        value26.locale(localeCode);
      }
      var customizePrefixCls = props2.prefixCls, fullscreen = props2.fullscreen, dateFullCellRender = props2.dateFullCellRender, monthFullCellRender = props2.monthFullCellRender, className = props2.class, style3 = props2.style;
      var headerRender = this.headerRender || $slots.headerRender;
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("fullcalendar", customizePrefixCls);
      this.sPrefixCls = prefixCls2;
      var cls = className || "";
      if (fullscreen) {
        cls += " ".concat(prefixCls2, "-fullscreen");
      }
      var monthCellRender = monthFullCellRender || $slots.monthFullCellRender || this.monthCellRender2;
      var dateCellRender = dateFullCellRender || $slots.dateFullCellRender || this.dateCellRender2;
      var disabledDate = props2.disabledDate;
      if (props2.validRange) {
        disabledDate = this.getDateRange(props2.validRange, disabledDate);
      }
      var fullCalendarProps = _extends$1(_extends$1(_extends$1({}, props2), this.$attrs), {
        Select: {},
        locale: locale2.lang,
        type: mode4 === "year" ? "month" : "date",
        prefixCls: prefixCls2,
        showHeader: false,
        value: value26,
        monthCellRender,
        dateCellRender,
        disabledDate,
        onSelect: this.triggerSelect
      });
      return createVNode("div", {
        "class": cls,
        "style": style3
      }, [createVNode(Header$3, {
        "fullscreen": fullscreen,
        "type": mode4,
        "headerRender": headerRender,
        "value": value26,
        "locale": locale2.lang,
        "prefixCls": prefixCls2,
        "onTypeChange": this.onHeaderTypeChange,
        "onValueChange": this.onHeaderValueChange,
        "validRange": props2.validRange
      }, null), createVNode(FullCalendar$1, fullCalendarProps, null)]);
    }
  },
  render: function render38() {
    return createVNode(LocaleReceiver, {
      "componentName": "Calendar",
      "defaultLocale": this.getDefaultLocale,
      "children": this.renderCalendar
    }, null);
  }
});
var index$z = withInstall(Calendar$2);
var PlusOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z" } }, { "tag": "path", "attrs": { "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z" } }] }, "name": "plus", "theme": "outlined" };
var PlusOutlinedSvg = PlusOutlined$2;
function _objectSpread$w(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$x(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$x(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var PlusOutlined = function PlusOutlined2(props2, context2) {
  var p2 = _objectSpread$w({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": PlusOutlinedSvg
  }), null);
};
PlusOutlined.displayName = "PlusOutlined";
PlusOutlined.inheritAttrs = false;
var PlusOutlined$1 = PlusOutlined;
var KeyCode = {
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
};
var sentinelStyle = {
  width: 0,
  height: 0,
  overflow: "hidden",
  position: "absolute"
};
var Sentinel = {
  name: "Sentinel",
  props: {
    setRef: PropsTypes.func,
    prevElement: PropsTypes.any,
    nextElement: PropsTypes.any
  },
  methods: {
    onKeyDown: function onKeyDown(_ref) {
      var target = _ref.target, which = _ref.which, shiftKey = _ref.shiftKey;
      var _this$$props = this.$props, nextElement = _this$$props.nextElement, prevElement = _this$$props.prevElement;
      if (which !== KeyCode$2.TAB || document.activeElement !== target)
        return;
      if (!shiftKey && nextElement) {
        nextElement.focus();
      }
      if (shiftKey && prevElement) {
        prevElement.focus();
      }
    }
  },
  render: function render39() {
    var setRef2 = this.$props.setRef;
    return createVNode("div", {
      "tabindex": 0,
      "ref": setRef2,
      "style": sentinelStyle,
      "onKeydown": this.onKeyDown,
      "role": "presentation"
    }, [getSlot(this)]);
  }
};
function toArray$4(children) {
  var c2 = [];
  children.forEach(function(child) {
    if (isVNode(child)) {
      c2.push(child);
    }
  });
  return c2;
}
function getActiveIndex(children, activeKey2) {
  var c2 = toArray$4(children);
  for (var i2 = 0; i2 < c2.length; i2++) {
    if (c2[i2].key === activeKey2) {
      return i2;
    }
  }
  return -1;
}
function setTransform(style3, v2) {
  style3.transform = v2;
  style3.webkitTransform = v2;
  style3.mozTransform = v2;
}
function isTransform3dSupported(style3) {
  return ("transform" in style3 || "webkitTransform" in style3 || "MozTransform" in style3) && window.atob;
}
function getTransformPropValue(v2) {
  return {
    transform: v2,
    WebkitTransform: v2,
    MozTransform: v2
  };
}
function isVertical(tabBarPosition2) {
  return tabBarPosition2 === "left" || tabBarPosition2 === "right";
}
function getTransformByIndex(index2, tabBarPosition2) {
  var direction = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "ltr";
  var translate = isVertical(tabBarPosition2) ? "translateY" : "translateX";
  if (!isVertical(tabBarPosition2) && direction === "rtl") {
    return "".concat(translate, "(").concat(index2 * 100, "%) translateZ(0)");
  }
  return "".concat(translate, "(").concat(-index2 * 100, "%) translateZ(0)");
}
function getMarginStyle(index2, tabBarPosition2) {
  var marginDirection = isVertical(tabBarPosition2) ? "marginTop" : "marginLeft";
  return _defineProperty$U({}, marginDirection, "".concat(-index2 * 100, "%"));
}
function getStyle(el, property2) {
  return +window.getComputedStyle(el).getPropertyValue(property2).replace("px", "");
}
function getDataAttr(props2) {
  return Object.keys(props2).reduce(function(prev3, key2) {
    if (key2.substr(0, 5) === "aria-" || key2.substr(0, 5) === "data-" || key2 === "role") {
      prev3[key2] = props2[key2];
    }
    return prev3;
  }, {});
}
function toNum(style3, property2) {
  return +style3.getPropertyValue(property2).replace("px", "");
}
function getTypeValue(start, current2, end, tabNode, wrapperNode) {
  var total2 = getStyle(wrapperNode, "padding-".concat(start));
  if (!tabNode || !tabNode.parentNode) {
    return total2;
  }
  var childNodes = tabNode.parentNode.childNodes;
  Array.prototype.some.call(childNodes, function(node) {
    if (!node.tagName) {
      return false;
    }
    var style3 = window.getComputedStyle(node);
    if (node !== tabNode) {
      total2 += toNum(style3, "margin-".concat(start));
      total2 += node[current2];
      total2 += toNum(style3, "margin-".concat(end));
      if (style3.boxSizing === "content-box") {
        total2 += toNum(style3, "border-".concat(start, "-width")) + toNum(style3, "border-".concat(end, "-width"));
      }
      return false;
    }
    total2 += toNum(style3, "margin-".concat(start));
    return true;
  });
  return total2;
}
function getLeft(tabNode, wrapperNode) {
  return getTypeValue("left", "offsetWidth", "right", tabNode, wrapperNode);
}
function getTop(tabNode, wrapperNode) {
  return getTypeValue("top", "offsetHeight", "bottom", tabNode, wrapperNode);
}
var __rest$D = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function getDefaultActiveKey(props2) {
  var activeKey2;
  var children = props2.children;
  children.forEach(function(child) {
    if (child && !isValid$4(activeKey2) && !child.disabled) {
      activeKey2 = child.key;
    }
  });
  return activeKey2;
}
function activeKeyIsValid(props2, key2) {
  var children = props2.children;
  var keys2 = children.map(function(child) {
    return child && child.key;
  });
  return keys2.indexOf(key2) >= 0;
}
var Tabs$1 = defineComponent({
  name: "Tabs",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    destroyInactiveTabPane: PropsTypes.looseBool,
    renderTabBar: PropsTypes.func.isRequired,
    renderTabContent: PropsTypes.func.isRequired,
    navWrapper: PropsTypes.func.def(function(arg) {
      return arg;
    }),
    children: PropsTypes.any.def([]),
    prefixCls: PropsTypes.string.def("ant-tabs"),
    tabBarPosition: PropsTypes.string.def("top"),
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    defaultActiveKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    direction: PropsTypes.string.def("ltr"),
    tabBarGutter: PropsTypes.number
  },
  setup: function setup61(props2) {
    var activeKey2;
    if (props2.activeKey !== void 0) {
      activeKey2 = props2.activeKey;
    } else if (props2.defaultActiveKey !== void 0) {
      activeKey2 = props2.defaultActiveKey;
    } else {
      activeKey2 = getDefaultActiveKey(props2);
    }
    var state2 = reactive({
      _activeKey: activeKey2
    });
    watchEffect(function() {
      if (props2.activeKey !== void 0) {
        state2._activeKey = props2.activeKey;
      } else if (!activeKeyIsValid(props2, state2._activeKey)) {
        state2._activeKey = getDefaultActiveKey(props2);
      }
    }, {
      flush: "sync"
    });
    return {
      state: state2
    };
  },
  created: function created8() {
    this.panelSentinelStart = void 0;
    this.panelSentinelEnd = void 0;
    this.sentinelStart = void 0;
    this.sentinelEnd = void 0;
    provide("sentinelContext", this);
  },
  beforeUnmount: function beforeUnmount7() {
    this.destroy = true;
    cancelAnimationFrame(this.sentinelId);
  },
  methods: {
    onTabClick: function onTabClick(activeKey2, e2) {
      if (this.tabBar.props && this.tabBar.props.onTabClick) {
        this.tabBar.props.onTabClick(activeKey2, e2);
      }
      this.setActiveKey(activeKey2);
    },
    onNavKeyDown: function onNavKeyDown(e2) {
      var eventKeyCode = e2.keyCode;
      if (eventKeyCode === KeyCode.RIGHT || eventKeyCode === KeyCode.DOWN) {
        e2.preventDefault();
        var nextKey = this.getNextActiveKey(true);
        this.onTabClick(nextKey);
      } else if (eventKeyCode === KeyCode.LEFT || eventKeyCode === KeyCode.UP) {
        e2.preventDefault();
        var previousKey = this.getNextActiveKey(false);
        this.onTabClick(previousKey);
      }
    },
    onScroll: function onScroll(_ref) {
      var target = _ref.target, currentTarget = _ref.currentTarget;
      if (target === currentTarget && target.scrollLeft > 0) {
        target.scrollLeft = 0;
      }
    },
    setSentinelStart: function setSentinelStart(node) {
      this.sentinelStart = node;
    },
    setSentinelEnd: function setSentinelEnd(node) {
      this.sentinelEnd = node;
    },
    setPanelSentinelStart: function setPanelSentinelStart(node) {
      if (node !== this.panelSentinelStart) {
        this.updateSentinelContext();
      }
      this.panelSentinelStart = node;
    },
    setPanelSentinelEnd: function setPanelSentinelEnd(node) {
      if (node !== this.panelSentinelEnd) {
        this.updateSentinelContext();
      }
      this.panelSentinelEnd = node;
    },
    setActiveKey: function setActiveKey(activeKey2) {
      if (this.state._activeKey !== activeKey2) {
        var props2 = this.$props;
        if (props2.activeKey === void 0) {
          this.state._activeKey = activeKey2;
        }
        this.__emit("update:activeKey", activeKey2);
        this.__emit("change", activeKey2);
      }
    },
    getNextActiveKey: function getNextActiveKey(next3) {
      var activeKey2 = this.state._activeKey;
      var children = [];
      this.$props.children.forEach(function(c2) {
        var _a, _b;
        if (c2 && !((_a = c2.props) === null || _a === void 0 ? void 0 : _a.disabled) && ((_b = c2.props) === null || _b === void 0 ? void 0 : _b.disabled) !== "") {
          if (next3) {
            children.push(c2);
          } else {
            children.unshift(c2);
          }
        }
      });
      var length = children.length;
      var ret = length && children[0].key;
      children.forEach(function(child, i2) {
        if (child.key === activeKey2) {
          if (i2 === length - 1) {
            ret = children[0].key;
          } else {
            ret = children[i2 + 1].key;
          }
        }
      });
      return ret;
    },
    updateSentinelContext: function updateSentinelContext() {
      var _this = this;
      if (this.destroy)
        return;
      cancelAnimationFrame(this.sentinelId);
      this.sentinelId = requestAnimationFrame(function() {
        if (_this.destroy)
          return;
        _this.$forceUpdate();
      });
    }
  },
  render: function render40() {
    var _cls;
    var props2 = this.$props;
    var prefixCls2 = props2.prefixCls, navWrapper = props2.navWrapper, tabBarPosition2 = props2.tabBarPosition, renderTabContent = props2.renderTabContent, renderTabBar = props2.renderTabBar, destroyInactiveTabPane = props2.destroyInactiveTabPane, direction = props2.direction, tabBarGutter = props2.tabBarGutter;
    var _a = this.$attrs, className = _a.class;
    _a.onChange;
    var style3 = _a.style, restProps = __rest$D(_a, ["class", "onChange", "style"]);
    var cls = (_cls = {}, _defineProperty$U(_cls, className, className), _defineProperty$U(_cls, prefixCls2, 1), _defineProperty$U(_cls, "".concat(prefixCls2, "-").concat(tabBarPosition2), 1), _defineProperty$U(_cls, "".concat(prefixCls2, "-rtl"), direction === "rtl"), _cls);
    this.tabBar = renderTabBar();
    var tabBar = cloneElement(this.tabBar, {
      prefixCls: prefixCls2,
      navWrapper,
      tabBarPosition: tabBarPosition2,
      panels: props2.children,
      activeKey: this.state._activeKey,
      direction,
      tabBarGutter,
      onKeydown: this.onNavKeyDown,
      onTabClick: this.onTabClick,
      key: "tabBar"
    });
    var tabContent = cloneElement(renderTabContent(), {
      prefixCls: prefixCls2,
      tabBarPosition: tabBarPosition2,
      activeKey: this.state._activeKey,
      destroyInactiveTabPane,
      direction,
      onChange: this.setActiveKey,
      children: props2.children,
      key: "tabContent"
    });
    var sentinelStart = createVNode(Sentinel, {
      "key": "sentinelStart",
      "setRef": this.setSentinelStart,
      "nextElement": this.panelSentinelStart
    }, null);
    var sentinelEnd = createVNode(Sentinel, {
      "key": "sentinelEnd",
      "setRef": this.setSentinelEnd,
      "prevElement": this.panelSentinelEnd
    }, null);
    var contents = [];
    if (tabBarPosition2 === "bottom") {
      contents.push(sentinelStart, tabContent, sentinelEnd, tabBar);
    } else {
      contents.push(tabBar, sentinelStart, tabContent, sentinelEnd);
    }
    var p2 = _extends$1(_extends$1({}, getDataAttr(restProps)), {
      style: style3,
      onScroll: this.onScroll,
      class: cls
    });
    return createVNode("div", p2, [contents]);
  }
});
var TabPane$1 = defineComponent({
  name: "TabPane",
  props: {
    active: PropsTypes.looseBool,
    destroyInactiveTabPane: PropsTypes.looseBool,
    forceRender: PropsTypes.looseBool,
    placeholder: PropsTypes.any,
    rootPrefixCls: PropsTypes.string,
    tab: PropsTypes.any,
    closable: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool
  },
  setup: function setup62() {
    return {
      isActived: void 0,
      sentinelContext: inject("sentinelContext", {})
    };
  },
  render: function render41() {
    var _cls;
    var _this$$props = this.$props, destroyInactiveTabPane = _this$$props.destroyInactiveTabPane, active = _this$$props.active, forceRender = _this$$props.forceRender, rootPrefixCls = _this$$props.rootPrefixCls;
    var children = getSlot(this);
    var placeholder = getComponent(this, "placeholder");
    this.isActived = this.isActived || active;
    var prefixCls2 = "".concat(rootPrefixCls, "-tabpane");
    var cls = (_cls = {}, _defineProperty$U(_cls, prefixCls2, 1), _defineProperty$U(_cls, "".concat(prefixCls2, "-inactive"), !active), _defineProperty$U(_cls, "".concat(prefixCls2, "-active"), active), _cls);
    var isRender = destroyInactiveTabPane ? active : this.isActived;
    var shouldRender = isRender || forceRender;
    var _this$sentinelContext = this.sentinelContext, sentinelStart = _this$sentinelContext.sentinelStart, sentinelEnd = _this$sentinelContext.sentinelEnd, setPanelSentinelStart2 = _this$sentinelContext.setPanelSentinelStart, setPanelSentinelEnd2 = _this$sentinelContext.setPanelSentinelEnd;
    var panelSentinelStart;
    var panelSentinelEnd;
    if (active && shouldRender) {
      panelSentinelStart = createVNode(Sentinel, {
        "setRef": setPanelSentinelStart2,
        "prevElement": sentinelStart
      }, null);
      panelSentinelEnd = createVNode(Sentinel, {
        "setRef": setPanelSentinelEnd2,
        "nextElement": sentinelEnd
      }, null);
    }
    return createVNode("div", {
      "class": cls,
      "role": "tabpanel",
      "aria-hidden": active ? "false" : "true"
    }, [panelSentinelStart, shouldRender ? children : placeholder, panelSentinelEnd]);
  }
});
var TabContent = defineComponent({
  name: "TabContent",
  inheritAttrs: false,
  props: {
    animated: PropsTypes.looseBool.def(true),
    animatedWithMargin: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("ant-tabs"),
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    tabBarPosition: PropsTypes.string,
    direction: PropsTypes.string,
    destroyInactiveTabPane: PropsTypes.looseBool,
    children: PropsTypes.any
  },
  computed: {
    classes: function classes3() {
      var _ref;
      var animated = this.animated, prefixCls2 = this.prefixCls;
      var className = this.$attrs.class;
      return _ref = {}, _defineProperty$U(_ref, className, !!className), _defineProperty$U(_ref, "".concat(prefixCls2, "-content"), true), _defineProperty$U(_ref, animated ? "".concat(prefixCls2, "-content-animated") : "".concat(prefixCls2, "-content-no-animated"), true), _ref;
    }
  },
  methods: {
    getTabPanes: function getTabPanes(children) {
      var props2 = this.$props;
      var activeKey2 = props2.activeKey;
      var newChildren = [];
      children.forEach(function(child) {
        if (!child) {
          return;
        }
        var key2 = child.key;
        var active = activeKey2 === key2;
        newChildren.push(cloneElement(child, {
          active,
          destroyInactiveTabPane: props2.destroyInactiveTabPane,
          rootPrefixCls: props2.prefixCls
        }));
      });
      return newChildren;
    }
  },
  render: function render42() {
    var activeKey2 = this.activeKey, tabBarPosition2 = this.tabBarPosition, animated = this.animated, animatedWithMargin = this.animatedWithMargin, direction = this.direction, classes4 = this.classes, children = this.children;
    var style3 = {};
    if (animated && children) {
      var activeIndex = getActiveIndex(children, activeKey2);
      if (activeIndex !== -1) {
        var animatedStyle = animatedWithMargin ? getMarginStyle(activeIndex, tabBarPosition2) : getTransformPropValue(getTransformByIndex(activeIndex, tabBarPosition2, direction));
        style3 = _extends$1(_extends$1({}, this.$attrs.style), animatedStyle);
      } else {
        style3 = _extends$1(_extends$1({}, this.$attrs.style), {
          display: "none"
        });
      }
    }
    return createVNode("div", {
      "class": classes4,
      "style": style3
    }, [this.getTabPanes(children || [])]);
  }
});
var UpOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M890.5 755.3L537.9 269.2c-12.8-17.6-39-17.6-51.7 0L133.5 755.3A8 8 0 00140 768h75c5.1 0 9.9-2.5 12.9-6.6L512 369.8l284.1 391.6c3 4.1 7.8 6.6 12.9 6.6h75c6.5 0 10.3-7.4 6.5-12.7z" } }] }, "name": "up", "theme": "outlined" };
var UpOutlinedSvg = UpOutlined$2;
function _objectSpread$v(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$w(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$w(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var UpOutlined = function UpOutlined2(props2, context2) {
  var p2 = _objectSpread$v({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": UpOutlinedSvg
  }), null);
};
UpOutlined.displayName = "UpOutlined";
UpOutlined.inheritAttrs = false;
var UpOutlined$1 = UpOutlined;
var LeftOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z" } }] }, "name": "left", "theme": "outlined" };
var LeftOutlinedSvg = LeftOutlined$2;
function _objectSpread$u(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$v(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$v(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var LeftOutlined = function LeftOutlined2(props2, context2) {
  var p2 = _objectSpread$u({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": LeftOutlinedSvg
  }), null);
};
LeftOutlined.displayName = "LeftOutlined";
LeftOutlined.inheritAttrs = false;
var LeftOutlined$1 = LeftOutlined;
function componentDidUpdate(component, init) {
  var _component$$props = component.$props, _component$$props$sty = _component$$props.styles, styles = _component$$props$sty === void 0 ? {} : _component$$props$sty, panels = _component$$props.panels, activeKey2 = _component$$props.activeKey, direction = _component$$props.direction;
  var rootNode = component.getRef("root");
  var wrapNode = component.getRef("nav") || rootNode;
  var inkBarNode = component.getRef("inkBar");
  var activeTab = component.getRef("activeTab");
  var inkBarNodeStyle = inkBarNode.style;
  var tabBarPosition2 = component.$props.tabBarPosition;
  var activeIndex = getActiveIndex(panels, activeKey2);
  if (init) {
    inkBarNodeStyle.display = "none";
  }
  if (activeTab) {
    var tabNode = activeTab;
    var transformSupported = isTransform3dSupported(inkBarNodeStyle);
    setTransform(inkBarNodeStyle, "");
    inkBarNodeStyle.width = "";
    inkBarNodeStyle.height = "";
    inkBarNodeStyle.left = "";
    inkBarNodeStyle.top = "";
    inkBarNodeStyle.bottom = "";
    inkBarNodeStyle.right = "";
    if (tabBarPosition2 === "top" || tabBarPosition2 === "bottom") {
      var left = getLeft(tabNode, wrapNode);
      var width = tabNode.offsetWidth;
      if (width === rootNode.offsetWidth) {
        width = 0;
      } else if (styles.inkBar && styles.inkBar.width !== void 0) {
        width = parseFloat(styles.inkBar.width, 10);
        if (width) {
          left += (tabNode.offsetWidth - width) / 2;
        }
      }
      if (direction === "rtl") {
        left = getStyle(tabNode, "margin-left") - left;
      }
      if (transformSupported) {
        setTransform(inkBarNodeStyle, "translate3d(".concat(left, "px,0,0)"));
      } else {
        inkBarNodeStyle.left = "".concat(left, "px");
      }
      inkBarNodeStyle.width = "".concat(width, "px");
    } else {
      var top = getTop(tabNode, wrapNode);
      var height = tabNode.offsetHeight;
      if (styles.inkBar && styles.inkBar.height !== void 0) {
        height = parseFloat(styles.inkBar.height, 10);
        if (height) {
          top += (tabNode.offsetHeight - height) / 2;
        }
      }
      if (transformSupported) {
        setTransform(inkBarNodeStyle, "translate3d(0,".concat(top, "px,0)"));
        inkBarNodeStyle.top = "0";
      } else {
        inkBarNodeStyle.top = "".concat(top, "px");
      }
      inkBarNodeStyle.height = "".concat(height, "px");
    }
  }
  inkBarNodeStyle.display = activeIndex !== -1 ? "block" : "none";
}
var InkTabBarNode = {
  name: "InkTabBarNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    inkBarAnimated: {
      type: Boolean,
      default: true
    },
    direction: PropsTypes.string,
    prefixCls: String,
    styles: Object,
    tabBarPosition: String,
    saveRef: PropsTypes.func.def(function() {
    }),
    getRef: PropsTypes.func.def(function() {
    }),
    panels: PropsTypes.array,
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])
  },
  updated: function updated5() {
    var _this = this;
    this.$nextTick(function() {
      componentDidUpdate(_this);
    });
  },
  mounted: function mounted10() {
    var _this2 = this;
    this.$nextTick(function() {
      componentDidUpdate(_this2, true);
    });
  },
  render: function render43() {
    var _classes;
    var prefixCls2 = this.prefixCls, _this$styles = this.styles, styles = _this$styles === void 0 ? {} : _this$styles, inkBarAnimated = this.inkBarAnimated;
    var className = "".concat(prefixCls2, "-ink-bar");
    var classes4 = (_classes = {}, _defineProperty$U(_classes, className, true), _defineProperty$U(_classes, inkBarAnimated ? "".concat(className, "-animated") : "".concat(className, "-no-animated"), true), _classes);
    return createVNode("div", {
      "style": styles.inkBar,
      "class": classes4,
      "key": "inkBar",
      "ref": this.saveRef("inkBar")
    }, null);
  }
};
var warning$2 = function() {
};
var warning_1 = warning$2;
function noop$A() {
}
var TabBarTabsNode = {
  name: "TabBarTabsNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    panels: PropsTypes.any.def([]),
    prefixCls: PropsTypes.string.def(""),
    tabBarGutter: PropsTypes.any.def(null),
    onTabClick: PropsTypes.func,
    saveRef: PropsTypes.func.def(noop$A),
    getRef: PropsTypes.func.def(noop$A),
    renderTabBarNode: PropsTypes.func,
    tabBarPosition: PropsTypes.string,
    direction: PropsTypes.string
  },
  render: function render44() {
    var _this = this;
    var _this$$props = this.$props, children = _this$$props.panels, activeKey2 = _this$$props.activeKey, prefixCls2 = _this$$props.prefixCls, tabBarGutter = _this$$props.tabBarGutter, saveRef4 = _this$$props.saveRef, tabBarPosition2 = _this$$props.tabBarPosition, direction = _this$$props.direction;
    var rst = [];
    var renderTabBarNode = this.renderTabBarNode || this.$slots.renderTabBarNode;
    children.forEach(function(child, index2) {
      if (!child) {
        return;
      }
      var props2 = getPropsData(child);
      var key2 = child.key;
      var cls = activeKey2 === key2 ? "".concat(prefixCls2, "-tab-active") : "";
      cls += " ".concat(prefixCls2, "-tab");
      var events = {};
      var disabled = props2.disabled;
      if (disabled) {
        cls += " ".concat(prefixCls2, "-tab-disabled");
      } else {
        events.onClick = function() {
          _this.__emit("tabClick", key2);
        };
      }
      var tab = getComponent(child, "tab");
      var gutter = tabBarGutter && index2 === children.length - 1 ? 0 : tabBarGutter;
      gutter = typeof gutter === "number" ? "".concat(gutter, "px") : gutter;
      var marginProperty = direction === "rtl" ? "marginLeft" : "marginRight";
      var style3 = _defineProperty$U({}, isVertical(tabBarPosition2) ? "marginBottom" : marginProperty, gutter);
      var node = createVNode("div", _objectSpread2$2(_objectSpread2$2({
        "role": "tab",
        "aria-disabled": disabled ? "true" : "false",
        "aria-selected": activeKey2 === key2 ? "true" : "false"
      }, events), {}, {
        "class": cls.trim(),
        "key": key2,
        "style": style3,
        "ref": activeKey2 === key2 ? saveRef4("activeTab") : noop$A
      }), [tab]);
      if (renderTabBarNode) {
        node = renderTabBarNode(node);
      }
      rst.push(node);
    });
    return createVNode("div", {
      "ref": this.saveRef("navTabsContainer")
    }, [rst]);
  }
};
var __rest$C = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$z() {
}
var TabBarRootNode = {
  name: "TabBarRootNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    saveRef: PropsTypes.func.def(noop$z),
    getRef: PropsTypes.func.def(noop$z),
    prefixCls: PropsTypes.string.def(""),
    tabBarPosition: PropsTypes.string.def("top"),
    extraContent: PropsTypes.any
  },
  methods: {
    onKeyDown: function onKeyDown2(e2) {
      this.__emit("keydown", e2);
    }
  },
  render: function render45() {
    var _cls;
    var prefixCls2 = this.prefixCls, onKeyDown14 = this.onKeyDown, tabBarPosition2 = this.tabBarPosition, extraContent = this.extraContent;
    var _a = this.$attrs, className = _a.class, style3 = _a.style;
    _a.onKeydown;
    var restProps = __rest$C(_a, ["class", "style", "onKeydown"]);
    var cls = (_cls = {}, _defineProperty$U(_cls, "".concat(prefixCls2, "-bar"), true), _defineProperty$U(_cls, className, !!className), _cls);
    var topOrBottom = tabBarPosition2 === "top" || tabBarPosition2 === "bottom";
    var tabBarExtraContentStyle = topOrBottom ? {
      float: "right"
    } : {};
    var children = getSlot(this);
    var newChildren = children;
    if (extraContent) {
      newChildren = [cloneElement(extraContent, {
        key: "extra",
        style: _extends$1({}, tabBarExtraContentStyle)
      }), cloneElement(children, {
        key: "content"
      })];
      newChildren = topOrBottom ? newChildren : newChildren.reverse();
    }
    return createVNode("div", _objectSpread2$2({
      "role": "tablist",
      "class": cls,
      "tabindex": "0",
      "onKeydown": onKeyDown14,
      "style": style3,
      "ref": this.saveRef("root")
    }, getDataAttr(restProps)), [newChildren]);
  }
};
var now$2 = function() {
  return root$1.Date.now();
};
var now$3 = now$2;
var reWhitespace = /\s/;
function trimmedEndIndex(string2) {
  var index2 = string2.length;
  while (index2-- && reWhitespace.test(string2.charAt(index2))) {
  }
  return index2;
}
var reTrimStart = /^\s+/;
function baseTrim(string2) {
  return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
}
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value26) {
  if (typeof value26 == "number") {
    return value26;
  }
  if (isSymbol(value26)) {
    return NAN;
  }
  if (isObject$2(value26)) {
    var other = typeof value26.valueOf == "function" ? value26.valueOf() : value26;
    value26 = isObject$2(other) ? other + "" : other;
  }
  if (typeof value26 != "string") {
    return value26 === 0 ? value26 : +value26;
  }
  value26 = baseTrim(value26);
  var isBinary = reIsBinary.test(value26);
  return isBinary || reIsOctal.test(value26) ? freeParseInt(value26.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value26) ? NAN : +value26;
}
var FUNC_ERROR_TEXT$1 = "Expected a function";
var nativeMax$2 = Math.max, nativeMin$1 = Math.min;
function debounce$1(func, wait, options2) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  wait = toNumber(wait) || 0;
  if (isObject$2(options2)) {
    leading = !!options2.leading;
    maxing = "maxWait" in options2;
    maxWait = maxing ? nativeMax$2(toNumber(options2.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options2 ? !!options2.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now$3();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel2() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now$3());
  }
  function debounced() {
    var time = now$3(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel2;
  debounced.flush = flush;
  return debounced;
}
var ScrollableTabBarNode = {
  name: "ScrollableTabBarNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    activeKey: PropsTypes.any,
    getRef: PropsTypes.func.def(function() {
    }),
    saveRef: PropsTypes.func.def(function() {
    }),
    tabBarPosition: PropsTypes.oneOf(["left", "right", "top", "bottom"]).def("left"),
    prefixCls: PropsTypes.string.def(""),
    scrollAnimated: PropsTypes.looseBool.def(true),
    navWrapper: PropsTypes.func.def(function(arg) {
      return arg;
    }),
    prevIcon: PropsTypes.any,
    nextIcon: PropsTypes.any,
    direction: PropsTypes.string
  },
  data: function data17() {
    this.offset = 0;
    this.prevProps = _extends$1({}, this.$props);
    return {
      next: false,
      prev: false
    };
  },
  watch: {
    tabBarPosition: function tabBarPosition() {
      var _this = this;
      this.tabBarPositionChange = true;
      this.$nextTick(function() {
        _this.setOffset(0);
      });
    }
  },
  mounted: function mounted11() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.updatedCal();
      _this2.debouncedResize = debounce$1(function() {
        _this2.setNextPrev();
        _this2.scrollToActiveTab();
      }, 200);
      _this2.resizeObserver = new ResizeObserver$2(_this2.debouncedResize);
      _this2.resizeObserver.observe(_this2.$props.getRef("container"));
    });
  },
  updated: function updated6() {
    var _this3 = this;
    this.$nextTick(function() {
      _this3.updatedCal(_this3.prevProps);
      _this3.prevProps = _extends$1({}, _this3.$props);
    });
  },
  beforeUnmount: function beforeUnmount8() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
    if (this.debouncedResize && this.debouncedResize.cancel) {
      this.debouncedResize.cancel();
    }
  },
  methods: {
    updatedCal: function updatedCal2(prevProps) {
      var _this4 = this;
      var props2 = this.$props;
      if (prevProps && prevProps.tabBarPosition !== props2.tabBarPosition) {
        this.setOffset(0);
        return;
      }
      if (this.isNextPrevShown(this.$data) !== this.isNextPrevShown(this.setNextPrev())) {
        this.$forceUpdate();
        this.$nextTick(function() {
          _this4.scrollToActiveTab();
        });
      } else if (!prevProps || props2.activeKey !== prevProps.activeKey) {
        this.scrollToActiveTab();
      }
    },
    setNextPrev: function setNextPrev() {
      var navNode = this.$props.getRef("nav");
      var navTabsContainer = this.$props.getRef("navTabsContainer");
      var navNodeWH = this.getScrollWH(navTabsContainer || navNode);
      var containerWH = this.getOffsetWH(this.$props.getRef("container")) + 1;
      var navWrapNodeWH = this.getOffsetWH(this.$props.getRef("navWrap"));
      var offset4 = this.offset;
      var minOffset = containerWH - navNodeWH;
      var next3 = this.next, prev3 = this.prev;
      if (minOffset >= 0) {
        next3 = false;
        this.setOffset(0, false);
        offset4 = 0;
      } else if (minOffset < offset4) {
        next3 = true;
      } else {
        next3 = false;
        var realOffset = navWrapNodeWH - navNodeWH;
        this.setOffset(realOffset, false);
        offset4 = realOffset;
      }
      if (offset4 < 0) {
        prev3 = true;
      } else {
        prev3 = false;
      }
      this.setNext(next3);
      this.setPrev(prev3);
      return {
        next: next3,
        prev: prev3
      };
    },
    getOffsetWH: function getOffsetWH(node) {
      var tabBarPosition2 = this.$props.tabBarPosition;
      var prop = "offsetWidth";
      if (tabBarPosition2 === "left" || tabBarPosition2 === "right") {
        prop = "offsetHeight";
      }
      return node[prop];
    },
    getScrollWH: function getScrollWH(node) {
      var tabBarPosition2 = this.tabBarPosition;
      var prop = "scrollWidth";
      if (tabBarPosition2 === "left" || tabBarPosition2 === "right") {
        prop = "scrollHeight";
      }
      return node[prop];
    },
    getOffsetLT: function getOffsetLT(node) {
      var tabBarPosition2 = this.$props.tabBarPosition;
      var prop = "left";
      if (tabBarPosition2 === "left" || tabBarPosition2 === "right") {
        prop = "top";
      }
      return node.getBoundingClientRect()[prop];
    },
    setOffset: function setOffset2(offset4) {
      var checkNextPrev = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var target = Math.min(0, offset4);
      if (this.offset !== target) {
        this.offset = target;
        var navOffset = {};
        var tabBarPosition2 = this.$props.tabBarPosition;
        var navStyle = this.$props.getRef("nav").style;
        var transformSupported = isTransform3dSupported(navStyle);
        if (tabBarPosition2 === "left" || tabBarPosition2 === "right") {
          if (transformSupported) {
            navOffset = {
              value: "translate3d(0,".concat(target, "px,0)")
            };
          } else {
            navOffset = {
              name: "top",
              value: "".concat(target, "px")
            };
          }
        } else if (transformSupported) {
          if (this.$props.direction === "rtl") {
            target = -target;
          }
          navOffset = {
            value: "translate3d(".concat(target, "px,0,0)")
          };
        } else {
          navOffset = {
            name: "left",
            value: "".concat(target, "px")
          };
        }
        if (transformSupported) {
          setTransform(navStyle, navOffset.value);
        } else {
          navStyle[navOffset.name] = navOffset.value;
        }
        if (checkNextPrev) {
          this.setNextPrev();
        }
      }
    },
    setPrev: function setPrev(v2) {
      if (this.prev !== v2) {
        this.prev = v2;
      }
    },
    setNext: function setNext(v2) {
      if (this.next !== v2) {
        this.next = v2;
      }
    },
    isNextPrevShown: function isNextPrevShown(state2) {
      if (state2) {
        return state2.next || state2.prev;
      }
      return this.next || this.prev;
    },
    prevTransitionEnd: function prevTransitionEnd(e2) {
      if (e2.propertyName !== "opacity") {
        return;
      }
      var container = this.$props.getRef("container");
      this.scrollToActiveTab({
        target: container,
        currentTarget: container
      });
    },
    scrollToActiveTab: function scrollToActiveTab(e2) {
      var activeTab = this.$props.getRef("activeTab");
      var navWrap = this.$props.getRef("navWrap");
      if (e2 && e2.target !== e2.currentTarget || !activeTab) {
        return;
      }
      var needToSroll = this.isNextPrevShown() && this.lastNextPrevShown;
      this.lastNextPrevShown = this.isNextPrevShown();
      if (!needToSroll) {
        return;
      }
      var activeTabWH = this.getScrollWH(activeTab);
      var navWrapNodeWH = this.getOffsetWH(navWrap);
      var offset4 = this.offset;
      var wrapOffset = this.getOffsetLT(navWrap);
      var activeTabOffset = this.getOffsetLT(activeTab);
      if (wrapOffset > activeTabOffset) {
        offset4 += wrapOffset - activeTabOffset;
        this.setOffset(offset4);
      } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
        offset4 -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
        this.setOffset(offset4);
      }
    },
    prevClick: function prevClick(e2) {
      this.__emit("prevClick", e2);
      var navWrapNode = this.$props.getRef("navWrap");
      var navWrapNodeWH = this.getOffsetWH(navWrapNode);
      var offset4 = this.offset;
      this.setOffset(offset4 + navWrapNodeWH);
    },
    nextClick: function nextClick(e2) {
      this.__emit("nextClick", e2);
      var navWrapNode = this.$props.getRef("navWrap");
      var navWrapNodeWH = this.getOffsetWH(navWrapNode);
      var offset4 = this.offset;
      this.setOffset(offset4 - navWrapNodeWH);
    }
  },
  render: function render46() {
    var _ref, _ref2, _navClasses, _ref3;
    var next3 = this.next, prev3 = this.prev;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, scrollAnimated = _this$$props.scrollAnimated, navWrapper = _this$$props.navWrapper;
    var prevIcon = getComponent(this, "prevIcon");
    var nextIcon = getComponent(this, "nextIcon");
    var showNextPrev = prev3 || next3;
    var prevButton = createVNode("span", {
      "onClick": prev3 && this.prevClick,
      "unselectable": "unselectable",
      "class": (_ref = {}, _defineProperty$U(_ref, "".concat(prefixCls2, "-tab-prev"), 1), _defineProperty$U(_ref, "".concat(prefixCls2, "-tab-btn-disabled"), !prev3), _defineProperty$U(_ref, "".concat(prefixCls2, "-tab-arrow-show"), showNextPrev), _ref),
      "onTransitionend": this.prevTransitionEnd
    }, [prevIcon || createVNode("span", {
      "class": "".concat(prefixCls2, "-tab-prev-icon")
    }, null)]);
    var nextButton = createVNode("span", {
      "onClick": next3 && this.nextClick,
      "unselectable": "unselectable",
      "class": (_ref2 = {}, _defineProperty$U(_ref2, "".concat(prefixCls2, "-tab-next"), 1), _defineProperty$U(_ref2, "".concat(prefixCls2, "-tab-btn-disabled"), !next3), _defineProperty$U(_ref2, "".concat(prefixCls2, "-tab-arrow-show"), showNextPrev), _ref2)
    }, [nextIcon || createVNode("span", {
      "class": "".concat(prefixCls2, "-tab-next-icon")
    }, null)]);
    var navClassName = "".concat(prefixCls2, "-nav");
    var navClasses = (_navClasses = {}, _defineProperty$U(_navClasses, navClassName, true), _defineProperty$U(_navClasses, scrollAnimated ? "".concat(navClassName, "-animated") : "".concat(navClassName, "-no-animated"), true), _navClasses);
    return createVNode("div", {
      "class": (_ref3 = {}, _defineProperty$U(_ref3, "".concat(prefixCls2, "-nav-container"), 1), _defineProperty$U(_ref3, "".concat(prefixCls2, "-nav-container-scrolling"), showNextPrev), _ref3),
      "key": "container",
      "ref": this.saveRef("container")
    }, [prevButton, nextButton, createVNode("div", {
      "class": "".concat(prefixCls2, "-nav-wrap"),
      "ref": this.saveRef("navWrap")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-nav-scroll")
    }, [createVNode("div", {
      "class": navClasses,
      "ref": this.saveRef("nav")
    }, [navWrapper(getSlot(this))])])])]);
  }
};
var SaveRef = {
  props: {
    children: PropsTypes.func.def(function() {
      return null;
    })
  },
  methods: {
    getRef: function getRef(name2) {
      return this[name2];
    },
    saveRef: function saveRef2(name2) {
      var _this = this;
      return function(node) {
        if (node) {
          _this[name2] = node;
        }
      };
    }
  },
  render: function render47() {
    var _this2 = this;
    var saveRef4 = function saveRef5(name2) {
      return _this2.saveRef(name2);
    };
    var getRef2 = function getRef3(name2) {
      return _this2.getRef(name2);
    };
    return this.children(saveRef4, getRef2);
  }
};
var ScrollableInkTabBar = defineComponent({
  name: "ScrollableInkTabBar",
  inheritAttrs: false,
  render: function render48() {
    var _this = this;
    var renderTabBarNode = this.$attrs.children;
    return createVNode(SaveRef, {
      "children": function children(saveRef4, getRef2) {
        return createVNode(TabBarRootNode, _objectSpread2$2({
          "saveRef": saveRef4
        }, _this.$attrs), {
          default: function _default8() {
            return [createVNode(ScrollableTabBarNode, _objectSpread2$2({
              "saveRef": saveRef4,
              "getRef": getRef2
            }, _this.$attrs), {
              default: function _default9() {
                return [createVNode(TabBarTabsNode, _objectSpread2$2({
                  "saveRef": saveRef4
                }, _extends$1(_extends$1({}, _this.$attrs), {
                  renderTabBarNode
                })), null), createVNode(InkTabBarNode, _objectSpread2$2({
                  "saveRef": saveRef4,
                  "getRef": getRef2
                }, _this.$attrs), null)];
              }
            })];
          }
        });
      }
    }, null);
  }
});
var TabBar = defineComponent({
  name: "TabBar",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    centered: PropsTypes.looseBool.def(false),
    tabBarStyle: PropsTypes.style,
    tabBarExtraContent: PropsTypes.VNodeChild,
    type: PropsTypes.oneOf(tuple("line", "card", "editable-card")),
    tabPosition: PropsTypes.oneOf(tuple("top", "right", "bottom", "left")).def("top"),
    tabBarPosition: PropsTypes.oneOf(tuple("top", "right", "bottom", "left")),
    size: PropsTypes.oneOf(tuple("default", "small", "large")),
    animated: {
      type: [Boolean, Object],
      default: void 0
    },
    renderTabBar: PropsTypes.func,
    panels: PropsTypes.array.def([]),
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    tabBarGutter: PropsTypes.number
  },
  render: function render49() {
    var _cls;
    var _this$$props = this.$props, centered = _this$$props.centered, tabBarStyle = _this$$props.tabBarStyle, _this$$props$animated = _this$$props.animated, animated = _this$$props$animated === void 0 ? true : _this$$props$animated, renderTabBar = _this$$props.renderTabBar, tabBarExtraContent = _this$$props.tabBarExtraContent, tabPosition = _this$$props.tabPosition, prefixCls2 = _this$$props.prefixCls, _this$$props$type = _this$$props.type, type3 = _this$$props$type === void 0 ? "line" : _this$$props$type, size2 = _this$$props.size;
    var inkBarAnimated = _typeof$2(animated) === "object" ? animated.inkBar : animated;
    var isVertical2 = tabPosition === "left" || tabPosition === "right";
    var prevIcon = createVNode("span", {
      "class": "".concat(prefixCls2, "-tab-prev-icon")
    }, [isVertical2 ? createVNode(UpOutlined$1, {
      "class": "".concat(prefixCls2, "-tab-prev-icon-target")
    }, null) : createVNode(LeftOutlined$1, {
      "class": "".concat(prefixCls2, "-tab-prev-icon-target")
    }, null)]);
    var nextIcon = createVNode("span", {
      "class": "".concat(prefixCls2, "-tab-next-icon")
    }, [isVertical2 ? createVNode(DownOutlined$1, {
      "class": "".concat(prefixCls2, "-tab-next-icon-target")
    }, null) : createVNode(RightOutlined$1, {
      "class": "".concat(prefixCls2, "-tab-next-icon-target")
    }, null)]);
    var cls = (_cls = {}, _defineProperty$U(_cls, this.$attrs.class, this.$attrs.class), _defineProperty$U(_cls, "".concat(prefixCls2, "-centered-bar"), centered), _defineProperty$U(_cls, "".concat(prefixCls2, "-").concat(tabPosition, "-bar"), true), _defineProperty$U(_cls, "".concat(prefixCls2, "-").concat(size2, "-bar"), !!size2), _defineProperty$U(_cls, "".concat(prefixCls2, "-card-bar"), type3 && type3.indexOf("card") >= 0), _cls);
    var renderProps = _extends$1(_extends$1(_extends$1({}, this.$props), this.$attrs), {
      children: null,
      inkBarAnimated,
      extraContent: tabBarExtraContent,
      prevIcon,
      nextIcon,
      style: tabBarStyle,
      class: cls
    });
    if (renderTabBar) {
      return renderTabBar(_extends$1(_extends$1({}, renderProps), {
        DefaultTabBar: ScrollableInkTabBar
      }));
    } else {
      return createVNode(ScrollableInkTabBar, renderProps, null);
    }
  }
});
var TabBar$1 = TabBar;
var __rest$B = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Tabs = defineComponent({
  TabPane: TabPane$1,
  name: "ATabs",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    defaultActiveKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    hideAdd: PropsTypes.looseBool.def(false),
    centered: PropsTypes.looseBool.def(false),
    tabBarStyle: PropsTypes.object,
    tabBarExtraContent: PropsTypes.any,
    destroyInactiveTabPane: PropsTypes.looseBool.def(false),
    type: PropsTypes.oneOf(tuple("line", "card", "editable-card")),
    tabPosition: PropsTypes.oneOf(["top", "right", "bottom", "left"]).def("top"),
    size: PropsTypes.oneOf(["default", "small", "large"]),
    animated: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    tabBarGutter: PropsTypes.number,
    renderTabBar: PropsTypes.func,
    onChange: {
      type: Function
    },
    onTabClick: PropsTypes.func,
    onPrevClick: {
      type: Function
    },
    onNextClick: {
      type: Function
    },
    onEdit: {
      type: Function
    }
  },
  emits: ["update:activeKey", "edit", "change"],
  setup: function setup63() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    removeTab: function removeTab(targetKey, e2) {
      e2.stopPropagation();
      if (isValid$4(targetKey)) {
        this.$emit("edit", targetKey, "remove");
      }
    },
    handleChange: function handleChange6(activeKey2) {
      this.$emit("update:activeKey", activeKey2);
      this.$emit("change", activeKey2);
    },
    createNewTab: function createNewTab(targetKey) {
      this.$emit("edit", targetKey, "add");
    }
  },
  render: function render50() {
    var _cls, _this = this, _contentCls;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, size2 = props2.size, _props$type = props2.type, type3 = _props$type === void 0 ? "line" : _props$type, tabPosition = props2.tabPosition, _props$animated = props2.animated, animated = _props$animated === void 0 ? true : _props$animated, hideAdd = props2.hideAdd, renderTabBar = props2.renderTabBar;
    var _a = this.$attrs, className = _a.class, restProps = __rest$B(_a, ["class"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("tabs", customizePrefixCls);
    var children = filterEmpty(getSlot(this));
    var tabBarExtraContent = getComponent(this, "tabBarExtraContent");
    var tabPaneAnimated = _typeof$2(animated) === "object" ? animated.tabPane : animated;
    if (type3 !== "line") {
      tabPaneAnimated = "animated" in props2 ? tabPaneAnimated : false;
    }
    var cls = (_cls = {}, _defineProperty$U(_cls, className, className), _defineProperty$U(_cls, "".concat(prefixCls2, "-vertical"), tabPosition === "left" || tabPosition === "right"), _defineProperty$U(_cls, "".concat(prefixCls2, "-").concat(size2), !!size2), _defineProperty$U(_cls, "".concat(prefixCls2, "-card"), type3.indexOf("card") >= 0), _defineProperty$U(_cls, "".concat(prefixCls2, "-").concat(type3), true), _defineProperty$U(_cls, "".concat(prefixCls2, "-no-animation"), !tabPaneAnimated), _cls);
    var childrenWithClose = [];
    if (type3 === "editable-card") {
      childrenWithClose = [];
      children.forEach(function(child, index2) {
        var props3 = getPropsData(child);
        var closable = props3.closable;
        closable = typeof closable === "undefined" ? true : closable;
        var closeIcon = closable ? createVNode(CloseOutlined$1, {
          "class": "".concat(prefixCls2, "-close-x"),
          "onClick": function onClick7(e2) {
            return _this.removeTab(child.key, e2);
          }
        }, null) : null;
        childrenWithClose.push(cloneElement(child, {
          tab: createVNode("div", {
            "class": closable ? void 0 : "".concat(prefixCls2, "-tab-unclosable")
          }, [getComponent(child, "tab"), closeIcon]),
          key: child.key || index2
        }));
      });
      if (!hideAdd) {
        tabBarExtraContent = createVNode("span", null, [createVNode(PlusOutlined$1, {
          "class": "".concat(prefixCls2, "-new-tab"),
          "onClick": this.createNewTab
        }, null), tabBarExtraContent]);
      }
    }
    tabBarExtraContent = tabBarExtraContent ? createVNode("div", {
      "class": "".concat(prefixCls2, "-extra-content")
    }, [tabBarExtraContent]) : null;
    var renderTabBarSlot = renderTabBar || this.$slots.renderTabBar;
    var tabBarProps = _extends$1(_extends$1(_extends$1(_extends$1({}, props2), {
      prefixCls: prefixCls2,
      tabBarExtraContent,
      renderTabBar: renderTabBarSlot
    }), restProps), {
      children
    });
    var contentCls = (_contentCls = {}, _defineProperty$U(_contentCls, "".concat(prefixCls2, "-").concat(tabPosition, "-content"), true), _defineProperty$U(_contentCls, "".concat(prefixCls2, "-card-content"), type3.indexOf("card") >= 0), _contentCls);
    var tabsProps = _extends$1(_extends$1(_extends$1(_extends$1({}, props2), {
      prefixCls: prefixCls2,
      tabBarPosition: tabPosition,
      renderTabBar: function renderTabBar2() {
        return createVNode(TabBar$1, _objectSpread2$2({
          "key": "tabBar"
        }, tabBarProps), null);
      },
      renderTabContent: function renderTabContent() {
        return createVNode(TabContent, {
          "class": contentCls,
          "animated": tabPaneAnimated,
          "animatedWithMargin": true
        }, null);
      },
      children: childrenWithClose.length > 0 ? childrenWithClose : children
    }), restProps), {
      onChange: this.handleChange,
      class: cls
    });
    return createVNode(Tabs$1, tabsProps, null);
  }
});
Tabs.TabPane = _extends$1(_extends$1({}, TabPane$1), {
  name: "ATabPane",
  __ANT_TAB_PANE: true
});
Tabs.TabContent = _extends$1(_extends$1({}, TabContent), {
  name: "ATabContent"
});
Tabs.install = function(app) {
  app.component(Tabs.name, Tabs);
  app.component(Tabs.TabPane.name, Tabs.TabPane);
  app.component(Tabs.TabContent.name, Tabs.TabContent);
  return app;
};
function canUseDom() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var canUseDocElement = function canUseDocElement2() {
  return canUseDom() && window.document.documentElement;
};
var isStyleSupport = function isStyleSupport2(styleName) {
  if (canUseDocElement()) {
    var styleNameList = Array.isArray(styleName) ? styleName : [styleName];
    var documentElement = window.document.documentElement;
    return styleNameList.some(function(name2) {
      return name2 in documentElement.style;
    });
  }
  return false;
};
var flexGapSupported;
var detectFlexGapSupported = function detectFlexGapSupported2() {
  if (!canUseDocElement()) {
    return false;
  }
  if (flexGapSupported !== void 0) {
    return flexGapSupported;
  }
  var flex = document.createElement("div");
  flex.style.display = "flex";
  flex.style.flexDirection = "column";
  flex.style.rowGap = "1px";
  flex.appendChild(document.createElement("div"));
  flex.appendChild(document.createElement("div"));
  document.body.appendChild(flex);
  flexGapSupported = flex.scrollHeight === 1;
  document.body.removeChild(flex);
  return flexGapSupported;
};
var useFlexGapSupport = function() {
  var flexible = ref(false);
  onMounted(function() {
    flexible.value = detectFlexGapSupported();
  });
  return flexible;
};
var RowContextKey = Symbol("rowContextKey");
var useProvideRow = function useProvideRow2(state2) {
  provide(RowContextKey, state2);
};
var useInjectRow = function useInjectRow2() {
  return inject(RowContextKey, {
    gutter: computed(function() {
      return void 0;
    }),
    wrap: computed(function() {
      return void 0;
    }),
    supportFlexGap: computed(function() {
      return void 0;
    })
  });
};
var RowAligns = tuple("top", "middle", "bottom", "stretch");
var RowJustify = tuple("start", "end", "center", "space-around", "space-between");
var rowProps = {
  type: PropsTypes.oneOf(["flex"]),
  align: PropsTypes.oneOf(RowAligns),
  justify: PropsTypes.oneOf(RowJustify),
  prefixCls: PropsTypes.string,
  gutter: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.number, PropsTypes.array]).def(0),
  wrap: PropsTypes.looseBool
};
var ARow = defineComponent({
  name: "ARow",
  props: rowProps,
  setup: function setup64(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("row", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var token2;
    var screens2 = ref({
      xs: true,
      sm: true,
      md: true,
      lg: true,
      xl: true,
      xxl: true
    });
    var supportFlexGap = useFlexGapSupport();
    onMounted(function() {
      token2 = ResponsiveObserve.subscribe(function(screen) {
        var currentGutter = props2.gutter || 0;
        if (!Array.isArray(currentGutter) && _typeof$2(currentGutter) === "object" || Array.isArray(currentGutter) && (_typeof$2(currentGutter[0]) === "object" || _typeof$2(currentGutter[1]) === "object")) {
          screens2.value = screen;
        }
      });
    });
    onBeforeUnmount(function() {
      ResponsiveObserve.unsubscribe(token2);
    });
    var gutter = computed(function() {
      var results = [0, 0];
      var _props$gutter = props2.gutter, gutter2 = _props$gutter === void 0 ? 0 : _props$gutter;
      var normalizedGutter = Array.isArray(gutter2) ? gutter2 : [gutter2, 0];
      normalizedGutter.forEach(function(g2, index2) {
        if (_typeof$2(g2) === "object") {
          for (var i2 = 0; i2 < responsiveArray.length; i2++) {
            var breakpoint = responsiveArray[i2];
            if (screens2.value[breakpoint] && g2[breakpoint] !== void 0) {
              results[index2] = g2[breakpoint];
              break;
            }
          }
        } else {
          results[index2] = g2 || 0;
        }
      });
      return results;
    });
    useProvideRow({
      gutter,
      supportFlexGap,
      wrap: computed(function() {
        return props2.wrap;
      })
    });
    var classes4 = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-no-wrap"), props2.wrap === false), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-").concat(props2.justify), props2.justify), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-").concat(props2.align), props2.align), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _classNames));
    });
    var rowStyle = computed(function() {
      var gt = gutter.value;
      var style3 = {};
      var horizontalGutter = gt[0] > 0 ? "".concat(gt[0] / -2, "px") : void 0;
      var verticalGutter = gt[1] > 0 ? "".concat(gt[1] / -2, "px") : void 0;
      if (horizontalGutter) {
        style3.marginLeft = horizontalGutter;
        style3.marginRight = horizontalGutter;
      }
      if (supportFlexGap.value) {
        style3.rowGap = "".concat(gt[1], "px");
      } else if (verticalGutter) {
        style3.marginTop = verticalGutter;
        style3.marginBottom = verticalGutter;
      }
      return style3;
    });
    return function() {
      var _a;
      return createVNode("div", {
        "class": classes4.value,
        "style": rowStyle.value
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var Row$3 = ARow;
function parseFlex(flex) {
  if (typeof flex === "number") {
    return "".concat(flex, " ").concat(flex, " auto");
  }
  if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
    return "0 0 ".concat(flex);
  }
  return flex;
}
var stringOrNumber = PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]);
var colSize = PropsTypes.shape({
  span: stringOrNumber,
  order: stringOrNumber,
  offset: stringOrNumber,
  push: stringOrNumber,
  pull: stringOrNumber
}).loose;
var objectOrNumber = PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, colSize]);
var colProps = {
  span: stringOrNumber,
  order: stringOrNumber,
  offset: stringOrNumber,
  push: stringOrNumber,
  pull: stringOrNumber,
  xs: objectOrNumber,
  sm: objectOrNumber,
  md: objectOrNumber,
  lg: objectOrNumber,
  xl: objectOrNumber,
  xxl: objectOrNumber,
  prefixCls: PropsTypes.string,
  flex: stringOrNumber
};
var Col$1 = defineComponent({
  name: "ACol",
  props: colProps,
  setup: function setup65(props2, _ref) {
    var slots = _ref.slots;
    var _useInjectRow = useInjectRow(), gutter = _useInjectRow.gutter, supportFlexGap = _useInjectRow.supportFlexGap, wrap = _useInjectRow.wrap;
    var _useConfigInject = useConfigInject("col", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var classes4 = computed(function() {
      var _classNames;
      var span = props2.span, order = props2.order, offset4 = props2.offset, push2 = props2.push, pull2 = props2.pull;
      var pre = prefixCls2.value;
      var sizeClassObj = {};
      ["xs", "sm", "md", "lg", "xl", "xxl"].forEach(function(size2) {
        var _extends2;
        var sizeProps = {};
        var propSize = props2[size2];
        if (typeof propSize === "number") {
          sizeProps.span = propSize;
        } else if (_typeof$2(propSize) === "object") {
          sizeProps = propSize || {};
        }
        sizeClassObj = _extends$1(_extends$1({}, sizeClassObj), (_extends2 = {}, _defineProperty$U(_extends2, "".concat(pre, "-").concat(size2, "-").concat(sizeProps.span), sizeProps.span !== void 0), _defineProperty$U(_extends2, "".concat(pre, "-").concat(size2, "-order-").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), _defineProperty$U(_extends2, "".concat(pre, "-").concat(size2, "-offset-").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), _defineProperty$U(_extends2, "".concat(pre, "-").concat(size2, "-push-").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), _defineProperty$U(_extends2, "".concat(pre, "-").concat(size2, "-pull-").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), _defineProperty$U(_extends2, "".concat(pre, "-rtl"), direction.value === "rtl"), _extends2));
      });
      return classNames(pre, (_classNames = {}, _defineProperty$U(_classNames, "".concat(pre, "-").concat(span), span !== void 0), _defineProperty$U(_classNames, "".concat(pre, "-order-").concat(order), order), _defineProperty$U(_classNames, "".concat(pre, "-offset-").concat(offset4), offset4), _defineProperty$U(_classNames, "".concat(pre, "-push-").concat(push2), push2), _defineProperty$U(_classNames, "".concat(pre, "-pull-").concat(pull2), pull2), _classNames), sizeClassObj);
    });
    var mergedStyle = computed(function() {
      var flex = props2.flex;
      var gutterVal = gutter.value;
      var style3 = {};
      if (gutterVal && gutterVal[0] > 0) {
        var horizontalGutter = "".concat(gutterVal[0] / 2, "px");
        style3.paddingLeft = horizontalGutter;
        style3.paddingRight = horizontalGutter;
      }
      if (gutterVal && gutterVal[1] > 0 && !supportFlexGap.value) {
        var verticalGutter = "".concat(gutterVal[1] / 2, "px");
        style3.paddingTop = verticalGutter;
        style3.paddingBottom = verticalGutter;
      }
      if (flex) {
        style3.flex = parseFlex(flex);
        if (flex === "auto" && wrap.value === false && !style3.minWidth) {
          style3.minWidth = 0;
        }
      }
      return style3;
    });
    return function() {
      var _a;
      return createVNode("div", {
        "class": classes4.value,
        "style": mergedStyle.value
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var index$y = {
  useBreakpoint
};
var Row$2 = withInstall(Row$3);
var Col = withInstall(Col$1);
var TabPane = Tabs.TabPane;
var cardProps = {
  prefixCls: PropsTypes.string,
  title: PropsTypes.VNodeChild,
  extra: PropsTypes.VNodeChild,
  bordered: PropsTypes.looseBool.def(true),
  bodyStyle: PropsTypes.style,
  headStyle: PropsTypes.style,
  loading: PropsTypes.looseBool.def(false),
  hoverable: PropsTypes.looseBool.def(false),
  type: PropsTypes.string,
  size: PropsTypes.oneOf(tuple("default", "small")),
  actions: PropsTypes.VNodeChild,
  tabList: {
    type: Array
  },
  tabBarExtraContent: PropsTypes.VNodeChild,
  activeTabKey: PropsTypes.string,
  defaultActiveTabKey: PropsTypes.string,
  cover: PropsTypes.VNodeChild,
  onTabChange: {
    type: Function
  }
};
var Card = defineComponent({
  name: "ACard",
  mixins: [BaseMixin],
  props: cardProps,
  setup: function setup66() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data18() {
    return {
      widerPadding: false
    };
  },
  methods: {
    getAction: function getAction(actions) {
      var actionList = actions.map(function(action, index2) {
        return isVNode(action) && !isEmptyElement(action) || !isVNode(action) ? createVNode("li", {
          "style": {
            width: "".concat(100 / actions.length, "%")
          },
          "key": "action-".concat(index2)
        }, [createVNode("span", null, [action])]) : null;
      });
      return actionList;
    },
    triggerTabChange: function triggerTabChange(key2) {
      this.$emit("tabChange", key2);
    },
    isContainGrid: function isContainGrid() {
      var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var containGrid;
      obj.forEach(function(element) {
        if (element && isPlainObject$1(element.type) && element.type.__ANT_CARD_GRID) {
          containGrid = true;
        }
      });
      return containGrid;
    }
  },
  render: function render51() {
    var _classString, _tabsProps;
    var _this$$props = this.$props, customizePrefixCls = _this$$props.prefixCls, _this$$props$headStyl = _this$$props.headStyle, headStyle = _this$$props$headStyl === void 0 ? {} : _this$$props$headStyl, _this$$props$bodyStyl = _this$$props.bodyStyle, bodyStyle = _this$$props$bodyStyl === void 0 ? {} : _this$$props$bodyStyl, loading = _this$$props.loading, _this$$props$bordered = _this$$props.bordered, bordered = _this$$props$bordered === void 0 ? true : _this$$props$bordered, _this$$props$size = _this$$props.size, size2 = _this$$props$size === void 0 ? "default" : _this$$props$size, type3 = _this$$props.type, tabList = _this$$props.tabList, hoverable = _this$$props.hoverable, activeTabKey = _this$$props.activeTabKey, defaultActiveTabKey = _this$$props.defaultActiveTabKey;
    var $slots = this.$slots;
    var children = getSlot(this);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("card", customizePrefixCls);
    var tabBarExtraContent = getComponent(this, "tabBarExtraContent");
    var classString = (_classString = {}, _defineProperty$U(_classString, "".concat(prefixCls2), true), _defineProperty$U(_classString, "".concat(prefixCls2, "-loading"), loading), _defineProperty$U(_classString, "".concat(prefixCls2, "-bordered"), bordered), _defineProperty$U(_classString, "".concat(prefixCls2, "-hoverable"), !!hoverable), _defineProperty$U(_classString, "".concat(prefixCls2, "-contain-grid"), this.isContainGrid(children)), _defineProperty$U(_classString, "".concat(prefixCls2, "-contain-tabs"), tabList && tabList.length), _defineProperty$U(_classString, "".concat(prefixCls2, "-").concat(size2), size2 !== "default"), _defineProperty$U(_classString, "".concat(prefixCls2, "-type-").concat(type3), !!type3), _classString);
    var loadingBlockStyle = bodyStyle.padding === 0 || bodyStyle.padding === "0px" ? {
      padding: 24
    } : void 0;
    var loadingBlock = createVNode("div", {
      "class": "".concat(prefixCls2, "-loading-content"),
      "style": loadingBlockStyle
    }, [createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 22
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    }), createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 8
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 15
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    }), createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 6
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 18
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    }), createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 13
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 9
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    }), createVNode(Row$2, {
      "gutter": 8
    }, {
      default: function _default8() {
        return [createVNode(Col, {
          "span": 4
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 3
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        }), createVNode(Col, {
          "span": 16
        }, {
          default: function _default9() {
            return [createVNode("div", {
              "class": "".concat(prefixCls2, "-loading-block")
            }, null)];
          }
        })];
      }
    })]);
    var hasActiveTabKey = activeTabKey !== void 0;
    var tabsProps = (_tabsProps = {
      size: "large"
    }, _defineProperty$U(_tabsProps, hasActiveTabKey ? "activeKey" : "defaultActiveKey", hasActiveTabKey ? activeTabKey : defaultActiveTabKey), _defineProperty$U(_tabsProps, "tabBarExtraContent", tabBarExtraContent), _defineProperty$U(_tabsProps, "onChange", this.triggerTabChange), _defineProperty$U(_tabsProps, "class", "".concat(prefixCls2, "-head-tabs")), _tabsProps);
    var head;
    var tabs = tabList && tabList.length ? createVNode(Tabs, tabsProps, {
      default: function _default8() {
        return [tabList.map(function(item) {
          var temp = item.tab, slots = item.slots;
          var name2 = slots === null || slots === void 0 ? void 0 : slots.tab;
          var tab = temp !== void 0 ? temp : $slots[name2] ? $slots[name2](item) : null;
          return createVNode(TabPane, {
            "tab": tab,
            "key": item.key,
            "disabled": item.disabled
          }, null);
        })];
      }
    }) : null;
    var titleDom = getComponent(this, "title");
    var extraDom = getComponent(this, "extra");
    if (titleDom || extraDom || tabs) {
      head = createVNode("div", {
        "class": "".concat(prefixCls2, "-head"),
        "style": headStyle
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-head-wrapper")
      }, [titleDom && createVNode("div", {
        "class": "".concat(prefixCls2, "-head-title")
      }, [titleDom]), extraDom && createVNode("div", {
        "class": "".concat(prefixCls2, "-extra")
      }, [extraDom])]), tabs]);
    }
    var cover = getComponent(this, "cover");
    var coverDom = cover ? createVNode("div", {
      "class": "".concat(prefixCls2, "-cover")
    }, [cover]) : null;
    var body = createVNode("div", {
      "class": "".concat(prefixCls2, "-body"),
      "style": bodyStyle
    }, [loading ? loadingBlock : children]);
    var actions = getComponent(this, "actions");
    var actionDom = actions && actions.length ? createVNode("ul", {
      "class": "".concat(prefixCls2, "-actions")
    }, [this.getAction(actions)]) : null;
    return createVNode("div", {
      "class": classString,
      "ref": "cardContainerRef"
    }, [head, coverDom, children ? body : null, actionDom]);
  }
});
var Card$1 = Card;
var Meta = defineComponent({
  name: "ACardMeta",
  props: {
    prefixCls: PropsTypes.string,
    title: PropsTypes.VNodeChild,
    description: PropsTypes.VNodeChild,
    avatar: PropsTypes.VNodeChild
  },
  setup: function setup67() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render52() {
    var customizePrefixCls = this.$props.prefixCls;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("card", customizePrefixCls);
    var classString = _defineProperty$U({}, "".concat(prefixCls2, "-meta"), true);
    var avatar = getComponent(this, "avatar");
    var title2 = getComponent(this, "title");
    var description2 = getComponent(this, "description");
    var avatarDom = avatar ? createVNode("div", {
      "class": "".concat(prefixCls2, "-meta-avatar")
    }, [avatar]) : null;
    var titleDom = title2 ? createVNode("div", {
      "class": "".concat(prefixCls2, "-meta-title")
    }, [title2]) : null;
    var descriptionDom = description2 ? createVNode("div", {
      "class": "".concat(prefixCls2, "-meta-description")
    }, [description2]) : null;
    var MetaDetail = titleDom || descriptionDom ? createVNode("div", {
      "class": "".concat(prefixCls2, "-meta-detail")
    }, [titleDom, descriptionDom]) : null;
    return createVNode("div", {
      "class": classString
    }, [avatarDom, MetaDetail]);
  }
});
var Grid = defineComponent({
  name: "ACardGrid",
  __ANT_CARD_GRID: true,
  props: {
    prefixCls: PropsTypes.string,
    hoverable: PropsTypes.looseBool
  },
  setup: function setup68() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render53() {
    var _classString;
    var _this$$props = this.$props, customizePrefixCls = _this$$props.prefixCls, _this$$props$hoverabl = _this$$props.hoverable, hoverable = _this$$props$hoverabl === void 0 ? true : _this$$props$hoverabl;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("card", customizePrefixCls);
    var classString = (_classString = {}, _defineProperty$U(_classString, "".concat(prefixCls2, "-grid"), true), _defineProperty$U(_classString, "".concat(prefixCls2, "-grid-hoverable"), hoverable), _classString);
    return createVNode("div", {
      "class": classString
    }, [getSlot(this)]);
  }
});
Card$1.Meta = Meta;
Card$1.Grid = Grid;
Card$1.install = function(app) {
  app.component(Card$1.name, Card$1);
  app.component(Meta.name, Meta);
  app.component(Grid.name, Grid);
  return app;
};
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props2) {
  for (var i2 = 0; i2 < props2.length; i2++) {
    var descriptor = props2[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
function toFinite(value26) {
  if (!value26) {
    return value26 === 0 ? value26 : 0;
  }
  value26 = toNumber(value26);
  if (value26 === INFINITY || value26 === -INFINITY) {
    var sign2 = value26 < 0 ? -1 : 1;
    return sign2 * MAX_INTEGER;
  }
  return value26 === value26 ? value26 : 0;
}
function toInteger(value26) {
  var result = toFinite(value26), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var nativeMax$1 = Math.max;
function indexOf(array3, value26, fromIndex) {
  var length = array3 == null ? 0 : array3.length;
  if (!length) {
    return -1;
  }
  var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index2 < 0) {
    index2 = nativeMax$1(length + index2, 0);
  }
  return baseIndexOf(array3, value26, index2);
}
var re = /\s+/;
var ClassList = /* @__PURE__ */ function() {
  function ClassList2(el) {
    _classCallCheck(this, ClassList2);
    if (!el || !el.nodeType) {
      throw new Error("A DOM element reference is required");
    }
    this.el = el;
    this.list = el.classList;
  }
  _createClass(ClassList2, [{
    key: "array",
    value: function array3() {
      var className = this.el.getAttribute("class") || "";
      var str = className.replace(/^\s+|\s+$/g, "");
      var arr = str.split(re);
      if (arr[0] === "")
        arr.shift();
      return arr;
    }
  }, {
    key: "add",
    value: function add3(name2) {
      if (this.list) {
        this.list.add(name2);
        return this;
      }
      var arr = this.array();
      var i2 = indexOf(arr, name2);
      if (!~i2)
        arr.push(name2);
      this.el.className = arr.join(" ");
      return this;
    }
  }, {
    key: "remove",
    value: function remove3(name2) {
      if (toString.call(name2) === "[object RegExp]") {
        return this._removeMatching(name2);
      }
      if (this.list) {
        this.list.remove(name2);
        return this;
      }
      var arr = this.array();
      var i2 = indexOf(arr, name2);
      if (~i2)
        arr.splice(i2, 1);
      this.el.className = arr.join(" ");
      return this;
    }
  }, {
    key: "_removeMatching",
    value: function _removeMatching(re2) {
      var arr = this.array();
      for (var i2 = 0; i2 < arr.length; i2++) {
        if (re2.test(arr[i2])) {
          this.remove(arr[i2]);
        }
      }
      return this;
    }
  }, {
    key: "toggle",
    value: function toggle(name2, force) {
      if (this.list) {
        if (typeof force !== "undefined") {
          if (force !== this.list.toggle(name2, force)) {
            this.list.toggle(name2);
          }
        } else {
          this.list.toggle(name2);
        }
        return this;
      }
      if (typeof force !== "undefined") {
        if (!force) {
          this.remove(name2);
        } else {
          this.add(name2);
        }
      } else {
        if (this.has(name2)) {
          this.remove(name2);
        } else {
          this.add(name2);
        }
      }
      return this;
    }
  }, {
    key: "has",
    value: function has2(name2) {
      return this.list ? this.list.contains(name2) : !!~indexOf(this.array(), name2);
    }
  }, {
    key: "contains",
    value: function contains2(name2) {
      return this.has(name2);
    }
  }]);
  return ClassList2;
}();
function classes(el) {
  return new ClassList(el);
}
var isCssAnimationSupported = Event$1.endEvents.length !== 0;
var capitalPrefixes = [
  "Webkit",
  "Moz",
  "O",
  "ms"
];
var prefixes = ["-webkit-", "-moz-", "-o-", "ms-", ""];
function getStyleProperty(node, name2) {
  var style3 = window.getComputedStyle(node, null);
  var ret = "";
  for (var i2 = 0; i2 < prefixes.length; i2++) {
    ret = style3.getPropertyValue(prefixes[i2] + name2);
    if (ret) {
      break;
    }
  }
  return ret;
}
function fixBrowserByTimeout(node) {
  if (isCssAnimationSupported) {
    var transitionDelay = parseFloat(getStyleProperty(node, "transition-delay")) || 0;
    var transitionDuration = parseFloat(getStyleProperty(node, "transition-duration")) || 0;
    var animationDelay = parseFloat(getStyleProperty(node, "animation-delay")) || 0;
    var animationDuration = parseFloat(getStyleProperty(node, "animation-duration")) || 0;
    var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
    node.rcEndAnimTimeout = setTimeout(function() {
      node.rcEndAnimTimeout = null;
      if (node.rcEndListener) {
        node.rcEndListener();
      }
    }, time * 1e3 + 200);
  }
}
function clearBrowserBugTimeout(node) {
  if (node.rcEndAnimTimeout) {
    clearTimeout(node.rcEndAnimTimeout);
    node.rcEndAnimTimeout = null;
  }
}
var cssAnimation = function cssAnimation2(node, transitionName2, endCallback) {
  var nameIsObj = _typeof$2(transitionName2) === "object";
  var className = nameIsObj ? transitionName2.name : transitionName2;
  var activeClassName = nameIsObj ? transitionName2.active : "".concat(transitionName2, "-active");
  var end = endCallback;
  var start;
  var active;
  var nodeClasses = classes(node);
  if (endCallback && Object.prototype.toString.call(endCallback) === "[object Object]") {
    end = endCallback.end;
    start = endCallback.start;
    active = endCallback.active;
  }
  if (node.rcEndListener) {
    node.rcEndListener();
  }
  node.rcEndListener = function(e2) {
    if (e2 && e2.target !== node) {
      return;
    }
    if (node.rcAnimTimeout) {
      cancelAnimationTimeout(node.rcAnimTimeout);
      node.rcAnimTimeout = null;
    }
    clearBrowserBugTimeout(node);
    nodeClasses.remove(className);
    nodeClasses.remove(activeClassName);
    Event$1.removeEndEventListener(node, node.rcEndListener);
    node.rcEndListener = null;
    if (end) {
      end();
    }
  };
  Event$1.addEndEventListener(node, node.rcEndListener);
  if (start) {
    start();
  }
  nodeClasses.add(className);
  node.rcAnimTimeout = requestAnimationTimeout(function() {
    node.rcAnimTimeout = null;
    nodeClasses.add(className);
    nodeClasses.add(activeClassName);
    if (active) {
      requestAnimationTimeout(active, 0);
    }
    fixBrowserByTimeout(node);
  }, 30);
  return {
    stop: function stop2() {
      if (node.rcEndListener) {
        node.rcEndListener();
      }
    }
  };
};
cssAnimation.style = function(node, style3, callback) {
  if (node.rcEndListener) {
    node.rcEndListener();
  }
  node.rcEndListener = function(e2) {
    if (e2 && e2.target !== node) {
      return;
    }
    if (node.rcAnimTimeout) {
      cancelAnimationTimeout(node.rcAnimTimeout);
      node.rcAnimTimeout = null;
    }
    clearBrowserBugTimeout(node);
    Event$1.removeEndEventListener(node, node.rcEndListener);
    node.rcEndListener = null;
    if (callback) {
      callback();
    }
  };
  Event$1.addEndEventListener(node, node.rcEndListener);
  node.rcAnimTimeout = requestAnimationTimeout(function() {
    for (var s2 in style3) {
      if (style3.hasOwnProperty(s2)) {
        node.style[s2] = style3[s2];
      }
    }
    node.rcAnimTimeout = null;
    fixBrowserByTimeout(node);
  }, 0);
};
cssAnimation.setTransition = function(node, p2, value26) {
  var property2 = p2;
  var v2 = value26;
  if (value26 === void 0) {
    v2 = property2;
    property2 = "";
  }
  property2 = property2 || "";
  capitalPrefixes.forEach(function(prefix) {
    node.style["".concat(prefix, "Transition").concat(property2)] = v2;
  });
};
cssAnimation.isCssAnimationSupported = isCssAnimationSupported;
var cssAnimation$1 = cssAnimation;
function animate$1(node, show, done) {
  var height;
  var requestAnimationFrameId;
  var appearRequestAnimationFrameId;
  return cssAnimation$1(node, "ant-motion-collapse-legacy", {
    start: function start() {
      if (appearRequestAnimationFrameId) {
        cancelAnimationFrame(appearRequestAnimationFrameId);
      }
      if (!show) {
        node.style.height = "".concat(node.offsetHeight, "px");
        node.style.opacity = "1";
      } else {
        height = node.offsetHeight;
        if (height === 0) {
          appearRequestAnimationFrameId = requestAnimationFrame(function() {
            height = node.offsetHeight;
            node.style.height = "0px";
            node.style.opacity = "0";
          });
        } else {
          node.style.height = "0px";
          node.style.opacity = "0";
        }
      }
    },
    active: function active() {
      if (requestAnimationFrameId) {
        cancelAnimationFrame(requestAnimationFrameId);
      }
      requestAnimationFrameId = requestAnimationFrame(function() {
        node.style.height = "".concat(show ? height : 0, "px");
        node.style.opacity = show ? "1" : "0";
      });
    },
    end: function end() {
      if (appearRequestAnimationFrameId) {
        cancelAnimationFrame(appearRequestAnimationFrameId);
      }
      if (requestAnimationFrameId) {
        cancelAnimationFrame(requestAnimationFrameId);
      }
      node.style.height = "";
      node.style.opacity = "";
      done && done();
    }
  });
}
var animation$1 = {
  onEnter: function onEnter(node, done) {
    nextTick(function() {
      animate$1(node, true, done);
    });
  },
  onLeave: function onLeave(node, done) {
    return animate$1(node, false, done);
  }
};
var animation$2 = animation$1;
var PanelContent = defineComponent({
  name: "PanelContent",
  props: {
    prefixCls: PropsTypes.string,
    isActive: PropsTypes.looseBool,
    destroyInactivePanel: PropsTypes.looseBool,
    forceRender: PropsTypes.looseBool,
    role: PropsTypes.any
  },
  data: function data19() {
    return {
      _isActive: void 0
    };
  },
  render: function render54() {
    var _contentCls;
    this._isActive = this.forceRender || this._isActive || this.isActive;
    if (!this._isActive) {
      return null;
    }
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, isActive = _this$$props.isActive, destroyInactivePanel = _this$$props.destroyInactivePanel, forceRender = _this$$props.forceRender, role = _this$$props.role;
    var contentCls = (_contentCls = {}, _defineProperty$U(_contentCls, "".concat(prefixCls2, "-content"), true), _defineProperty$U(_contentCls, "".concat(prefixCls2, "-content-active"), isActive), _contentCls);
    var child = !forceRender && !isActive && destroyInactivePanel ? null : createVNode("div", {
      "class": "".concat(prefixCls2, "-content-box")
    }, [getSlot(this)]);
    return createVNode("div", {
      "class": contentCls,
      "role": role
    }, [child]);
  }
});
var collapseProps$1 = function collapseProps2() {
  return {
    prefixCls: PropsTypes.string,
    activeKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]))]),
    defaultActiveKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]))]),
    accordion: PropsTypes.looseBool,
    destroyInactivePanel: PropsTypes.looseBool,
    bordered: PropsTypes.looseBool,
    expandIcon: PropsTypes.func,
    openAnimation: PropsTypes.object,
    expandIconPosition: PropsTypes.oneOf(["left", "right"]),
    onChange: PropsTypes.func
  };
};
var panelProps = function panelProps2() {
  return {
    openAnimation: PropsTypes.object,
    prefixCls: PropsTypes.string,
    header: PropsTypes.any,
    headerClass: PropsTypes.string,
    showArrow: PropsTypes.looseBool,
    isActive: PropsTypes.looseBool,
    destroyInactivePanel: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    accordion: PropsTypes.looseBool,
    forceRender: PropsTypes.looseBool,
    expandIcon: PropsTypes.func,
    extra: PropsTypes.any,
    panelKey: PropsTypes.any
  };
};
var CollapsePanel = defineComponent({
  name: "Panel",
  mixins: [BaseMixin],
  props: initDefaultProps$2(panelProps(), {
    showArrow: true,
    isActive: false,
    destroyInactivePanel: false,
    headerClass: "",
    forceRender: false
  }),
  methods: {
    handleItemClick: function handleItemClick() {
      this.__emit("itemClick", this.panelKey);
    },
    handleKeyPress: function handleKeyPress(e2) {
      if (e2.key === "Enter" || e2.keyCode === 13 || e2.which === 13) {
        this.handleItemClick();
      }
    }
  },
  render: function render55() {
    var _headerCls, _itemCls, _this = this;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, headerClass = _this$$props.headerClass, isActive = _this$$props.isActive, showArrow = _this$$props.showArrow, destroyInactivePanel = _this$$props.destroyInactivePanel, disabled = _this$$props.disabled, openAnimation2 = _this$$props.openAnimation, accordion = _this$$props.accordion, forceRender = _this$$props.forceRender, expandIcon = _this$$props.expandIcon, extra = _this$$props.extra;
    var transitionProps = _extends$1({
      appear: true,
      css: false
    }, openAnimation2);
    var headerCls = (_headerCls = {}, _defineProperty$U(_headerCls, "".concat(prefixCls2, "-header"), true), _defineProperty$U(_headerCls, headerClass, headerClass), _headerCls);
    var header = getComponent(this, "header");
    var itemCls = (_itemCls = {}, _defineProperty$U(_itemCls, "".concat(prefixCls2, "-item"), true), _defineProperty$U(_itemCls, "".concat(prefixCls2, "-item-active"), isActive), _defineProperty$U(_itemCls, "".concat(prefixCls2, "-item-disabled"), disabled), _itemCls);
    var icon = createVNode("i", {
      "class": "arrow"
    }, null);
    if (showArrow && typeof expandIcon === "function") {
      icon = expandIcon(this.$props);
    }
    var panelContent = withDirectives(createVNode(PanelContent, {
      "prefixCls": prefixCls2,
      "isActive": isActive,
      "destroyInactivePanel": destroyInactivePanel,
      "forceRender": forceRender,
      "role": accordion ? "tabpanel" : null
    }, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    }), [[vShow, isActive]]);
    return createVNode("div", {
      "class": itemCls,
      "role": "tablist"
    }, [createVNode("div", {
      "class": headerCls,
      "onClick": this.handleItemClick,
      "onKeypress": this.handleKeyPress,
      "role": accordion ? "tab" : "button",
      "tabindex": disabled ? -1 : 0,
      "aria-expanded": isActive
    }, [showArrow && icon, header, extra && createVNode("div", {
      "class": "".concat(prefixCls2, "-extra")
    }, [extra])]), createVNode(Transition, transitionProps, {
      default: function _default8() {
        return [panelContent];
      }
    })]);
  }
});
function animate(node, show, transitionName2, done) {
  var height;
  return cssAnimation$1(node, transitionName2, {
    start: function start() {
      if (!show) {
        node.style.height = "".concat(node.offsetHeight, "px");
      } else {
        height = node.offsetHeight;
        node.style.height = 0;
      }
    },
    active: function active() {
      node.style.height = "".concat(show ? height : 0, "px");
    },
    end: function end() {
      node.style.height = "";
      done();
    }
  });
}
function animation(prefixCls2) {
  return {
    onEnter: function onEnter2(node, done) {
      return animate(node, true, "".concat(prefixCls2, "-anim"), done);
    },
    onLeave: function onLeave2(node, done) {
      return animate(node, false, "".concat(prefixCls2, "-anim"), done);
    }
  };
}
function _toArray(activeKey2) {
  var currentActiveKey = activeKey2;
  if (!Array.isArray(currentActiveKey)) {
    var activeKeyType = _typeof$2(currentActiveKey);
    currentActiveKey = activeKeyType === "number" || activeKeyType === "string" ? [currentActiveKey] : [];
  }
  return currentActiveKey.map(function(key2) {
    return String(key2);
  });
}
var Collapse$1 = defineComponent({
  name: "Collapse",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(collapseProps$1(), {
    prefixCls: "rc-collapse",
    accordion: false,
    destroyInactivePanel: false
  }),
  data: function data20() {
    var _this$$props = this.$props, activeKey2 = _this$$props.activeKey, defaultActiveKey = _this$$props.defaultActiveKey, openAnimation2 = _this$$props.openAnimation, prefixCls2 = _this$$props.prefixCls;
    var currentActiveKey = defaultActiveKey;
    if (hasProp(this, "activeKey")) {
      currentActiveKey = activeKey2;
    }
    var currentOpenAnimations = openAnimation2 || animation(prefixCls2);
    return {
      currentOpenAnimations,
      stateActiveKey: _toArray(currentActiveKey)
    };
  },
  watch: {
    activeKey: function activeKey(val) {
      this.setState({
        stateActiveKey: _toArray(val)
      });
    },
    openAnimation: function openAnimation(val) {
      this.setState({
        currentOpenAnimations: val
      });
    }
  },
  methods: {
    onClickItem: function onClickItem(key2) {
      var activeKey2 = this.stateActiveKey;
      if (this.accordion) {
        activeKey2 = activeKey2[0] === key2 ? [] : [key2];
      } else {
        activeKey2 = _toConsumableArray(activeKey2);
        var index2 = activeKey2.indexOf(key2);
        var isActive = index2 > -1;
        if (isActive) {
          activeKey2.splice(index2, 1);
        } else {
          activeKey2.push(key2);
        }
      }
      this.setActiveKey(activeKey2);
    },
    getNewChild: function getNewChild(child, index2) {
      var _a;
      if (isEmptyElement(child))
        return;
      var activeKey2 = this.stateActiveKey;
      var _this$$props2 = this.$props, prefixCls2 = _this$$props2.prefixCls, accordion = _this$$props2.accordion, destroyInactivePanel = _this$$props2.destroyInactivePanel, expandIcon = _this$$props2.expandIcon;
      var key2 = String((_a = child.key) !== null && _a !== void 0 ? _a : index2);
      var _getPropsData = getPropsData(child), header = _getPropsData.header, headerClass = _getPropsData.headerClass, disabled = _getPropsData.disabled;
      var isActive = false;
      if (accordion) {
        isActive = activeKey2[0] === key2;
      } else {
        isActive = activeKey2.indexOf(key2) > -1;
      }
      var panelEvents = {};
      if (!disabled && disabled !== "") {
        panelEvents = {
          onItemClick: this.onClickItem
        };
      }
      var props2 = _extends$1({
        key: key2,
        panelKey: key2,
        header,
        headerClass,
        isActive,
        prefixCls: prefixCls2,
        destroyInactivePanel,
        openAnimation: this.currentOpenAnimations,
        accordion,
        expandIcon
      }, panelEvents);
      return cloneElement(child, props2);
    },
    getItems: function getItems() {
      var _this = this;
      var newChildren = [];
      var children = getSlot(this);
      children && children.forEach(function(child, index2) {
        newChildren.push(_this.getNewChild(child, index2));
      });
      return newChildren;
    },
    setActiveKey: function setActiveKey2(activeKey2) {
      if (!hasProp(this, "activeKey")) {
        this.setState({
          stateActiveKey: activeKey2
        });
      }
      this.__emit("change", this.accordion ? activeKey2[0] : activeKey2);
    }
  },
  render: function render56() {
    var _collapseClassName;
    var _this$$props3 = this.$props, prefixCls2 = _this$$props3.prefixCls, accordion = _this$$props3.accordion;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    var collapseClassName = (_collapseClassName = {}, _defineProperty$U(_collapseClassName, prefixCls2, true), _defineProperty$U(_collapseClassName, className, className), _collapseClassName);
    return createVNode("div", _objectSpread2$2(_objectSpread2$2({
      "class": collapseClassName
    }, getDataAndAriaProps$1(this.$attrs)), {}, {
      "style": style3,
      "role": accordion ? "tablist" : null
    }), [this.getItems()]);
  }
});
Collapse$1.Panel = CollapsePanel;
var __rest$A = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var collapseProps = {
  prefixCls: PropsTypes.string,
  activeKey: {
    type: [Array, Number, String]
  },
  defaultActiveKey: {
    type: [Array, Number, String]
  },
  accordion: PropsTypes.looseBool,
  destroyInactivePanel: PropsTypes.looseBool,
  bordered: PropsTypes.looseBool.def(true),
  expandIcon: PropsTypes.func,
  openAnimation: PropsTypes.object.def(animation$2),
  expandIconPosition: PropsTypes.oneOf(tuple("left", "right")).def("left"),
  "onUpdate:activeKey": PropsTypes.func,
  onChange: PropsTypes.func
};
var Collapse = defineComponent({
  name: "ACollapse",
  inheritAttrs: false,
  props: collapseProps,
  setup: function setup69() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    renderExpandIcon: function renderExpandIcon() {
      var panelProps3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var prefixCls2 = arguments.length > 1 ? arguments[1] : void 0;
      var expandIcon = getComponent(this, "expandIcon", panelProps3);
      var icon = expandIcon || createVNode(RightOutlined$1, {
        "rotate": panelProps3.isActive ? 90 : void 0
      }, null);
      return isValidElement(Array.isArray(expandIcon) ? icon[0] : icon) ? cloneElement(icon, {
        class: "".concat(prefixCls2, "-arrow")
      }) : icon;
    },
    handleChange: function handleChange7(activeKey2) {
      this.$emit("update:activeKey", activeKey2);
      this.$emit("change", activeKey2);
    }
  },
  render: function render57() {
    var _collapseClassName, _this = this;
    var customizePrefixCls = this.prefixCls, bordered = this.bordered, expandIconPosition = this.expandIconPosition;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("collapse", customizePrefixCls);
    var _a = this.$attrs, className = _a.class, restAttrs = __rest$A(_a, ["class"]);
    var collapseClassName = (_collapseClassName = {}, _defineProperty$U(_collapseClassName, className, className), _defineProperty$U(_collapseClassName, "".concat(prefixCls2, "-borderless"), !bordered), _defineProperty$U(_collapseClassName, "".concat(prefixCls2, "-icon-position-").concat(expandIconPosition), true), _collapseClassName);
    var rcCollapeProps = _extends$1(_extends$1(_extends$1(_extends$1({}, getOptionProps(this)), {
      prefixCls: prefixCls2,
      expandIcon: function expandIcon(panelProps3) {
        return _this.renderExpandIcon(panelProps3, prefixCls2);
      },
      class: collapseClassName
    }), restAttrs), {
      onChange: this.handleChange
    });
    return createVNode(Collapse$1, rcCollapeProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
var __rest$z = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var collapsePanelProps = {
  openAnimation: PropsTypes.object,
  prefixCls: PropsTypes.string,
  header: PropsTypes.VNodeChild,
  headerClass: PropsTypes.string,
  showArrow: PropsTypes.looseBool,
  isActive: PropsTypes.looseBool,
  destroyInactivePanel: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  accordion: PropsTypes.looseBool,
  forceRender: PropsTypes.looseBool,
  expandIcon: PropsTypes.func,
  extra: PropsTypes.VNodeChild,
  panelKey: PropsTypes.VNodeChild
};
var __unplugin_components_11 = defineComponent({
  name: "ACollapsePanel",
  inheritAttrs: false,
  props: collapsePanelProps,
  setup: function setup70() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render58() {
    var _collapsePanelClassNa, _this = this;
    var customizePrefixCls = this.prefixCls, _this$showArrow = this.showArrow, showArrow = _this$showArrow === void 0 ? true : _this$showArrow;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("collapse", customizePrefixCls);
    var _a = this.$attrs, className = _a.class, restAttrs = __rest$z(_a, ["class"]);
    var collapsePanelClassName = (_collapsePanelClassNa = {}, _defineProperty$U(_collapsePanelClassNa, className, className), _defineProperty$U(_collapsePanelClassNa, "".concat(prefixCls2, "-no-arrow"), !showArrow), _collapsePanelClassNa);
    var rcCollapePanelProps = _extends$1(_extends$1(_extends$1({}, getOptionProps(this)), {
      header: getComponent(this, "header"),
      prefixCls: prefixCls2,
      extra: getComponent(this, "extra"),
      class: collapsePanelClassName
    }), restAttrs);
    return createVNode(Collapse$1.Panel, rcCollapePanelProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
Collapse.Panel = __unplugin_components_11;
Collapse.install = function(app) {
  app.component(Collapse.name, Collapse);
  app.component(__unplugin_components_11.name, __unplugin_components_11);
  return app;
};
var camel2hyphen = function camel2hyphen2(str) {
  return str.replace(/[A-Z]/g, function(match5) {
    return "-" + match5.toLowerCase();
  }).toLowerCase();
};
var isDimension = function isDimension2(feature) {
  var re2 = /[height|width]$/;
  return re2.test(feature);
};
var obj2mq = function obj2mq2(obj) {
  var mq = "";
  var features = Object.keys(obj);
  features.forEach(function(feature, index2) {
    var value26 = obj[feature];
    feature = camel2hyphen(feature);
    if (isDimension(feature) && typeof value26 === "number") {
      value26 = value26 + "px";
    }
    if (value26 === true) {
      mq += feature;
    } else if (value26 === false) {
      mq += "not " + feature;
    } else {
      mq += "(" + feature + ": " + value26 + ")";
    }
    if (index2 < features.length - 1) {
      mq += " and ";
    }
  });
  return mq;
};
function json2mq(query) {
  var mq = "";
  if (typeof query === "string") {
    return query;
  }
  if (query instanceof Array) {
    query.forEach(function(q2, index2) {
      mq += obj2mq(q2);
      if (index2 < query.length - 1) {
        mq += ", ";
      }
    });
    return mq;
  }
  return obj2mq(query);
}
var defaultProps$2 = {
  accessibility: PropsTypes.looseBool.def(true),
  adaptiveHeight: PropsTypes.looseBool.def(false),
  afterChange: PropsTypes.any.def(null),
  arrows: PropsTypes.looseBool.def(true),
  autoplay: PropsTypes.looseBool.def(false),
  autoplaySpeed: PropsTypes.number.def(3e3),
  beforeChange: PropsTypes.any.def(null),
  centerMode: PropsTypes.looseBool.def(false),
  centerPadding: PropsTypes.string.def("50px"),
  cssEase: PropsTypes.string.def("ease"),
  dots: PropsTypes.looseBool.def(false),
  dotsClass: PropsTypes.string.def("slick-dots"),
  draggable: PropsTypes.looseBool.def(true),
  unslick: PropsTypes.looseBool.def(false),
  easing: PropsTypes.string.def("linear"),
  edgeFriction: PropsTypes.number.def(0.35),
  fade: PropsTypes.looseBool.def(false),
  focusOnSelect: PropsTypes.looseBool.def(false),
  infinite: PropsTypes.looseBool.def(true),
  initialSlide: PropsTypes.number.def(0),
  lazyLoad: PropsTypes.any.def(null),
  verticalSwiping: PropsTypes.looseBool.def(false),
  asNavFor: PropsTypes.any.def(null),
  pauseOnDotsHover: PropsTypes.looseBool.def(false),
  pauseOnFocus: PropsTypes.looseBool.def(false),
  pauseOnHover: PropsTypes.looseBool.def(true),
  responsive: PropsTypes.array,
  rows: PropsTypes.number.def(1),
  rtl: PropsTypes.looseBool.def(false),
  slide: PropsTypes.string.def("div"),
  slidesPerRow: PropsTypes.number.def(1),
  slidesToScroll: PropsTypes.number.def(1),
  slidesToShow: PropsTypes.number.def(1),
  speed: PropsTypes.number.def(500),
  swipe: PropsTypes.looseBool.def(true),
  swipeEvent: PropsTypes.any.def(null),
  swipeToSlide: PropsTypes.looseBool.def(false),
  touchMove: PropsTypes.looseBool.def(true),
  touchThreshold: PropsTypes.number.def(5),
  useCSS: PropsTypes.looseBool.def(true),
  useTransform: PropsTypes.looseBool.def(true),
  variableWidth: PropsTypes.looseBool.def(false),
  vertical: PropsTypes.looseBool.def(false),
  waitForAnimate: PropsTypes.looseBool.def(true),
  children: PropsTypes.array,
  __propsSymbol__: PropsTypes.any
};
var defaultProps$3 = defaultProps$2;
var initialState = {
  animating: false,
  autoplaying: null,
  currentDirection: 0,
  currentLeft: null,
  currentSlide: 0,
  direction: 1,
  dragging: false,
  edgeDragged: false,
  initialized: false,
  lazyLoadedList: [],
  listHeight: null,
  listWidth: null,
  scrolling: false,
  slideCount: null,
  slideHeight: null,
  slideWidth: null,
  swipeLeft: null,
  swiped: false,
  swiping: false,
  touchObject: {
    startX: 0,
    startY: 0,
    curX: 0,
    curY: 0
  },
  trackStyle: {},
  trackWidth: 0
};
var initialState$1 = initialState;
var getOnDemandLazySlides = function getOnDemandLazySlides2(spec) {
  var onDemandSlides = [];
  var startIndex = lazyStartIndex(spec);
  var endIndex = lazyEndIndex(spec);
  for (var slideIndex = startIndex; slideIndex < endIndex; slideIndex++) {
    if (spec.lazyLoadedList.indexOf(slideIndex) < 0) {
      onDemandSlides.push(slideIndex);
    }
  }
  return onDemandSlides;
};
var lazyStartIndex = function lazyStartIndex2(spec) {
  return spec.currentSlide - lazySlidesOnLeft(spec);
};
var lazyEndIndex = function lazyEndIndex2(spec) {
  return spec.currentSlide + lazySlidesOnRight(spec);
};
var lazySlidesOnLeft = function lazySlidesOnLeft2(spec) {
  return spec.centerMode ? Math.floor(spec.slidesToShow / 2) + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : 0;
};
var lazySlidesOnRight = function lazySlidesOnRight2(spec) {
  return spec.centerMode ? Math.floor((spec.slidesToShow - 1) / 2) + 1 + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : spec.slidesToShow;
};
var getWidth = function getWidth2(elem) {
  return elem && elem.offsetWidth || 0;
};
var getHeight = function getHeight2(elem) {
  return elem && elem.offsetHeight || 0;
};
var getSwipeDirection = function getSwipeDirection2(touchObject) {
  var verticalSwiping = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
  var swipeAngle;
  var xDist = touchObject.startX - touchObject.curX;
  var yDist = touchObject.startY - touchObject.curY;
  var r2 = Math.atan2(yDist, xDist);
  swipeAngle = Math.round(r2 * 180 / Math.PI);
  if (swipeAngle < 0) {
    swipeAngle = 360 - Math.abs(swipeAngle);
  }
  if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
    return "left";
  }
  if (swipeAngle >= 135 && swipeAngle <= 225) {
    return "right";
  }
  if (verticalSwiping === true) {
    if (swipeAngle >= 35 && swipeAngle <= 135) {
      return "up";
    } else {
      return "down";
    }
  }
  return "vertical";
};
var canGoNext = function canGoNext2(spec) {
  var canGo = true;
  if (!spec.infinite) {
    if (spec.centerMode && spec.currentSlide >= spec.slideCount - 1) {
      canGo = false;
    } else if (spec.slideCount <= spec.slidesToShow || spec.currentSlide >= spec.slideCount - spec.slidesToShow) {
      canGo = false;
    }
  }
  return canGo;
};
var extractObject = function extractObject2(spec, keys2) {
  var newObject = {};
  keys2.forEach(function(key2) {
    return newObject[key2] = spec[key2];
  });
  return newObject;
};
var initializedState = function initializedState2(spec) {
  var slideCount = spec.children.length;
  var listWidth = Math.ceil(getWidth(spec.listRef));
  var trackWidth = Math.ceil(getWidth(spec.trackRef));
  var slideWidth;
  if (!spec.vertical) {
    var centerPaddingAdj = spec.centerMode && parseInt(spec.centerPadding) * 2;
    if (typeof spec.centerPadding === "string" && spec.centerPadding.slice(-1) === "%") {
      centerPaddingAdj *= listWidth / 100;
    }
    slideWidth = Math.ceil((listWidth - centerPaddingAdj) / spec.slidesToShow);
  } else {
    slideWidth = listWidth;
  }
  var slideHeight = spec.listRef && getHeight(spec.listRef.querySelector('[data-index="0"]'));
  var listHeight = slideHeight * spec.slidesToShow;
  var currentSlide = spec.currentSlide === void 0 ? spec.initialSlide : spec.currentSlide;
  if (spec.rtl && spec.currentSlide === void 0) {
    currentSlide = slideCount - 1 - spec.initialSlide;
  }
  var lazyLoadedList = spec.lazyLoadedList || [];
  var slidesToLoad = getOnDemandLazySlides({
    currentSlide,
    lazyLoadedList
  });
  lazyLoadedList.concat(slidesToLoad);
  var state2 = {
    slideCount,
    slideWidth,
    listWidth,
    trackWidth,
    currentSlide,
    slideHeight,
    listHeight,
    lazyLoadedList
  };
  if (spec.autoplaying === null && spec.autoplay) {
    state2["autoplaying"] = "playing";
  }
  return state2;
};
var slideHandler = function slideHandler2(spec) {
  var waitForAnimate = spec.waitForAnimate, animating = spec.animating, fade = spec.fade, infinite = spec.infinite, index2 = spec.index, slideCount = spec.slideCount, lazyLoadedList = spec.lazyLoadedList, lazyLoad = spec.lazyLoad, currentSlide = spec.currentSlide, centerMode = spec.centerMode, slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, useCSS = spec.useCSS;
  if (waitForAnimate && animating)
    return {};
  var animationSlide = index2;
  var finalSlide;
  var animationLeft;
  var finalLeft;
  var state2 = {};
  var nextState = {};
  if (fade) {
    if (!infinite && (index2 < 0 || index2 >= slideCount))
      return {};
    if (index2 < 0) {
      animationSlide = index2 + slideCount;
    } else if (index2 >= slideCount) {
      animationSlide = index2 - slideCount;
    }
    if (lazyLoad && lazyLoadedList.indexOf(animationSlide) < 0) {
      lazyLoadedList.push(animationSlide);
    }
    state2 = {
      animating: true,
      currentSlide: animationSlide,
      lazyLoadedList
    };
    nextState = {
      animating: false
    };
  } else {
    finalSlide = animationSlide;
    if (animationSlide < 0) {
      finalSlide = animationSlide + slideCount;
      if (!infinite)
        finalSlide = 0;
      else if (slideCount % slidesToScroll !== 0) {
        finalSlide = slideCount - slideCount % slidesToScroll;
      }
    } else if (!canGoNext(spec) && animationSlide > currentSlide) {
      animationSlide = finalSlide = currentSlide;
    } else if (centerMode && animationSlide >= slideCount) {
      animationSlide = infinite ? slideCount : slideCount - 1;
      finalSlide = infinite ? 0 : slideCount - 1;
    } else if (animationSlide >= slideCount) {
      finalSlide = animationSlide - slideCount;
      if (!infinite)
        finalSlide = slideCount - slidesToShow;
      else if (slideCount % slidesToScroll !== 0)
        finalSlide = 0;
    }
    animationLeft = getTrackLeft(_extends$1(_extends$1({}, spec), {
      slideIndex: animationSlide
    }));
    finalLeft = getTrackLeft(_extends$1(_extends$1({}, spec), {
      slideIndex: finalSlide
    }));
    if (!infinite) {
      if (animationLeft === finalLeft)
        animationSlide = finalSlide;
      animationLeft = finalLeft;
    }
    lazyLoad && lazyLoadedList.concat(getOnDemandLazySlides(_extends$1(_extends$1({}, spec), {
      currentSlide: animationSlide
    })));
    if (!useCSS) {
      state2 = {
        currentSlide: finalSlide,
        trackStyle: getTrackCSS(_extends$1(_extends$1({}, spec), {
          left: finalLeft
        })),
        lazyLoadedList
      };
    } else {
      state2 = {
        animating: true,
        currentSlide: finalSlide,
        trackStyle: getTrackAnimateCSS(_extends$1(_extends$1({}, spec), {
          left: animationLeft
        })),
        lazyLoadedList
      };
      nextState = {
        animating: false,
        currentSlide: finalSlide,
        trackStyle: getTrackCSS(_extends$1(_extends$1({}, spec), {
          left: finalLeft
        })),
        swipeLeft: null
      };
    }
  }
  return {
    state: state2,
    nextState
  };
};
var changeSlide = function changeSlide2(spec, options2) {
  var previousInt, slideOffset, targetSlide;
  var slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, slideCount = spec.slideCount, currentSlide = spec.currentSlide, lazyLoad = spec.lazyLoad, infinite = spec.infinite;
  var unevenOffset = slideCount % slidesToScroll !== 0;
  var indexOffset = unevenOffset ? 0 : (slideCount - currentSlide) % slidesToScroll;
  if (options2.message === "previous") {
    slideOffset = indexOffset === 0 ? slidesToScroll : slidesToShow - indexOffset;
    targetSlide = currentSlide - slideOffset;
    if (lazyLoad && !infinite) {
      previousInt = currentSlide - slideOffset;
      targetSlide = previousInt === -1 ? slideCount - 1 : previousInt;
    }
  } else if (options2.message === "next") {
    slideOffset = indexOffset === 0 ? slidesToScroll : indexOffset;
    targetSlide = currentSlide + slideOffset;
    if (lazyLoad && !infinite) {
      targetSlide = (currentSlide + slidesToScroll) % slideCount + indexOffset;
    }
  } else if (options2.message === "dots") {
    targetSlide = options2.index * options2.slidesToScroll;
    if (targetSlide === options2.currentSlide) {
      return null;
    }
  } else if (options2.message === "children") {
    targetSlide = options2.index;
    if (targetSlide === options2.currentSlide) {
      return null;
    }
    if (infinite) {
      var direction = siblingDirection(_extends$1(_extends$1({}, spec), {
        targetSlide
      }));
      if (targetSlide > options2.currentSlide && direction === "left") {
        targetSlide = targetSlide - slideCount;
      } else if (targetSlide < options2.currentSlide && direction === "right") {
        targetSlide = targetSlide + slideCount;
      }
    }
  } else if (options2.message === "index") {
    targetSlide = Number(options2.index);
    if (targetSlide === options2.currentSlide) {
      return null;
    }
  }
  return targetSlide;
};
var keyHandler = function keyHandler2(e2, accessibility, rtl) {
  if (e2.target.tagName.match("TEXTAREA|INPUT|SELECT") || !accessibility) {
    return "";
  }
  if (e2.keyCode === 37)
    return rtl ? "next" : "previous";
  if (e2.keyCode === 39)
    return rtl ? "previous" : "next";
  return "";
};
var swipeStart = function swipeStart2(e2, swipe, draggable) {
  e2.target.tagName === "IMG" && e2.preventDefault();
  if (!swipe || !draggable && e2.type.indexOf("mouse") !== -1)
    return "";
  return {
    dragging: true,
    touchObject: {
      startX: e2.touches ? e2.touches[0].pageX : e2.clientX,
      startY: e2.touches ? e2.touches[0].pageY : e2.clientY,
      curX: e2.touches ? e2.touches[0].pageX : e2.clientX,
      curY: e2.touches ? e2.touches[0].pageY : e2.clientY
    }
  };
};
var swipeMove = function swipeMove2(e2, spec) {
  var scrolling = spec.scrolling, animating = spec.animating, vertical = spec.vertical, swipeToSlide = spec.swipeToSlide, verticalSwiping = spec.verticalSwiping, rtl = spec.rtl, currentSlide = spec.currentSlide, edgeFriction = spec.edgeFriction, edgeDragged = spec.edgeDragged, onEdge = spec.onEdge, swiped = spec.swiped, swiping = spec.swiping, slideCount = spec.slideCount, slidesToScroll = spec.slidesToScroll, infinite = spec.infinite, touchObject = spec.touchObject, swipeEvent = spec.swipeEvent, listHeight = spec.listHeight, listWidth = spec.listWidth;
  if (scrolling)
    return;
  if (animating)
    return e2.preventDefault();
  if (vertical && swipeToSlide && verticalSwiping)
    e2.preventDefault();
  var swipeLeft;
  var state2 = {};
  var curLeft = getTrackLeft(spec);
  touchObject.curX = e2.touches ? e2.touches[0].pageX : e2.clientX;
  touchObject.curY = e2.touches ? e2.touches[0].pageY : e2.clientY;
  touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));
  var verticalSwipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));
  if (!verticalSwiping && !swiping && verticalSwipeLength > 10) {
    return {
      scrolling: true
    };
  }
  if (verticalSwiping)
    touchObject.swipeLength = verticalSwipeLength;
  var positionOffset = (!rtl ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);
  if (verticalSwiping) {
    positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;
  }
  var dotCount = Math.ceil(slideCount / slidesToScroll);
  var swipeDirection = getSwipeDirection(spec.touchObject, verticalSwiping);
  var touchSwipeLength = touchObject.swipeLength;
  if (!infinite) {
    if (currentSlide === 0 && swipeDirection === "right" || currentSlide + 1 >= dotCount && swipeDirection === "left" || !canGoNext(spec) && swipeDirection === "left") {
      touchSwipeLength = touchObject.swipeLength * edgeFriction;
      if (edgeDragged === false && onEdge) {
        onEdge(swipeDirection);
        state2["edgeDragged"] = true;
      }
    }
  }
  if (!swiped && swipeEvent) {
    swipeEvent(swipeDirection);
    state2["swiped"] = true;
  }
  if (!vertical) {
    if (!rtl) {
      swipeLeft = curLeft + touchSwipeLength * positionOffset;
    } else {
      swipeLeft = curLeft - touchSwipeLength * positionOffset;
    }
  } else {
    swipeLeft = curLeft + touchSwipeLength * (listHeight / listWidth) * positionOffset;
  }
  if (verticalSwiping) {
    swipeLeft = curLeft + touchSwipeLength * positionOffset;
  }
  state2 = _extends$1(_extends$1({}, state2), {
    touchObject,
    swipeLeft,
    trackStyle: getTrackCSS(_extends$1(_extends$1({}, spec), {
      left: swipeLeft
    }))
  });
  if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {
    return state2;
  }
  if (touchObject.swipeLength > 10) {
    state2["swiping"] = true;
    e2.preventDefault();
  }
  return state2;
};
var swipeEnd = function swipeEnd2(e2, spec) {
  var dragging = spec.dragging, swipe = spec.swipe, touchObject = spec.touchObject, listWidth = spec.listWidth, touchThreshold = spec.touchThreshold, verticalSwiping = spec.verticalSwiping, listHeight = spec.listHeight, currentSlide = spec.currentSlide, swipeToSlide = spec.swipeToSlide, scrolling = spec.scrolling, onSwipe = spec.onSwipe;
  if (!dragging) {
    if (swipe)
      e2.preventDefault();
    return {};
  }
  var minSwipe = verticalSwiping ? listHeight / touchThreshold : listWidth / touchThreshold;
  var swipeDirection = getSwipeDirection(touchObject, verticalSwiping);
  var state2 = {
    dragging: false,
    edgeDragged: false,
    scrolling: false,
    swiping: false,
    swiped: false,
    swipeLeft: null,
    touchObject: {}
  };
  if (scrolling) {
    return state2;
  }
  if (!touchObject.swipeLength) {
    return state2;
  }
  if (touchObject.swipeLength > minSwipe) {
    e2.preventDefault();
    if (onSwipe) {
      onSwipe(swipeDirection);
    }
    var slideCount, newSlide;
    switch (swipeDirection) {
      case "left":
      case "up":
        newSlide = currentSlide + getSlideCount(spec);
        slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
        state2["currentDirection"] = 0;
        break;
      case "right":
      case "down":
        newSlide = currentSlide - getSlideCount(spec);
        slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
        state2["currentDirection"] = 1;
        break;
      default:
        slideCount = currentSlide;
    }
    state2["triggerSlideHandler"] = slideCount;
  } else {
    var currentLeft = getTrackLeft(spec);
    state2["trackStyle"] = getTrackAnimateCSS(_extends$1(_extends$1({}, spec), {
      left: currentLeft
    }));
  }
  return state2;
};
var getNavigableIndexes = function getNavigableIndexes2(spec) {
  var max4 = spec.infinite ? spec.slideCount * 2 : spec.slideCount;
  var breakpoint = spec.infinite ? spec.slidesToShow * -1 : 0;
  var counter = spec.infinite ? spec.slidesToShow * -1 : 0;
  var indexes = [];
  while (breakpoint < max4) {
    indexes.push(breakpoint);
    breakpoint = counter + spec.slidesToScroll;
    counter += Math.min(spec.slidesToScroll, spec.slidesToShow);
  }
  return indexes;
};
var checkNavigable = function checkNavigable2(spec, index2) {
  var navigables = getNavigableIndexes(spec);
  var prevNavigable = 0;
  if (index2 > navigables[navigables.length - 1]) {
    index2 = navigables[navigables.length - 1];
  } else {
    for (var n2 in navigables) {
      if (index2 < navigables[n2]) {
        index2 = prevNavigable;
        break;
      }
      prevNavigable = navigables[n2];
    }
  }
  return index2;
};
var getSlideCount = function getSlideCount2(spec) {
  var centerOffset = spec.centerMode ? spec.slideWidth * Math.floor(spec.slidesToShow / 2) : 0;
  if (spec.swipeToSlide) {
    var swipedSlide;
    var slickList = spec.listRef;
    var slides = slickList.querySelectorAll(".slick-slide");
    Array.from(slides).every(function(slide) {
      if (!spec.vertical) {
        if (slide.offsetLeft - centerOffset + getWidth(slide) / 2 > spec.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      } else {
        if (slide.offsetTop + getHeight(slide) / 2 > spec.swipeLeft * -1) {
          swipedSlide = slide;
          return false;
        }
      }
      return true;
    });
    if (!swipedSlide) {
      return 0;
    }
    var currentIndex = spec.rtl === true ? spec.slideCount - spec.currentSlide : spec.currentSlide;
    var slidesTraversed = Math.abs(swipedSlide.dataset.index - currentIndex) || 1;
    return slidesTraversed;
  } else {
    return spec.slidesToScroll;
  }
};
var checkSpecKeys = function checkSpecKeys2(spec, keysArray) {
  return keysArray.reduce(function(value26, key2) {
    return value26 && spec.hasOwnProperty(key2);
  }, true) ? null : console.error("Keys Missing:", spec);
};
var getTrackCSS = function getTrackCSS2(spec) {
  checkSpecKeys(spec, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth"]);
  var trackWidth, trackHeight;
  var trackChildren = spec.slideCount + 2 * spec.slidesToShow;
  if (!spec.vertical) {
    trackWidth = getTotalSlides(spec) * spec.slideWidth;
  } else {
    trackHeight = trackChildren * spec.slideHeight;
  }
  var style3 = {
    opacity: 1,
    transition: "",
    WebkitTransition: ""
  };
  if (spec.useTransform) {
    var WebkitTransform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
    var transform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
    var msTransform = !spec.vertical ? "translateX(" + spec.left + "px)" : "translateY(" + spec.left + "px)";
    style3 = _extends$1(_extends$1({}, style3), {
      WebkitTransform,
      transform,
      msTransform
    });
  } else {
    if (spec.vertical) {
      style3["top"] = spec.left;
    } else {
      style3["left"] = spec.left;
    }
  }
  if (spec.fade)
    style3 = {
      opacity: 1
    };
  if (trackWidth)
    style3.width = trackWidth + "px";
  if (trackHeight)
    style3.height = trackHeight + "px";
  if (window && !window.addEventListener && window.attachEvent) {
    if (!spec.vertical) {
      style3.marginLeft = spec.left + "px";
    } else {
      style3.marginTop = spec.left + "px";
    }
  }
  return style3;
};
var getTrackAnimateCSS = function getTrackAnimateCSS2(spec) {
  checkSpecKeys(spec, ["left", "variableWidth", "slideCount", "slidesToShow", "slideWidth", "speed", "cssEase"]);
  var style3 = getTrackCSS(spec);
  if (spec.useTransform) {
    style3.WebkitTransition = "-webkit-transform " + spec.speed + "ms " + spec.cssEase;
    style3.transition = "transform " + spec.speed + "ms " + spec.cssEase;
  } else {
    if (spec.vertical) {
      style3.transition = "top " + spec.speed + "ms " + spec.cssEase;
    } else {
      style3.transition = "left " + spec.speed + "ms " + spec.cssEase;
    }
  }
  return style3;
};
var getTrackLeft = function getTrackLeft2(spec) {
  if (spec.unslick) {
    return 0;
  }
  checkSpecKeys(spec, ["slideIndex", "trackRef", "infinite", "centerMode", "slideCount", "slidesToShow", "slidesToScroll", "slideWidth", "listWidth", "variableWidth", "slideHeight"]);
  var slideIndex = spec.slideIndex, trackRef = spec.trackRef, infinite = spec.infinite, centerMode = spec.centerMode, slideCount = spec.slideCount, slidesToShow = spec.slidesToShow, slidesToScroll = spec.slidesToScroll, slideWidth = spec.slideWidth, listWidth = spec.listWidth, variableWidth = spec.variableWidth, slideHeight = spec.slideHeight, fade = spec.fade, vertical = spec.vertical;
  var slideOffset = 0;
  var targetLeft;
  var targetSlide;
  var verticalOffset = 0;
  if (fade || spec.slideCount === 1) {
    return 0;
  }
  var slidesToOffset = 0;
  if (infinite) {
    slidesToOffset = -getPreClones(spec);
    if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {
      slidesToOffset = -(slideIndex > slideCount ? slidesToShow - (slideIndex - slideCount) : slideCount % slidesToScroll);
    }
    if (centerMode) {
      slidesToOffset += parseInt(slidesToShow / 2);
    }
  } else {
    if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) {
      slidesToOffset = slidesToShow - slideCount % slidesToScroll;
    }
    if (centerMode) {
      slidesToOffset = parseInt(slidesToShow / 2);
    }
  }
  slideOffset = slidesToOffset * slideWidth;
  verticalOffset = slidesToOffset * slideHeight;
  if (!vertical) {
    targetLeft = slideIndex * slideWidth * -1 + slideOffset;
  } else {
    targetLeft = slideIndex * slideHeight * -1 + verticalOffset;
  }
  if (variableWidth === true) {
    var targetSlideIndex;
    var trackElem = trackRef;
    targetSlideIndex = slideIndex + getPreClones(spec);
    targetSlide = trackElem && trackElem.childNodes[targetSlideIndex];
    targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
    if (centerMode === true) {
      targetSlideIndex = infinite ? slideIndex + getPreClones(spec) : slideIndex;
      targetSlide = trackElem && trackElem.children[targetSlideIndex];
      targetLeft = 0;
      for (var slide = 0; slide < targetSlideIndex; slide++) {
        targetLeft -= trackElem && trackElem.children[slide] && trackElem.children[slide].offsetWidth;
      }
      targetLeft -= parseInt(spec.centerPadding);
      targetLeft += targetSlide && (listWidth - targetSlide.offsetWidth) / 2;
    }
  }
  return targetLeft;
};
var getPreClones = function getPreClones2(spec) {
  if (spec.unslick || !spec.infinite) {
    return 0;
  }
  if (spec.variableWidth) {
    return spec.slideCount;
  }
  return spec.slidesToShow + (spec.centerMode ? 1 : 0);
};
var getPostClones = function getPostClones2(spec) {
  if (spec.unslick || !spec.infinite) {
    return 0;
  }
  return spec.slideCount;
};
var getTotalSlides = function getTotalSlides2(spec) {
  return spec.slideCount === 1 ? 1 : getPreClones(spec) + spec.slideCount + getPostClones(spec);
};
var siblingDirection = function siblingDirection2(spec) {
  if (spec.targetSlide > spec.currentSlide) {
    if (spec.targetSlide > spec.currentSlide + slidesOnRight(spec)) {
      return "left";
    }
    return "right";
  } else {
    if (spec.targetSlide < spec.currentSlide - slidesOnLeft(spec)) {
      return "right";
    }
    return "left";
  }
};
var slidesOnRight = function slidesOnRight2(_ref) {
  var slidesToShow = _ref.slidesToShow, centerMode = _ref.centerMode, rtl = _ref.rtl, centerPadding = _ref.centerPadding;
  if (centerMode) {
    var right = (slidesToShow - 1) / 2 + 1;
    if (parseInt(centerPadding) > 0)
      right += 1;
    if (rtl && slidesToShow % 2 === 0)
      right += 1;
    return right;
  }
  if (rtl) {
    return 0;
  }
  return slidesToShow - 1;
};
var slidesOnLeft = function slidesOnLeft2(_ref2) {
  var slidesToShow = _ref2.slidesToShow, centerMode = _ref2.centerMode, rtl = _ref2.rtl, centerPadding = _ref2.centerPadding;
  if (centerMode) {
    var left = (slidesToShow - 1) / 2 + 1;
    if (parseInt(centerPadding) > 0)
      left += 1;
    if (!rtl && slidesToShow % 2 === 0)
      left += 1;
    return left;
  }
  if (rtl) {
    return slidesToShow - 1;
  }
  return 0;
};
var canUseDOM = function canUseDOM2() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
};
var getSlideClasses = function getSlideClasses2(spec) {
  var slickActive, slickCenter;
  var centerOffset, index2;
  if (spec.rtl) {
    index2 = spec.slideCount - 1 - spec.index;
  } else {
    index2 = spec.index;
  }
  var slickCloned = index2 < 0 || index2 >= spec.slideCount;
  if (spec.centerMode) {
    centerOffset = Math.floor(spec.slidesToShow / 2);
    slickCenter = (index2 - spec.currentSlide) % spec.slideCount === 0;
    if (index2 > spec.currentSlide - centerOffset - 1 && index2 <= spec.currentSlide + centerOffset) {
      slickActive = true;
    }
  } else {
    slickActive = spec.currentSlide <= index2 && index2 < spec.currentSlide + spec.slidesToShow;
  }
  var slickCurrent = index2 === spec.currentSlide;
  return {
    "slick-slide": true,
    "slick-active": slickActive,
    "slick-center": slickCenter,
    "slick-cloned": slickCloned,
    "slick-current": slickCurrent
  };
};
var getSlideStyle = function getSlideStyle2(spec) {
  var style3 = {};
  if (spec.variableWidth === void 0 || spec.variableWidth === false) {
    style3.width = spec.slideWidth + (typeof spec.slideWidth === "number" ? "px" : "");
  }
  if (spec.fade) {
    style3.position = "relative";
    if (spec.vertical) {
      style3.top = -spec.index * parseInt(spec.slideHeight) + "px";
    } else {
      style3.left = -spec.index * parseInt(spec.slideWidth) + "px";
    }
    style3.opacity = spec.currentSlide === spec.index ? 1 : 0;
    style3.transition = "opacity " + spec.speed + "ms " + spec.cssEase + ", visibility " + spec.speed + "ms " + spec.cssEase;
    style3.WebkitTransition = "opacity " + spec.speed + "ms " + spec.cssEase + ", visibility " + spec.speed + "ms " + spec.cssEase;
  }
  return style3;
};
var getKey = function getKey3(child, fallbackKey) {
  return child.key || child.key === 0 && "0" || fallbackKey;
};
var renderSlides = function renderSlides2(spec, children) {
  var key2;
  var slides = [];
  var preCloneSlides = [];
  var postCloneSlides = [];
  var childrenCount = children.length;
  var startIndex = lazyStartIndex(spec);
  var endIndex = lazyEndIndex(spec);
  children.forEach(function(elem, index2) {
    var child;
    var childOnClickOptions = {
      message: "children",
      index: index2,
      slidesToScroll: spec.slidesToScroll,
      currentSlide: spec.currentSlide
    };
    if (!spec.lazyLoad || spec.lazyLoad && spec.lazyLoadedList.indexOf(index2) >= 0) {
      child = elem;
    } else {
      child = createVNode("div");
    }
    var childStyle = getSlideStyle(_extends$1(_extends$1({}, spec), {
      index: index2
    }));
    var slideClass = child.props.class || "";
    var slideClasses = getSlideClasses(_extends$1(_extends$1({}, spec), {
      index: index2
    }));
    slides.push(cloneElement(child, {
      key: "original" + getKey(child, index2),
      tabindex: "-1",
      "data-index": index2,
      "aria-hidden": !slideClasses["slick-active"],
      class: classNames(slideClasses, slideClass),
      style: _extends$1(_extends$1({
        outline: "none"
      }, child.props.style || {}), childStyle),
      onClick: function onClick7() {
        if (spec.focusOnSelect) {
          spec.focusOnSelect(childOnClickOptions);
        }
      }
    }));
    if (spec.infinite && spec.fade === false) {
      var preCloneNo = childrenCount - index2;
      if (preCloneNo <= getPreClones(spec) && childrenCount !== spec.slidesToShow) {
        key2 = -preCloneNo;
        if (key2 >= startIndex) {
          child = elem;
        }
        slideClasses = getSlideClasses(_extends$1(_extends$1({}, spec), {
          index: key2
        }));
        preCloneSlides.push(cloneElement(child, {
          key: "precloned" + getKey(child, key2),
          class: classNames(slideClasses, slideClass),
          tabindex: "-1",
          "data-index": key2,
          "aria-hidden": !slideClasses["slick-active"],
          style: _extends$1(_extends$1({}, child.props.style || {}), childStyle),
          onClick: function onClick7() {
            if (spec.focusOnSelect) {
              spec.focusOnSelect(childOnClickOptions);
            }
          }
        }));
      }
      if (childrenCount !== spec.slidesToShow) {
        key2 = childrenCount + index2;
        if (key2 < endIndex) {
          child = elem;
        }
        slideClasses = getSlideClasses(_extends$1(_extends$1({}, spec), {
          index: key2
        }));
        postCloneSlides.push(cloneElement(child, {
          key: "postcloned" + getKey(child, key2),
          tabindex: "-1",
          "data-index": key2,
          "aria-hidden": !slideClasses["slick-active"],
          class: classNames(slideClasses, slideClass),
          style: _extends$1(_extends$1({}, child.props.style || {}), childStyle),
          onClick: function onClick7() {
            if (spec.focusOnSelect) {
              spec.focusOnSelect(childOnClickOptions);
            }
          }
        }));
      }
    }
  });
  if (spec.rtl) {
    return preCloneSlides.concat(slides, postCloneSlides).reverse();
  } else {
    return preCloneSlides.concat(slides, postCloneSlides);
  }
};
var Track$2 = function Track2(_2, _ref) {
  var attrs = _ref.attrs, slots = _ref.slots;
  var slides = renderSlides(attrs, flattenChildren(slots === null || slots === void 0 ? void 0 : slots.default()));
  var onMouseenter2 = attrs.onMouseenter, onMouseover = attrs.onMouseover, onMouseleave2 = attrs.onMouseleave;
  var mouseEvents = {
    onMouseenter: onMouseenter2,
    onMouseover,
    onMouseleave: onMouseleave2
  };
  var trackProps = _extends$1({
    class: "slick-track",
    style: attrs.trackStyle
  }, mouseEvents);
  return createVNode("div", trackProps, [slides]);
};
Track$2.inheritAttrs = false;
var Track$3 = Track$2;
var getDotCount = function getDotCount2(spec) {
  var dots;
  if (spec.infinite) {
    dots = Math.ceil(spec.slideCount / spec.slidesToScroll);
  } else {
    dots = Math.ceil((spec.slideCount - spec.slidesToShow) / spec.slidesToScroll) + 1;
  }
  return dots;
};
var Dots = function Dots2(_2, _ref) {
  var attrs = _ref.attrs;
  var slideCount = attrs.slideCount, slidesToScroll = attrs.slidesToScroll, slidesToShow = attrs.slidesToShow, infinite = attrs.infinite, currentSlide = attrs.currentSlide, appendDots2 = attrs.appendDots, customPaging2 = attrs.customPaging, clickHandler2 = attrs.clickHandler, dotsClass = attrs.dotsClass, onMouseenter2 = attrs.onMouseenter, onMouseover = attrs.onMouseover, onMouseleave2 = attrs.onMouseleave;
  var dotCount = getDotCount({
    slideCount,
    slidesToScroll,
    slidesToShow,
    infinite
  });
  var mouseEvents = {
    onMouseenter: onMouseenter2,
    onMouseover,
    onMouseleave: onMouseleave2
  };
  var dots = Array.apply(null, Array(dotCount + 1).join("0").split("")).map(function(x2, i2) {
    var leftBound = i2 * slidesToScroll;
    var rightBound = i2 * slidesToScroll + (slidesToScroll - 1);
    var className = classNames({
      "slick-active": currentSlide >= leftBound && currentSlide <= rightBound
    });
    var dotOptions = {
      message: "dots",
      index: i2,
      slidesToScroll,
      currentSlide
    };
    function onClick7(e2) {
      if (e2) {
        e2.preventDefault();
      }
      clickHandler2(dotOptions);
    }
    return createVNode("li", {
      "key": i2,
      "class": className
    }, [cloneElement(customPaging2({
      i: i2
    }), {
      onClick: onClick7
    })]);
  });
  return cloneElement(appendDots2({
    dots
  }), _extends$1({
    class: dotsClass
  }, mouseEvents));
};
Dots.inheritAttrs = false;
var Dots$1 = Dots;
function noop$y() {
}
function handler(options2, handle, e2) {
  if (e2) {
    e2.preventDefault();
  }
  handle(options2, e2);
}
var PrevArrow = function PrevArrow2(_2, _ref) {
  var attrs = _ref.attrs;
  var clickHandler2 = attrs.clickHandler, infinite = attrs.infinite, currentSlide = attrs.currentSlide, slideCount = attrs.slideCount, slidesToShow = attrs.slidesToShow;
  var prevClasses = {
    "slick-arrow": true,
    "slick-prev": true
  };
  var prevHandler = function prevHandler2(e2) {
    handler({
      message: "previous"
    }, clickHandler2, e2);
  };
  if (!infinite && (currentSlide === 0 || slideCount <= slidesToShow)) {
    prevClasses["slick-disabled"] = true;
    prevHandler = noop$y;
  }
  var prevArrowProps = {
    key: "0",
    "data-role": "none",
    class: prevClasses,
    style: {
      display: "block"
    },
    onClick: prevHandler
  };
  var customProps = {
    currentSlide,
    slideCount
  };
  var prevArrow;
  if (attrs.prevArrow) {
    prevArrow = cloneElement(attrs.prevArrow(_extends$1(_extends$1({}, prevArrowProps), customProps)), {
      key: "0",
      class: prevClasses,
      style: {
        display: "block"
      },
      onClick: prevHandler
    }, false);
  } else {
    prevArrow = createVNode("button", _objectSpread2$2({
      "key": "0",
      "type": "button"
    }, prevArrowProps), [" ", createTextVNode("Previous")]);
  }
  return prevArrow;
};
PrevArrow.inheritAttrs = false;
var NextArrow = function NextArrow2(_2, _ref2) {
  var attrs = _ref2.attrs;
  var clickHandler2 = attrs.clickHandler, currentSlide = attrs.currentSlide, slideCount = attrs.slideCount;
  var nextClasses = {
    "slick-arrow": true,
    "slick-next": true
  };
  var nextHandler = function nextHandler2(e2) {
    handler({
      message: "next"
    }, clickHandler2, e2);
  };
  if (!canGoNext(attrs)) {
    nextClasses["slick-disabled"] = true;
    nextHandler = noop$y;
  }
  var nextArrowProps = {
    key: "1",
    "data-role": "none",
    class: classNames(nextClasses),
    style: {
      display: "block"
    },
    onClick: nextHandler
  };
  var customProps = {
    currentSlide,
    slideCount
  };
  var nextArrow;
  if (attrs.nextArrow) {
    nextArrow = cloneElement(attrs.nextArrow(_extends$1(_extends$1({}, nextArrowProps), customProps)), {
      key: "1",
      class: classNames(nextClasses),
      style: {
        display: "block"
      },
      onClick: nextHandler
    }, false);
  } else {
    nextArrow = createVNode("button", _objectSpread2$2({
      "key": "1",
      "type": "button"
    }, nextArrowProps), [" ", createTextVNode("Next")]);
  }
  return nextArrow;
};
NextArrow.inheritAttrs = false;
var __rest$y = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$x() {
}
var InnerSlider = {
  name: "InnerSlider",
  inheritAttrs: false,
  props: _extends$1({}, defaultProps$3),
  mixins: [BaseMixin],
  data: function data21() {
    this.preProps = _extends$1({}, this.$props);
    this.list = null;
    this.track = null;
    this.callbackTimers = [];
    this.clickable = true;
    this.debouncedResize = null;
    return _extends$1(_extends$1({}, initialState$1), {
      currentSlide: this.initialSlide,
      slideCount: this.children.length
    });
  },
  methods: {
    listRefHandler: function listRefHandler(ref2) {
      this.list = ref2;
    },
    trackRefHandler: function trackRefHandler(ref2) {
      this.track = ref2;
    },
    adaptHeight: function adaptHeight() {
      if (this.adaptiveHeight && this.list) {
        var elem = this.list.querySelector('[data-index="'.concat(this.currentSlide, '"]'));
        this.list.style.height = getHeight(elem) + "px";
      }
    },
    onWindowResized: function onWindowResized(setTrackStyle) {
      var _this = this;
      if (this.debouncedResize)
        this.debouncedResize.cancel();
      this.debouncedResize = debounce$1(function() {
        return _this.resizeWindow(setTrackStyle);
      }, 50);
      this.debouncedResize();
    },
    resizeWindow: function resizeWindow() {
      var _this2 = this;
      var setTrackStyle = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (!this.track)
        return;
      var spec = _extends$1(_extends$1({
        listRef: this.list,
        trackRef: this.track,
        children: this.children
      }, this.$props), this.$data);
      this.updateState(spec, setTrackStyle, function() {
        if (_this2.autoplay) {
          _this2.handleAutoPlay("update");
        } else {
          _this2.pause("paused");
        }
      });
      this.setState({
        animating: false
      });
      clearTimeout(this.animationEndCallback);
      delete this.animationEndCallback;
    },
    updateState: function updateState(spec, setTrackStyle, callback) {
      var updatedState = initializedState(spec);
      spec = _extends$1(_extends$1(_extends$1({}, spec), updatedState), {
        slideIndex: updatedState.currentSlide
      });
      var targetLeft = getTrackLeft(spec);
      spec = _extends$1(_extends$1({}, spec), {
        left: targetLeft
      });
      var trackStyle = getTrackCSS(spec);
      if (setTrackStyle || this.children.length !== spec.children.length) {
        updatedState["trackStyle"] = trackStyle;
      }
      this.setState(updatedState, callback);
    },
    ssrInit: function ssrInit() {
      var children = this.children;
      if (this.variableWidth) {
        var _trackWidth = 0;
        var _trackLeft = 0;
        var childrenWidths = [];
        var preClones = getPreClones(_extends$1(_extends$1(_extends$1({}, this.$props), this.$data), {
          slideCount: children.length
        }));
        var postClones = getPostClones(_extends$1(_extends$1(_extends$1({}, this.$props), this.$data), {
          slideCount: children.length
        }));
        children.forEach(function(child) {
          var _a, _b;
          var childWidth = ((_b = (_a = child.props.style) === null || _a === void 0 ? void 0 : _a.width) === null || _b === void 0 ? void 0 : _b.split("px")[0]) || 0;
          childrenWidths.push(childWidth);
          _trackWidth += childWidth;
        });
        for (var i2 = 0; i2 < preClones; i2++) {
          _trackLeft += childrenWidths[childrenWidths.length - 1 - i2];
          _trackWidth += childrenWidths[childrenWidths.length - 1 - i2];
        }
        for (var _i = 0; _i < postClones; _i++) {
          _trackWidth += childrenWidths[_i];
        }
        for (var _i2 = 0; _i2 < this.currentSlide; _i2++) {
          _trackLeft += childrenWidths[_i2];
        }
        var _trackStyle = {
          width: _trackWidth + "px",
          left: -_trackLeft + "px"
        };
        if (this.centerMode) {
          var currentWidth = "".concat(childrenWidths[this.currentSlide], "px");
          _trackStyle.left = "calc(".concat(_trackStyle.left, " + (100% - ").concat(currentWidth, ") / 2 ) ");
        }
        this.setState({
          trackStyle: _trackStyle
        });
        return;
      }
      var childrenCount = children.length;
      var spec = _extends$1(_extends$1(_extends$1({}, this.$props), this.$data), {
        slideCount: childrenCount
      });
      var slideCount = getPreClones(spec) + getPostClones(spec) + childrenCount;
      var trackWidth = 100 / this.slidesToShow * slideCount;
      var slideWidth = 100 / slideCount;
      var trackLeft = -slideWidth * (getPreClones(spec) + this.currentSlide) * trackWidth / 100;
      if (this.centerMode) {
        trackLeft += (100 - slideWidth * trackWidth / 100) / 2;
      }
      var trackStyle = {
        width: trackWidth + "%",
        left: trackLeft + "%"
      };
      this.setState({
        slideWidth: slideWidth + "%",
        trackStyle
      });
    },
    checkImagesLoad: function checkImagesLoad() {
      var _this3 = this;
      var images = document.querySelectorAll(".slick-slide img");
      var imagesCount = images.length;
      var loadedCount = 0;
      Array.prototype.forEach.call(images, function(image) {
        var handler8 = function handler9() {
          return ++loadedCount && loadedCount >= imagesCount && _this3.onWindowResized();
        };
        if (!image.onclick) {
          image.onclick = function() {
            return image.parentNode.focus();
          };
        } else {
          var prevClickHandler = image.onclick;
          image.onclick = function() {
            prevClickHandler();
            image.parentNode.focus();
          };
        }
        if (!image.onload) {
          if (_this3.$props.lazyLoad) {
            image.onload = function() {
              _this3.adaptHeight();
              _this3.callbackTimers.push(setTimeout(_this3.onWindowResized, _this3.speed));
            };
          } else {
            image.onload = handler8;
            image.onerror = function() {
              handler8();
              _this3.__emit("lazyLoadError");
            };
          }
        }
      });
    },
    progressiveLazyLoad: function progressiveLazyLoad() {
      var slidesToLoad = [];
      var spec = _extends$1(_extends$1({}, this.$props), this.$data);
      for (var index2 = this.currentSlide; index2 < this.slideCount + getPostClones(spec); index2++) {
        if (this.lazyLoadedList.indexOf(index2) < 0) {
          slidesToLoad.push(index2);
          break;
        }
      }
      for (var _index = this.currentSlide - 1; _index >= -getPreClones(spec); _index--) {
        if (this.lazyLoadedList.indexOf(_index) < 0) {
          slidesToLoad.push(_index);
          break;
        }
      }
      if (slidesToLoad.length > 0) {
        this.setState(function(state2) {
          return {
            lazyLoadedList: state2.lazyLoadedList.concat(slidesToLoad)
          };
        });
        this.__emit("lazyLoad", slidesToLoad);
      } else {
        if (this.lazyLoadTimer) {
          clearInterval(this.lazyLoadTimer);
          delete this.lazyLoadTimer;
        }
      }
    },
    slideHandler: function slideHandler$1(index2) {
      var _this4 = this;
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var _this$$props = this.$props, asNavFor = _this$$props.asNavFor, currentSlide = _this$$props.currentSlide, beforeChange = _this$$props.beforeChange, speed = _this$$props.speed, afterChange = _this$$props.afterChange;
      var _slideHandler2 = slideHandler(_extends$1(_extends$1(_extends$1({
        index: index2
      }, this.$props), this.$data), {
        trackRef: this.track,
        useCSS: this.useCSS && !dontAnimate
      })), state2 = _slideHandler2.state, nextState = _slideHandler2.nextState;
      if (!state2)
        return;
      beforeChange && beforeChange(currentSlide, state2.currentSlide);
      var slidesToLoad = state2.lazyLoadedList.filter(function(value26) {
        return _this4.lazyLoadedList.indexOf(value26) < 0;
      });
      if (this.$attrs.onLazyLoad && slidesToLoad.length > 0) {
        this.__emit("lazyLoad", slidesToLoad);
      }
      this.setState(state2, function() {
        asNavFor && asNavFor.innerSlider.currentSlide !== currentSlide && asNavFor.innerSlider.slideHandler(index2);
        if (!nextState)
          return;
        _this4.animationEndCallback = setTimeout(function() {
          var animating = nextState.animating, firstBatch = __rest$y(nextState, ["animating"]);
          _this4.setState(firstBatch, function() {
            _this4.callbackTimers.push(setTimeout(function() {
              return _this4.setState({
                animating
              });
            }, 10));
            afterChange && afterChange(state2.currentSlide);
            delete _this4.animationEndCallback;
          });
        }, speed);
      });
    },
    changeSlide: function changeSlide$1(options2) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var spec = _extends$1(_extends$1({}, this.$props), this.$data);
      var targetSlide = changeSlide(spec, options2);
      if (targetSlide !== 0 && !targetSlide)
        return;
      if (dontAnimate === true) {
        this.slideHandler(targetSlide, dontAnimate);
      } else {
        this.slideHandler(targetSlide);
      }
    },
    clickHandler: function clickHandler(e2) {
      if (this.clickable === false) {
        e2.stopPropagation();
        e2.preventDefault();
      }
      this.clickable = true;
    },
    keyHandler: function keyHandler$1(e2) {
      var dir = keyHandler(e2, this.accessibility, this.rtl);
      dir !== "" && this.changeSlide({
        message: dir
      });
    },
    selectHandler: function selectHandler(options2) {
      this.changeSlide(options2);
    },
    disableBodyScroll: function disableBodyScroll() {
      var preventDefault2 = function preventDefault3(e2) {
        e2 = e2 || window.event;
        if (e2.preventDefault)
          e2.preventDefault();
        e2.returnValue = false;
      };
      window.ontouchmove = preventDefault2;
    },
    enableBodyScroll: function enableBodyScroll() {
      window.ontouchmove = null;
    },
    swipeStart: function swipeStart$1(e2) {
      if (this.verticalSwiping) {
        this.disableBodyScroll();
      }
      var state2 = swipeStart(e2, this.swipe, this.draggable);
      state2 !== "" && this.setState(state2);
    },
    swipeMove: function swipeMove$1(e2) {
      var state2 = swipeMove(e2, _extends$1(_extends$1(_extends$1({}, this.$props), this.$data), {
        trackRef: this.track,
        listRef: this.list,
        slideIndex: this.currentSlide
      }));
      if (!state2)
        return;
      if (state2["swiping"]) {
        this.clickable = false;
      }
      this.setState(state2);
    },
    swipeEnd: function swipeEnd$1(e2) {
      var state2 = swipeEnd(e2, _extends$1(_extends$1(_extends$1({}, this.$props), this.$data), {
        trackRef: this.track,
        listRef: this.list,
        slideIndex: this.currentSlide
      }));
      if (!state2)
        return;
      var triggerSlideHandler = state2["triggerSlideHandler"];
      delete state2["triggerSlideHandler"];
      this.setState(state2);
      if (triggerSlideHandler === void 0)
        return;
      this.slideHandler(triggerSlideHandler);
      if (this.$props.verticalSwiping) {
        this.enableBodyScroll();
      }
    },
    slickPrev: function slickPrev() {
      var _this5 = this;
      this.callbackTimers.push(setTimeout(function() {
        return _this5.changeSlide({
          message: "previous"
        });
      }, 0));
    },
    slickNext: function slickNext() {
      var _this6 = this;
      this.callbackTimers.push(setTimeout(function() {
        return _this6.changeSlide({
          message: "next"
        });
      }, 0));
    },
    slickGoTo: function slickGoTo(slide) {
      var _this7 = this;
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      slide = Number(slide);
      if (isNaN(slide))
        return "";
      this.callbackTimers.push(setTimeout(function() {
        return _this7.changeSlide({
          message: "index",
          index: slide,
          currentSlide: _this7.currentSlide
        }, dontAnimate);
      }, 0));
    },
    play: function play() {
      var nextIndex;
      if (this.rtl) {
        nextIndex = this.currentSlide - this.slidesToScroll;
      } else {
        if (canGoNext(_extends$1(_extends$1({}, this.$props), this.$data))) {
          nextIndex = this.currentSlide + this.slidesToScroll;
        } else {
          return false;
        }
      }
      this.slideHandler(nextIndex);
    },
    handleAutoPlay: function handleAutoPlay(playType) {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
      }
      var autoplaying = this.autoplaying;
      if (playType === "update") {
        if (autoplaying === "hovered" || autoplaying === "focused" || autoplaying === "paused") {
          return;
        }
      } else if (playType === "leave") {
        if (autoplaying === "paused" || autoplaying === "focused") {
          return;
        }
      } else if (playType === "blur") {
        if (autoplaying === "paused" || autoplaying === "hovered") {
          return;
        }
      }
      this.autoplayTimer = setInterval(this.play, this.autoplaySpeed + 50);
      this.setState({
        autoplaying: "playing"
      });
    },
    pause: function pause(pauseType) {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
      }
      var autoplaying = this.autoplaying;
      if (pauseType === "paused") {
        this.setState({
          autoplaying: "paused"
        });
      } else if (pauseType === "focused") {
        if (autoplaying === "hovered" || autoplaying === "playing") {
          this.setState({
            autoplaying: "focused"
          });
        }
      } else {
        if (autoplaying === "playing") {
          this.setState({
            autoplaying: "hovered"
          });
        }
      }
    },
    onDotsOver: function onDotsOver() {
      this.autoplay && this.pause("hovered");
    },
    onDotsLeave: function onDotsLeave() {
      this.autoplay && this.autoplaying === "hovered" && this.handleAutoPlay("leave");
    },
    onTrackOver: function onTrackOver() {
      this.autoplay && this.pause("hovered");
    },
    onTrackLeave: function onTrackLeave() {
      this.autoplay && this.autoplaying === "hovered" && this.handleAutoPlay("leave");
    },
    onSlideFocus: function onSlideFocus() {
      this.autoplay && this.pause("focused");
    },
    onSlideBlur: function onSlideBlur() {
      this.autoplay && this.autoplaying === "focused" && this.handleAutoPlay("blur");
    },
    customPaging: function customPaging(_ref) {
      var i2 = _ref.i;
      return createVNode("button", null, [i2 + 1]);
    },
    appendDots: function appendDots(_ref2) {
      var dots = _ref2.dots;
      return createVNode("ul", {
        "style": {
          display: "block"
        }
      }, [dots]);
    }
  },
  beforeMount: function beforeMount() {
    this.ssrInit();
    this.__emit("init");
    if (this.lazyLoad) {
      var slidesToLoad = getOnDemandLazySlides(_extends$1(_extends$1({}, this.$props), this.$data));
      if (slidesToLoad.length > 0) {
        this.setState(function(prevState) {
          return {
            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)
          };
        });
        this.__emit("lazyLoad", slidesToLoad);
      }
    }
  },
  mounted: function mounted12() {
    var _this8 = this;
    this.$nextTick(function() {
      var spec = _extends$1({
        listRef: _this8.list,
        trackRef: _this8.track,
        children: _this8.children
      }, _this8.$props);
      _this8.updateState(spec, true, function() {
        _this8.adaptHeight();
        _this8.autoplay && _this8.handleAutoPlay("update");
      });
      if (_this8.lazyLoad === "progressive") {
        _this8.lazyLoadTimer = setInterval(_this8.progressiveLazyLoad, 1e3);
      }
      _this8.ro = new ResizeObserver$2(function() {
        if (_this8.animating) {
          _this8.onWindowResized(false);
          _this8.callbackTimers.push(setTimeout(function() {
            return _this8.onWindowResized();
          }, _this8.speed));
        } else {
          _this8.onWindowResized();
        }
      });
      _this8.ro.observe(_this8.list);
      Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"), function(slide) {
        slide.onfocus = _this8.$props.pauseOnFocus ? _this8.onSlideFocus : null;
        slide.onblur = _this8.$props.pauseOnFocus ? _this8.onSlideBlur : null;
      });
      if (!window) {
        return;
      }
      if (window.addEventListener) {
        window.addEventListener("resize", _this8.onWindowResized);
      } else {
        window.attachEvent("onresize", _this8.onWindowResized);
      }
    });
  },
  beforeUnmount: function beforeUnmount9() {
    if (this.animationEndCallback) {
      clearTimeout(this.animationEndCallback);
    }
    if (this.lazyLoadTimer) {
      clearInterval(this.lazyLoadTimer);
    }
    if (this.callbackTimers.length) {
      this.callbackTimers.forEach(function(timer) {
        return clearTimeout(timer);
      });
      this.callbackTimers = [];
    }
    if (window.addEventListener) {
      window.removeEventListener("resize", this.onWindowResized);
    } else {
      window.detachEvent("onresize", this.onWindowResized);
    }
    if (this.autoplayTimer) {
      clearInterval(this.autoplayTimer);
    }
  },
  updated: function updated7() {
    this.checkImagesLoad();
    this.__emit("reInit");
    if (this.lazyLoad) {
      var slidesToLoad = getOnDemandLazySlides(_extends$1(_extends$1({}, this.$props), this.$data));
      if (slidesToLoad.length > 0) {
        this.setState(function(prevState) {
          return {
            lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad)
          };
        });
        this.__emit("lazyLoad");
      }
    }
    this.adaptHeight();
  },
  watch: {
    __propsSymbol__: function __propsSymbol__() {
      var _this9 = this;
      var nextProps = this.$props;
      var spec = _extends$1(_extends$1({
        listRef: this.list,
        trackRef: this.track
      }, nextProps), this.$data);
      var setTrackStyle = false;
      for (var _i3 = 0, _Object$keys = Object.keys(this.preProps); _i3 < _Object$keys.length; _i3++) {
        var key2 = _Object$keys[_i3];
        if (!nextProps.hasOwnProperty(key2)) {
          setTrackStyle = true;
          break;
        }
        if (_typeof$2(nextProps[key2]) === "object" || typeof nextProps[key2] === "function" || _typeof$2(nextProps[key2]) === "symbol") {
          continue;
        }
        if (nextProps[key2] !== this.preProps[key2]) {
          setTrackStyle = true;
          break;
        }
      }
      this.updateState(spec, setTrackStyle, function() {
        if (_this9.currentSlide >= nextProps.children.length) {
          _this9.changeSlide({
            message: "index",
            index: nextProps.children.length - nextProps.slidesToShow,
            currentSlide: _this9.currentSlide
          });
        }
        if (nextProps.autoplay) {
          _this9.handleAutoPlay("update");
        } else {
          _this9.pause("paused");
        }
      });
      this.preProps = _extends$1({}, nextProps);
    }
  },
  render: function render59() {
    var _listProps, _this10 = this;
    var className = classNames("slick-slider", this.$attrs.class, {
      "slick-vertical": this.vertical,
      "slick-initialized": true
    });
    var spec = _extends$1(_extends$1({}, this.$props), this.$data);
    var trackProps = extractObject(spec, ["fade", "cssEase", "speed", "infinite", "centerMode", "focusOnSelect", "currentSlide", "lazyLoad", "lazyLoadedList", "rtl", "slideWidth", "slideHeight", "listHeight", "vertical", "slidesToShow", "slidesToScroll", "slideCount", "trackStyle", "variableWidth", "unslick", "centerPadding"]);
    var pauseOnHover = this.$props.pauseOnHover;
    trackProps = _extends$1(_extends$1({}, trackProps), {
      focusOnSelect: this.focusOnSelect ? this.selectHandler : null,
      ref: this.trackRefHandler,
      onMouseleave: pauseOnHover ? this.onTrackLeave : noop$x,
      onMouseover: pauseOnHover ? this.onTrackOver : noop$x
    });
    var dots;
    if (this.dots === true && this.slideCount >= this.slidesToShow) {
      var dotProps = extractObject(spec, ["dotsClass", "slideCount", "slidesToShow", "currentSlide", "slidesToScroll", "clickHandler", "children", "infinite", "appendDots"]);
      dotProps.customPaging = this.customPaging;
      dotProps.appendDots = this.appendDots;
      var _this$$slots = this.$slots, customPaging2 = _this$$slots.customPaging, appendDots2 = _this$$slots.appendDots;
      if (customPaging2) {
        dotProps.customPaging = customPaging2;
      }
      if (appendDots2) {
        dotProps.appendDots = appendDots2;
      }
      var pauseOnDotsHover = this.$props.pauseOnDotsHover;
      dotProps = _extends$1(_extends$1({}, dotProps), {
        clickHandler: this.changeSlide,
        onMouseover: pauseOnDotsHover ? this.onDotsOver : noop$x,
        onMouseleave: pauseOnDotsHover ? this.onDotsLeave : noop$x
      });
      dots = createVNode(Dots$1, dotProps, null);
    }
    var prevArrow, nextArrow;
    var arrowProps = extractObject(spec, ["infinite", "centerMode", "currentSlide", "slideCount", "slidesToShow"]);
    arrowProps.clickHandler = this.changeSlide;
    var _this$$slots2 = this.$slots, prevArrowCustom = _this$$slots2.prevArrow, nextArrowCustom = _this$$slots2.nextArrow;
    if (prevArrowCustom) {
      arrowProps.prevArrow = prevArrowCustom;
    }
    if (nextArrowCustom) {
      arrowProps.nextArrow = nextArrowCustom;
    }
    if (this.arrows) {
      prevArrow = createVNode(PrevArrow, arrowProps, null);
      nextArrow = createVNode(NextArrow, arrowProps, null);
    }
    var verticalHeightStyle = null;
    if (this.vertical) {
      verticalHeightStyle = {
        height: typeof this.listHeight === "number" ? "".concat(this.listHeight, "px") : this.listHeight
      };
    }
    var centerPaddingStyle = null;
    if (this.vertical === false) {
      if (this.centerMode === true) {
        centerPaddingStyle = {
          padding: "0px " + this.centerPadding
        };
      }
    } else {
      if (this.centerMode === true) {
        centerPaddingStyle = {
          padding: this.centerPadding + " 0px"
        };
      }
    }
    var listStyle2 = _extends$1(_extends$1({}, verticalHeightStyle), centerPaddingStyle);
    var touchMove = this.touchMove;
    var listProps2 = (_listProps = {
      ref: this.listRefHandler,
      class: "slick-list",
      style: listStyle2,
      onClick: this.clickHandler,
      onMousedown: touchMove ? this.swipeStart : noop$x,
      onMousemove: this.dragging && touchMove ? this.swipeMove : noop$x,
      onMouseup: touchMove ? this.swipeEnd : noop$x,
      onMouseleave: this.dragging && touchMove ? this.swipeEnd : noop$x
    }, _defineProperty$U(_listProps, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", touchMove ? this.swipeStart : noop$x), _defineProperty$U(_listProps, supportsPassive$1 ? "onTouchmovePassive" : "onTouchmove", this.dragging && touchMove ? this.swipeMove : noop$x), _defineProperty$U(_listProps, "onTouchend", touchMove ? this.swipeEnd : noop$x), _defineProperty$U(_listProps, "onTouchcancel", this.dragging && touchMove ? this.swipeEnd : noop$x), _defineProperty$U(_listProps, "onKeydown", this.accessibility ? this.keyHandler : noop$x), _listProps);
    var innerSliderProps = {
      class: className
    };
    if (this.unslick) {
      listProps2 = {
        class: "slick-list",
        ref: this.listRefHandler
      };
      innerSliderProps = {
        class: className
      };
    }
    return createVNode("div", innerSliderProps, [!this.unslick ? prevArrow : "", createVNode("div", listProps2, [createVNode(Track$3, trackProps, {
      default: function _default8() {
        return [_this10.children];
      }
    })]), !this.unslick ? nextArrow : "", !this.unslick ? dots : ""]);
  }
};
var Slider$2 = defineComponent({
  name: "Slider",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _extends$1({}, defaultProps$3),
  data: function data22() {
    this._responsiveMediaHandlers = [];
    return {
      breakpoint: null
    };
  },
  beforeMount: function beforeMount2() {
    var _this = this;
    if (this.responsive) {
      var breakpoints = this.responsive.map(function(breakpt) {
        return breakpt.breakpoint;
      });
      breakpoints.sort(function(x2, y2) {
        return x2 - y2;
      });
      breakpoints.forEach(function(breakpoint, index2) {
        var bQuery;
        if (index2 === 0) {
          bQuery = json2mq({
            minWidth: 0,
            maxWidth: breakpoint
          });
        } else {
          bQuery = json2mq({
            minWidth: breakpoints[index2 - 1] + 1,
            maxWidth: breakpoint
          });
        }
        canUseDOM() && _this.media(bQuery, function() {
          _this.setState({
            breakpoint
          });
        });
      });
      var query = json2mq({
        minWidth: breakpoints.slice(-1)[0]
      });
      canUseDOM() && this.media(query, function() {
        _this.setState({
          breakpoint: null
        });
      });
    }
  },
  beforeUnmount: function beforeUnmount10() {
    this._responsiveMediaHandlers.forEach(function(obj) {
      obj.mql.removeListener(obj.listener);
    });
  },
  methods: {
    innerSliderRefHandler: function innerSliderRefHandler(ref2) {
      this.innerSlider = ref2;
    },
    media: function media(query, handler8) {
      var mql = window.matchMedia(query);
      var listener = function listener2(_ref) {
        var matches = _ref.matches;
        if (matches) {
          handler8();
        }
      };
      mql.addListener(listener);
      listener(mql);
      this._responsiveMediaHandlers.push({
        mql,
        query,
        listener
      });
    },
    slickPrev: function slickPrev2() {
      this.innerSlider.slickPrev();
    },
    slickNext: function slickNext2() {
      this.innerSlider.slickNext();
    },
    slickGoTo: function slickGoTo2(slide) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      this.innerSlider.slickGoTo(slide, dontAnimate);
    },
    slickPause: function slickPause() {
      this.innerSlider.pause("paused");
    },
    slickPlay: function slickPlay() {
      this.innerSlider.handleAutoPlay("play");
    }
  },
  render: function render60() {
    var _this2 = this;
    var _a;
    var settings;
    var newProps;
    if (this.breakpoint) {
      newProps = this.responsive.filter(function(resp) {
        return resp.breakpoint === _this2.breakpoint;
      });
      settings = newProps[0].settings === "unslick" ? "unslick" : _extends$1(_extends$1({}, this.$props), newProps[0].settings);
    } else {
      settings = _extends$1({}, this.$props);
    }
    if (settings.centerMode) {
      if (settings.slidesToScroll > 1 && false) {
        console.warn("slidesToScroll should be equal to 1 in centerMode, you are using ".concat(settings.slidesToScroll));
      }
      settings.slidesToScroll = 1;
    }
    if (settings.fade) {
      if (settings.slidesToShow > 1 && false) {
        console.warn("slidesToShow should be equal to 1 when fade is true, you're using ".concat(settings.slidesToShow));
      }
      if (settings.slidesToScroll > 1 && false) {
        console.warn("slidesToScroll should be equal to 1 when fade is true, you're using ".concat(settings.slidesToScroll));
      }
      settings.slidesToShow = 1;
      settings.slidesToScroll = 1;
    }
    var children = getSlot(this) || [];
    children = children.filter(function(child) {
      if (typeof child === "string") {
        return !!child.trim();
      }
      return !!child;
    });
    if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {
      console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1");
      settings.variableWidth = false;
    }
    var newChildren = [];
    var currentWidth = null;
    for (var i2 = 0; i2 < children.length; i2 += settings.rows * settings.slidesPerRow) {
      var newSlide = [];
      for (var j2 = i2; j2 < i2 + settings.rows * settings.slidesPerRow; j2 += settings.slidesPerRow) {
        var row = [];
        for (var k2 = j2; k2 < j2 + settings.slidesPerRow; k2 += 1) {
          if (settings.variableWidth && ((_a = children[k2].props) === null || _a === void 0 ? void 0 : _a.style)) {
            currentWidth = children[k2].props.style.width;
          }
          if (k2 >= children.length)
            break;
          row.push(cloneElement(children[k2], {
            key: 100 * i2 + 10 * j2 + k2,
            tabindex: -1,
            style: {
              width: "".concat(100 / settings.slidesPerRow, "%"),
              display: "inline-block"
            }
          }));
        }
        newSlide.push(createVNode("div", {
          "key": 10 * i2 + j2
        }, [row]));
      }
      if (settings.variableWidth) {
        newChildren.push(createVNode("div", {
          "key": i2,
          "style": {
            width: currentWidth
          }
        }, [newSlide]));
      } else {
        newChildren.push(createVNode("div", {
          "key": i2
        }, [newSlide]));
      }
    }
    if (settings === "unslick") {
      var className = "regular slider " + (this.className || "");
      return createVNode("div", {
        "class": className
      }, [newChildren]);
    } else if (newChildren.length <= settings.slidesToShow) {
      settings.unslick = true;
    }
    var sliderProps = _extends$1(_extends$1(_extends$1({}, this.$attrs), settings), {
      children: newChildren,
      ref: this.innerSliderRefHandler
    });
    return createVNode(InnerSlider, _objectSpread2$2(_objectSpread2$2({}, sliderProps), {}, {
      "__propsSymbol__": []
    }), this.$slots);
  }
});
var __rest$x = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var CarouselProps = {
  effect: PropsTypes.oneOf(tuple("scrollx", "fade")),
  dots: PropsTypes.looseBool.def(true),
  vertical: PropsTypes.looseBool,
  autoplay: PropsTypes.looseBool,
  easing: PropsTypes.string,
  beforeChange: PropsTypes.func,
  afterChange: PropsTypes.func,
  prefixCls: PropsTypes.string,
  accessibility: PropsTypes.looseBool,
  nextArrow: PropsTypes.VNodeChild,
  prevArrow: PropsTypes.VNodeChild,
  pauseOnHover: PropsTypes.looseBool,
  adaptiveHeight: PropsTypes.looseBool,
  arrows: PropsTypes.looseBool.def(false),
  autoplaySpeed: PropsTypes.number,
  centerMode: PropsTypes.looseBool,
  centerPadding: PropsTypes.string,
  cssEase: PropsTypes.string,
  dotsClass: PropsTypes.string,
  draggable: PropsTypes.looseBool.def(false),
  fade: PropsTypes.looseBool,
  focusOnSelect: PropsTypes.looseBool,
  infinite: PropsTypes.looseBool,
  initialSlide: PropsTypes.number,
  lazyLoad: PropsTypes.looseBool,
  rtl: PropsTypes.looseBool,
  slide: PropsTypes.string,
  slidesToShow: PropsTypes.number,
  slidesToScroll: PropsTypes.number,
  speed: PropsTypes.number,
  swipe: PropsTypes.looseBool,
  swipeToSlide: PropsTypes.looseBool,
  touchMove: PropsTypes.looseBool,
  touchThreshold: PropsTypes.number,
  variableWidth: PropsTypes.looseBool,
  useCSS: PropsTypes.looseBool,
  slickGoTo: PropsTypes.number,
  responsive: PropsTypes.array,
  dotPosition: PropsTypes.oneOf(tuple("top", "bottom", "left", "right")),
  verticalSwiping: PropsTypes.looseBool.def(false)
};
var Carousel = defineComponent({
  name: "ACarousel",
  inheritAttrs: false,
  props: CarouselProps,
  setup: function setup71() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      slick: void 0,
      innerSlider: void 0
    };
  },
  beforeMount: function beforeMount3() {
    this.onWindowResized = debounce$1(this.onWindowResized, 500, {
      leading: false
    });
  },
  mounted: function mounted13() {
    if (hasProp$1(this, "vertical")) {
      warning$4(!this.vertical, "Carousel", "`vertical` is deprecated, please use `dotPosition` instead.");
    }
    var autoplay = this.autoplay;
    if (autoplay) {
      window.addEventListener("resize", this.onWindowResized);
    }
    this.innerSlider = this.slick && this.slick.innerSlider;
  },
  beforeUnmount: function beforeUnmount11() {
    var autoplay = this.autoplay;
    if (autoplay) {
      window.removeEventListener("resize", this.onWindowResized);
      this.onWindowResized.cancel();
    }
  },
  methods: {
    getDotPosition: function getDotPosition() {
      if (this.dotPosition) {
        return this.dotPosition;
      }
      if (hasProp$1(this, "vertical")) {
        return this.vertical ? "right" : "bottom";
      }
      return "bottom";
    },
    saveSlick: function saveSlick(node) {
      this.slick = node;
    },
    onWindowResized: function onWindowResized2() {
      var autoplay = this.autoplay;
      if (autoplay && this.slick && this.slick.innerSlider && this.slick.innerSlider.autoPlay) {
        this.slick.innerSlider.autoPlay();
      }
    },
    next: function next() {
      this.slick.slickNext();
    },
    prev: function prev() {
      this.slick.slickPrev();
    },
    goTo: function goTo(slide) {
      var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      this.slick.slickGoTo(slide, dontAnimate);
    }
  },
  render: function render61() {
    var _classNames2;
    var props2 = _extends$1({}, this.$props);
    var $slots = this.$slots;
    if (props2.effect === "fade") {
      props2.fade = true;
    }
    var _a = this.$attrs, cls = _a.class, style3 = _a.style, restAttrs = __rest$x(_a, ["class", "style"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var className = getPrefixCls2("carousel", props2.prefixCls);
    var dotsClass = "slick-dots";
    var dotPosition = this.getDotPosition();
    props2.vertical = dotPosition === "left" || dotPosition === "right";
    props2.dotsClass = classNames("".concat(dotsClass), "".concat(dotsClass, "-").concat(dotPosition || "bottom"), _defineProperty$U({}, "".concat(props2.dotsClass), !!props2.dotsClass));
    className = classNames((_classNames2 = {}, _defineProperty$U(_classNames2, cls, !!cls), _defineProperty$U(_classNames2, className, !!className), _defineProperty$U(_classNames2, "".concat(className, "-vertical"), props2.vertical), _classNames2));
    var SlickCarouselProps = _extends$1(_extends$1(_extends$1({}, props2), restAttrs), {
      nextArrow: getComponent(this, "nextArrow"),
      prevArrow: getComponent(this, "prevArrow")
    });
    return createVNode("div", {
      "class": className,
      "style": style3
    }, [createVNode(Slider$2, _objectSpread2$2({
      "ref": this.saveSlick
    }, SlickCarouselProps), $slots)]);
  }
});
var index$x = withInstall(Carousel);
var lib = { exports: {} };
(function(module2, exports2) {
  (function(global2, factory) {
    module2.exports = factory();
  })(commonjsGlobal, function() {
    function arrayTreeFilter2(data80, filterFn, options2) {
      options2 = options2 || {};
      options2.childrenKeyName = options2.childrenKeyName || "children";
      var children = data80 || [];
      var result = [];
      var level2 = 0;
      do {
        var foundItem = children.filter(function(item) {
          return filterFn(item, level2);
        })[0];
        if (!foundItem) {
          break;
        }
        result.push(foundItem);
        children = foundItem[options2.childrenKeyName] || [];
        level2 += 1;
      } while (children.length > 0);
      return result;
    }
    return arrayTreeFilter2;
  });
})(lib);
var arrayTreeFilter = lib.exports;
function arraySome(array3, predicate) {
  var index2 = -1, length = array3 == null ? 0 : array3.length;
  while (++index2 < length) {
    if (predicate(array3[index2], index2, array3)) {
      return true;
    }
  }
  return false;
}
var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
function equalArrays(array3, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array3.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array3);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array3;
  }
  var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
  stack.set(array3, other);
  stack.set(other, array3);
  while (++index2 < arrLength) {
    var arrValue = array3[index2], othValue = other[index2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index2, other, array3, stack) : customizer(arrValue, othValue, index2, array3, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen) {
      if (!arraySome(other, function(othValue2, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array3);
  stack["delete"](other);
  return result;
}
function mapToArray(map2) {
  var index2 = -1, result = Array(map2.size);
  map2.forEach(function(value26, key2) {
    result[++index2] = [key2, value26];
  });
  return result;
}
var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag$1 = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function equalByTag(object3, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object3.byteLength != other.byteLength || object3.byteOffset != other.byteOffset) {
        return false;
      }
      object3 = object3.buffer;
      other = other.buffer;
    case arrayBufferTag:
      if (object3.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object3), new Uint8Array$1(other))) {
        return false;
      }
      return true;
    case boolTag:
    case dateTag:
    case numberTag$1:
      return eq(+object3, +other);
    case errorTag:
      return object3.name == other.name && object3.message == other.message;
    case regexpTag:
    case stringTag:
      return object3 == other + "";
    case mapTag:
      var convert = mapToArray;
    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);
      if (object3.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object3);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;
      stack.set(object3, other);
      var result = equalArrays(convert(object3), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object3);
      return result;
    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object3) == symbolValueOf.call(other);
      }
  }
  return false;
}
var COMPARE_PARTIAL_FLAG$3 = 1;
var objectProto$1 = Object.prototype;
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
function equalObjects(object3, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object3), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index2 = objLength;
  while (index2--) {
    var key2 = objProps[index2];
    if (!(isPartial ? key2 in other : hasOwnProperty$1.call(other, key2))) {
      return false;
    }
  }
  var objStacked = stack.get(object3);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object3;
  }
  var result = true;
  stack.set(object3, other);
  stack.set(other, object3);
  var skipCtor = isPartial;
  while (++index2 < objLength) {
    key2 = objProps[index2];
    var objValue = object3[key2], othValue = other[key2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key2, other, object3, stack) : customizer(objValue, othValue, key2, object3, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key2 == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object3.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object3 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object3);
  stack["delete"](other);
  return result;
}
var COMPARE_PARTIAL_FLAG$2 = 1;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function baseIsEqualDeep(object3, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$2(object3), othIsArr = isArray$2(other), objTag = objIsArr ? arrayTag : getTag$1(object3), othTag = othIsArr ? arrayTag : getTag$1(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer$2(object3)) {
    if (!isBuffer$2(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray$1(object3) ? equalArrays(object3, other, bitmask, customizer, equalFunc, stack) : equalByTag(object3, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object3, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object3.value() : object3, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object3, other, bitmask, customizer, equalFunc, stack);
}
function baseIsEqual(value26, other, bitmask, customizer, stack) {
  if (value26 === other) {
    return true;
  }
  if (value26 == null || other == null || !isObjectLike(value26) && !isObjectLike(other)) {
    return value26 !== value26 && other !== other;
  }
  return baseIsEqualDeep(value26, other, bitmask, customizer, baseIsEqual, stack);
}
function isEqual$1(value26, other) {
  return baseIsEqual(value26, other);
}
var Menus = {
  name: "CascaderMenus",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    value: PropsTypes.array.def([]),
    activeValue: PropsTypes.array.def([]),
    options: PropsTypes.array,
    prefixCls: PropsTypes.string.def("rc-cascader-menus"),
    expandTrigger: PropsTypes.string.def("click"),
    visible: PropsTypes.looseBool.def(false),
    dropdownMenuColumnStyle: PropsTypes.object,
    defaultFieldNames: PropsTypes.object,
    fieldNames: PropsTypes.object,
    expandIcon: PropsTypes.any,
    loadingIcon: PropsTypes.any
  },
  data: function data23() {
    this.menuItems = {};
    return {};
  },
  watch: {
    visible: function visible3(val) {
      var _this = this;
      if (val) {
        this.$nextTick(function() {
          _this.scrollActiveItemToView();
        });
      }
    }
  },
  mounted: function mounted14() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.scrollActiveItemToView();
    });
  },
  methods: {
    getFieldName: function getFieldName(name2) {
      var _this$$props = this.$props, fieldNames = _this$$props.fieldNames, defaultFieldNames = _this$$props.defaultFieldNames;
      return fieldNames[name2] || defaultFieldNames[name2];
    },
    getOption: function getOption(option, menuIndex) {
      var _this3 = this;
      var prefixCls2 = this.prefixCls, expandTrigger = this.expandTrigger;
      var loadingIcon = getComponent(this, "loadingIcon");
      var expandIcon = getComponent(this, "expandIcon");
      var onSelect6 = function onSelect7(e2) {
        _this3.__emit("select", option, menuIndex, e2);
      };
      var onItemDoubleClick = function onItemDoubleClick2(e2) {
        _this3.__emit("itemDoubleClick", option, menuIndex, e2);
      };
      var key2 = option[this.getFieldName("value")];
      var expandProps = {
        onClick: onSelect6,
        onDblclick: onItemDoubleClick
      };
      var menuItemCls = "".concat(prefixCls2, "-menu-item");
      var expandIconNode = null;
      var hasChildren = option[this.getFieldName("children")] && option[this.getFieldName("children")].length > 0;
      if (hasChildren || option.isLeaf === false) {
        menuItemCls += " ".concat(prefixCls2, "-menu-item-expand");
        if (!option.loading) {
          expandIconNode = createVNode("span", {
            "class": "".concat(prefixCls2, "-menu-item-expand-icon")
          }, [expandIcon]);
        }
      }
      if (expandTrigger === "hover" && (hasChildren || option.isLeaf === false)) {
        expandProps = {
          onMouseenter: this.delayOnSelect.bind(this, onSelect6),
          onMouseleave: this.delayOnSelect.bind(this),
          onClick: onSelect6
        };
      }
      if (this.isActiveOption(option, menuIndex)) {
        menuItemCls += " ".concat(prefixCls2, "-menu-item-active");
        expandProps.ref = this.saveMenuItem(menuIndex);
      }
      if (option.disabled) {
        menuItemCls += " ".concat(prefixCls2, "-menu-item-disabled");
      }
      var loadingIconNode = null;
      if (option.loading) {
        menuItemCls += " ".concat(prefixCls2, "-menu-item-loading");
        loadingIconNode = loadingIcon || null;
      }
      var title2 = "";
      if (option.title) {
        title2 = option.title;
      } else if (typeof option[this.getFieldName("label")] === "string") {
        title2 = option[this.getFieldName("label")];
      }
      return createVNode("li", _objectSpread2$2(_objectSpread2$2({
        "key": Array.isArray(key2) ? key2.join("__ant__") : key2,
        "class": menuItemCls,
        "title": title2
      }, expandProps), {}, {
        "role": "menuitem",
        "onMousedown": function onMousedown2(e2) {
          return e2.preventDefault();
        }
      }), [option[this.getFieldName("label")], expandIconNode, loadingIconNode]);
    },
    getActiveOptions: function getActiveOptions(values) {
      var _this4 = this;
      var activeValue = values || this.activeValue;
      var options2 = this.options;
      return arrayTreeFilter(options2, function(o2, level2) {
        return isEqual$1(o2[_this4.getFieldName("value")], activeValue[level2]);
      }, {
        childrenKeyName: this.getFieldName("children")
      });
    },
    getShowOptions: function getShowOptions() {
      var _this5 = this;
      var options2 = this.options;
      var result = this.getActiveOptions().map(function(activeOption) {
        return activeOption[_this5.getFieldName("children")];
      }).filter(function(activeOption) {
        return !!activeOption;
      });
      result.unshift(options2);
      return result;
    },
    delayOnSelect: function delayOnSelect(onSelect6) {
      var _this6 = this;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (this.delayTimer) {
        clearTimeout(this.delayTimer);
        this.delayTimer = null;
      }
      if (typeof onSelect6 === "function") {
        this.delayTimer = setTimeout(function() {
          onSelect6(args);
          _this6.delayTimer = null;
        }, 150);
      }
    },
    scrollActiveItemToView: function scrollActiveItemToView() {
      var optionsLength = this.getShowOptions().length;
      for (var i2 = 0; i2 < optionsLength; i2++) {
        var itemComponent = this.menuItems[i2];
        if (itemComponent) {
          var target = findDOMNode(itemComponent);
          target.parentNode.scrollTop = target.offsetTop;
        }
      }
    },
    isActiveOption: function isActiveOption(option, menuIndex) {
      var _this$activeValue = this.activeValue, activeValue = _this$activeValue === void 0 ? [] : _this$activeValue;
      return isEqual$1(activeValue[menuIndex], option[this.getFieldName("value")]);
    },
    saveMenuItem: function saveMenuItem(index2) {
      var _this7 = this;
      return function(node) {
        _this7.menuItems[index2] = node;
      };
    }
  },
  render: function render62() {
    var _this8 = this;
    var prefixCls2 = this.prefixCls, dropdownMenuColumnStyle = this.dropdownMenuColumnStyle;
    return createVNode("div", null, [this.getShowOptions().map(function(options2, menuIndex) {
      return createVNode("ul", {
        "class": "".concat(prefixCls2, "-menu"),
        "key": menuIndex,
        "style": dropdownMenuColumnStyle
      }, [options2.map(function(option) {
        return _this8.getOption(option, menuIndex);
      })]);
    })]);
  }
};
function shallowEqualArrays(arrA, arrB) {
  if (arrA === arrB) {
    return true;
  }
  if (!arrA || !arrB) {
    return false;
  }
  var len = arrA.length;
  if (arrB.length !== len) {
    return false;
  }
  for (var i2 = 0; i2 < len; i2++) {
    if (arrA[i2] !== arrB[i2]) {
      return false;
    }
  }
  return true;
}
var arrays = shallowEqualArrays;
var shallowEqualArrays$1 = arrays;
var __rest$w = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var BUILT_IN_PLACEMENTS$2 = {
  bottomLeft: {
    points: ["tl", "bl"],
    offset: [0, 4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  topLeft: {
    points: ["bl", "tl"],
    offset: [0, -4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  bottomRight: {
    points: ["tr", "br"],
    offset: [0, 4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  },
  topRight: {
    points: ["br", "tr"],
    offset: [0, -4],
    overflow: {
      adjustX: 1,
      adjustY: 1
    }
  }
};
var Cascader$1 = defineComponent({
  name: "Cascader",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    value: PropsTypes.array,
    defaultValue: PropsTypes.array,
    options: PropsTypes.array,
    popupVisible: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool.def(false),
    transitionName: PropsTypes.string.def(""),
    popupClassName: PropsTypes.string.def(""),
    popupStyle: PropsTypes.object.def(function() {
      return {};
    }),
    popupPlacement: PropsTypes.string.def("bottomLeft"),
    prefixCls: PropsTypes.string.def("rc-cascader"),
    dropdownMenuColumnStyle: PropsTypes.object,
    builtinPlacements: PropsTypes.object.def(BUILT_IN_PLACEMENTS$2),
    loadData: PropsTypes.func,
    changeOnSelect: PropsTypes.looseBool,
    expandTrigger: PropsTypes.string.def("click"),
    fieldNames: PropsTypes.object.def(function() {
      return {
        label: "label",
        value: "value",
        children: "children"
      };
    }),
    expandIcon: PropsTypes.any,
    loadingIcon: PropsTypes.any,
    getPopupContainer: PropsTypes.func
  },
  data: function data24() {
    var initialValue = [];
    var value26 = this.value, defaultValue = this.defaultValue, popupVisible4 = this.popupVisible;
    if (hasProp(this, "value")) {
      initialValue = value26 || [];
    } else if (hasProp(this, "defaultValue")) {
      initialValue = defaultValue || [];
    }
    this.children = void 0;
    this.defaultFieldNames = {
      label: "label",
      value: "value",
      children: "children"
    };
    return {
      sPopupVisible: popupVisible4,
      sActiveValue: initialValue,
      sValue: initialValue
    };
  },
  watch: {
    value: function value9(val, oldValue) {
      if (!shallowEqualArrays$1(val, oldValue)) {
        var newValues = {
          sValue: val || []
        };
        if (!hasProp(this, "loadData")) {
          newValues.sActiveValue = val || [];
        }
        this.setState(newValues);
      }
    },
    popupVisible: function popupVisible2(val) {
      this.setState({
        sPopupVisible: val
      });
    }
  },
  methods: {
    getPopupDOMNode: function getPopupDOMNode() {
      return this.trigger.getPopupDomNode();
    },
    getFieldName: function getFieldName2(name2) {
      var defaultFieldNames = this.defaultFieldNames, fieldNames = this.fieldNames;
      return fieldNames[name2] || defaultFieldNames[name2];
    },
    getFieldNames: function getFieldNames() {
      return this.fieldNames;
    },
    getCurrentLevelOptions: function getCurrentLevelOptions() {
      var _this = this;
      var _this$options = this.options, options2 = _this$options === void 0 ? [] : _this$options, _this$sActiveValue = this.sActiveValue, sActiveValue = _this$sActiveValue === void 0 ? [] : _this$sActiveValue;
      var result = arrayTreeFilter(options2, function(o2, level2) {
        return isEqual$1(o2[_this.getFieldName("value")], sActiveValue[level2]);
      }, {
        childrenKeyName: this.getFieldName("children")
      });
      if (result[result.length - 2]) {
        return result[result.length - 2][this.getFieldName("children")];
      }
      return _toConsumableArray(options2).filter(function(o2) {
        return !o2.disabled;
      });
    },
    getActiveOptions: function getActiveOptions2(activeValue) {
      var _this2 = this;
      return arrayTreeFilter(this.options || [], function(o2, level2) {
        return isEqual$1(o2[_this2.getFieldName("value")], activeValue[level2]);
      }, {
        childrenKeyName: this.getFieldName("children")
      });
    },
    setPopupVisible: function setPopupVisible2(popupVisible4) {
      if (!hasProp(this, "popupVisible")) {
        this.setState({
          sPopupVisible: popupVisible4
        });
      }
      if (popupVisible4 && !this.sPopupVisible) {
        this.setState({
          sActiveValue: this.sValue
        });
      }
      this.__emit("popupVisibleChange", popupVisible4);
    },
    handleChange: function handleChange8(options2, setProps, e2) {
      var _this3 = this;
      if (e2.type !== "keydown" || e2.keyCode === KeyCode$2.ENTER) {
        var value26 = options2.map(function(o2) {
          return o2[_this3.getFieldName("value")];
        });
        this.__emit("change", value26, options2);
        this.setPopupVisible(setProps.visible);
      }
    },
    handlePopupVisibleChange: function handlePopupVisibleChange(popupVisible4) {
      this.setPopupVisible(popupVisible4);
    },
    handleMenuSelect: function handleMenuSelect(targetOption, menuIndex, e2) {
      var triggerNode = this.trigger.getRootDomNode();
      if (triggerNode && triggerNode.focus) {
        triggerNode.focus();
      }
      var changeOnSelect = this.changeOnSelect, loadData = this.loadData, expandTrigger = this.expandTrigger;
      if (!targetOption || targetOption.disabled) {
        return;
      }
      var sActiveValue = this.sActiveValue;
      sActiveValue = sActiveValue.slice(0, menuIndex + 1);
      sActiveValue[menuIndex] = targetOption[this.getFieldName("value")];
      var activeOptions = this.getActiveOptions(sActiveValue);
      if (targetOption.isLeaf === false && !targetOption[this.getFieldName("children")] && loadData) {
        if (changeOnSelect) {
          this.handleChange(activeOptions, {
            visible: true
          }, e2);
        }
        this.setState({
          sActiveValue
        });
        loadData(activeOptions);
        return;
      }
      var newState = {};
      if (!targetOption[this.getFieldName("children")] || !targetOption[this.getFieldName("children")].length) {
        this.handleChange(activeOptions, {
          visible: false
        }, e2);
        newState.sValue = sActiveValue;
      } else if (changeOnSelect && (e2.type === "click" || e2.type === "keydown")) {
        if (expandTrigger === "hover") {
          this.handleChange(activeOptions, {
            visible: false
          }, e2);
        } else {
          this.handleChange(activeOptions, {
            visible: true
          }, e2);
        }
        newState.sValue = sActiveValue;
      }
      newState.sActiveValue = sActiveValue;
      if (hasProp(this, "value") || e2.type === "keydown" && e2.keyCode !== KeyCode$2.ENTER) {
        delete newState.sValue;
      }
      this.setState(newState);
    },
    handleItemDoubleClick: function handleItemDoubleClick() {
      var changeOnSelect = this.$props.changeOnSelect;
      if (changeOnSelect) {
        this.setPopupVisible(false);
      }
    },
    handleKeyDown: function handleKeyDown3(e2) {
      var _this4 = this;
      var children = this.children;
      if (children) {
        var keydown = getEvents(children).onKeydown;
        if (keydown) {
          keydown(e2);
          return;
        }
      }
      var activeValue = _toConsumableArray(this.sActiveValue);
      var currentLevel = activeValue.length - 1 < 0 ? 0 : activeValue.length - 1;
      var currentOptions = this.getCurrentLevelOptions();
      var currentIndex = currentOptions.map(function(o2) {
        return o2[_this4.getFieldName("value")];
      }).findIndex(function(val) {
        return isEqual$1(activeValue[currentLevel], val);
      });
      if (e2.keyCode !== KeyCode$2.DOWN && e2.keyCode !== KeyCode$2.UP && e2.keyCode !== KeyCode$2.LEFT && e2.keyCode !== KeyCode$2.RIGHT && e2.keyCode !== KeyCode$2.ENTER && e2.keyCode !== KeyCode$2.SPACE && e2.keyCode !== KeyCode$2.BACKSPACE && e2.keyCode !== KeyCode$2.ESC && e2.keyCode !== KeyCode$2.TAB) {
        return;
      }
      if (!this.sPopupVisible && e2.keyCode !== KeyCode$2.BACKSPACE && e2.keyCode !== KeyCode$2.LEFT && e2.keyCode !== KeyCode$2.RIGHT && e2.keyCode !== KeyCode$2.ESC && e2.keyCode !== KeyCode$2.TAB) {
        this.setPopupVisible(true);
        return;
      }
      if (e2.keyCode === KeyCode$2.DOWN || e2.keyCode === KeyCode$2.UP) {
        e2.preventDefault();
        var nextIndex = currentIndex;
        if (nextIndex !== -1) {
          if (e2.keyCode === KeyCode$2.DOWN) {
            nextIndex += 1;
            nextIndex = nextIndex >= currentOptions.length ? 0 : nextIndex;
          } else {
            nextIndex -= 1;
            nextIndex = nextIndex < 0 ? currentOptions.length - 1 : nextIndex;
          }
        } else {
          nextIndex = 0;
        }
        activeValue[currentLevel] = currentOptions[nextIndex][this.getFieldName("value")];
      } else if (e2.keyCode === KeyCode$2.LEFT || e2.keyCode === KeyCode$2.BACKSPACE) {
        e2.preventDefault();
        activeValue.splice(activeValue.length - 1, 1);
      } else if (e2.keyCode === KeyCode$2.RIGHT) {
        e2.preventDefault();
        if (currentOptions[currentIndex] && currentOptions[currentIndex][this.getFieldName("children")]) {
          activeValue.push(currentOptions[currentIndex][this.getFieldName("children")][0][this.getFieldName("value")]);
        }
      } else if (e2.keyCode === KeyCode$2.ESC || e2.keyCode === KeyCode$2.TAB) {
        this.setPopupVisible(false);
        return;
      }
      if (!activeValue || activeValue.length === 0) {
        this.setPopupVisible(false);
      }
      var activeOptions = this.getActiveOptions(activeValue);
      var targetOption = activeOptions[activeOptions.length - 1];
      this.handleMenuSelect(targetOption, activeOptions.length - 1, e2);
      this.__emit("keydown", e2);
    },
    saveTrigger: function saveTrigger2(node) {
      this.trigger = node;
    }
  },
  render: function render63() {
    var $props = this.$props, sActiveValue = this.sActiveValue, handleMenuSelect2 = this.handleMenuSelect, sPopupVisible = this.sPopupVisible, handlePopupVisibleChange3 = this.handlePopupVisibleChange, handleKeyDown7 = this.handleKeyDown;
    var prefixCls2 = $props.prefixCls, transitionName2 = $props.transitionName, popupClassName = $props.popupClassName, _$props$options = $props.options, options2 = _$props$options === void 0 ? [] : _$props$options, disabled = $props.disabled, builtinPlacements = $props.builtinPlacements, popupPlacement = $props.popupPlacement, restProps = __rest$w($props, ["prefixCls", "transitionName", "popupClassName", "options", "disabled", "builtinPlacements", "popupPlacement"]);
    var menus = createVNode("div", null, null);
    var emptyMenuClassName = "";
    if (options2 && options2.length > 0) {
      var loadingIcon = getComponent(this, "loadingIcon");
      var expandIcon = getComponent(this, "expandIcon") || ">";
      var menusProps = _extends$1(_extends$1(_extends$1({}, $props), this.$attrs), {
        fieldNames: this.getFieldNames(),
        defaultFieldNames: this.defaultFieldNames,
        activeValue: sActiveValue,
        visible: sPopupVisible,
        loadingIcon,
        expandIcon,
        onSelect: handleMenuSelect2,
        onItemDoubleClick: this.handleItemDoubleClick
      });
      menus = createVNode(Menus, menusProps, null);
    } else {
      emptyMenuClassName = " ".concat(prefixCls2, "-menus-empty");
    }
    var triggerProps = _extends$1(_extends$1(_extends$1({}, restProps), this.$attrs), {
      disabled,
      popupPlacement,
      builtinPlacements,
      popupTransitionName: transitionName2,
      action: disabled ? [] : ["click"],
      popupVisible: disabled ? false : sPopupVisible,
      prefixCls: "".concat(prefixCls2, "-menus"),
      popupClassName: popupClassName + emptyMenuClassName,
      popup: menus,
      onPopupVisibleChange: handlePopupVisibleChange3,
      ref: this.saveTrigger
    });
    var children = getSlot(this);
    this.children = children;
    return createVNode(Trigger, triggerProps, {
      default: function _default8() {
        return [children && cloneElement(children[0], {
          onKeydown: handleKeyDown7,
          tabindex: disabled ? void 0 : 0
        })];
      }
    });
  }
});
var RedoOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M758.2 839.1C851.8 765.9 912 651.9 912 523.9 912 303 733.5 124.3 512.6 124 291.4 123.7 112 302.8 112 523.9c0 125.2 57.5 236.9 147.6 310.2 3.5 2.8 8.6 2.2 11.4-1.3l39.4-50.5c2.7-3.4 2.1-8.3-1.2-11.1-8.1-6.6-15.9-13.7-23.4-21.2a318.64 318.64 0 01-68.6-101.7C200.4 609 192 567.1 192 523.9s8.4-85.1 25.1-124.5c16.1-38.1 39.2-72.3 68.6-101.7 29.4-29.4 63.6-52.5 101.7-68.6C426.9 212.4 468.8 204 512 204s85.1 8.4 124.5 25.1c38.1 16.1 72.3 39.2 101.7 68.6 29.4 29.4 52.5 63.6 68.6 101.7 16.7 39.4 25.1 81.3 25.1 124.5s-8.4 85.1-25.1 124.5a318.64 318.64 0 01-68.6 101.7c-9.3 9.3-19.1 18-29.3 26L668.2 724a8 8 0 00-14.1 3l-39.6 162.2c-1.2 5 2.6 9.9 7.7 9.9l167 .8c6.7 0 10.5-7.7 6.3-12.9l-37.3-47.9z" } }] }, "name": "redo", "theme": "outlined" };
var RedoOutlinedSvg = RedoOutlined$2;
function _objectSpread$t(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$u(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$u(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var RedoOutlined = function RedoOutlined2(props2, context2) {
  var p2 = _objectSpread$t({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": RedoOutlinedSvg
  }), null);
};
RedoOutlined.displayName = "RedoOutlined";
RedoOutlined.inheritAttrs = false;
var RedoOutlined$1 = RedoOutlined;
var __rest$v = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$w() {
}
var cascaderProps = {
  options: {
    type: Array,
    default: []
  },
  defaultValue: PropsTypes.array,
  value: PropsTypes.array,
  displayRender: PropsTypes.func,
  transitionName: PropsTypes.string.def("slide-up"),
  popupStyle: PropsTypes.object.def(function() {
    return {};
  }),
  popupClassName: PropsTypes.string,
  popupPlacement: PropsTypes.oneOf(tuple("bottomLeft", "bottomRight", "topLeft", "topRight")).def("bottomLeft"),
  placeholder: PropsTypes.string.def("Please select"),
  size: PropsTypes.oneOf(tuple("large", "default", "small")),
  disabled: PropsTypes.looseBool.def(false),
  allowClear: PropsTypes.looseBool.def(true),
  showSearch: {
    type: [Boolean, Object],
    default: void 0
  },
  notFoundContent: PropsTypes.VNodeChild,
  loadData: PropsTypes.func,
  expandTrigger: PropsTypes.oneOf(tuple("click", "hover")),
  changeOnSelect: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  inputPrefixCls: PropsTypes.string,
  getPopupContainer: PropsTypes.func,
  popupVisible: PropsTypes.looseBool,
  fieldNames: {
    type: Object
  },
  autofocus: PropsTypes.looseBool,
  suffixIcon: PropsTypes.VNodeChild,
  showSearchRender: PropsTypes.any,
  onChange: PropsTypes.func,
  onPopupVisibleChange: PropsTypes.func,
  onFocus: PropsTypes.func,
  onBlur: PropsTypes.func,
  onSearch: PropsTypes.func,
  "onUpdate:value": PropsTypes.func
};
var defaultLimit = 50;
function defaultFilterOption(inputValue, path2, names2) {
  return path2.some(function(option) {
    return option[names2.label].indexOf(inputValue) > -1;
  });
}
function defaultSortFilteredOption(a2, b2, inputValue, names2) {
  function callback(elem) {
    return elem[names2.label].indexOf(inputValue) > -1;
  }
  return a2.findIndex(callback) - b2.findIndex(callback);
}
function getFilledFieldNames(props2) {
  var fieldNames = props2.fieldNames || {};
  var names2 = {
    children: fieldNames.children || "children",
    label: fieldNames.label || "label",
    value: fieldNames.value || "value"
  };
  return names2;
}
function flattenTree(options2, props2) {
  var ancestor = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
  var names2 = getFilledFieldNames(props2);
  var flattenOptions2 = [];
  var childrenName = names2.children;
  options2.forEach(function(option) {
    var path2 = ancestor.concat(option);
    if (props2.changeOnSelect || !option[childrenName] || !option[childrenName].length) {
      flattenOptions2.push(path2);
    }
    if (option[childrenName]) {
      flattenOptions2 = flattenOptions2.concat(flattenTree(option[childrenName], props2, path2));
    }
  });
  return flattenOptions2;
}
var defaultDisplayRender = function defaultDisplayRender2(_ref) {
  var labels = _ref.labels;
  return labels.join(" / ");
};
var Cascader = defineComponent({
  name: "ACascader",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: cascaderProps,
  setup: function setup72() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      localeData: inject("localeData", {}),
      cachedOptions: [],
      popupRef: void 0,
      input: void 0
    };
  },
  data: function data25() {
    var _this$$props = this.$props, value26 = _this$$props.value, defaultValue = _this$$props.defaultValue, popupVisible4 = _this$$props.popupVisible, showSearch = _this$$props.showSearch, options2 = _this$$props.options;
    return {
      sValue: value26 || defaultValue || [],
      inputValue: "",
      inputFocused: false,
      sPopupVisible: popupVisible4,
      flattenOptions: showSearch ? flattenTree(options2, this.$props) : void 0
    };
  },
  watch: {
    value: function value10(val) {
      this.setState({
        sValue: val || []
      });
    },
    popupVisible: function popupVisible3(val) {
      this.setState({
        sPopupVisible: val
      });
    },
    options: function options(val) {
      if (this.showSearch) {
        this.setState({
          flattenOptions: flattenTree(val, this.$props)
        });
      }
    }
  },
  created: function created9() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    savePopupRef: function savePopupRef4(ref2) {
      this.popupRef = ref2;
    },
    highlightKeyword: function highlightKeyword(str, keyword, prefixCls2) {
      return str.split(keyword).map(function(node, index2) {
        return index2 === 0 ? node : [createVNode("span", {
          "class": "".concat(prefixCls2, "-menu-item-keyword")
        }, [keyword]), node];
      });
    },
    defaultRenderFilteredOption: function defaultRenderFilteredOption(opt) {
      var _this = this;
      var inputValue = opt.inputValue, path2 = opt.path, prefixCls2 = opt.prefixCls, names2 = opt.names;
      return path2.map(function(option, index2) {
        var label = option[names2.label];
        var node = label.indexOf(inputValue) > -1 ? _this.highlightKeyword(label, inputValue, prefixCls2) : label;
        return index2 === 0 ? node : [" / ", node];
      });
    },
    saveInput: function saveInput4(node) {
      this.input = node;
    },
    handleChange: function handleChange9(value26, selectedOptions) {
      this.setState({
        inputValue: ""
      });
      if (selectedOptions[0].__IS_FILTERED_OPTION) {
        var unwrappedValue = value26[0];
        var unwrappedSelectedOptions = selectedOptions[0].path;
        this.setValue(unwrappedValue, unwrappedSelectedOptions);
        return;
      }
      this.setValue(value26, selectedOptions);
    },
    handlePopupVisibleChange: function handlePopupVisibleChange2(popupVisible4) {
      if (!hasProp(this, "popupVisible")) {
        this.setState(function(state2) {
          return {
            sPopupVisible: popupVisible4,
            inputFocused: popupVisible4,
            inputValue: popupVisible4 ? state2.inputValue : ""
          };
        });
      }
      this.$emit("popupVisibleChange", popupVisible4);
    },
    handleInputFocus: function handleInputFocus2(e2) {
      this.$emit("focus", e2);
    },
    handleInputBlur: function handleInputBlur2(e2) {
      this.setState({
        inputFocused: false
      });
      this.$emit("blur", e2);
    },
    handleInputClick: function handleInputClick(e2) {
      var inputFocused = this.inputFocused, sPopupVisible = this.sPopupVisible;
      if (inputFocused || sPopupVisible) {
        e2.stopPropagation();
        if (e2.nativeEvent && e2.nativeEvent.stopImmediatePropagation) {
          e2.nativeEvent.stopImmediatePropagation();
        }
      }
    },
    handleKeyDown: function handleKeyDown4(e2) {
      if (e2.keyCode === KeyCode$2.BACKSPACE || e2.keyCode === KeyCode$2.SPACE) {
        e2.stopPropagation();
      }
    },
    handleInputChange: function handleInputChange(e2) {
      var inputValue = e2.target.value;
      this.setState({
        inputValue
      });
      this.$emit("search", inputValue);
    },
    setValue: function setValue5(value26) {
      var selectedOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      this.$emit("update:value", value26);
      this.$emit("change", value26, selectedOptions);
    },
    getLabel: function getLabel2() {
      var options2 = this.options;
      var names2 = getFilledFieldNames(this.$props);
      var displayRender = getComponent(this, "displayRender", {}, false) || defaultDisplayRender;
      var value26 = this.sValue;
      var unwrappedValue = Array.isArray(value26[0]) ? value26[0] : value26;
      var selectedOptions = arrayTreeFilter(options2, function(o2, level2) {
        return o2[names2.value] === unwrappedValue[level2];
      }, {
        childrenKeyName: names2.children
      });
      var labels = selectedOptions.map(function(o2) {
        return o2[names2.label];
      });
      return displayRender({
        labels,
        selectedOptions
      });
    },
    clearSelection: function clearSelection(e2) {
      e2.preventDefault();
      e2.stopPropagation();
      if (!this.inputValue) {
        this.setValue([]);
        this.handlePopupVisibleChange(false);
      } else {
        this.setState({
          inputValue: ""
        });
      }
    },
    generateFilteredOptions: function generateFilteredOptions(prefixCls2, renderEmpty2) {
      var _ref3;
      var showSearch = this.showSearch, notFoundContent = this.notFoundContent;
      var names2 = getFilledFieldNames(this.$props);
      var _showSearch$filter = showSearch.filter, filter = _showSearch$filter === void 0 ? defaultFilterOption : _showSearch$filter, _showSearch$sort = showSearch.sort, sort = _showSearch$sort === void 0 ? defaultSortFilteredOption : _showSearch$sort, _showSearch$limit = showSearch.limit, limit = _showSearch$limit === void 0 ? defaultLimit : _showSearch$limit;
      var render166 = showSearch.render || getComponent(this, "showSearchRender") || this.defaultRenderFilteredOption;
      var _this$$data = this.$data, _this$$data$flattenOp = _this$$data.flattenOptions, flattenOptions2 = _this$$data$flattenOp === void 0 ? [] : _this$$data$flattenOp, inputValue = _this$$data.inputValue;
      var filtered;
      if (limit > 0) {
        filtered = [];
        var matchCount = 0;
        flattenOptions2.some(function(path2) {
          var match5 = filter(inputValue, path2, names2);
          if (match5) {
            filtered.push(path2);
            matchCount += 1;
          }
          return matchCount >= limit;
        });
      } else {
        warning$4(typeof limit !== "number", "Cascader", "'limit' of showSearch in Cascader should be positive number or false.");
        filtered = flattenOptions2.filter(function(path2) {
          return filter(inputValue, path2, names2);
        });
      }
      filtered.sort(function(a2, b2) {
        return sort(a2, b2, inputValue, names2);
      });
      if (filtered.length > 0) {
        return filtered.map(function(path2) {
          var _ref2;
          return _ref2 = {
            __IS_FILTERED_OPTION: true,
            path: path2
          }, _defineProperty$U(_ref2, names2.label, render166({
            inputValue,
            path: path2,
            prefixCls: prefixCls2,
            names: names2
          })), _defineProperty$U(_ref2, names2.value, path2.map(function(o2) {
            return o2[names2.value];
          })), _defineProperty$U(_ref2, "disabled", path2.some(function(o2) {
            return !!o2.disabled;
          })), _ref2;
        });
      }
      return [(_ref3 = {}, _defineProperty$U(_ref3, names2.label, notFoundContent || renderEmpty2("Cascader")), _defineProperty$U(_ref3, names2.value, "ANT_CASCADER_NOT_FOUND"), _defineProperty$U(_ref3, "disabled", true), _ref3)];
    },
    focus: function focus9() {
      this.input && this.input.focus();
    },
    blur: function blur8() {
      this.input && this.input.blur();
    }
  },
  render: function render64() {
    var _classNames, _classNames2, _classNames3;
    var sPopupVisible = this.sPopupVisible, inputValue = this.inputValue, configProvider = this.configProvider, localeData2 = this.localeData;
    var _this$$data2 = this.$data, value26 = _this$$data2.sValue, inputFocused = _this$$data2.inputFocused;
    var props2 = getOptionProps(this);
    var suffixIcon = getComponent(this, "suffixIcon");
    suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
    var getContextPopupContainer = configProvider.getPopupContainer;
    var _a = props2, customizePrefixCls = _a.prefixCls, customizeInputPrefixCls = _a.inputPrefixCls, _a$placeholder = _a.placeholder, placeholder = _a$placeholder === void 0 ? localeData2.placeholder : _a$placeholder, size2 = _a.size, disabled = _a.disabled, allowClear = _a.allowClear, _a$showSearch = _a.showSearch, showSearch = _a$showSearch === void 0 ? false : _a$showSearch, notFoundContent = _a.notFoundContent, otherProps = __rest$v(_a, ["prefixCls", "inputPrefixCls", "placeholder", "size", "disabled", "allowClear", "showSearch", "notFoundContent"]);
    var _splitAttrs = splitAttrs(this.$attrs), onEvents = _splitAttrs.onEvents, extraAttrs = _splitAttrs.extraAttrs;
    var className = extraAttrs.class, style3 = extraAttrs.style, restAttrs = __rest$v(extraAttrs, ["class", "style"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var renderEmpty2 = this.configProvider.renderEmpty;
    var prefixCls2 = getPrefixCls2("cascader", customizePrefixCls);
    var inputPrefixCls = getPrefixCls2("input", customizeInputPrefixCls);
    var sizeCls = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(inputPrefixCls, "-lg"), size2 === "large"), _defineProperty$U(_classNames, "".concat(inputPrefixCls, "-sm"), size2 === "small"), _classNames));
    var clearIcon = allowClear && !disabled && value26.length > 0 || inputValue ? createVNode(CloseCircleFilled$1, {
      "class": "".concat(prefixCls2, "-picker-clear"),
      "onClick": this.clearSelection,
      "key": "clear-icon"
    }, null) : null;
    var arrowCls = classNames((_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(prefixCls2, "-picker-arrow"), true), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-picker-arrow-expand"), sPopupVisible), _classNames2));
    var pickerCls = classNames(className, "".concat(prefixCls2, "-picker"), (_classNames3 = {}, _defineProperty$U(_classNames3, "".concat(prefixCls2, "-picker-with-value"), inputValue), _defineProperty$U(_classNames3, "".concat(prefixCls2, "-picker-disabled"), disabled), _defineProperty$U(_classNames3, "".concat(prefixCls2, "-picker-").concat(size2), !!size2), _defineProperty$U(_classNames3, "".concat(prefixCls2, "-picker-show-search"), !!showSearch), _defineProperty$U(_classNames3, "".concat(prefixCls2, "-picker-focused"), inputFocused), _classNames3));
    var tempInputProps = omit$2(otherProps, ["popupStyle", "options", "popupPlacement", "transitionName", "displayRender", "changeOnSelect", "expandTrigger", "popupVisible", "getPopupContainer", "loadData", "popupClassName", "filterOption", "renderFilteredOption", "sortFilteredOption", "notFoundContent", "defaultValue", "fieldNames", "onChange", "onPopupVisibleChange", "onFocus", "onBlur", "onSearch", "onUpdate:value"]);
    var options2 = props2.options;
    var names2 = getFilledFieldNames(this.$props);
    if (options2 && options2.length > 0) {
      if (inputValue) {
        options2 = this.generateFilteredOptions(prefixCls2, renderEmpty2);
      }
    } else {
      var _ref4;
      options2 = [(_ref4 = {}, _defineProperty$U(_ref4, names2.label, notFoundContent || renderEmpty2("Cascader")), _defineProperty$U(_ref4, names2.value, "ANT_CASCADER_NOT_FOUND"), _defineProperty$U(_ref4, "disabled", true), _ref4)];
    }
    if (!sPopupVisible) {
      options2 = this.cachedOptions;
    } else {
      this.cachedOptions = options2;
    }
    var dropdownMenuColumnStyle = {};
    var isNotFound = (options2 || []).length === 1 && options2[0].value === "ANT_CASCADER_NOT_FOUND";
    if (isNotFound) {
      dropdownMenuColumnStyle.height = "auto";
    }
    var resultListMatchInputWidth = showSearch.matchInputWidth !== false;
    if (resultListMatchInputWidth && (inputValue || isNotFound) && this.input) {
      dropdownMenuColumnStyle.width = findDOMNode(this.input.input).offsetWidth + "px";
    }
    var inputProps2 = _extends$1(_extends$1(_extends$1({}, restAttrs), tempInputProps), {
      prefixCls: inputPrefixCls,
      placeholder: value26 && value26.length > 0 ? void 0 : placeholder,
      value: inputValue,
      disabled,
      readonly: !showSearch,
      autocomplete: "off",
      class: "".concat(prefixCls2, "-input ").concat(sizeCls),
      onFocus: this.handleInputFocus,
      onClick: showSearch ? this.handleInputClick : noop$w,
      onBlur: showSearch ? this.handleInputBlur : props2.onBlur,
      onKeydown: this.handleKeyDown,
      onChange: showSearch ? this.handleInputChange : noop$w
    });
    var children = getSlot(this);
    var inputIcon = suffixIcon && (isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
      class: "".concat(prefixCls2, "-picker-arrow")
    }) : createVNode("span", {
      "class": "".concat(prefixCls2, "-picker-arrow")
    }, [suffixIcon])) || createVNode(DownOutlined$1, {
      "class": arrowCls
    }, null);
    var input = children.length ? children : createVNode("span", {
      "class": pickerCls,
      "style": style3
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-picker-label")
    }, [this.getLabel()]), createVNode(Input, _objectSpread2$2(_objectSpread2$2({}, inputProps2), {}, {
      "ref": this.saveInput
    }), null), clearIcon, inputIcon]);
    var expandIcon = createVNode(RightOutlined$1, null, null);
    var loadingIcon = createVNode("span", {
      "class": "".concat(prefixCls2, "-menu-item-loading-icon")
    }, [createVNode(RedoOutlined$1, {
      "spin": true
    }, null)]);
    var getPopupContainer = props2.getPopupContainer || getContextPopupContainer;
    var cascaderProps2 = _extends$1(_extends$1(_extends$1(_extends$1({}, props2), {
      getPopupContainer,
      options: options2,
      prefixCls: prefixCls2,
      value: value26,
      popupVisible: sPopupVisible,
      dropdownMenuColumnStyle,
      expandIcon,
      loadingIcon
    }), onEvents), {
      onPopupVisibleChange: this.handlePopupVisibleChange,
      onChange: this.handleChange
    });
    return createVNode(Cascader$1, cascaderProps2, {
      default: function _default8() {
        return [input];
      }
    });
  }
});
var index$w = withInstall(Cascader);
var __rest$u = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$v() {
}
var Checkbox = defineComponent({
  name: "ACheckbox",
  inheritAttrs: false,
  __ANT_CHECKBOX: true,
  props: {
    prefixCls: PropsTypes.string,
    defaultChecked: PropsTypes.looseBool,
    checked: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    isGroup: PropsTypes.looseBool,
    value: PropsTypes.any,
    name: PropsTypes.string,
    id: PropsTypes.string,
    indeterminate: PropsTypes.looseBool,
    type: PropsTypes.string.def("checkbox"),
    autofocus: PropsTypes.looseBool,
    onChange: PropsTypes.func,
    "onUpdate:checked": PropsTypes.func
  },
  emits: ["change", "update:checked"],
  setup: function setup73() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      checkboxGroupContext: inject("checkboxGroupContext", void 0)
    };
  },
  watch: {
    value: function value11(_value, prevValue) {
      var _this = this;
      nextTick(function() {
        var _this$checkboxGroupCo = _this.checkboxGroupContext, checkboxGroup = _this$checkboxGroupCo === void 0 ? {} : _this$checkboxGroupCo;
        if (checkboxGroup.registerValue && checkboxGroup.cancelValue) {
          checkboxGroup.cancelValue(prevValue);
          checkboxGroup.registerValue(_value);
        }
      });
    }
  },
  mounted: function mounted15() {
    var value26 = this.value, _this$checkboxGroupCo2 = this.checkboxGroupContext, checkboxGroup = _this$checkboxGroupCo2 === void 0 ? {} : _this$checkboxGroupCo2;
    if (checkboxGroup.registerValue) {
      checkboxGroup.registerValue(value26);
    }
    warning$4(hasProp$1(this, "checked") || this.checkboxGroupContext || !hasProp$1(this, "value"), "Checkbox", "`value` is not validate prop, do you mean `checked`?");
  },
  beforeUnmount: function beforeUnmount12() {
    var value26 = this.value, _this$checkboxGroupCo3 = this.checkboxGroupContext, checkboxGroup = _this$checkboxGroupCo3 === void 0 ? {} : _this$checkboxGroupCo3;
    if (checkboxGroup.cancelValue) {
      checkboxGroup.cancelValue(value26);
    }
  },
  methods: {
    handleChange: function handleChange10(event) {
      var targetChecked = event.target.checked;
      this.$emit("update:checked", targetChecked);
      this.$emit("change", event);
    },
    focus: function focus10() {
      this.$refs.vcCheckbox.focus();
    },
    blur: function blur9() {
      this.$refs.vcCheckbox.blur();
    }
  },
  render: function render65() {
    var _this2 = this, _classNames;
    var props2 = getOptionProps(this);
    var checkboxGroup = this.checkboxGroupContext, $attrs = this.$attrs;
    var children = getSlot(this);
    var indeterminate = props2.indeterminate, customizePrefixCls = props2.prefixCls, restProps = __rest$u(props2, ["indeterminate", "prefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("checkbox", customizePrefixCls);
    var _$attrs$onMouseenter = $attrs.onMouseenter, onMouseenter2 = _$attrs$onMouseenter === void 0 ? noop$v : _$attrs$onMouseenter, _$attrs$onMouseleave = $attrs.onMouseleave, onMouseleave2 = _$attrs$onMouseleave === void 0 ? noop$v : _$attrs$onMouseleave;
    $attrs.onInput;
    var className = $attrs.class, style3 = $attrs.style, restAttrs = __rest$u($attrs, ["onMouseenter", "onMouseleave", "onInput", "class", "style"]);
    var checkboxProps = _extends$1(_extends$1(_extends$1({}, restProps), {
      prefixCls: prefixCls2
    }), restAttrs);
    if (checkboxGroup) {
      checkboxProps.onChange = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2.$emit.apply(_this2, ["change"].concat(args));
        checkboxGroup.toggleOption({
          label: children,
          value: props2.value
        });
      };
      checkboxProps.name = checkboxGroup.name;
      checkboxProps.checked = checkboxGroup.sValue.indexOf(props2.value) !== -1;
      checkboxProps.disabled = props2.disabled || checkboxGroup.disabled;
      checkboxProps.indeterminate = indeterminate;
    } else {
      checkboxProps.onChange = this.handleChange;
    }
    var classString = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-wrapper"), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-wrapper-checked"), checkboxProps.checked), _defineProperty$U(_classNames, "".concat(prefixCls2, "-wrapper-disabled"), checkboxProps.disabled), _classNames), className);
    var checkboxClass = classNames(_defineProperty$U({}, "".concat(prefixCls2, "-indeterminate"), indeterminate));
    return createVNode("label", {
      "class": classString,
      "style": style3,
      "onMouseenter": onMouseenter2,
      "onMouseleave": onMouseleave2
    }, [createVNode(Checkbox$1, _objectSpread2$2(_objectSpread2$2({}, checkboxProps), {}, {
      "class": checkboxClass,
      "ref": "vcCheckbox"
    }), null), children.length ? createVNode("span", null, [children]) : null]);
  }
});
function noop$u() {
}
var CheckboxGroup = defineComponent({
  name: "ACheckboxGroup",
  props: {
    name: PropsTypes.string,
    prefixCls: PropsTypes.string,
    defaultValue: {
      type: Array
    },
    value: {
      type: Array
    },
    options: {
      type: Array
    },
    disabled: PropsTypes.looseBool,
    onChange: PropsTypes.func
  },
  emits: ["change", "update:value"],
  setup: function setup74() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data26() {
    var value26 = this.value, defaultValue = this.defaultValue;
    return {
      sValue: value26 || defaultValue || [],
      registeredValues: []
    };
  },
  watch: {
    value: function value12(val) {
      this.sValue = val || [];
    }
  },
  created: function created10() {
    provide("checkboxGroupContext", this);
  },
  methods: {
    getOptions: function getOptions2() {
      var _this$options = this.options, options2 = _this$options === void 0 ? [] : _this$options, $slots = this.$slots;
      return options2.map(function(option) {
        if (typeof option === "string") {
          return {
            label: option,
            value: option
          };
        }
        var label = option.label;
        if (label === void 0 && $slots.label) {
          label = $slots.label(option);
        }
        return _extends$1(_extends$1({}, option), {
          label
        });
      });
    },
    cancelValue: function cancelValue(value26) {
      this.registeredValues = this.registeredValues.filter(function(val) {
        return val !== value26;
      });
    },
    registerValue: function registerValue(value26) {
      this.registeredValues = [].concat(_toConsumableArray(this.registeredValues), [value26]);
    },
    toggleOption: function toggleOption(option) {
      var registeredValues = this.registeredValues;
      var optionIndex = this.sValue.indexOf(option.value);
      var value26 = _toConsumableArray(this.sValue);
      if (optionIndex === -1) {
        value26.push(option.value);
      } else {
        value26.splice(optionIndex, 1);
      }
      if (!hasProp$1(this, "value")) {
        this.sValue = value26;
      }
      var options2 = this.getOptions();
      var val = value26.filter(function(val2) {
        return registeredValues.indexOf(val2) !== -1;
      }).sort(function(a2, b2) {
        var indexA = options2.findIndex(function(opt) {
          return opt.value === a2;
        });
        var indexB = options2.findIndex(function(opt) {
          return opt.value === b2;
        });
        return indexA - indexB;
      });
      this.$emit("update:value", val);
      this.$emit("change", val);
    }
  },
  render: function render66() {
    var props2 = this.$props, state2 = this.$data;
    var customizePrefixCls = props2.prefixCls, options2 = props2.options;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("checkbox", customizePrefixCls);
    var children = getSlot(this);
    var groupPrefixCls = "".concat(prefixCls2, "-group");
    if (options2 && options2.length > 0) {
      children = this.getOptions().map(function(option) {
        return createVNode(Checkbox, {
          "prefixCls": prefixCls2,
          "key": option.value.toString(),
          "disabled": "disabled" in option ? option.disabled : props2.disabled,
          "indeterminate": option.indeterminate,
          "value": option.value,
          "checked": state2.sValue.indexOf(option.value) !== -1,
          "onChange": option.onChange || noop$u,
          "class": "".concat(groupPrefixCls, "-item")
        }, {
          default: function _default8() {
            return [option.label];
          }
        });
      });
    }
    return createVNode("div", {
      "class": groupPrefixCls
    }, [children]);
  }
});
Checkbox.Group = CheckboxGroup;
Checkbox.install = function(app) {
  app.component(Checkbox.name, Checkbox);
  app.component(CheckboxGroup.name, CheckboxGroup);
  return app;
};
var commentProps = {
  actions: PropsTypes.array,
  author: PropsTypes.VNodeChild,
  avatar: PropsTypes.VNodeChild,
  content: PropsTypes.VNodeChild,
  prefixCls: PropsTypes.string,
  datetime: PropsTypes.VNodeChild
};
var Comment = defineComponent({
  name: "AComment",
  props: commentProps,
  slots: ["actions", "author", "avatar", "content", "datetime"],
  setup: function setup75(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("comment", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var renderNested = function renderNested2(prefixCls3, children) {
      return createVNode("div", {
        "class": "".concat(prefixCls3, "-nested")
      }, [children]);
    };
    var getAction2 = function getAction3(actions) {
      if (!actions || !actions.length) {
        return null;
      }
      var actionList = actions.map(function(action, index2) {
        return createVNode("li", {
          "key": "action-".concat(index2)
        }, [action]);
      });
      return actionList;
    };
    return function() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
      var pre = prefixCls2.value;
      var actions = (_a = props2.actions) !== null && _a !== void 0 ? _a : (_b = slots.actions) === null || _b === void 0 ? void 0 : _b.call(slots);
      var author = (_c = props2.author) !== null && _c !== void 0 ? _c : (_d = slots.author) === null || _d === void 0 ? void 0 : _d.call(slots);
      var avatar = (_e = props2.avatar) !== null && _e !== void 0 ? _e : (_f = slots.avatar) === null || _f === void 0 ? void 0 : _f.call(slots);
      var content = (_g = props2.content) !== null && _g !== void 0 ? _g : (_h = slots.content) === null || _h === void 0 ? void 0 : _h.call(slots);
      var datetime = (_j = props2.datetime) !== null && _j !== void 0 ? _j : (_k = slots.datetime) === null || _k === void 0 ? void 0 : _k.call(slots);
      var avatarDom = createVNode("div", {
        "class": "".concat(pre, "-avatar")
      }, [typeof avatar === "string" ? createVNode("img", {
        "src": avatar,
        "alt": "comment-avatar"
      }, null) : avatar]);
      var actionDom = actions ? createVNode("ul", {
        "class": "".concat(pre, "-actions")
      }, [getAction2(Array.isArray(actions) ? actions : [actions])]) : null;
      var authorContent = createVNode("div", {
        "class": "".concat(pre, "-content-author")
      }, [author && createVNode("span", {
        "class": "".concat(pre, "-content-author-name")
      }, [author]), datetime && createVNode("span", {
        "class": "".concat(pre, "-content-author-time")
      }, [datetime])]);
      var contentDom = createVNode("div", {
        "class": "".concat(pre, "-content")
      }, [authorContent, createVNode("div", {
        "class": "".concat(pre, "-content-detail")
      }, [content]), actionDom]);
      var comment = createVNode("div", {
        "class": "".concat(pre, "-inner")
      }, [avatarDom, contentDom]);
      var children = flattenChildren((_l = slots.default) === null || _l === void 0 ? void 0 : _l.call(slots));
      return createVNode("div", {
        "class": [pre, _defineProperty$U({}, "".concat(pre, "-rtl"), direction.value === "rtl")]
      }, [comment, children && children.length ? renderNested(pre, children) : null]);
    };
  }
});
var index$v = withInstall(Comment);
function goYear$3(direction) {
  this.changeYear(direction);
}
function noop$t() {
}
var MonthPanel = {
  name: "MonthPanel",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    value: PropsTypes.any,
    defaultValue: PropsTypes.any,
    cellRender: PropsTypes.any,
    contentRender: PropsTypes.any,
    locale: PropsTypes.any,
    rootPrefixCls: PropsTypes.string,
    disabledDate: PropsTypes.func,
    renderFooter: PropsTypes.func,
    changeYear: PropsTypes.func.def(noop$t)
  },
  data: function data27() {
    var value26 = this.value, defaultValue = this.defaultValue;
    this.nextYear = goYear$3.bind(this, 1);
    this.previousYear = goYear$3.bind(this, -1);
    return {
      sValue: value26 || defaultValue
    };
  },
  watch: {
    value: function value13(val) {
      this.setState({
        sValue: val
      });
    }
  },
  methods: {
    setAndSelectValue: function setAndSelectValue2(value26) {
      this.setValue(value26);
      this.__emit("select", value26);
    },
    setValue: function setValue6(value26) {
      if (hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
    }
  },
  render: function render67() {
    var sValue = this.sValue, cellRender = this.cellRender, contentRender = this.contentRender, locale2 = this.locale, rootPrefixCls = this.rootPrefixCls, disabledDate = this.disabledDate, renderFooter5 = this.renderFooter;
    var year = sValue.year();
    var prefixCls2 = "".concat(rootPrefixCls, "-month-panel");
    var footer = renderFooter5 && renderFooter5("month");
    return createVNode("div", {
      "class": prefixCls2
    }, [createVNode("div", null, [createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-year-btn"),
      "role": "button",
      "onClick": this.previousYear,
      "title": locale2.previousYear
    }, null), createVNode("a", {
      "class": "".concat(prefixCls2, "-year-select"),
      "role": "button",
      "onClick": this.$attrs.onYearPanelShow || noop$t,
      "title": locale2.yearSelect
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-year-select-content")
    }, [year]), createVNode("span", {
      "class": "".concat(prefixCls2, "-year-select-arrow")
    }, [createTextVNode("x")])]), createVNode("a", {
      "class": "".concat(prefixCls2, "-next-year-btn"),
      "role": "button",
      "onClick": this.nextYear,
      "title": locale2.nextYear
    }, null)]), createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode(MonthTable$1, {
      "disabledDate": disabledDate,
      "onSelect": this.setAndSelectValue,
      "locale": locale2,
      "value": sValue,
      "cellRender": cellRender,
      "contentRender": contentRender,
      "prefixCls": prefixCls2
    }, null)]), footer && createVNode("div", {
      "class": "".concat(prefixCls2, "-footer")
    }, [footer])])]);
  }
};
var MonthPanel$1 = MonthPanel;
var ROW$1 = 4;
var COL$1 = 3;
function noop$s() {
}
function goYear$2(direction) {
  var value26 = this.sValue.clone();
  value26.add(direction, "year");
  this.setState({
    sValue: value26
  });
}
function chooseYear(year) {
  var value26 = this.sValue.clone();
  value26.year(year);
  value26.month(this.sValue.month());
  this.sValue = value26;
  this.__emit("select", value26);
}
var YearPanel = {
  name: "YearPanel",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    rootPrefixCls: PropsTypes.string,
    value: PropsTypes.object,
    defaultValue: PropsTypes.object,
    locale: PropsTypes.object,
    renderFooter: PropsTypes.func
  },
  data: function data28() {
    this.nextDecade = goYear$2.bind(this, 10);
    this.previousDecade = goYear$2.bind(this, -10);
    return {
      sValue: this.value || this.defaultValue
    };
  },
  watch: {
    value: function value14(val) {
      this.sValue = val;
    }
  },
  methods: {
    years: function years2() {
      var value26 = this.sValue;
      var currentYear = value26.year();
      var startYear = parseInt(currentYear / 10, 10) * 10;
      var previousYear = startYear - 1;
      var years3 = [];
      var index2 = 0;
      for (var rowIndex = 0; rowIndex < ROW$1; rowIndex++) {
        years3[rowIndex] = [];
        for (var colIndex = 0; colIndex < COL$1; colIndex++) {
          var year = previousYear + index2;
          var content = String(year);
          years3[rowIndex][colIndex] = {
            content,
            year,
            title: content
          };
          index2++;
        }
      }
      return years3;
    }
  },
  render: function render68() {
    var _this = this;
    var value26 = this.sValue, locale2 = this.locale, renderFooter5 = this.renderFooter;
    var onDecadePanelShow = this.$attrs.onDecadePanelShow || noop$s;
    var years3 = this.years();
    var currentYear = value26.year();
    var startYear = parseInt(currentYear / 10, 10) * 10;
    var endYear = startYear + 9;
    var prefixCls2 = "".concat(this.rootPrefixCls, "-year-panel");
    var yeasEls = years3.map(function(row, index2) {
      var tds = row.map(function(yearData) {
        var _classNameMap;
        var classNameMap = (_classNameMap = {}, _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-cell"), 1), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-selected-cell"), yearData.year === currentYear), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-last-decade-cell"), yearData.year < startYear), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-next-decade-cell"), yearData.year > endYear), _classNameMap);
        var clickHandler2 = noop$s;
        if (yearData.year < startYear) {
          clickHandler2 = _this.previousDecade;
        } else if (yearData.year > endYear) {
          clickHandler2 = _this.nextDecade;
        } else {
          clickHandler2 = chooseYear.bind(_this, yearData.year);
        }
        return createVNode("td", {
          "role": "gridcell",
          "title": yearData.title,
          "key": yearData.content,
          "onClick": clickHandler2,
          "class": classNameMap
        }, [createVNode("a", {
          "class": "".concat(prefixCls2, "-year")
        }, [yearData.content])]);
      });
      return createVNode("tr", {
        "key": index2,
        "role": "row"
      }, [tds]);
    });
    var footer = renderFooter5 && renderFooter5("year");
    return createVNode("div", {
      "class": prefixCls2
    }, [createVNode("div", null, [createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-decade-btn"),
      "role": "button",
      "onClick": this.previousDecade,
      "title": locale2.previousDecade
    }, null), createVNode("a", {
      "class": "".concat(prefixCls2, "-decade-select"),
      "role": "button",
      "onClick": onDecadePanelShow,
      "title": locale2.decadeSelect
    }, [createVNode("span", {
      "class": "".concat(prefixCls2, "-decade-select-content")
    }, [startYear, createTextVNode("-"), endYear]), createVNode("span", {
      "class": "".concat(prefixCls2, "-decade-select-arrow")
    }, [createTextVNode("x")])]), createVNode("a", {
      "class": "".concat(prefixCls2, "-next-decade-btn"),
      "role": "button",
      "onClick": this.nextDecade,
      "title": locale2.nextDecade
    }, null)]), createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode("table", {
      "class": "".concat(prefixCls2, "-table"),
      "cellspacing": "0",
      "role": "grid"
    }, [createVNode("tbody", {
      "class": "".concat(prefixCls2, "-tbody")
    }, [yeasEls])])]), footer && createVNode("div", {
      "class": "".concat(prefixCls2, "-footer")
    }, [footer])])]);
  }
};
var ROW = 4;
var COL = 3;
function noop$r() {
}
function goYear$1(direction) {
  var next3 = this.sValue.clone();
  next3.add(direction, "years");
  this.setState({
    sValue: next3
  });
}
function chooseDecade(year, event) {
  var next3 = this.sValue.clone();
  next3.year(year);
  next3.month(this.sValue.month());
  this.__emit("select", next3);
  event.preventDefault();
}
var DecadePanel = {
  name: "DecadePanel",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object,
    value: PropsTypes.object,
    defaultValue: PropsTypes.object,
    rootPrefixCls: PropsTypes.string,
    renderFooter: PropsTypes.func
  },
  data: function data29() {
    this.nextCentury = goYear$1.bind(this, 100);
    this.previousCentury = goYear$1.bind(this, -100);
    return {
      sValue: this.value || this.defaultValue
    };
  },
  watch: {
    value: function value15(val) {
      this.sValue = val;
    }
  },
  render: function render69() {
    var _this = this;
    var value26 = this.sValue;
    var _this$$props = this.$props, locale2 = _this$$props.locale, renderFooter5 = _this$$props.renderFooter;
    var currentYear = value26.year();
    var startYear = parseInt(currentYear / 100, 10) * 100;
    var preYear = startYear - 10;
    var endYear = startYear + 99;
    var decades = [];
    var index2 = 0;
    var prefixCls2 = "".concat(this.rootPrefixCls, "-decade-panel");
    for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
      decades[rowIndex] = [];
      for (var colIndex = 0; colIndex < COL; colIndex++) {
        var startDecade = preYear + index2 * 10;
        var endDecade = preYear + index2 * 10 + 9;
        decades[rowIndex][colIndex] = {
          startDecade,
          endDecade
        };
        index2++;
      }
    }
    var footer = renderFooter5 && renderFooter5("decade");
    var decadesEls = decades.map(function(row, decadeIndex) {
      var tds = row.map(function(decadeData) {
        var _classNameMap;
        var dStartDecade = decadeData.startDecade;
        var dEndDecade = decadeData.endDecade;
        var isLast = dStartDecade < startYear;
        var isNext = dEndDecade > endYear;
        var classNameMap = (_classNameMap = {}, _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-cell"), 1), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-selected-cell"), dStartDecade <= currentYear && currentYear <= dEndDecade), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-last-century-cell"), isLast), _defineProperty$U(_classNameMap, "".concat(prefixCls2, "-next-century-cell"), isNext), _classNameMap);
        var content = "".concat(dStartDecade, "-").concat(dEndDecade);
        var clickHandler2 = noop$r;
        if (isLast) {
          clickHandler2 = _this.previousCentury;
        } else if (isNext) {
          clickHandler2 = _this.nextCentury;
        } else {
          clickHandler2 = chooseDecade.bind(_this, dStartDecade);
        }
        return createVNode("td", {
          "key": dStartDecade,
          "onClick": clickHandler2,
          "role": "gridcell",
          "class": classNameMap
        }, [createVNode("a", {
          "class": "".concat(prefixCls2, "-decade")
        }, [content])]);
      });
      return createVNode("tr", {
        "key": decadeIndex,
        "role": "row"
      }, [tds]);
    });
    return createVNode("div", {
      "class": prefixCls2
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-century-btn"),
      "role": "button",
      "onClick": this.previousCentury,
      "title": locale2.previousCentury
    }, null), createVNode("div", {
      "class": "".concat(prefixCls2, "-century")
    }, [startYear, createTextVNode("-"), endYear]), createVNode("a", {
      "class": "".concat(prefixCls2, "-next-century-btn"),
      "role": "button",
      "onClick": this.nextCentury,
      "title": locale2.nextCentury
    }, null)]), createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode("table", {
      "class": "".concat(prefixCls2, "-table"),
      "cellspacing": "0",
      "role": "grid"
    }, [createVNode("tbody", {
      "class": "".concat(prefixCls2, "-tbody")
    }, [decadesEls])])]), footer && createVNode("div", {
      "class": "".concat(prefixCls2, "-footer")
    }, [footer])]);
  }
};
function noop$q() {
}
function goMonth(direction) {
  var next3 = this.value.clone();
  next3.add(direction, "months");
  this.__emit("valueChange", next3);
}
function goYear(direction) {
  var next3 = this.value.clone();
  next3.add(direction, "years");
  this.__emit("valueChange", next3);
}
function showIf(condition, el) {
  return condition ? el : null;
}
var CalendarHeader = {
  name: "CalendarHeader",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    value: PropsTypes.object,
    showTimePicker: PropsTypes.looseBool,
    locale: PropsTypes.object,
    enablePrev: PropsTypes.any.def(1),
    enableNext: PropsTypes.any.def(1),
    disabledMonth: PropsTypes.func,
    mode: PropsTypes.any,
    monthCellRender: PropsTypes.func,
    monthCellContentRender: PropsTypes.func,
    renderFooter: PropsTypes.func
  },
  data: function data30() {
    this.nextMonth = goMonth.bind(this, 1);
    this.previousMonth = goMonth.bind(this, -1);
    this.nextYear = goYear.bind(this, 1);
    this.previousYear = goYear.bind(this, -1);
    return {
      yearPanelReferer: null
    };
  },
  methods: {
    onMonthSelect: function onMonthSelect2(value26) {
      this.__emit("panelChange", value26, "date");
      if (this.$attrs.onMonthSelect) {
        this.__emit("monthSelect", value26);
      } else {
        this.__emit("valueChange", value26);
      }
    },
    onYearSelect: function onYearSelect(value26) {
      var referer = this.yearPanelReferer;
      this.setState({
        yearPanelReferer: null
      });
      this.__emit("panelChange", value26, referer);
      this.__emit("valueChange", value26);
    },
    onDecadeSelect: function onDecadeSelect(value26) {
      this.__emit("panelChange", value26, "year");
      this.__emit("valueChange", value26);
    },
    changeYear: function changeYear(direction) {
      if (direction > 0) {
        this.nextYear();
      } else {
        this.previousYear();
      }
    },
    monthYearElement: function monthYearElement(showTimePicker) {
      var _this = this;
      var props2 = this.$props;
      var prefixCls2 = props2.prefixCls;
      var locale2 = props2.locale;
      var value26 = props2.value;
      var localeData2 = value26.localeData();
      var monthBeforeYear = locale2.monthBeforeYear;
      var selectClassName = "".concat(prefixCls2, "-").concat(monthBeforeYear ? "my-select" : "ym-select");
      var timeClassName = showTimePicker ? " ".concat(prefixCls2, "-time-status") : "";
      var year = createVNode("a", {
        "class": "".concat(prefixCls2, "-year-select").concat(timeClassName),
        "role": "button",
        "onClick": showTimePicker ? noop$q : function() {
          return _this.showYearPanel("date");
        },
        "title": showTimePicker ? null : locale2.yearSelect
      }, [value26.format(locale2.yearFormat)]);
      var month = createVNode("a", {
        "class": "".concat(prefixCls2, "-month-select").concat(timeClassName),
        "role": "button",
        "onClick": showTimePicker ? noop$q : this.showMonthPanel,
        "title": showTimePicker ? null : locale2.monthSelect
      }, [locale2.monthFormat ? value26.format(locale2.monthFormat) : localeData2.monthsShort(value26)]);
      var day;
      if (showTimePicker) {
        day = createVNode("a", {
          "class": "".concat(prefixCls2, "-day-select").concat(timeClassName),
          "role": "button"
        }, [value26.format(locale2.dayFormat)]);
      }
      var my = [];
      if (monthBeforeYear) {
        my = [month, day, year];
      } else {
        my = [year, month, day];
      }
      return createVNode("span", {
        "class": selectClassName
      }, [my]);
    },
    showMonthPanel: function showMonthPanel() {
      this.__emit("panelChange", null, "month");
    },
    showYearPanel: function showYearPanel(referer) {
      this.setState({
        yearPanelReferer: referer
      });
      this.__emit("panelChange", null, "year");
    },
    showDecadePanel: function showDecadePanel() {
      this.__emit("panelChange", null, "decade");
    }
  },
  render: function render70() {
    var _this2 = this;
    var props2 = getOptionProps(this);
    var prefixCls2 = props2.prefixCls, locale2 = props2.locale, mode4 = props2.mode, value26 = props2.value, showTimePicker = props2.showTimePicker, enableNext = props2.enableNext, enablePrev = props2.enablePrev, disabledMonth = props2.disabledMonth, renderFooter5 = props2.renderFooter;
    var panel = null;
    if (mode4 === "month") {
      panel = createVNode(MonthPanel$1, {
        "locale": locale2,
        "value": value26,
        "rootPrefixCls": prefixCls2,
        "onSelect": this.onMonthSelect,
        "onYearPanelShow": function onYearPanelShow() {
          return _this2.showYearPanel("month");
        },
        "disabledDate": disabledMonth,
        "cellRender": props2.monthCellRender,
        "contentRender": props2.monthCellContentRender,
        "renderFooter": renderFooter5,
        "changeYear": this.changeYear
      }, null);
    }
    if (mode4 === "year") {
      panel = createVNode(YearPanel, {
        "locale": locale2,
        "value": value26,
        "rootPrefixCls": prefixCls2,
        "onSelect": this.onYearSelect,
        "onDecadePanelShow": this.showDecadePanel,
        "renderFooter": renderFooter5
      }, null);
    }
    if (mode4 === "decade") {
      panel = createVNode(DecadePanel, {
        "locale": locale2,
        "value": value26,
        "rootPrefixCls": prefixCls2,
        "onSelect": this.onDecadeSelect,
        "renderFooter": renderFooter5
      }, null);
    }
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [createVNode("div", {
      "style": {
        position: "relative"
      }
    }, [showIf(enablePrev && !showTimePicker, createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-year-btn"),
      "role": "button",
      "onClick": this.previousYear,
      "title": locale2.previousYear
    }, null)), showIf(enablePrev && !showTimePicker, createVNode("a", {
      "class": "".concat(prefixCls2, "-prev-month-btn"),
      "role": "button",
      "onClick": this.previousMonth,
      "title": locale2.previousMonth
    }, null)), this.monthYearElement(showTimePicker), showIf(enableNext && !showTimePicker, createVNode("a", {
      "class": "".concat(prefixCls2, "-next-month-btn"),
      "onClick": this.nextMonth,
      "title": locale2.nextMonth
    }, null)), showIf(enableNext && !showTimePicker, createVNode("a", {
      "class": "".concat(prefixCls2, "-next-year-btn"),
      "onClick": this.nextYear,
      "title": locale2.nextYear
    }, null))]), panel]);
  }
};
var CalendarHeader$1 = CalendarHeader;
function noop$p() {
}
var TodayButton = function TodayButton2(_2, _ref) {
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls, locale2 = attrs.locale, value26 = attrs.value, timePicker = attrs.timePicker, disabled = attrs.disabled, disabledDate = attrs.disabledDate, onToday3 = attrs.onToday, text = attrs.text;
  var localeNow = (!text && timePicker ? locale2.now : text) || locale2.today;
  var disabledToday = disabledDate && !isAllowedDate(getTodayTime(value26), disabledDate);
  var isDisabled2 = disabledToday || disabled;
  var disabledTodayClass = isDisabled2 ? "".concat(prefixCls2, "-today-btn-disabled") : "";
  return createVNode("a", {
    "class": "".concat(prefixCls2, "-today-btn ").concat(disabledTodayClass),
    "role": "button",
    "onClick": isDisabled2 ? noop$p : onToday3,
    "title": getTodayTimeStr(value26)
  }, [localeNow]);
};
TodayButton.inheritAttrs = false;
var TodayButton$1 = TodayButton;
function noop$o() {
}
var OkButton = function OkButton2(_2, _ref) {
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls, locale2 = attrs.locale, okDisabled = attrs.okDisabled, onOk3 = attrs.onOk;
  var className = "".concat(prefixCls2, "-ok-btn");
  if (okDisabled) {
    className += " ".concat(prefixCls2, "-ok-btn-disabled");
  }
  return createVNode("a", {
    "class": className,
    "role": "button",
    "onClick": okDisabled ? noop$o : onOk3
  }, [locale2.ok]);
};
OkButton.inheritAttrs = false;
var OkButton$1 = OkButton;
function noop$n() {
}
var TimePickerButton = function TimePickerButton2(_2, _ref) {
  var _className;
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls, locale2 = attrs.locale, showTimePicker = attrs.showTimePicker, timePickerDisabled = attrs.timePickerDisabled, _attrs$onCloseTimePic = attrs.onCloseTimePicker, onCloseTimePicker2 = _attrs$onCloseTimePic === void 0 ? noop$n : _attrs$onCloseTimePic, _attrs$onOpenTimePick = attrs.onOpenTimePicker, onOpenTimePicker2 = _attrs$onOpenTimePick === void 0 ? noop$n : _attrs$onOpenTimePick;
  var className = (_className = {}, _defineProperty$U(_className, "".concat(prefixCls2, "-time-picker-btn"), true), _defineProperty$U(_className, "".concat(prefixCls2, "-time-picker-btn-disabled"), timePickerDisabled), _className);
  var onClick7 = noop$n;
  if (!timePickerDisabled) {
    onClick7 = showTimePicker ? onCloseTimePicker2 : onOpenTimePicker2;
  }
  return createVNode("a", {
    "class": className,
    "role": "button",
    "onClick": onClick7
  }, [showTimePicker ? locale2.dateSelect : locale2.timeSelect]);
};
TimePickerButton.inheritAttrs = false;
var TimePickerButton$1 = TimePickerButton;
var CalendarFooter = {
  name: "CalendarFooter",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    showDateInput: PropsTypes.looseBool,
    disabledTime: PropsTypes.any,
    timePicker: PropsTypes.any,
    selectedValue: PropsTypes.any,
    showOk: PropsTypes.looseBool,
    value: PropsTypes.object,
    renderFooter: PropsTypes.func,
    defaultValue: PropsTypes.object,
    locale: PropsTypes.object,
    showToday: PropsTypes.looseBool,
    disabledDate: PropsTypes.func,
    showTimePicker: PropsTypes.looseBool,
    okDisabled: PropsTypes.looseBool,
    mode: PropsTypes.string
  },
  methods: {
    onSelect: function onSelect2(value26) {
      this.__emit("select", value26);
    },
    getRootDOMNode: function getRootDOMNode() {
      return findDOMNode(this);
    }
  },
  render: function render71() {
    var props2 = getOptionProps(this);
    var value26 = props2.value, prefixCls2 = props2.prefixCls, showOk = props2.showOk, timePicker = props2.timePicker, renderFooter5 = props2.renderFooter, showToday = props2.showToday, mode4 = props2.mode;
    var footerEl = null;
    var extraFooter = renderFooter5 && renderFooter5(mode4);
    if (showToday || timePicker || extraFooter) {
      var _cls;
      var btnProps = _extends$1(_extends$1(_extends$1({}, props2), this.$attrs), {
        value: value26
      });
      var nowEl = null;
      if (showToday) {
        nowEl = createVNode(TodayButton$1, _objectSpread2$2({
          "key": "todayButton"
        }, btnProps), null);
      }
      delete btnProps.value;
      var okBtn = null;
      if (showOk === true || showOk !== false && !!timePicker) {
        okBtn = createVNode(OkButton$1, _objectSpread2$2({
          "key": "okButton"
        }, btnProps), null);
      }
      var timePickerBtn = null;
      if (timePicker) {
        timePickerBtn = createVNode(TimePickerButton$1, _objectSpread2$2({
          "key": "timePickerButton"
        }, btnProps), null);
      }
      var footerBtn;
      if (nowEl || timePickerBtn || okBtn || extraFooter) {
        footerBtn = createVNode("span", {
          "class": "".concat(prefixCls2, "-footer-btn")
        }, [extraFooter, nowEl, timePickerBtn, okBtn]);
      }
      var cls = (_cls = {}, _defineProperty$U(_cls, "".concat(prefixCls2, "-footer"), true), _defineProperty$U(_cls, "".concat(prefixCls2, "-footer-show-ok"), !!okBtn), _cls);
      footerEl = createVNode("div", {
        "class": cls
      }, [footerBtn]);
    }
    return footerEl;
  }
};
var CalendarFooter$1 = CalendarFooter;
var cachedSelectionStart;
var cachedSelectionEnd;
var dateInputInstance;
var DateInput = {
  name: "DateInput",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    timePicker: PropsTypes.object,
    value: PropsTypes.object,
    disabledTime: PropsTypes.any,
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string), PropsTypes.func]),
    locale: PropsTypes.object,
    disabledDate: PropsTypes.func,
    placeholder: PropsTypes.string,
    selectedValue: PropsTypes.object,
    clearIcon: PropsTypes.any,
    inputMode: PropsTypes.string,
    inputReadOnly: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    showClear: PropsTypes.looseBool
  },
  data: function data31() {
    var selectedValue6 = this.selectedValue;
    return {
      str: formatDate$1(selectedValue6, this.format),
      invalid: false,
      hasFocus: false
    };
  },
  watch: {
    selectedValue: function selectedValue3() {
      this.setState();
    },
    format: function format2() {
      this.setState();
    }
  },
  updated: function updated8() {
    var _this = this;
    this.$nextTick(function() {
      if (dateInputInstance && _this.$data.hasFocus && !_this.invalid && !(cachedSelectionStart === 0 && cachedSelectionEnd === 0)) {
        dateInputInstance.setSelectionRange(cachedSelectionStart, cachedSelectionEnd);
      }
    });
  },
  getInstance: function getInstance() {
    return dateInputInstance;
  },
  methods: {
    getDerivedStateFromProps: function getDerivedStateFromProps(nextProps, state2) {
      var newState = {};
      if (dateInputInstance) {
        cachedSelectionStart = dateInputInstance.selectionStart;
        cachedSelectionEnd = dateInputInstance.selectionEnd;
      }
      var selectedValue6 = nextProps.selectedValue;
      if (!state2.hasFocus) {
        newState = {
          str: formatDate$1(selectedValue6, this.format),
          invalid: false
        };
      }
      return newState;
    },
    onClear: function onClear() {
      this.setState({
        str: ""
      });
      this.__emit("clear", null);
    },
    onInputChange: function onInputChange(e2) {
      var _e$target = e2.target, str = _e$target.value, composing = _e$target.composing;
      var _this$str = this.str, oldStr = _this$str === void 0 ? "" : _this$str;
      if (e2.isComposing || composing || oldStr === str)
        return;
      var _this$$props = this.$props, disabledDate = _this$$props.disabledDate, format3 = _this$$props.format, selectedValue6 = _this$$props.selectedValue;
      if (!str) {
        this.__emit("change", null);
        this.setState({
          invalid: false,
          str
        });
        return;
      }
      var parsed = hooks(str, format3, true);
      if (!parsed.isValid()) {
        this.setState({
          invalid: true,
          str
        });
        return;
      }
      var value26 = this.value.clone();
      value26.year(parsed.year()).month(parsed.month()).date(parsed.date()).hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());
      if (!value26 || disabledDate && disabledDate(value26)) {
        this.setState({
          invalid: true,
          str
        });
        return;
      }
      if (selectedValue6 !== value26 || selectedValue6 && value26 && !selectedValue6.isSame(value26)) {
        this.setState({
          invalid: false,
          str
        });
        this.__emit("change", value26);
      }
    },
    onFocus: function onFocus2() {
      this.setState({
        hasFocus: true
      });
    },
    onBlur: function onBlur2() {
      this.setState(function(prevState, prevProps) {
        return {
          hasFocus: false,
          str: formatDate$1(prevProps.value, prevProps.format)
        };
      });
    },
    onKeyDown: function onKeyDown3(event) {
      var keyCode = event.keyCode;
      var _this$$props2 = this.$props, value26 = _this$$props2.value, disabledDate = _this$$props2.disabledDate;
      if (keyCode === KeyCode$2.ENTER) {
        var validateDate = !disabledDate || !disabledDate(value26);
        if (validateDate) {
          this.__emit("select", value26.clone());
        }
        event.preventDefault();
      }
    },
    getRootDOMNode: function getRootDOMNode2() {
      return findDOMNode(this);
    },
    focus: function focus11() {
      if (dateInputInstance) {
        dateInputInstance.focus();
      }
    },
    saveDateInput: function saveDateInput(dateInput) {
      dateInputInstance = dateInput;
    }
  },
  render: function render72() {
    var invalid = this.invalid, str = this.str, locale2 = this.locale, prefixCls2 = this.prefixCls, placeholder = this.placeholder, disabled = this.disabled, showClear = this.showClear, inputMode = this.inputMode, inputReadOnly = this.inputReadOnly;
    var clearIcon = getComponent(this, "clearIcon");
    var invalidClass = invalid ? "".concat(prefixCls2, "-input-invalid") : "";
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-input-wrap")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-date-input-wrap")
    }, [withDirectives(createVNode("input", {
      "ref": this.saveDateInput,
      "class": "".concat(prefixCls2, "-input ").concat(invalidClass),
      "value": str,
      "disabled": disabled,
      "placeholder": placeholder,
      "onInput": this.onInputChange,
      "onChange": this.onInputChange,
      "onKeydown": this.onKeyDown,
      "onFocus": this.onFocus,
      "onBlur": this.onBlur,
      "inputMode": inputMode,
      "readonly": inputReadOnly
    }, null), [[antInput$1]])]), showClear ? createVNode("a", {
      "role": "button",
      "title": locale2.clear,
      "onClick": this.onClear
    }, [clearIcon || createVNode("span", {
      "class": "".concat(prefixCls2, "-clear-btn")
    }, null)]) : null]);
  }
};
var DateInput$1 = DateInput;
function goStartMonth(time) {
  return time.clone().startOf("month");
}
function goEndMonth(time) {
  return time.clone().endOf("month");
}
function goTime(time, direction, unit) {
  return time.clone().add(direction, unit);
}
function includesTime() {
  var timeList = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var time = arguments.length > 1 ? arguments[1] : void 0;
  var unit = arguments.length > 2 ? arguments[2] : void 0;
  return timeList.some(function(t2) {
    return t2.isSame(time, unit);
  });
}
var getMomentObjectIfValid = function getMomentObjectIfValid2(date3) {
  if (hooks.isMoment(date3) && date3.isValid()) {
    return date3;
  }
  return false;
};
var Calendar = defineComponent({
  name: "Calendar",
  mixins: [BaseMixin, CommonMixin, CalendarMixin$1],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object.def(enUs),
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string), PropsTypes.func]),
    visible: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("rc-calendar"),
    defaultValue: PropsTypes.object,
    value: PropsTypes.object,
    selectedValue: PropsTypes.object,
    defaultSelectedValue: PropsTypes.object,
    mode: PropsTypes.oneOf(["time", "date", "month", "year", "decade"]),
    showDateInput: PropsTypes.looseBool.def(true),
    showWeekNumber: PropsTypes.looseBool,
    showToday: PropsTypes.looseBool.def(true),
    showOk: PropsTypes.looseBool,
    timePicker: PropsTypes.any,
    dateInputPlaceholder: PropsTypes.any,
    disabledDate: PropsTypes.func,
    disabledTime: PropsTypes.any,
    dateRender: PropsTypes.func,
    renderFooter: PropsTypes.func.def(function() {
      return null;
    }),
    renderSidebar: PropsTypes.func.def(function() {
      return null;
    }),
    clearIcon: PropsTypes.any,
    focusablePanel: PropsTypes.looseBool.def(true),
    inputMode: PropsTypes.string,
    inputReadOnly: PropsTypes.looseBool,
    monthCellRender: PropsTypes.func,
    monthCellContentRender: PropsTypes.func
  },
  data: function data32() {
    var props2 = this.$props;
    return {
      sMode: this.mode || "date",
      sValue: getMomentObjectIfValid(props2.value) || getMomentObjectIfValid(props2.defaultValue) || hooks(),
      sSelectedValue: props2.selectedValue || props2.defaultSelectedValue
    };
  },
  watch: {
    mode: function mode2(val) {
      this.setState({
        sMode: val
      });
    },
    value: function value16(val) {
      this.setState({
        sValue: getMomentObjectIfValid(val) || getMomentObjectIfValid(this.defaultValue) || getNowByCurrentStateValue(this.sValue)
      });
    },
    selectedValue: function selectedValue4(val) {
      this.setState({
        sSelectedValue: val
      });
    }
  },
  mounted: function mounted16() {
    var _this = this;
    this.$nextTick(function() {
      _this.saveFocusElement(DateInput$1.getInstance());
    });
  },
  methods: {
    onPanelChange: function onPanelChange(value26, mode4) {
      var sValue = this.sValue;
      if (!hasProp(this, "mode")) {
        this.setState({
          sMode: mode4
        });
      }
      this.__emit("panelChange", value26 || sValue, mode4);
    },
    onKeyDown: function onKeyDown4(event) {
      if (event.target.nodeName.toLowerCase() === "input") {
        return void 0;
      }
      var keyCode = event.keyCode;
      var ctrlKey = event.ctrlKey || event.metaKey;
      var disabledDate = this.disabledDate, value26 = this.sValue;
      switch (keyCode) {
        case KeyCode$2.DOWN:
          this.goTime(1, "weeks");
          event.preventDefault();
          return 1;
        case KeyCode$2.UP:
          this.goTime(-1, "weeks");
          event.preventDefault();
          return 1;
        case KeyCode$2.LEFT:
          if (ctrlKey) {
            this.goTime(-1, "years");
          } else {
            this.goTime(-1, "days");
          }
          event.preventDefault();
          return 1;
        case KeyCode$2.RIGHT:
          if (ctrlKey) {
            this.goTime(1, "years");
          } else {
            this.goTime(1, "days");
          }
          event.preventDefault();
          return 1;
        case KeyCode$2.HOME:
          this.setValue(goStartMonth(value26));
          event.preventDefault();
          return 1;
        case KeyCode$2.END:
          this.setValue(goEndMonth(value26));
          event.preventDefault();
          return 1;
        case KeyCode$2.PAGE_DOWN:
          this.goTime(1, "month");
          event.preventDefault();
          return 1;
        case KeyCode$2.PAGE_UP:
          this.goTime(-1, "month");
          event.preventDefault();
          return 1;
        case KeyCode$2.ENTER:
          if (!disabledDate || !disabledDate(value26)) {
            this.onSelect(value26, {
              source: "keyboard"
            });
          }
          event.preventDefault();
          return 1;
        default:
          this.__emit("keydown", event);
          return 1;
      }
    },
    onClear: function onClear2() {
      this.onSelect(null);
      this.__emit("clear");
    },
    onOk: function onOk() {
      var sSelectedValue = this.sSelectedValue;
      if (this.isAllowedDate(sSelectedValue)) {
        this.__emit("ok", sSelectedValue);
      }
    },
    onDateInputChange: function onDateInputChange(value26) {
      this.onSelect(value26, {
        source: "dateInput"
      });
    },
    onDateInputSelect: function onDateInputSelect(value26) {
      this.onSelect(value26, {
        source: "dateInputSelect"
      });
    },
    onDateTableSelect: function onDateTableSelect(value26) {
      var timePicker = this.timePicker, sSelectedValue = this.sSelectedValue;
      if (!sSelectedValue && timePicker) {
        var timePickerProps3 = getOptionProps(timePicker);
        var timePickerDefaultValue = timePickerProps3.defaultValue;
        if (timePickerDefaultValue) {
          syncTime(timePickerDefaultValue, value26);
        }
      }
      this.onSelect(value26);
    },
    onToday: function onToday() {
      var sValue = this.sValue;
      var now2 = getTodayTime(sValue);
      this.onSelect(now2, {
        source: "todayButton"
      });
    },
    onBlur: function onBlur3(event) {
      var _this2 = this;
      setTimeout(function() {
        var dateInput = DateInput$1.getInstance();
        var rootInstance = _this2.rootInstance;
        if (!rootInstance || rootInstance.contains(document.activeElement) || dateInput && dateInput.contains(document.activeElement)) {
          return;
        }
        _this2.__emit("blur", event);
      }, 0);
    },
    getRootDOMNode: function getRootDOMNode3() {
      return findDOMNode(this);
    },
    openTimePicker: function openTimePicker() {
      this.onPanelChange(null, "time");
    },
    closeTimePicker: function closeTimePicker() {
      this.onPanelChange(null, "date");
    },
    goTime: function goTime$1(direction, unit) {
      this.setValue(goTime(this.sValue, direction, unit));
    }
  },
  render: function render73() {
    var locale2 = this.locale, prefixCls2 = this.prefixCls, disabledDate = this.disabledDate, dateInputPlaceholder = this.dateInputPlaceholder, timePicker = this.timePicker, disabledTime = this.disabledTime, showDateInput = this.showDateInput, sValue = this.sValue, sSelectedValue = this.sSelectedValue, sMode = this.sMode, renderFooter5 = this.renderFooter, inputMode = this.inputMode, inputReadOnly = this.inputReadOnly, monthCellRender = this.monthCellRender, monthCellContentRender = this.monthCellContentRender, props2 = this.$props;
    var clearIcon = getComponent(this, "clearIcon");
    var showTimePicker = sMode === "time";
    var disabledTimeConfig = showTimePicker && disabledTime && timePicker ? getTimeConfig(sSelectedValue, disabledTime) : null;
    var timePickerEle = null;
    if (timePicker && showTimePicker) {
      var timePickerOriginProps = getOptionProps(timePicker);
      var timePickerProps3 = _extends$1(_extends$1(_extends$1({
        showHour: true,
        showSecond: true,
        showMinute: true
      }, timePickerOriginProps), disabledTimeConfig), {
        value: sSelectedValue,
        disabledTime,
        onChange: this.onDateInputChange
      });
      if (timePickerOriginProps.defaultValue !== void 0) {
        timePickerProps3.defaultOpenValue = timePickerOriginProps.defaultValue;
      }
      timePickerEle = cloneElement(timePicker, timePickerProps3);
    }
    var dateInputElement = showDateInput ? createVNode(DateInput$1, {
      "format": this.getFormat(),
      "key": "date-input",
      "value": sValue,
      "locale": locale2,
      "placeholder": dateInputPlaceholder,
      "showClear": true,
      "disabledTime": disabledTime,
      "disabledDate": disabledDate,
      "onClear": this.onClear,
      "prefixCls": prefixCls2,
      "selectedValue": sSelectedValue,
      "onChange": this.onDateInputChange,
      "clearIcon": clearIcon,
      "onSelect": this.onDateInputSelect,
      "inputMode": inputMode,
      "inputReadOnly": inputReadOnly
    }, null) : null;
    var children = [];
    if (props2.renderSidebar) {
      children.push(props2.renderSidebar());
    }
    children.push(createVNode("div", {
      "class": "".concat(prefixCls2, "-panel"),
      "key": "panel"
    }, [dateInputElement, createVNode("div", {
      "tabindex": props2.focusablePanel ? 0 : void 0,
      "class": "".concat(prefixCls2, "-date-panel")
    }, [createVNode(CalendarHeader$1, {
      "locale": locale2,
      "mode": sMode,
      "value": sValue,
      "onValueChange": this.setValue,
      "onPanelChange": this.onPanelChange,
      "renderFooter": renderFooter5,
      "showTimePicker": showTimePicker,
      "prefixCls": prefixCls2,
      "monthCellRender": monthCellRender,
      "monthCellContentRender": monthCellContentRender
    }, null), timePicker && showTimePicker ? createVNode("div", {
      "class": "".concat(prefixCls2, "-time-picker")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-time-picker-panel")
    }, [timePickerEle])]) : null, createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode(DateTable$1, {
      "locale": locale2,
      "value": sValue,
      "selectedValue": sSelectedValue,
      "prefixCls": prefixCls2,
      "dateRender": props2.dateRender,
      "onSelect": this.onDateTableSelect,
      "disabledDate": disabledDate,
      "showWeekNumber": props2.showWeekNumber
    }, null)]), createVNode(CalendarFooter$1, {
      "showOk": props2.showOk,
      "mode": sMode,
      "renderFooter": props2.renderFooter,
      "locale": locale2,
      "prefixCls": prefixCls2,
      "showToday": props2.showToday,
      "disabledTime": disabledTime,
      "showTimePicker": showTimePicker,
      "showDateInput": props2.showDateInput,
      "timePicker": timePicker,
      "selectedValue": sSelectedValue,
      "timePickerDisabled": !sSelectedValue,
      "value": sValue,
      "disabledDate": disabledDate,
      "okDisabled": props2.showOk !== false && (!sSelectedValue || !this.isAllowedDate(sSelectedValue)),
      "onOk": this.onOk,
      "onSelect": this.onSelect,
      "onToday": this.onToday,
      "onOpenTimePicker": this.openTimePicker,
      "onCloseTimePicker": this.closeTimePicker
    }, null)])]));
    return this.renderRoot({
      children,
      class: props2.showWeekNumber ? "".concat(prefixCls2, "-week-number") : ""
    });
  }
});
var Calendar$1 = Calendar;
var MonthCalendar = defineComponent({
  name: "MonthCalendar",
  mixins: [BaseMixin, CommonMixin, CalendarMixin$1],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object.def(enUs),
    format: PropsTypes.string,
    visible: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("rc-calendar"),
    monthCellRender: PropsTypes.func,
    value: PropsTypes.object,
    defaultValue: PropsTypes.object,
    selectedValue: PropsTypes.object,
    defaultSelectedValue: PropsTypes.object,
    disabledDate: PropsTypes.func,
    monthCellContentRender: PropsTypes.func,
    renderFooter: PropsTypes.func.def(function() {
      return null;
    }),
    renderSidebar: PropsTypes.func.def(function() {
      return null;
    })
  },
  data: function data33() {
    var props2 = this.$props;
    return {
      mode: "month",
      sValue: props2.value || props2.defaultValue || hooks(),
      sSelectedValue: props2.selectedValue || props2.defaultSelectedValue
    };
  },
  methods: {
    onKeyDown: function onKeyDown5(event) {
      var keyCode = event.keyCode;
      var ctrlKey = event.ctrlKey || event.metaKey;
      var stateValue = this.sValue;
      var disabledDate = this.disabledDate;
      var value26 = stateValue;
      switch (keyCode) {
        case KeyCode$2.DOWN:
          value26 = stateValue.clone();
          value26.add(3, "months");
          break;
        case KeyCode$2.UP:
          value26 = stateValue.clone();
          value26.add(-3, "months");
          break;
        case KeyCode$2.LEFT:
          value26 = stateValue.clone();
          if (ctrlKey) {
            value26.add(-1, "years");
          } else {
            value26.add(-1, "months");
          }
          break;
        case KeyCode$2.RIGHT:
          value26 = stateValue.clone();
          if (ctrlKey) {
            value26.add(1, "years");
          } else {
            value26.add(1, "months");
          }
          break;
        case KeyCode$2.ENTER:
          if (!disabledDate || !disabledDate(stateValue)) {
            this.onSelect(stateValue);
          }
          event.preventDefault();
          return 1;
        default:
          return void 0;
      }
      if (value26 !== stateValue) {
        this.setValue(value26);
        event.preventDefault();
        return 1;
      }
    },
    handlePanelChange: function handlePanelChange(_2, mode4) {
      if (mode4 !== "date") {
        this.setState({
          mode: mode4
        });
      }
    }
  },
  render: function render74() {
    var mode4 = this.mode, value26 = this.sValue, props2 = this.$props, $slots = this.$slots;
    var prefixCls2 = props2.prefixCls, locale2 = props2.locale, disabledDate = props2.disabledDate;
    var monthCellRender = this.monthCellRender || $slots.monthCellRender;
    var monthCellContentRender = this.monthCellContentRender || $slots.monthCellContentRender;
    var renderFooter5 = this.renderFooter || $slots.renderFooter;
    var children = createVNode("div", {
      "class": "".concat(prefixCls2, "-month-calendar-content")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-month-header-wrap")
    }, [createVNode(CalendarHeader$1, {
      "prefixCls": prefixCls2,
      "mode": mode4,
      "value": value26,
      "locale": locale2,
      "disabledMonth": disabledDate,
      "monthCellRender": monthCellRender,
      "monthCellContentRender": monthCellContentRender,
      "onMonthSelect": this.onSelect,
      "onValueChange": this.setValue,
      "onPanelChange": this.handlePanelChange
    }, null)]), createVNode(CalendarFooter$1, {
      "prefixCls": prefixCls2,
      "renderFooter": renderFooter5
    }, null)]);
    return this.renderRoot({
      class: "".concat(props2.prefixCls, "-month-calendar"),
      children
    });
  }
});
var MonthCalendar$1 = MonthCalendar;
function createChainedFunction() {
  var args = [].slice.call(arguments, 0);
  if (args.length === 1) {
    return args[0];
  }
  return function chainedFunction() {
    for (var i2 = 0; i2 < args.length; i2++) {
      if (args[i2] && args[i2].apply) {
        args[i2].apply(this, arguments);
      }
    }
  };
}
var autoAdjustOverflow$1 = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset$1 = [0, 0];
var placements$2 = {
  bottomLeft: {
    points: ["tl", "tl"],
    overflow: autoAdjustOverflow$1,
    offset: [0, -3],
    targetOffset: targetOffset$1
  },
  bottomRight: {
    points: ["tr", "tr"],
    overflow: autoAdjustOverflow$1,
    offset: [0, -3],
    targetOffset: targetOffset$1
  },
  topRight: {
    points: ["br", "br"],
    overflow: autoAdjustOverflow$1,
    offset: [0, 3],
    targetOffset: targetOffset$1
  },
  topLeft: {
    points: ["bl", "bl"],
    overflow: autoAdjustOverflow$1,
    offset: [0, 3],
    targetOffset: targetOffset$1
  }
};
var placements$3 = placements$2;
var TimeType = {
  validator: function validator4(value26) {
    if (Array.isArray(value26)) {
      return value26.length === 0 || value26.findIndex(function(val) {
        return !isNil(val) && !hooks.isMoment(val);
      }) === -1;
    } else {
      return isNil(value26) || hooks.isMoment(value26);
    }
  }
};
function refFn$1(field, component) {
  this[field] = component;
}
var Picker = defineComponent({
  name: "Picker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    animation: PropsTypes.oneOfType([PropsTypes.func, PropsTypes.string]),
    disabled: PropsTypes.looseBool,
    transitionName: PropsTypes.string,
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array, PropsTypes.func]),
    getCalendarContainer: PropsTypes.func,
    calendar: PropsTypes.any,
    open: PropsTypes.looseBool,
    defaultOpen: PropsTypes.looseBool.def(false),
    prefixCls: PropsTypes.string.def("rc-calendar-picker"),
    placement: PropsTypes.any.def("bottomLeft"),
    value: TimeType,
    defaultValue: TimeType,
    align: PropsTypes.object.def(function() {
      return {};
    }),
    dropdownClassName: PropsTypes.string,
    dateRender: PropsTypes.func,
    children: PropsTypes.func
  },
  data: function data34() {
    var props2 = this.$props;
    this.calendarElement = null;
    this.saveCalendarRef = refFn$1.bind(this, "calendarInstance");
    var open6;
    if (hasProp(this, "open")) {
      open6 = props2.open;
    } else {
      open6 = props2.defaultOpen;
    }
    var value26 = props2.value || props2.defaultValue;
    return {
      sOpen: open6,
      sValue: value26
    };
  },
  watch: {
    value: function value17(val) {
      this.setState({
        sValue: val
      });
    },
    open: function open2(val) {
      this.setState({
        sOpen: val
      });
    }
  },
  mounted: function mounted17() {
    this.preSOpen = this.sOpen;
  },
  updated: function updated9() {
    if (!this.preSOpen && this.sOpen) {
      this.focusTimeout = setTimeout(this.focusCalendar, 100);
    }
    this.preSOpen = this.sOpen;
  },
  beforeUnmount: function beforeUnmount13() {
    clearTimeout(this.focusTimeout);
  },
  methods: {
    onCalendarKeyDown: function onCalendarKeyDown(event) {
      if (event.keyCode === KeyCode$2.ESC) {
        event.stopPropagation();
        this.closeCalendar(this.focus);
      }
    },
    onCalendarSelect: function onCalendarSelect(value26) {
      var cause = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var props2 = this.$props;
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      var calendarProps = getOptionProps(props2.calendar);
      if (cause.source === "keyboard" || cause.source === "dateInputSelect" || !calendarProps.timePicker && cause.source !== "dateInput" || cause.source === "todayButton") {
        this.closeCalendar(this.focus);
      }
      this.__emit("change", value26);
    },
    onKeyDown: function onKeyDown6(event) {
      if (!this.sOpen && (event.keyCode === KeyCode$2.DOWN || event.keyCode === KeyCode$2.ENTER)) {
        this.openCalendar();
        event.preventDefault();
      }
    },
    onCalendarOk: function onCalendarOk() {
      this.closeCalendar(this.focus);
    },
    onCalendarClear: function onCalendarClear() {
      this.closeCalendar(this.focus);
    },
    onCalendarBlur: function onCalendarBlur() {
      this.setOpen(false);
    },
    onVisibleChange: function onVisibleChange3(open6) {
      this.setOpen(open6);
    },
    getCalendarElement: function getCalendarElement() {
      var props2 = this.$props;
      var calendarProps = getOptionProps(props2.calendar);
      var calendarEvents = getEvents(props2.calendar);
      var value26 = this.sValue;
      var defaultValue = value26;
      var extraProps = {
        ref: this.saveCalendarRef,
        defaultValue: defaultValue || calendarProps.defaultValue,
        selectedValue: value26,
        onKeydown: this.onCalendarKeyDown,
        onOk: createChainedFunction(calendarEvents.onOk, this.onCalendarOk),
        onSelect: createChainedFunction(calendarEvents.onSelect, this.onCalendarSelect),
        onClear: createChainedFunction(calendarEvents.onClear, this.onCalendarClear),
        onBlur: createChainedFunction(calendarEvents.onBlur, this.onCalendarBlur)
      };
      return cloneElement(props2.calendar, extraProps);
    },
    setOpen: function setOpen(open6, callback) {
      if (this.sOpen !== open6) {
        if (!hasProp(this, "open")) {
          this.setState({
            sOpen: open6
          }, callback);
        }
        this.__emit("openChange", open6);
      }
    },
    openCalendar: function openCalendar(callback) {
      this.setOpen(true, callback);
    },
    closeCalendar: function closeCalendar(callback) {
      this.setOpen(false, callback);
    },
    focus: function focus12() {
      if (!this.sOpen) {
        findDOMNode(this).focus();
      }
    },
    focusCalendar: function focusCalendar() {
      if (this.sOpen && !!this.calendarInstance) {
        this.calendarInstance.focus();
      }
    }
  },
  render: function render75() {
    var _this = this;
    var props2 = getOptionProps(this);
    var prefixCls2 = props2.prefixCls, placement2 = props2.placement, getCalendarContainer = props2.getCalendarContainer, align = props2.align, animation2 = props2.animation, disabled = props2.disabled, dropdownClassName = props2.dropdownClassName, transitionName2 = props2.transitionName;
    var sValue = this.sValue, sOpen2 = this.sOpen;
    var childrenState = {
      value: sValue,
      open: sOpen2
    };
    var children = this.$slots.default(childrenState);
    if (this.sOpen || !this.calendarElement) {
      this.calendarElement = this.getCalendarElement();
    }
    return createVNode(Trigger, {
      "popupAlign": align,
      "builtinPlacements": placements$3,
      "popupPlacement": placement2,
      "action": disabled && !sOpen2 ? [] : ["click"],
      "destroyPopupOnHide": true,
      "getPopupContainer": getCalendarContainer,
      "popupStyle": this.$attrs.style || {},
      "popupAnimation": animation2,
      "popupTransitionName": transitionName2,
      "popupVisible": sOpen2,
      "onPopupVisibleChange": this.onVisibleChange,
      "prefixCls": prefixCls2,
      "popupClassName": dropdownClassName,
      "popup": this.calendarElement
    }, {
      default: function _default8() {
        return [cloneElement(children, {
          onKeydown: _this.onKeyDown
        })];
      }
    });
  }
});
var VcDatePicker = Picker;
var CalendarOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z" } }] }, "name": "calendar", "theme": "outlined" };
var CalendarOutlinedSvg = CalendarOutlined$2;
function _objectSpread$s(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$t(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$t(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CalendarOutlined = function CalendarOutlined2(props2, context2) {
  var p2 = _objectSpread$s({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CalendarOutlinedSvg
  }), null);
};
CalendarOutlined.displayName = "CalendarOutlined";
CalendarOutlined.inheritAttrs = false;
var CalendarOutlined$1 = CalendarOutlined;
function formatDate(value26, format3) {
  if (!value26) {
    return "";
  }
  if (Array.isArray(format3)) {
    format3 = format3[0];
  }
  if (typeof format3 === "function") {
    return format3(value26);
  }
  return value26.format(format3);
}
function createPicker(TheCalendar, props2, name2) {
  return defineComponent({
    name: name2,
    mixins: [BaseMixin],
    inheritAttrs: false,
    props: _extends$1(_extends$1({}, props2), {
      allowClear: PropsTypes.looseBool.def(true),
      showToday: PropsTypes.looseBool.def(true)
    }),
    setup: function setup161() {
      return {
        configProvider: inject("configProvider", defaultConfigProvider),
        input: void 0,
        sPrefixCls: void 0
      };
    },
    data: function data80() {
      var value26 = this.value || this.defaultValue;
      return {
        sValue: value26,
        showDate: value26,
        sOpen: !!this.open
      };
    },
    watch: {
      open: function open6(val) {
        var props3 = getOptionProps(this);
        var state2 = {};
        state2.sOpen = val;
        if ("value" in props3 && !val && props3.value !== this.showDate) {
          state2.showDate = props3.value;
        }
        this.setState(state2);
      },
      value: function value26(val) {
        var state2 = {};
        state2.sValue = val;
        if (val !== this.sValue) {
          state2.showDate = val;
        }
        this.setState(state2);
      },
      sOpen: function sOpen2(val, oldVal) {
        var _this = this;
        nextTick(function() {
          if (!hasProp(_this, "open") && oldVal && !val) {
            _this.focus();
          }
        });
      }
    },
    methods: {
      saveInput: function saveInput7(node) {
        this.input = node;
      },
      clearSelection: function clearSelection4(e2) {
        e2.preventDefault();
        e2.stopPropagation();
        this.handleChange(null);
      },
      handleChange: function handleChange22(value26) {
        if (!hasProp(this, "value")) {
          this.setState({
            sValue: value26,
            showDate: value26
          });
        }
        this.$emit("change", value26, formatDate(value26, this.format));
      },
      handleCalendarChange: function handleCalendarChange(value26) {
        this.setState({
          showDate: value26
        });
      },
      handleOpenChange: function handleOpenChange3(open6) {
        var props3 = getOptionProps(this);
        if (!("open" in props3)) {
          this.setState({
            sOpen: open6
          });
        }
        this.$emit("openChange", open6);
      },
      focus: function focus27() {
        var _a;
        (_a = this.input) === null || _a === void 0 ? void 0 : _a.focus();
      },
      blur: function blur24() {
        var _a;
        (_a = this.input) === null || _a === void 0 ? void 0 : _a.blur();
      },
      renderFooter: function renderFooter5() {
        var $slots = this.$slots, prefixCls2 = this.sPrefixCls;
        var renderExtraFooter = this.renderExtraFooter || $slots.renderExtraFooter;
        return renderExtraFooter ? createVNode("div", {
          "class": "".concat(prefixCls2, "-footer-extra")
        }, [typeof renderExtraFooter === "function" ? renderExtraFooter.apply(void 0, arguments) : renderExtraFooter]) : null;
      },
      onMouseEnter: function onMouseEnter4(e2) {
        this.$emit("mouseenter", e2);
      },
      onMouseLeave: function onMouseLeave5(e2) {
        this.$emit("mouseleave", e2);
      }
    },
    render: function render166() {
      var _classNames, _this2 = this;
      var $slots = this.$slots;
      var _this$$data = this.$data, value26 = _this$$data.sValue, showDate = _this$$data.showDate, open6 = _this$$data.sOpen;
      var suffixIcon = getComponent(this, "suffixIcon");
      suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
      var props3 = omit$1(_extends$1(_extends$1({}, getOptionProps(this)), this.$attrs), ["onChange"]);
      var customizePrefixCls = props3.prefixCls, locale2 = props3.locale, localeCode = props3.localeCode, inputReadOnly = props3.inputReadOnly;
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("calendar", customizePrefixCls);
      this.sPrefixCls = prefixCls2;
      var dateRender = props3.dateRender || $slots.dateRender;
      var monthCellContentRender = props3.monthCellContentRender || $slots.monthCellContentRender;
      var placeholder = "placeholder" in props3 ? props3.placeholder : locale2.lang.placeholder;
      var disabledTime = props3.showTime ? props3.disabledTime : null;
      var calendarClassName = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-time"), props3.showTime), _defineProperty$U(_classNames, "".concat(prefixCls2, "-month"), MonthCalendar$1 === TheCalendar), _classNames));
      if (value26 && localeCode) {
        value26.locale(localeCode);
      }
      var pickerProps = {};
      var calendarProps = {};
      var pickerStyle = {};
      if (props3.showTime) {
        calendarProps.onSelect = this.handleChange;
        pickerStyle.minWidth = "195px";
      } else {
        pickerProps.onChange = this.handleChange;
      }
      if ("mode" in props3) {
        calendarProps.mode = props3.mode;
      }
      var theCalendarProps = _extends$1(_extends$1({}, calendarProps), {
        disabledDate: props3.disabledDate,
        disabledTime,
        locale: locale2.lang,
        timePicker: props3.timePicker,
        defaultValue: props3.defaultPickerValue || interopDefault(hooks)(),
        dateInputPlaceholder: placeholder,
        prefixCls: prefixCls2,
        dateRender,
        format: props3.format,
        showToday: props3.showToday,
        monthCellContentRender,
        renderFooter: this.renderFooter,
        value: showDate,
        inputReadOnly,
        onOk: props3.onOk,
        onPanelChange: props3.onPanelChange,
        onChange: this.handleCalendarChange,
        class: calendarClassName
      });
      var calendar2 = createVNode(TheCalendar, theCalendarProps, $slots);
      var clearIcon = !props3.disabled && props3.allowClear && value26 ? createVNode(CloseCircleFilled$1, {
        "class": "".concat(prefixCls2, "-picker-clear"),
        "onClick": this.clearSelection
      }, null) : null;
      var inputIcon = suffixIcon && (isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
        class: "".concat(prefixCls2, "-picker-icon")
      }) : createVNode("span", {
        "class": "".concat(prefixCls2, "-picker-icon")
      }, [suffixIcon])) || createVNode(CalendarOutlined$1, {
        "class": "".concat(prefixCls2, "-picker-icon")
      }, null);
      var input = function input2(_ref) {
        var inputValue = _ref.value;
        return createVNode("div", null, [createVNode("input", {
          "ref": _this2.saveInput,
          "disabled": props3.disabled,
          "onFocus": props3.onFocus,
          "onBlur": props3.onBlur,
          "readonly": true,
          "value": formatDate(inputValue, _this2.format),
          "placeholder": placeholder,
          "class": props3.pickerInputClass,
          "tabindex": props3.tabindex,
          "name": _this2.name
        }, null), clearIcon, inputIcon]);
      };
      var vcDatePickerProps = _extends$1(_extends$1(_extends$1({}, props3), pickerProps), {
        calendar: calendar2,
        value: value26,
        prefixCls: "".concat(prefixCls2, "-picker-container"),
        open: open6,
        onOpenChange: this.handleOpenChange,
        style: props3.popupStyle
      });
      return createVNode("span", _objectSpread2$2(_objectSpread2$2({
        "id": props3.id,
        "class": classNames(props3.class, props3.pickerClass),
        "style": _extends$1(_extends$1({}, pickerStyle), props3.style)
      }, getDataAndAriaProps$1(this.$attrs)), {}, {
        "onMouseenter": this.onMouseEnter,
        "onMouseleave": this.onMouseLeave
      }), [createVNode(VcDatePicker, vcDatePickerProps, _extends$1(_extends$1({}, $slots), {
        default: isEmptySlot($slots.default) ? input : $slots.default
      }))]);
    }
  });
}
var Header$1 = {
  inheritAttrs: false,
  name: "Header",
  mixins: [BaseMixin],
  props: {
    format: PropsTypes.string,
    prefixCls: PropsTypes.string,
    disabledDate: PropsTypes.func,
    placeholder: PropsTypes.string,
    clearText: PropsTypes.string,
    value: PropsTypes.object,
    inputReadOnly: PropsTypes.looseBool.def(false),
    hourOptions: PropsTypes.array,
    minuteOptions: PropsTypes.array,
    secondOptions: PropsTypes.array,
    disabledHours: PropsTypes.func,
    disabledMinutes: PropsTypes.func,
    disabledSeconds: PropsTypes.func,
    allowEmpty: PropsTypes.looseBool,
    defaultOpenValue: PropsTypes.object,
    currentSelectPanel: PropsTypes.string,
    focusOnOpen: PropsTypes.looseBool,
    clearIcon: PropsTypes.any
  },
  data: function data35() {
    var value26 = this.value, format3 = this.format;
    return {
      str: value26 && value26.format(format3) || "",
      invalid: false
    };
  },
  mounted: function mounted18() {
    var _this = this;
    if (this.focusOnOpen) {
      var requestAnimationFrame2 = window.requestAnimationFrame || window.setTimeout;
      requestAnimationFrame2(function() {
        _this.refInput.focus();
        _this.refInput.select();
      });
    }
  },
  watch: {
    value: function value18(val) {
      var _this2 = this;
      this.$nextTick(function() {
        _this2.setState({
          str: val && val.format(_this2.format) || "",
          invalid: false
        });
      });
    }
  },
  methods: {
    onInputChange: function onInputChange2(e2) {
      var _e$target = e2.target, str = _e$target.value, composing = _e$target.composing;
      var _this$str = this.str, oldStr = _this$str === void 0 ? "" : _this$str;
      if (e2.isComposing || composing || oldStr === str)
        return;
      this.setState({
        str
      });
      var format3 = this.format, hourOptions = this.hourOptions, minuteOptions = this.minuteOptions, secondOptions = this.secondOptions, disabledHours3 = this.disabledHours, disabledMinutes2 = this.disabledMinutes, disabledSeconds2 = this.disabledSeconds, originalValue = this.value;
      if (str) {
        var value26 = this.getProtoValue().clone();
        var parsed = hooks(str, format3, true);
        if (!parsed.isValid()) {
          this.setState({
            invalid: true
          });
          return;
        }
        value26.hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());
        if (hourOptions.indexOf(value26.hour()) < 0 || minuteOptions.indexOf(value26.minute()) < 0 || secondOptions.indexOf(value26.second()) < 0) {
          this.setState({
            invalid: true
          });
          return;
        }
        var disabledHourOptions = disabledHours3();
        var disabledMinuteOptions = disabledMinutes2(value26.hour());
        var disabledSecondOptions = disabledSeconds2(value26.hour(), value26.minute());
        if (disabledHourOptions && disabledHourOptions.indexOf(value26.hour()) >= 0 || disabledMinuteOptions && disabledMinuteOptions.indexOf(value26.minute()) >= 0 || disabledSecondOptions && disabledSecondOptions.indexOf(value26.second()) >= 0) {
          this.setState({
            invalid: true
          });
          return;
        }
        if (originalValue) {
          if (originalValue.hour() !== value26.hour() || originalValue.minute() !== value26.minute() || originalValue.second() !== value26.second()) {
            var changedValue = originalValue.clone();
            changedValue.hour(value26.hour());
            changedValue.minute(value26.minute());
            changedValue.second(value26.second());
            this.__emit("change", changedValue);
          }
        } else if (originalValue !== value26) {
          this.__emit("change", value26);
        }
      } else {
        this.__emit("change", null);
      }
      this.setState({
        invalid: false
      });
    },
    onKeyDown: function onKeyDown7(e2) {
      if (e2.keyCode === 27) {
        this.__emit("esc");
      }
      this.__emit("keydown", e2);
    },
    getProtoValue: function getProtoValue() {
      return this.value || this.defaultOpenValue;
    },
    getInput: function getInput() {
      var _this3 = this;
      var prefixCls2 = this.prefixCls, placeholder = this.placeholder, inputReadOnly = this.inputReadOnly, invalid = this.invalid, str = this.str;
      var invalidClass = invalid ? "".concat(prefixCls2, "-input-invalid") : "";
      return withDirectives(createVNode("input", {
        "class": "".concat(prefixCls2, "-input ").concat(invalidClass),
        "ref": function ref2(_ref) {
          _this3.refInput = _ref;
        },
        "onKeydown": this.onKeyDown,
        "value": str,
        "placeholder": placeholder,
        "onInput": this.onInputChange,
        "onChange": this.onInputChange,
        "readonly": !!inputReadOnly
      }, null), [[antInput$1]]);
    }
  },
  render: function render76() {
    var prefixCls2 = this.prefixCls;
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-input-wrap")
    }, [this.getInput()]);
  }
};
var Header$2 = Header$1;
function noop$m() {
}
var scrollTo = function scrollTo2(element, to2, duration2) {
  if (duration2 <= 0) {
    requestAnimationFrame(function() {
      element.scrollTop = to2;
    });
    return;
  }
  var difference = to2 - element.scrollTop;
  var perTick = difference / duration2 * 10;
  requestAnimationFrame(function() {
    element.scrollTop += perTick;
    if (element.scrollTop === to2)
      return;
    scrollTo2(element, to2, duration2 - 10);
  });
};
var Select$2 = {
  name: "Select",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    options: PropsTypes.array,
    selectedIndex: PropsTypes.number,
    type: PropsTypes.string
  },
  data: function data36() {
    return {
      active: false
    };
  },
  mounted: function mounted19() {
    var _this = this;
    this.$nextTick(function() {
      _this.scrollToSelected(0);
    });
  },
  watch: {
    selectedIndex: function selectedIndex() {
      var _this2 = this;
      this.$nextTick(function() {
        _this2.scrollToSelected(120);
      });
    }
  },
  methods: {
    onSelect: function onSelect3(value26) {
      var type3 = this.type;
      this.__emit("select", type3, value26);
    },
    onEsc: function onEsc(e2) {
      this.__emit("esc", e2);
    },
    getOptions: function getOptions3() {
      var _this3 = this;
      var options2 = this.options, selectedIndex2 = this.selectedIndex, prefixCls2 = this.prefixCls;
      return options2.map(function(item, index2) {
        var _classnames;
        var cls = classNames((_classnames = {}, _defineProperty$U(_classnames, "".concat(prefixCls2, "-select-option-selected"), selectedIndex2 === index2), _defineProperty$U(_classnames, "".concat(prefixCls2, "-select-option-disabled"), item.disabled), _classnames));
        var onClick7 = item.disabled ? noop$m : function() {
          _this3.onSelect(item.value);
        };
        var onKeyDown14 = function onKeyDown15(e2) {
          if (e2.keyCode === 13)
            onClick7();
          else if (e2.keyCode === 27)
            _this3.onEsc();
        };
        return createVNode("li", {
          "role": "button",
          "onClick": onClick7,
          "class": cls,
          "key": index2,
          "disabled": item.disabled,
          "tabindex": "0",
          "onKeydown": onKeyDown14
        }, [item.value]);
      });
    },
    handleMouseEnter: function handleMouseEnter(e2) {
      this.setState({
        active: true
      });
      this.__emit("mouseenter", e2);
    },
    handleMouseLeave: function handleMouseLeave() {
      this.setState({
        active: false
      });
    },
    scrollToSelected: function scrollToSelected(duration2) {
      var select2 = findDOMNode(this);
      var list = this.$refs.list;
      if (!list) {
        return;
      }
      var index2 = this.selectedIndex;
      if (index2 < 0) {
        index2 = 0;
      }
      var topOption = list.children[index2];
      var to2 = topOption.offsetTop;
      scrollTo(select2, to2, duration2);
    }
  },
  render: function render77() {
    var _cls;
    var prefixCls2 = this.prefixCls, options2 = this.options, active = this.active;
    if (options2.length === 0) {
      return null;
    }
    var cls = (_cls = {}, _defineProperty$U(_cls, "".concat(prefixCls2, "-select"), 1), _defineProperty$U(_cls, "".concat(prefixCls2, "-select-active"), active), _cls);
    return createVNode("div", {
      "class": cls,
      "onMouseenter": this.handleMouseEnter,
      "onMouseleave": this.handleMouseLeave
    }, [createVNode("ul", {
      "ref": "list"
    }, [this.getOptions()])]);
  }
};
var Select$3 = Select$2;
var formatOption = function formatOption2(option, disabledOptions) {
  var value26 = "".concat(option);
  if (option < 10) {
    value26 = "0".concat(option);
  }
  var disabled = false;
  if (disabledOptions && disabledOptions.indexOf(option) >= 0) {
    disabled = true;
  }
  return {
    value: value26,
    disabled
  };
};
var Combobox = {
  inheritAttrs: false,
  mixins: [BaseMixin],
  name: "Combobox",
  props: {
    format: PropsTypes.string,
    defaultOpenValue: PropsTypes.object,
    prefixCls: PropsTypes.string,
    value: PropsTypes.object,
    showHour: PropsTypes.looseBool,
    showMinute: PropsTypes.looseBool,
    showSecond: PropsTypes.looseBool,
    hourOptions: PropsTypes.array,
    minuteOptions: PropsTypes.array,
    secondOptions: PropsTypes.array,
    disabledHours: PropsTypes.func,
    disabledMinutes: PropsTypes.func,
    disabledSeconds: PropsTypes.func,
    use12Hours: PropsTypes.looseBool,
    isAM: PropsTypes.looseBool
  },
  methods: {
    onItemChange: function onItemChange(type3, itemValue) {
      var defaultOpenValue = this.defaultOpenValue, use12Hours = this.use12Hours, propValue = this.value, isAM2 = this.isAM;
      var value26 = (propValue || defaultOpenValue).clone();
      if (type3 === "hour") {
        if (use12Hours) {
          if (isAM2) {
            value26.hour(+itemValue % 12);
          } else {
            value26.hour(+itemValue % 12 + 12);
          }
        } else {
          value26.hour(+itemValue);
        }
      } else if (type3 === "minute") {
        value26.minute(+itemValue);
      } else if (type3 === "ampm") {
        var ampm = itemValue.toUpperCase();
        if (use12Hours) {
          if (ampm === "PM" && value26.hour() < 12) {
            value26.hour(value26.hour() % 12 + 12);
          }
          if (ampm === "AM") {
            if (value26.hour() >= 12) {
              value26.hour(value26.hour() - 12);
            }
          }
        }
        this.__emit("amPmChange", ampm);
      } else {
        value26.second(+itemValue);
      }
      this.__emit("change", value26);
    },
    onEnterSelectPanel: function onEnterSelectPanel(range2) {
      this.__emit("currentSelectPanelChange", range2);
    },
    onEsc: function onEsc2(e2) {
      this.__emit("esc", e2);
    },
    getHourSelect: function getHourSelect(hour) {
      var _this = this;
      var prefixCls2 = this.prefixCls, hourOptions = this.hourOptions, disabledHours3 = this.disabledHours, showHour = this.showHour, use12Hours = this.use12Hours;
      if (!showHour) {
        return null;
      }
      var disabledOptions = disabledHours3();
      var hourOptionsAdj;
      var hourAdj;
      if (use12Hours) {
        hourOptionsAdj = [12].concat(hourOptions.filter(function(h2) {
          return h2 < 12 && h2 > 0;
        }));
        hourAdj = hour % 12 || 12;
      } else {
        hourOptionsAdj = hourOptions;
        hourAdj = hour;
      }
      return createVNode(Select$3, {
        "prefixCls": prefixCls2,
        "options": hourOptionsAdj.map(function(option) {
          return formatOption(option, disabledOptions);
        }),
        "selectedIndex": hourOptionsAdj.indexOf(hourAdj),
        "type": "hour",
        "onSelect": this.onItemChange,
        "onMouseenter": function onMouseenter2() {
          return _this.onEnterSelectPanel("hour");
        },
        "onEsc": this.onEsc
      }, null);
    },
    getMinuteSelect: function getMinuteSelect(minute) {
      var _this2 = this;
      var prefixCls2 = this.prefixCls, minuteOptions = this.minuteOptions, disabledMinutes2 = this.disabledMinutes, defaultOpenValue = this.defaultOpenValue, showMinute = this.showMinute, propValue = this.value;
      if (!showMinute) {
        return null;
      }
      var value26 = propValue || defaultOpenValue;
      var disabledOptions = disabledMinutes2(value26.hour());
      return createVNode(Select$3, {
        "prefixCls": prefixCls2,
        "options": minuteOptions.map(function(option) {
          return formatOption(option, disabledOptions);
        }),
        "selectedIndex": minuteOptions.indexOf(minute),
        "type": "minute",
        "onSelect": this.onItemChange,
        "onMouseenter": function onMouseenter2() {
          return _this2.onEnterSelectPanel("minute");
        },
        "onEsc": this.onEsc
      }, null);
    },
    getSecondSelect: function getSecondSelect(second) {
      var _this3 = this;
      var prefixCls2 = this.prefixCls, secondOptions = this.secondOptions, disabledSeconds2 = this.disabledSeconds, showSecond = this.showSecond, defaultOpenValue = this.defaultOpenValue, propValue = this.value;
      if (!showSecond) {
        return null;
      }
      var value26 = propValue || defaultOpenValue;
      var disabledOptions = disabledSeconds2(value26.hour(), value26.minute());
      return createVNode(Select$3, {
        "prefixCls": prefixCls2,
        "options": secondOptions.map(function(option) {
          return formatOption(option, disabledOptions);
        }),
        "selectedIndex": secondOptions.indexOf(second),
        "type": "second",
        "onSelect": this.onItemChange,
        "onMouseenter": function onMouseenter2() {
          return _this3.onEnterSelectPanel("second");
        },
        "onEsc": this.onEsc
      }, null);
    },
    getAMPMSelect: function getAMPMSelect() {
      var _this4 = this;
      var prefixCls2 = this.prefixCls, use12Hours = this.use12Hours, format3 = this.format, isAM2 = this.isAM;
      if (!use12Hours) {
        return null;
      }
      var AMPMOptions = ["am", "pm"].map(function(c2) {
        return format3.match(/\sA/) ? c2.toUpperCase() : c2;
      }).map(function(c2) {
        return {
          value: c2
        };
      });
      var selected = isAM2 ? 0 : 1;
      return createVNode(Select$3, {
        "prefixCls": prefixCls2,
        "options": AMPMOptions,
        "selectedIndex": selected,
        "type": "ampm",
        "onSelect": this.onItemChange,
        "onMouseenter": function onMouseenter2() {
          return _this4.onEnterSelectPanel("ampm");
        },
        "onEsc": this.onEsc
      }, null);
    }
  },
  render: function render78() {
    var prefixCls2 = this.prefixCls, defaultOpenValue = this.defaultOpenValue, propValue = this.value;
    var value26 = propValue || defaultOpenValue;
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-combobox")
    }, [this.getHourSelect(value26.hour()), this.getMinuteSelect(value26.minute()), this.getSecondSelect(value26.second()), this.getAMPMSelect(value26.hour())]);
  }
};
var Combobox$1 = Combobox;
function noop$l() {
}
function generateOptions$1(length, disabledOptions, hideDisabledOptions) {
  var step = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
  var arr = [];
  for (var value26 = 0; value26 < length; value26 += step) {
    if (!disabledOptions || disabledOptions.indexOf(value26) < 0 || !hideDisabledOptions) {
      arr.push(value26);
    }
  }
  return arr;
}
function toNearestValidTime(time, hourOptions, minuteOptions, secondOptions) {
  var hour = hourOptions.slice().sort(function(a2, b2) {
    return Math.abs(time.hour() - a2) - Math.abs(time.hour() - b2);
  })[0];
  var minute = minuteOptions.slice().sort(function(a2, b2) {
    return Math.abs(time.minute() - a2) - Math.abs(time.minute() - b2);
  })[0];
  var second = secondOptions.slice().sort(function(a2, b2) {
    return Math.abs(time.second() - a2) - Math.abs(time.second() - b2);
  })[0];
  return hooks("".concat(hour, ":").concat(minute, ":").concat(second), "HH:mm:ss");
}
var Panel = defineComponent({
  name: "Panel",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    clearText: PropsTypes.string,
    prefixCls: PropsTypes.string.def("rc-time-picker-panel"),
    defaultOpenValue: {
      type: Object,
      default: function _default4() {
        return hooks();
      }
    },
    value: PropsTypes.any,
    defaultValue: PropsTypes.any,
    placeholder: PropsTypes.string,
    format: PropsTypes.string,
    inputReadOnly: PropsTypes.looseBool.def(false),
    disabledHours: PropsTypes.func.def(noop$l),
    disabledMinutes: PropsTypes.func.def(noop$l),
    disabledSeconds: PropsTypes.func.def(noop$l),
    hideDisabledOptions: PropsTypes.looseBool,
    allowEmpty: PropsTypes.looseBool,
    showHour: PropsTypes.looseBool,
    showMinute: PropsTypes.looseBool,
    showSecond: PropsTypes.looseBool,
    use12Hours: PropsTypes.looseBool.def(false),
    hourStep: PropsTypes.number,
    minuteStep: PropsTypes.number,
    secondStep: PropsTypes.number,
    addon: PropsTypes.func.def(noop$l),
    focusOnOpen: PropsTypes.looseBool,
    clearIcon: PropsTypes.any
  },
  data: function data37() {
    return {
      sValue: this.value,
      selectionRange: [],
      currentSelectPanel: ""
    };
  },
  watch: {
    value: function value19(val) {
      this.setState({
        sValue: val
      });
    }
  },
  methods: {
    onChange: function onChange(newValue) {
      this.setState({
        sValue: newValue
      });
      this.__emit("change", newValue);
    },
    onAmPmChange: function onAmPmChange(ampm) {
      this.__emit("amPmChange", ampm);
    },
    onCurrentSelectPanelChange: function onCurrentSelectPanelChange(currentSelectPanel) {
      this.setState({
        currentSelectPanel
      });
    },
    close: function close2() {
      this.__emit("esc");
    },
    onEsc: function onEsc3(e2) {
      this.__emit("esc", e2);
    },
    disabledHours2: function disabledHours2() {
      var use12Hours = this.use12Hours, disabledHours3 = this.disabledHours;
      var disabledOptions = disabledHours3();
      if (use12Hours && Array.isArray(disabledOptions)) {
        if (this.isAM()) {
          disabledOptions = disabledOptions.filter(function(h2) {
            return h2 < 12;
          }).map(function(h2) {
            return h2 === 0 ? 12 : h2;
          });
        } else {
          disabledOptions = disabledOptions.map(function(h2) {
            return h2 === 12 ? 12 : h2 - 12;
          });
        }
      }
      return disabledOptions;
    },
    isAM: function isAM() {
      var value26 = this.sValue || this.defaultOpenValue;
      return value26.hour() >= 0 && value26.hour() < 12;
    }
  },
  render: function render79() {
    var prefixCls2 = this.prefixCls, placeholder = this.placeholder, disabledMinutes2 = this.disabledMinutes, addon = this.addon, disabledSeconds2 = this.disabledSeconds, hideDisabledOptions = this.hideDisabledOptions, showHour = this.showHour, showMinute = this.showMinute, showSecond = this.showSecond, format3 = this.format, defaultOpenValue = this.defaultOpenValue, clearText = this.clearText, use12Hours = this.use12Hours, focusOnOpen = this.focusOnOpen, hourStep = this.hourStep, minuteStep = this.minuteStep, secondStep = this.secondStep, inputReadOnly = this.inputReadOnly, sValue = this.sValue, currentSelectPanel = this.currentSelectPanel;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, _this$$attrs$onEsc = _this$$attrs.onEsc, onEsc5 = _this$$attrs$onEsc === void 0 ? noop$l : _this$$attrs$onEsc, _this$$attrs$onKeydow = _this$$attrs.onKeydown, onKeydown2 = _this$$attrs$onKeydow === void 0 ? noop$l : _this$$attrs$onKeydow;
    var clearIcon = getComponent(this, "clearIcon");
    var disabledHourOptions = this.disabledHours2();
    var disabledMinuteOptions = disabledMinutes2(sValue ? sValue.hour() : null);
    var disabledSecondOptions = disabledSeconds2(sValue ? sValue.hour() : null, sValue ? sValue.minute() : null);
    var hourOptions = generateOptions$1(24, disabledHourOptions, hideDisabledOptions, hourStep);
    var minuteOptions = generateOptions$1(60, disabledMinuteOptions, hideDisabledOptions, minuteStep);
    var secondOptions = generateOptions$1(60, disabledSecondOptions, hideDisabledOptions, secondStep);
    var validDefaultOpenValue = toNearestValidTime(defaultOpenValue, hourOptions, minuteOptions, secondOptions);
    return createVNode("div", {
      "className": classNames(className, "".concat(prefixCls2, "-inner"))
    }, [createVNode(Header$2, {
      "clearText": clearText,
      "prefixCls": prefixCls2,
      "defaultOpenValue": validDefaultOpenValue,
      "value": sValue,
      "currentSelectPanel": currentSelectPanel,
      "onEsc": onEsc5,
      "format": format3,
      "placeholder": placeholder,
      "hourOptions": hourOptions,
      "minuteOptions": minuteOptions,
      "secondOptions": secondOptions,
      "disabledHours": this.disabledHours2,
      "disabledMinutes": disabledMinutes2,
      "disabledSeconds": disabledSeconds2,
      "onChange": this.onChange,
      "focusOnOpen": focusOnOpen,
      "onKeydown": onKeydown2,
      "inputReadOnly": inputReadOnly,
      "clearIcon": clearIcon
    }, null), createVNode(Combobox$1, {
      "prefixCls": prefixCls2,
      "value": sValue,
      "defaultOpenValue": validDefaultOpenValue,
      "format": format3,
      "onChange": this.onChange,
      "onAmPmChange": this.onAmPmChange,
      "showHour": showHour,
      "showMinute": showMinute,
      "showSecond": showSecond,
      "hourOptions": hourOptions,
      "minuteOptions": minuteOptions,
      "secondOptions": secondOptions,
      "disabledHours": this.disabledHours2,
      "disabledMinutes": disabledMinutes2,
      "disabledSeconds": disabledSeconds2,
      "onCurrentSelectPanelChange": this.onCurrentSelectPanelChange,
      "use12Hours": use12Hours,
      "onEsc": this.onEsc,
      "isAM": this.isAM()
    }, null), addon(this)]);
  }
});
var TimePickerPanel = Panel;
var autoAdjustOverflow = {
  adjustX: 1,
  adjustY: 1
};
var targetOffset = [0, 0];
var placements = {
  bottomLeft: {
    points: ["tl", "tl"],
    overflow: autoAdjustOverflow,
    offset: [0, -3],
    targetOffset
  },
  bottomRight: {
    points: ["tr", "tr"],
    overflow: autoAdjustOverflow,
    offset: [0, -3],
    targetOffset
  },
  topRight: {
    points: ["br", "br"],
    overflow: autoAdjustOverflow,
    offset: [0, 3],
    targetOffset
  },
  topLeft: {
    points: ["bl", "bl"],
    overflow: autoAdjustOverflow,
    offset: [0, 3],
    targetOffset
  }
};
var placements$1 = placements;
function noop$k() {
}
function refFn(field, component) {
  this[field] = component;
}
var VcTimePicker = defineComponent({
  name: "VcTimePicker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2({
    prefixCls: PropsTypes.string,
    clearText: PropsTypes.string,
    value: PropsTypes.any,
    defaultOpenValue: {
      type: Object,
      default: function _default5() {
        return hooks();
      }
    },
    pickerInputClass: String,
    inputReadOnly: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    allowEmpty: PropsTypes.looseBool,
    defaultValue: PropsTypes.any,
    open: PropsTypes.looseBool,
    defaultOpen: PropsTypes.looseBool,
    align: PropsTypes.object,
    placement: PropsTypes.any,
    transitionName: PropsTypes.string,
    getPopupContainer: PropsTypes.func,
    placeholder: PropsTypes.string,
    format: PropsTypes.string,
    showHour: PropsTypes.looseBool,
    showMinute: PropsTypes.looseBool,
    showSecond: PropsTypes.looseBool,
    popupClassName: PropsTypes.string,
    popupStyle: PropsTypes.object,
    disabledHours: PropsTypes.func,
    disabledMinutes: PropsTypes.func,
    disabledSeconds: PropsTypes.func,
    hideDisabledOptions: PropsTypes.looseBool,
    name: PropsTypes.string,
    autocomplete: PropsTypes.string,
    use12Hours: PropsTypes.looseBool,
    hourStep: PropsTypes.number,
    minuteStep: PropsTypes.number,
    secondStep: PropsTypes.number,
    focusOnOpen: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    id: PropsTypes.string,
    inputIcon: PropsTypes.any,
    clearIcon: PropsTypes.any,
    addon: PropsTypes.func
  }, {
    clearText: "clear",
    prefixCls: "rc-time-picker",
    defaultOpen: false,
    inputReadOnly: false,
    popupClassName: "",
    popupStyle: {},
    align: {},
    allowEmpty: true,
    showHour: true,
    showMinute: true,
    showSecond: true,
    disabledHours: noop$k,
    disabledMinutes: noop$k,
    disabledSeconds: noop$k,
    hideDisabledOptions: false,
    placement: "bottomLeft",
    use12Hours: false,
    focusOnOpen: false
  }),
  data: function data38() {
    this.saveInputRef = refFn.bind(this, "picker");
    this.savePanelRef = refFn.bind(this, "panelInstance");
    var defaultOpen = this.defaultOpen, defaultValue = this.defaultValue, _this$open = this.open, open6 = _this$open === void 0 ? defaultOpen : _this$open, _this$value = this.value, value26 = _this$value === void 0 ? defaultValue : _this$value;
    return {
      sOpen: open6,
      sValue: value26
    };
  },
  watch: {
    value: function value20(val) {
      this.setState({
        sValue: val
      });
    },
    open: function open3(val) {
      if (val !== void 0) {
        this.setState({
          sOpen: val
        });
      }
    }
  },
  mounted: function mounted20() {
    var _this = this;
    this.$nextTick(function() {
      if (_this.autofocus) {
        _this.focus();
      }
    });
  },
  methods: {
    onPanelChange: function onPanelChange2(value26) {
      this.setValue(value26);
    },
    onAmPmChange: function onAmPmChange2(ampm) {
      this.__emit("amPmChange", ampm);
    },
    onClear: function onClear3(event) {
      event.stopPropagation();
      this.setValue(null);
      this.setOpen(false);
    },
    onVisibleChange: function onVisibleChange4(open6) {
      this.setOpen(open6);
    },
    onEsc: function onEsc4() {
      this.setOpen(false);
      this.focus();
    },
    onKeyDown: function onKeyDown8(e2) {
      if (e2.keyCode === 40) {
        this.setOpen(true);
      }
    },
    onKeyDown2: function onKeyDown22(e2) {
      this.__emit("keydown", e2);
    },
    setValue: function setValue7(value26) {
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      this.__emit("change", value26);
    },
    getFormat: function getFormat2() {
      var format3 = this.format, showHour = this.showHour, showMinute = this.showMinute, showSecond = this.showSecond, use12Hours = this.use12Hours;
      if (format3) {
        return format3;
      }
      if (use12Hours) {
        var fmtString = [showHour ? "h" : "", showMinute ? "mm" : "", showSecond ? "ss" : ""].filter(function(item) {
          return !!item;
        }).join(":");
        return fmtString.concat(" a");
      }
      return [showHour ? "HH" : "", showMinute ? "mm" : "", showSecond ? "ss" : ""].filter(function(item) {
        return !!item;
      }).join(":");
    },
    getPanelElement: function getPanelElement() {
      var prefixCls2 = this.prefixCls, placeholder = this.placeholder, disabledHours3 = this.disabledHours, addon = this.addon, disabledMinutes2 = this.disabledMinutes, disabledSeconds2 = this.disabledSeconds, hideDisabledOptions = this.hideDisabledOptions, inputReadOnly = this.inputReadOnly, showHour = this.showHour, showMinute = this.showMinute, showSecond = this.showSecond, defaultOpenValue = this.defaultOpenValue, clearText = this.clearText, use12Hours = this.use12Hours, focusOnOpen = this.focusOnOpen, onKeyDown23 = this.onKeyDown2, hourStep = this.hourStep, minuteStep = this.minuteStep, secondStep = this.secondStep, sValue = this.sValue;
      var clearIcon = getComponent(this, "clearIcon");
      return createVNode(TimePickerPanel, {
        "clearText": clearText,
        "prefixCls": "".concat(prefixCls2, "-panel"),
        "ref": this.savePanelRef,
        "value": sValue,
        "inputReadOnly": inputReadOnly,
        "onChange": this.onPanelChange,
        "onAmPmChange": this.onAmPmChange,
        "defaultOpenValue": defaultOpenValue,
        "showHour": showHour,
        "showMinute": showMinute,
        "showSecond": showSecond,
        "onEsc": this.onEsc,
        "format": this.getFormat(),
        "placeholder": placeholder,
        "disabledHours": disabledHours3,
        "disabledMinutes": disabledMinutes2,
        "disabledSeconds": disabledSeconds2,
        "hideDisabledOptions": hideDisabledOptions,
        "use12Hours": use12Hours,
        "hourStep": hourStep,
        "minuteStep": minuteStep,
        "secondStep": secondStep,
        "focusOnOpen": focusOnOpen,
        "onKeydown": onKeyDown23,
        "clearIcon": clearIcon,
        "addon": addon
      }, null);
    },
    getPopupClassName: function getPopupClassName() {
      var showHour = this.showHour, showMinute = this.showMinute, showSecond = this.showSecond, use12Hours = this.use12Hours, prefixCls2 = this.prefixCls, popupClassName = this.popupClassName;
      var selectColumnCount = 0;
      if (showHour) {
        selectColumnCount += 1;
      }
      if (showMinute) {
        selectColumnCount += 1;
      }
      if (showSecond) {
        selectColumnCount += 1;
      }
      if (use12Hours) {
        selectColumnCount += 1;
      }
      return classNames(popupClassName, _defineProperty$U({}, "".concat(prefixCls2, "-panel-narrow"), (!showHour || !showMinute || !showSecond) && !use12Hours), "".concat(prefixCls2, "-panel-column-").concat(selectColumnCount));
    },
    setOpen: function setOpen2(open6) {
      if (this.sOpen !== open6) {
        if (!hasProp(this, "open")) {
          this.setState({
            sOpen: open6
          });
        }
        if (open6) {
          this.__emit("open", {
            open: open6
          });
        } else {
          this.__emit("close", {
            open: open6
          });
        }
      }
    },
    focus: function focus13() {
      this.picker.focus();
    },
    blur: function blur10() {
      this.picker.blur();
    },
    onFocus: function onFocus3(e2) {
      this.__emit("focus", e2);
    },
    onBlur: function onBlur4(e2) {
      this.__emit("blur", e2);
    },
    renderClearButton: function renderClearButton() {
      var _this2 = this;
      var sValue = this.sValue;
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, allowEmpty = _this$$props.allowEmpty, clearText = _this$$props.clearText, disabled = _this$$props.disabled;
      if (!allowEmpty || !sValue || disabled) {
        return null;
      }
      var clearIcon = getComponent(this, "clearIcon");
      if (isValidElement(clearIcon)) {
        var _ref = getEvents(clearIcon) || {}, _onClick = _ref.onClick;
        return cloneElement(clearIcon, {
          onClick: function onClick7() {
            if (_onClick)
              _onClick.apply(void 0, arguments);
            _this2.onClear.apply(_this2, arguments);
          }
        });
      }
      return createVNode("a", {
        "role": "button",
        "class": "".concat(prefixCls2, "-clear"),
        "title": clearText,
        "onClick": this.onClear,
        "tabindex": 0
      }, [clearIcon || createVNode("i", {
        "class": "".concat(prefixCls2, "-clear-icon")
      }, null)]);
    }
  },
  render: function render80() {
    var _this3 = this;
    var prefixCls2 = this.prefixCls, placeholder = this.placeholder, placement2 = this.placement, align = this.align, id2 = this.id, disabled = this.disabled, transitionName2 = this.transitionName, getPopupContainer = this.getPopupContainer, name2 = this.name, autocomplete = this.autocomplete, autofocus = this.autofocus, sOpen2 = this.sOpen, sValue = this.sValue, onFocus6 = this.onFocus, onBlur7 = this.onBlur, popupStyle = this.popupStyle, pickerInputClass = this.pickerInputClass;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    var popupClassName = this.getPopupClassName();
    var inputIcon = getComponent(this, "inputIcon");
    return createVNode(Trigger, {
      "prefixCls": "".concat(prefixCls2, "-panel"),
      "popupClassName": popupClassName,
      "popupStyle": popupStyle,
      "popupAlign": align,
      "builtinPlacements": placements$1,
      "popupPlacement": placement2,
      "action": disabled ? [] : ["click"],
      "destroyPopupOnHide": true,
      "getPopupContainer": getPopupContainer,
      "popupTransitionName": transitionName2,
      "popupVisible": sOpen2,
      "onPopupVisibleChange": this.onVisibleChange,
      "popup": this.getPanelElement()
    }, {
      default: function _default8() {
        return [createVNode("span", {
          "class": classNames(prefixCls2, className),
          "style": style3
        }, [createVNode("input", {
          "class": pickerInputClass,
          "ref": _this3.saveInputRef,
          "type": "text",
          "placeholder": placeholder,
          "name": name2,
          "onKeydown": _this3.onKeyDown,
          "disabled": disabled,
          "value": sValue && sValue.format(_this3.getFormat()) || "",
          "autocomplete": autocomplete,
          "onFocus": onFocus6,
          "onBlur": onBlur7,
          "autofocus": autofocus,
          "readonly": true,
          "id": id2
        }, null), inputIcon || createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, null), _this3.renderClearButton()])];
      }
    });
  }
});
var ClockCircleOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z" } }] }, "name": "clock-circle", "theme": "outlined" };
var ClockCircleOutlinedSvg = ClockCircleOutlined$2;
function _objectSpread$r(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$s(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$s(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var ClockCircleOutlined = function ClockCircleOutlined2(props2, context2) {
  var p2 = _objectSpread$r({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": ClockCircleOutlinedSvg
  }), null);
};
ClockCircleOutlined.displayName = "ClockCircleOutlined";
ClockCircleOutlined.inheritAttrs = false;
var ClockCircleOutlined$1 = ClockCircleOutlined;
function generateShowHourMinuteSecond(format3) {
  return {
    showHour: format3.indexOf("H") > -1 || format3.indexOf("h") > -1 || format3.indexOf("k") > -1,
    showMinute: format3.indexOf("m") > -1,
    showSecond: format3.indexOf("s") > -1
  };
}
var timePickerProps = function timePickerProps2() {
  return {
    size: PropsTypes.oneOf(tuple("large", "default", "small")),
    value: TimeOrTimesType,
    defaultValue: TimeOrTimesType,
    open: PropsTypes.looseBool,
    format: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    placeholder: PropsTypes.string,
    prefixCls: PropsTypes.string,
    hideDisabledOptions: PropsTypes.looseBool,
    disabledHours: PropsTypes.func,
    disabledMinutes: PropsTypes.func,
    disabledSeconds: PropsTypes.func,
    getPopupContainer: PropsTypes.func,
    use12Hours: PropsTypes.looseBool,
    focusOnOpen: PropsTypes.looseBool,
    hourStep: PropsTypes.number,
    minuteStep: PropsTypes.number,
    secondStep: PropsTypes.number,
    allowEmpty: PropsTypes.looseBool,
    allowClear: PropsTypes.looseBool,
    inputReadOnly: PropsTypes.looseBool,
    clearText: PropsTypes.string,
    defaultOpenValue: PropsTypes.object,
    popupClassName: PropsTypes.string,
    popupStyle: PropsTypes.style,
    suffixIcon: PropsTypes.any,
    align: PropsTypes.object,
    placement: PropsTypes.any,
    transitionName: PropsTypes.string,
    autofocus: PropsTypes.looseBool,
    addon: PropsTypes.any,
    clearIcon: PropsTypes.any,
    locale: PropsTypes.object,
    valueFormat: PropsTypes.string,
    onChange: PropsTypes.func,
    onAmPmChange: PropsTypes.func,
    onOpen: PropsTypes.func,
    onClose: PropsTypes.func,
    onFocus: PropsTypes.func,
    onBlur: PropsTypes.func,
    onKeydown: PropsTypes.func,
    onOpenChange: PropsTypes.func
  };
};
var TimePicker = defineComponent({
  name: "ATimePicker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(timePickerProps(), {
    align: {
      offset: [0, -2]
    },
    disabled: false,
    disabledHours: void 0,
    disabledMinutes: void 0,
    disabledSeconds: void 0,
    hideDisabledOptions: false,
    placement: "bottomLeft",
    transitionName: "slide-up",
    focusOnOpen: true,
    allowClear: true
  }),
  emits: ["update:value", "update:open", "change", "openChange", "focus", "blur", "keydown"],
  setup: function setup76() {
    return {
      popupRef: null,
      timePickerRef: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data39() {
    var value26 = this.value, defaultValue = this.defaultValue, valueFormat = this.valueFormat;
    checkValidate("TimePicker", defaultValue, "defaultValue", valueFormat);
    checkValidate("TimePicker", value26, "value", valueFormat);
    warning$4(!hasProp(this, "allowEmpty"), "TimePicker", "`allowEmpty` is deprecated. Please use `allowClear` instead.");
    return {
      sValue: stringToMoment(value26 || defaultValue, valueFormat)
    };
  },
  watch: {
    value: function value21(val) {
      checkValidate("TimePicker", val, "value", this.valueFormat);
      this.setState({
        sValue: stringToMoment(val, this.valueFormat)
      });
    }
  },
  created: function created11() {
    provide("savePopupRef", this.savePopupRef);
  },
  methods: {
    getDefaultFormat: function getDefaultFormat() {
      var format3 = this.format, use12Hours = this.use12Hours;
      if (format3) {
        return format3;
      } else if (use12Hours) {
        return "h:mm:ss a";
      }
      return "HH:mm:ss";
    },
    getAllowClear: function getAllowClear() {
      var _this$$props = this.$props, allowClear = _this$$props.allowClear, allowEmpty = _this$$props.allowEmpty;
      if (hasProp(this, "allowClear")) {
        return allowClear;
      }
      return allowEmpty;
    },
    getDefaultLocale: function getDefaultLocale2() {
      var defaultLocale2 = _extends$1(_extends$1({}, enUS$1), this.$props.locale);
      return defaultLocale2;
    },
    savePopupRef: function savePopupRef5(ref2) {
      this.popupRef = ref2;
    },
    saveTimePicker: function saveTimePicker(timePickerRef) {
      this.timePickerRef = timePickerRef;
    },
    handleChange: function handleChange11(value26) {
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      var _this$format = this.format, format3 = _this$format === void 0 ? "HH:mm:ss" : _this$format;
      var val = this.valueFormat ? momentToString(value26, this.valueFormat) : value26;
      this.$emit("update:value", val);
      this.$emit("change", val, value26 && value26.format(format3) || "");
    },
    handleOpenClose: function handleOpenClose(_ref) {
      var open6 = _ref.open;
      this.$emit("update:open", open6);
      this.$emit("openChange", open6);
    },
    focus: function focus14() {
      this.timePickerRef.focus();
    },
    blur: function blur11() {
      this.timePickerRef.blur();
    },
    renderInputIcon: function renderInputIcon(prefixCls2) {
      var suffixIcon = getComponent(this, "suffixIcon");
      suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
      var clockIcon = suffixIcon && isValidElement(suffixIcon) && cloneElement(suffixIcon, {
        class: "".concat(prefixCls2, "-clock-icon")
      }) || createVNode(ClockCircleOutlined$1, {
        "class": "".concat(prefixCls2, "-clock-icon")
      }, null);
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-icon")
      }, [clockIcon]);
    },
    renderClearIcon: function renderClearIcon2(prefixCls2) {
      var clearIcon = getComponent(this, "clearIcon");
      var clearIconPrefixCls = "".concat(prefixCls2, "-clear");
      if (clearIcon && isValidElement(clearIcon)) {
        return cloneElement(clearIcon, {
          class: clearIconPrefixCls
        });
      }
      return createVNode(CloseCircleFilled$1, {
        "class": clearIconPrefixCls
      }, null);
    },
    renderTimePicker: function renderTimePicker(locale2) {
      var _pickerClassName;
      var props2 = getOptionProps(this);
      props2 = omit$2(props2, ["defaultValue", "suffixIcon", "allowEmpty", "allowClear"]);
      var className = this.$attrs.class;
      var _props = props2, customizePrefixCls = _props.prefixCls, getPopupContainer = _props.getPopupContainer, placeholder = _props.placeholder, size2 = _props.size;
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("time-picker", customizePrefixCls);
      var inputPrefixCls = getPrefixCls2("input");
      var pickerInputClass = classNames("".concat(prefixCls2, "-input"), inputPrefixCls);
      var format3 = this.getDefaultFormat();
      var pickerClassName = (_pickerClassName = {}, _defineProperty$U(_pickerClassName, className, className), _defineProperty$U(_pickerClassName, "".concat(prefixCls2, "-").concat(size2), !!size2), _pickerClassName);
      var tempAddon = getComponent(this, "addon", {}, false);
      var pickerAddon = function pickerAddon2(panel) {
        return tempAddon ? createVNode("div", {
          "class": "".concat(prefixCls2, "-panel-addon")
        }, [typeof tempAddon === "function" ? tempAddon(panel) : tempAddon]) : null;
      };
      var inputIcon = this.renderInputIcon(prefixCls2);
      var clearIcon = this.renderClearIcon(prefixCls2);
      var getContextPopupContainer = this.configProvider.getPopupContainer;
      var timeProps = _extends$1(_extends$1(_extends$1(_extends$1({}, generateShowHourMinuteSecond(format3)), props2), this.$attrs), {
        allowEmpty: this.getAllowClear(),
        prefixCls: prefixCls2,
        pickerInputClass,
        getPopupContainer: getPopupContainer || getContextPopupContainer,
        format: format3,
        value: this.sValue,
        placeholder: placeholder === void 0 ? locale2.placeholder : placeholder,
        addon: pickerAddon,
        inputIcon,
        clearIcon,
        class: pickerClassName,
        ref: this.saveTimePicker,
        onChange: this.handleChange,
        onOpen: this.handleOpenClose,
        onClose: this.handleOpenClose
      });
      return createVNode(VcTimePicker, timeProps, null);
    }
  },
  render: function render81() {
    return createVNode(LocaleReceiver, {
      "componentName": "TimePicker",
      "defaultLocale": this.getDefaultLocale(),
      "children": this.renderTimePicker
    }, null);
  }
});
var index$u = withInstall(TimePicker);
var DEFAULT_FORMAT = {
  date: "YYYY-MM-DD",
  dateTime: "YYYY-MM-DD HH:mm:ss",
  week: "gggg-wo",
  month: "YYYY-MM"
};
var LOCALE_FORMAT_MAPPING = {
  date: "dateFormat",
  dateTime: "dateTimeFormat",
  week: "weekFormat",
  month: "monthFormat"
};
function getColumns(_ref) {
  var showHour = _ref.showHour, showMinute = _ref.showMinute, showSecond = _ref.showSecond, use12Hours = _ref.use12Hours;
  var column = 0;
  if (showHour) {
    column += 1;
  }
  if (showMinute) {
    column += 1;
  }
  if (showSecond) {
    column += 1;
  }
  if (use12Hours) {
    column += 1;
  }
  return column;
}
function wrapPicker(Picker2, props2, pickerType) {
  return defineComponent({
    name: Picker2.name,
    inheritAttrs: false,
    props: _extends$1(_extends$1({}, props2), {
      transitionName: PropsTypes.string.def("slide-up"),
      popupStyle: PropsTypes.style,
      locale: PropsTypes.any.def({})
    }),
    emits: ["update:value", "openChange", "focus", "blur", "mouseenter", "mouseleave", "change", "ok", "calendarChange"],
    setup: function setup161() {
      return {
        configProvider: inject("configProvider", defaultConfigProvider),
        picker: void 0,
        popupRef: void 0
      };
    },
    watch: {
      value: function value26(val) {
        checkValidate("DatePicker", val, "value", this.valueFormat);
      }
    },
    created: function created26() {
      provide("savePopupRef", this.savePopupRef);
    },
    mounted: function mounted45() {
      var _this = this;
      var _this$$props = this.$props, autofocus = _this$$props.autofocus, disabled = _this$$props.disabled, value26 = _this$$props.value, defaultValue = _this$$props.defaultValue, valueFormat = _this$$props.valueFormat;
      checkValidate("DatePicker", defaultValue, "defaultValue", valueFormat);
      checkValidate("DatePicker", value26, "value", valueFormat);
      if (autofocus && !disabled) {
        nextTick(function() {
          _this.focus();
        });
      }
    },
    methods: {
      savePicker: function savePicker2(node) {
        this.picker = node;
      },
      getDefaultLocale: function getDefaultLocale3() {
        var result = _extends$1(_extends$1({}, enUS), this.locale);
        result.lang = _extends$1(_extends$1({}, result.lang), (this.locale || {}).lang);
        return result;
      },
      savePopupRef: function savePopupRef6(ref2) {
        this.popupRef = ref2;
      },
      handleOpenChange: function handleOpenChange3(open6) {
        this.$emit("openChange", open6);
      },
      handleFocus: function handleFocus2(e2) {
        this.$emit("focus", e2);
      },
      handleBlur: function handleBlur4(e2) {
        this.$emit("blur", e2);
      },
      handleMouseEnter: function handleMouseEnter2(e2) {
        this.$emit("mouseenter", e2);
      },
      handleMouseLeave: function handleMouseLeave2(e2) {
        this.$emit("mouseleave", e2);
      },
      handleChange: function handleChange22(date3, dateString) {
        var value26 = this.valueFormat ? momentToString(date3, this.valueFormat) : date3;
        this.$emit("update:value", value26);
        this.$emit("change", value26, dateString);
      },
      handleOk: function handleOk2(val) {
        this.$emit("ok", this.valueFormat ? momentToString(val, this.valueFormat) : val);
      },
      handleCalendarChange: function handleCalendarChange(date3, dateString) {
        this.$emit("calendarChange", this.valueFormat ? momentToString(date3, this.valueFormat) : date3, dateString);
      },
      focus: function focus27() {
        this.picker.focus();
      },
      blur: function blur24() {
        this.picker.blur();
      },
      transformValue: function transformValue(props3) {
        if ("value" in props3) {
          props3.value = stringToMoment(props3.value, this.valueFormat);
        }
        if ("defaultValue" in props3) {
          props3.defaultValue = stringToMoment(props3.defaultValue, this.valueFormat);
        }
        if ("defaultPickerValue" in props3) {
          props3.defaultPickerValue = stringToMoment(props3.defaultPickerValue, this.valueFormat);
        }
      },
      renderPicker: function renderPicker(locale2, localeCode) {
        var _classNames2;
        var props3 = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs);
        this.transformValue(props3);
        var customizePrefixCls = props3.prefixCls, customizeInputPrefixCls = props3.inputPrefixCls, getCalendarContainer = props3.getCalendarContainer, size2 = props3.size, showTime = props3.showTime, disabled = props3.disabled, format3 = props3.format;
        var mergedPickerType = showTime ? "".concat(pickerType, "Time") : pickerType;
        var mergedFormat = format3 || locale2[LOCALE_FORMAT_MAPPING[mergedPickerType]] || DEFAULT_FORMAT[mergedPickerType];
        var _this$configProvider = this.configProvider, getPrefixCls2 = _this$configProvider.getPrefixCls, getContextPopupContainer = _this$configProvider.getPopupContainer;
        var getPopupContainer = getCalendarContainer || getContextPopupContainer;
        var prefixCls2 = getPrefixCls2("calendar", customizePrefixCls);
        var inputPrefixCls = getPrefixCls2("input", customizeInputPrefixCls);
        var pickerClass = classNames("".concat(prefixCls2, "-picker"), _defineProperty$U({}, "".concat(prefixCls2, "-picker-").concat(size2), !!size2));
        var pickerInputClass = classNames("".concat(prefixCls2, "-picker-input"), inputPrefixCls, (_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(inputPrefixCls, "-lg"), size2 === "large"), _defineProperty$U(_classNames2, "".concat(inputPrefixCls, "-sm"), size2 === "small"), _defineProperty$U(_classNames2, "".concat(inputPrefixCls, "-disabled"), disabled), _classNames2));
        var timeFormat = showTime && showTime.format || "HH:mm:ss";
        var vcTimePickerProps = _extends$1(_extends$1({}, generateShowHourMinuteSecond(timeFormat)), {
          format: timeFormat,
          use12Hours: showTime && showTime.use12Hours
        });
        var columns2 = getColumns(vcTimePickerProps);
        var timePickerCls = "".concat(prefixCls2, "-time-picker-column-").concat(columns2);
        var timePickerPanelProps = _extends$1(_extends$1(_extends$1({}, vcTimePickerProps), showTime), {
          prefixCls: "".concat(prefixCls2, "-time-picker"),
          placeholder: locale2.timePickerLocale.placeholder,
          transitionName: "slide-up",
          class: timePickerCls,
          onEsc: function onEsc5() {
          }
        });
        var timePicker = showTime ? createVNode(TimePickerPanel, timePickerPanelProps, null) : null;
        var pickerProps = _extends$1(_extends$1({}, props3), {
          getCalendarContainer: getPopupContainer,
          format: mergedFormat,
          pickerClass,
          pickerInputClass,
          locale: locale2,
          localeCode,
          timePicker,
          onOpenChange: this.handleOpenChange,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onMouseenter: this.handleMouseEnter,
          onMouseleave: this.handleMouseLeave,
          onChange: this.handleChange,
          onOk: this.handleOk,
          onCalendarChange: this.handleCalendarChange,
          ref: this.savePicker
        });
        return createVNode(Picker2, pickerProps, this.$slots);
      }
    },
    render: function render166() {
      return createVNode(LocaleReceiver, {
        "componentName": "DatePicker",
        "defaultLocale": this.getDefaultLocale,
        "children": this.renderPicker
      }, null);
    }
  });
}
function noop$j() {
}
var CalendarPart = {
  name: "CalendarPart",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    value: PropsTypes.any,
    hoverValue: PropsTypes.any,
    selectedValue: PropsTypes.any,
    direction: PropsTypes.any,
    locale: PropsTypes.any,
    showDateInput: PropsTypes.looseBool,
    showTimePicker: PropsTypes.looseBool,
    showWeekNumber: PropsTypes.looseBool,
    format: PropsTypes.any,
    placeholder: PropsTypes.any,
    disabledDate: PropsTypes.any,
    timePicker: PropsTypes.any,
    disabledTime: PropsTypes.any,
    disabledMonth: PropsTypes.any,
    mode: PropsTypes.any,
    timePickerDisabledTime: PropsTypes.object,
    enableNext: PropsTypes.any,
    enablePrev: PropsTypes.any,
    clearIcon: PropsTypes.any,
    dateRender: PropsTypes.func,
    inputMode: PropsTypes.string,
    inputReadOnly: PropsTypes.looseBool
  },
  render: function render82() {
    var props2 = this.$props;
    var prefixCls2 = props2.prefixCls, value26 = props2.value, hoverValue2 = props2.hoverValue, selectedValue6 = props2.selectedValue, mode4 = props2.mode, direction = props2.direction, locale2 = props2.locale, format3 = props2.format, placeholder = props2.placeholder, disabledDate = props2.disabledDate, timePicker = props2.timePicker, disabledTime = props2.disabledTime, timePickerDisabledTime = props2.timePickerDisabledTime, showTimePicker = props2.showTimePicker, enablePrev = props2.enablePrev, enableNext = props2.enableNext, disabledMonth = props2.disabledMonth, showDateInput = props2.showDateInput, dateRender = props2.dateRender, showWeekNumber = props2.showWeekNumber, showClear = props2.showClear, inputMode = props2.inputMode, inputReadOnly = props2.inputReadOnly;
    var clearIcon = getComponent(this, "clearIcon");
    var _this$$attrs = this.$attrs, _this$$attrs$onInputC = _this$$attrs.onInputChange, onInputChange3 = _this$$attrs$onInputC === void 0 ? noop$j : _this$$attrs$onInputC, _this$$attrs$onInputS = _this$$attrs.onInputSelect, onInputSelect2 = _this$$attrs$onInputS === void 0 ? noop$j : _this$$attrs$onInputS, _this$$attrs$onValueC = _this$$attrs.onValueChange, onValueChange = _this$$attrs$onValueC === void 0 ? noop$j : _this$$attrs$onValueC, _this$$attrs$onPanelC = _this$$attrs.onPanelChange, onPanelChange3 = _this$$attrs$onPanelC === void 0 ? noop$j : _this$$attrs$onPanelC, _this$$attrs$onSelect = _this$$attrs.onSelect, onSelect6 = _this$$attrs$onSelect === void 0 ? noop$j : _this$$attrs$onSelect, _this$$attrs$onDayHov = _this$$attrs.onDayHover, onDayHover2 = _this$$attrs$onDayHov === void 0 ? noop$j : _this$$attrs$onDayHov;
    var shouldShowTimePicker = showTimePicker && timePicker;
    var disabledTimeConfig = shouldShowTimePicker && disabledTime ? getTimeConfig(selectedValue6, disabledTime) : null;
    var rangeClassName = "".concat(prefixCls2, "-range");
    var newProps = {
      locale: locale2,
      value: value26,
      prefixCls: prefixCls2,
      showTimePicker
    };
    var index2 = direction === "left" ? 0 : 1;
    var timePickerEle = null;
    if (shouldShowTimePicker) {
      var timePickerProps3 = getOptionProps(timePicker);
      timePickerEle = cloneElement(timePicker, _extends$1(_extends$1(_extends$1(_extends$1({
        showHour: true,
        showMinute: true,
        showSecond: true
      }, timePickerProps3), disabledTimeConfig), timePickerDisabledTime), {
        defaultOpenValue: value26,
        value: selectedValue6[index2],
        onChange: onInputChange3
      }));
    }
    var dateInputElement = showDateInput && createVNode(DateInput$1, {
      "format": format3,
      "locale": locale2,
      "prefixCls": prefixCls2,
      "timePicker": timePicker,
      "disabledDate": disabledDate,
      "placeholder": placeholder,
      "disabledTime": disabledTime,
      "value": value26,
      "showClear": showClear || false,
      "selectedValue": selectedValue6[index2],
      "onChange": onInputChange3,
      "onSelect": onInputSelect2,
      "clearIcon": clearIcon,
      "inputMode": inputMode,
      "inputReadOnly": inputReadOnly
    }, null);
    var headerProps = _extends$1(_extends$1({}, newProps), {
      mode: mode4,
      enableNext,
      enablePrev,
      disabledMonth,
      onValueChange,
      onPanelChange: onPanelChange3
    });
    var tableProps2 = _extends$1(_extends$1({}, newProps), {
      hoverValue: hoverValue2,
      selectedValue: selectedValue6,
      dateRender,
      disabledDate,
      showWeekNumber,
      onSelect: onSelect6,
      onDayHover: onDayHover2
    });
    return createVNode("div", {
      "class": "".concat(rangeClassName, "-part ").concat(rangeClassName, "-").concat(direction)
    }, [dateInputElement, createVNode("div", {
      "style": {
        outline: "none"
      }
    }, [createVNode(CalendarHeader$1, headerProps, null), showTimePicker ? createVNode("div", {
      "class": "".concat(prefixCls2, "-time-picker")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-time-picker-panel")
    }, [timePickerEle])]) : null, createVNode("div", {
      "class": "".concat(prefixCls2, "-body")
    }, [createVNode(DateTable$1, tableProps2, null)])])]);
  }
};
var CalendarPart$1 = CalendarPart;
function noop$i() {
}
function isEmptyArray$1(arr) {
  return Array.isArray(arr) && (arr.length === 0 || arr.every(function(i2) {
    return !i2;
  }));
}
function isArraysEqual(a2, b2) {
  if (a2 === b2)
    return true;
  if (a2 === null || typeof a2 === "undefined" || b2 === null || typeof b2 === "undefined") {
    return false;
  }
  if (a2.length !== b2.length)
    return false;
  for (var i2 = 0; i2 < a2.length; ++i2) {
    if (a2[i2] !== b2[i2])
      return false;
  }
  return true;
}
function getValueFromSelectedValue(selectedValue6) {
  var _selectedValue = _slicedToArray$2(selectedValue6, 2), start = _selectedValue[0], end = _selectedValue[1];
  if (end && (start === void 0 || start === null)) {
    start = end.clone().subtract(1, "month");
  }
  if (start && (end === void 0 || end === null)) {
    end = start.clone().add(1, "month");
  }
  return [start, end];
}
function normalizeAnchor(props2, init) {
  var selectedValue6 = props2.selectedValue || init && props2.defaultSelectedValue;
  var value26 = props2.value || init && props2.defaultValue;
  var normalizedValue = value26 ? getValueFromSelectedValue(value26) : getValueFromSelectedValue(selectedValue6);
  return !isEmptyArray$1(normalizedValue) ? normalizedValue : init && [hooks(), hooks().add(1, "months")];
}
function generateOptions(length, extraOptionGen) {
  var arr = extraOptionGen ? extraOptionGen().concat() : [];
  for (var value26 = 0; value26 < length; value26++) {
    if (arr.indexOf(value26) === -1) {
      arr.push(value26);
    }
  }
  return arr;
}
function onInputSelect(direction, value26, cause) {
  if (!value26) {
    return;
  }
  var originalValue = this.sSelectedValue;
  var selectedValue6 = originalValue.concat();
  var index2 = direction === "left" ? 0 : 1;
  selectedValue6[index2] = value26;
  if (selectedValue6[0] && this.compare(selectedValue6[0], selectedValue6[1]) > 0) {
    selectedValue6[1 - index2] = this.sShowTimePicker ? selectedValue6[index2] : void 0;
  }
  this.__emit("inputSelect", selectedValue6);
  this.fireSelectValueChange(selectedValue6, null, cause || {
    source: "dateInput"
  });
}
var RangeCalendar = defineComponent({
  name: "RangeCalendar",
  mixins: [BaseMixin, CommonMixin],
  inheritAttrs: false,
  props: {
    locale: PropsTypes.object.def(enUs),
    visible: PropsTypes.looseBool.def(true),
    prefixCls: PropsTypes.string.def("rc-calendar"),
    dateInputPlaceholder: PropsTypes.any,
    seperator: PropsTypes.string.def("~"),
    defaultValue: PropsTypes.any,
    value: PropsTypes.any,
    hoverValue: PropsTypes.any,
    mode: PropsTypes.arrayOf(PropsTypes.oneOf(["time", "date", "month", "year", "decade"])),
    showDateInput: PropsTypes.looseBool.def(true),
    timePicker: PropsTypes.any,
    showOk: PropsTypes.looseBool,
    showToday: PropsTypes.looseBool.def(true),
    defaultSelectedValue: PropsTypes.array.def([]),
    selectedValue: PropsTypes.array,
    showClear: PropsTypes.looseBool,
    showWeekNumber: PropsTypes.looseBool,
    format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.string), PropsTypes.func]),
    type: PropsTypes.any.def("both"),
    disabledDate: PropsTypes.func,
    disabledTime: PropsTypes.func.def(noop$i),
    renderFooter: PropsTypes.func.def(function() {
      return null;
    }),
    renderSidebar: PropsTypes.func.def(function() {
      return null;
    }),
    dateRender: PropsTypes.func,
    clearIcon: PropsTypes.any,
    inputReadOnly: PropsTypes.looseBool
  },
  data: function data40() {
    var props2 = this.$props;
    var selectedValue6 = props2.selectedValue || props2.defaultSelectedValue;
    var value26 = normalizeAnchor(props2, 1);
    return {
      sSelectedValue: selectedValue6,
      prevSelectedValue: selectedValue6,
      firstSelectedValue: null,
      sHoverValue: props2.hoverValue || [],
      sValue: value26,
      sShowTimePicker: false,
      sMode: props2.mode || ["date", "date"],
      sPanelTriggerSource: ""
    };
  },
  watch: {
    value: function value22() {
      var newState = {};
      newState.sValue = normalizeAnchor(this.$props, 0);
      this.setState(newState);
    },
    hoverValue: function hoverValue(val) {
      if (!isArraysEqual(this.sHoverValue, val)) {
        this.setState({
          sHoverValue: val
        });
      }
    },
    selectedValue: function selectedValue5(val) {
      var newState = {};
      newState.sSelectedValue = val;
      newState.prevSelectedValue = val;
      this.setState(newState);
    },
    mode: function mode3(val) {
      if (!isArraysEqual(this.sMode, val)) {
        this.setState({
          sMode: val
        });
      }
    }
  },
  methods: {
    onDatePanelEnter: function onDatePanelEnter() {
      if (this.hasSelectedValue()) {
        this.fireHoverValueChange(this.sSelectedValue.concat());
      }
    },
    onDatePanelLeave: function onDatePanelLeave() {
      if (this.hasSelectedValue()) {
        this.fireHoverValueChange([]);
      }
    },
    onSelect: function onSelect4(value26) {
      var type3 = this.type, sSelectedValue = this.sSelectedValue, prevSelectedValue = this.prevSelectedValue, firstSelectedValue = this.firstSelectedValue;
      var nextSelectedValue;
      if (type3 === "both") {
        if (!firstSelectedValue) {
          syncTime(prevSelectedValue[0], value26);
          nextSelectedValue = [value26];
        } else if (this.compare(firstSelectedValue, value26) < 0) {
          syncTime(prevSelectedValue[1], value26);
          nextSelectedValue = [firstSelectedValue, value26];
        } else {
          syncTime(prevSelectedValue[0], value26);
          syncTime(prevSelectedValue[1], firstSelectedValue);
          nextSelectedValue = [value26, firstSelectedValue];
        }
      } else if (type3 === "start") {
        syncTime(prevSelectedValue[0], value26);
        var endValue = sSelectedValue[1];
        nextSelectedValue = endValue && this.compare(endValue, value26) > 0 ? [value26, endValue] : [value26];
      } else {
        var startValue = sSelectedValue[0];
        if (startValue && this.compare(startValue, value26) <= 0) {
          syncTime(prevSelectedValue[1], value26);
          nextSelectedValue = [startValue, value26];
        } else {
          syncTime(prevSelectedValue[0], value26);
          nextSelectedValue = [value26];
        }
      }
      this.fireSelectValueChange(nextSelectedValue);
    },
    onKeyDown: function onKeyDown9(event) {
      var _this = this;
      if (event.target.nodeName.toLowerCase() === "input") {
        return;
      }
      var keyCode = event.keyCode;
      var ctrlKey = event.ctrlKey || event.metaKey;
      var _this$$data = this.$data, selectedValue6 = _this$$data.sSelectedValue, hoverValue2 = _this$$data.sHoverValue, firstSelectedValue = _this$$data.firstSelectedValue, value26 = _this$$data.sValue;
      var disabledDate = this.$props.disabledDate;
      var updateHoverPoint = function updateHoverPoint2(func) {
        var currentHoverTime;
        var nextHoverTime;
        var nextHoverValue;
        if (!firstSelectedValue) {
          currentHoverTime = hoverValue2[0] || selectedValue6[0] || value26[0] || hooks();
          nextHoverTime = func(currentHoverTime);
          nextHoverValue = [nextHoverTime];
          _this.fireHoverValueChange(nextHoverValue);
        } else {
          if (hoverValue2.length === 1) {
            currentHoverTime = hoverValue2[0].clone();
            nextHoverTime = func(currentHoverTime);
            nextHoverValue = _this.onDayHover(nextHoverTime);
          } else {
            currentHoverTime = hoverValue2[0].isSame(firstSelectedValue, "day") ? hoverValue2[1] : hoverValue2[0];
            nextHoverTime = func(currentHoverTime);
            nextHoverValue = _this.onDayHover(nextHoverTime);
          }
        }
        if (nextHoverValue.length >= 2) {
          var miss = nextHoverValue.some(function(ht) {
            return !includesTime(value26, ht, "month");
          });
          if (miss) {
            var newValue = nextHoverValue.slice().sort(function(t1, t2) {
              return t1.valueOf() - t2.valueOf();
            });
            if (newValue[0].isSame(newValue[1], "month")) {
              newValue[1] = newValue[0].clone().add(1, "month");
            }
            _this.fireValueChange(newValue);
          }
        } else if (nextHoverValue.length === 1) {
          var oriValueIndex = value26.findIndex(function(time) {
            return time.isSame(currentHoverTime, "month");
          });
          if (oriValueIndex === -1)
            oriValueIndex = 0;
          if (value26.every(function(time) {
            return !time.isSame(nextHoverTime, "month");
          })) {
            var _newValue = value26.slice();
            _newValue[oriValueIndex] = nextHoverTime.clone();
            _this.fireValueChange(_newValue);
          }
        }
        event.preventDefault();
        return nextHoverTime;
      };
      switch (keyCode) {
        case KeyCode$2.DOWN:
          updateHoverPoint(function(time) {
            return goTime(time, 1, "weeks");
          });
          return;
        case KeyCode$2.UP:
          updateHoverPoint(function(time) {
            return goTime(time, -1, "weeks");
          });
          return;
        case KeyCode$2.LEFT:
          if (ctrlKey) {
            updateHoverPoint(function(time) {
              return goTime(time, -1, "years");
            });
          } else {
            updateHoverPoint(function(time) {
              return goTime(time, -1, "days");
            });
          }
          return;
        case KeyCode$2.RIGHT:
          if (ctrlKey) {
            updateHoverPoint(function(time) {
              return goTime(time, 1, "years");
            });
          } else {
            updateHoverPoint(function(time) {
              return goTime(time, 1, "days");
            });
          }
          return;
        case KeyCode$2.HOME:
          updateHoverPoint(function(time) {
            return goStartMonth(time);
          });
          return;
        case KeyCode$2.END:
          updateHoverPoint(function(time) {
            return goEndMonth(time);
          });
          return;
        case KeyCode$2.PAGE_DOWN:
          updateHoverPoint(function(time) {
            return goTime(time, 1, "month");
          });
          return;
        case KeyCode$2.PAGE_UP:
          updateHoverPoint(function(time) {
            return goTime(time, -1, "month");
          });
          return;
        case KeyCode$2.ENTER: {
          var lastValue;
          if (hoverValue2.length === 0) {
            lastValue = updateHoverPoint(function(time) {
              return time;
            });
          } else if (hoverValue2.length === 1) {
            lastValue = hoverValue2[0];
          } else {
            lastValue = hoverValue2[0].isSame(firstSelectedValue, "day") ? hoverValue2[1] : hoverValue2[0];
          }
          if (lastValue && (!disabledDate || !disabledDate(lastValue))) {
            this.onSelect(lastValue);
          }
          event.preventDefault();
          return;
        }
        default:
          this.__emit("keydown", event);
      }
    },
    onDayHover: function onDayHover(value26) {
      var hoverValue2 = [];
      var sSelectedValue = this.sSelectedValue, firstSelectedValue = this.firstSelectedValue, type3 = this.type;
      if (type3 === "start" && sSelectedValue[1]) {
        hoverValue2 = this.compare(value26, sSelectedValue[1]) < 0 ? [value26, sSelectedValue[1]] : [value26];
      } else if (type3 === "end" && sSelectedValue[0]) {
        hoverValue2 = this.compare(value26, sSelectedValue[0]) > 0 ? [sSelectedValue[0], value26] : [];
      } else {
        if (!firstSelectedValue) {
          if (this.sHoverValue.length) {
            this.setState({
              sHoverValue: []
            });
          }
          return hoverValue2;
        }
        hoverValue2 = this.compare(value26, firstSelectedValue) < 0 ? [value26, firstSelectedValue] : [firstSelectedValue, value26];
      }
      this.fireHoverValueChange(hoverValue2);
      return hoverValue2;
    },
    onToday: function onToday2() {
      var startValue = getTodayTime(this.sValue[0]);
      var endValue = startValue.clone().add(1, "months");
      this.setState({
        sValue: [startValue, endValue]
      });
    },
    onOpenTimePicker: function onOpenTimePicker() {
      this.setState({
        sShowTimePicker: true
      });
    },
    onCloseTimePicker: function onCloseTimePicker() {
      this.setState({
        sShowTimePicker: false
      });
    },
    onOk: function onOk2() {
      var sSelectedValue = this.sSelectedValue;
      if (this.isAllowedDateAndTime(sSelectedValue)) {
        this.__emit("ok", sSelectedValue);
      }
    },
    onStartInputChange: function onStartInputChange() {
      for (var _len = arguments.length, oargs = new Array(_len), _key = 0; _key < _len; _key++) {
        oargs[_key] = arguments[_key];
      }
      var args = ["left"].concat(oargs);
      return onInputSelect.apply(this, args);
    },
    onEndInputChange: function onEndInputChange() {
      for (var _len2 = arguments.length, oargs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        oargs[_key2] = arguments[_key2];
      }
      var args = ["right"].concat(oargs);
      return onInputSelect.apply(this, args);
    },
    onStartInputSelect: function onStartInputSelect(value26) {
      var args = ["left", value26, {
        source: "dateInputSelect"
      }];
      return onInputSelect.apply(this, args);
    },
    onEndInputSelect: function onEndInputSelect(value26) {
      var args = ["right", value26, {
        source: "dateInputSelect"
      }];
      return onInputSelect.apply(this, args);
    },
    onStartValueChange: function onStartValueChange(leftValue) {
      var value26 = _toConsumableArray(this.sValue);
      value26[0] = leftValue;
      return this.fireValueChange(value26);
    },
    onEndValueChange: function onEndValueChange(rightValue) {
      var value26 = _toConsumableArray(this.sValue);
      value26[1] = rightValue;
      return this.fireValueChange(value26);
    },
    onStartPanelChange: function onStartPanelChange(value26, mode4) {
      var sMode = this.sMode, sValue = this.sValue;
      var newMode = [mode4, sMode[1]];
      var newValue = [value26 || sValue[0], sValue[1]];
      this.__emit("panelChange", newValue, newMode);
      var newState = {
        sPanelTriggerSource: "start"
      };
      if (!hasProp(this, "mode")) {
        newState.sMode = newMode;
      }
      this.setState(newState);
    },
    onEndPanelChange: function onEndPanelChange(value26, mode4) {
      var sMode = this.sMode, sValue = this.sValue;
      var newMode = [sMode[0], mode4];
      var newValue = [sValue[0], value26 || sValue[1]];
      this.__emit("panelChange", newValue, newMode);
      var newState = {
        sPanelTriggerSource: "end"
      };
      if (!hasProp(this, "mode")) {
        newState.sMode = newMode;
      }
      this.setState(newState);
    },
    getStartValue: function getStartValue() {
      var _this$$data2 = this.$data, selectedValue6 = _this$$data2.sSelectedValue, showTimePicker = _this$$data2.sShowTimePicker, value26 = _this$$data2.sValue, mode4 = _this$$data2.sMode, panelTriggerSource = _this$$data2.sPanelTriggerSource;
      var startValue = value26[0];
      if (selectedValue6[0] && this.$props.timePicker) {
        startValue = startValue.clone();
        syncTime(selectedValue6[0], startValue);
      }
      if (showTimePicker && selectedValue6[0]) {
        startValue = selectedValue6[0];
      }
      if (panelTriggerSource === "end" && mode4[0] === "date" && mode4[1] === "date" && startValue.isSame(value26[1], "month")) {
        startValue = startValue.clone().subtract(1, "month");
      }
      return startValue;
    },
    getEndValue: function getEndValue() {
      var _this$$data3 = this.$data, selectedValue6 = _this$$data3.sSelectedValue, showTimePicker = _this$$data3.sShowTimePicker, value26 = _this$$data3.sValue, mode4 = _this$$data3.sMode, panelTriggerSource = _this$$data3.sPanelTriggerSource;
      var endValue = value26[1] ? value26[1].clone() : value26[0].clone().add(1, "month");
      if (selectedValue6[1] && this.$props.timePicker) {
        syncTime(selectedValue6[1], endValue);
      }
      if (showTimePicker) {
        endValue = selectedValue6[1] ? selectedValue6[1] : this.getStartValue();
      }
      if (!showTimePicker && panelTriggerSource !== "end" && mode4[0] === "date" && mode4[1] === "date" && endValue.isSame(value26[0], "month")) {
        endValue = endValue.clone().add(1, "month");
      }
      return endValue;
    },
    getEndDisableTime: function getEndDisableTime() {
      var sSelectedValue = this.sSelectedValue, sValue = this.sValue, disabledTime = this.disabledTime;
      var userSettingDisabledTime = disabledTime(sSelectedValue, "end") || {};
      var startValue = sSelectedValue && sSelectedValue[0] || sValue[0].clone();
      if (!sSelectedValue[1] || startValue.isSame(sSelectedValue[1], "day")) {
        var hours2 = startValue.hour();
        var minutes2 = startValue.minute();
        var second = startValue.second();
        var _disabledHours = userSettingDisabledTime.disabledHours, _disabledMinutes = userSettingDisabledTime.disabledMinutes, _disabledSeconds = userSettingDisabledTime.disabledSeconds;
        var oldDisabledMinutes = _disabledMinutes ? _disabledMinutes() : [];
        var olddisabledSeconds = _disabledSeconds ? _disabledSeconds() : [];
        _disabledHours = generateOptions(hours2, _disabledHours);
        _disabledMinutes = generateOptions(minutes2, _disabledMinutes);
        _disabledSeconds = generateOptions(second, _disabledSeconds);
        return {
          disabledHours: function disabledHours3() {
            return _disabledHours;
          },
          disabledMinutes: function disabledMinutes2(hour) {
            if (hour === hours2) {
              return _disabledMinutes;
            }
            return oldDisabledMinutes;
          },
          disabledSeconds: function disabledSeconds2(hour, minute) {
            if (hour === hours2 && minute === minutes2) {
              return _disabledSeconds;
            }
            return olddisabledSeconds;
          }
        };
      }
      return userSettingDisabledTime;
    },
    isAllowedDateAndTime: function isAllowedDateAndTime(selectedValue6) {
      return isAllowedDate(selectedValue6[0], this.disabledDate, this.disabledStartTime) && isAllowedDate(selectedValue6[1], this.disabledDate, this.disabledEndTime);
    },
    isMonthYearPanelShow: function isMonthYearPanelShow(mode4) {
      return ["month", "year", "decade"].indexOf(mode4) > -1;
    },
    hasSelectedValue: function hasSelectedValue() {
      var sSelectedValue = this.sSelectedValue;
      return !!sSelectedValue[1] && !!sSelectedValue[0];
    },
    compare: function compare(v1, v2) {
      if (this.timePicker) {
        return v1.diff(v2);
      }
      return v1.diff(v2, "days");
    },
    fireSelectValueChange: function fireSelectValueChange(selectedValue6, direct, cause) {
      var timePicker = this.timePicker, prevSelectedValue = this.prevSelectedValue;
      if (timePicker) {
        var timePickerProps3 = getOptionProps(timePicker);
        if (timePickerProps3.defaultValue) {
          var timePickerDefaultValue = timePickerProps3.defaultValue;
          if (!prevSelectedValue[0] && selectedValue6[0]) {
            syncTime(timePickerDefaultValue[0], selectedValue6[0]);
          }
          if (!prevSelectedValue[1] && selectedValue6[1]) {
            syncTime(timePickerDefaultValue[1], selectedValue6[1]);
          }
        }
      }
      if (!this.sSelectedValue[0] || !this.sSelectedValue[1]) {
        var startValue = selectedValue6[0] || hooks();
        var endValue = selectedValue6[1] || startValue.clone().add(1, "months");
        this.setState({
          sSelectedValue: selectedValue6,
          sValue: selectedValue6 && selectedValue6.length === 2 ? getValueFromSelectedValue([startValue, endValue]) : this.sValue
        });
      }
      if (selectedValue6[0] && !selectedValue6[1]) {
        this.setState({
          firstSelectedValue: selectedValue6[0]
        });
        this.fireHoverValueChange(selectedValue6.concat());
      }
      this.__emit("change", selectedValue6);
      if (direct || selectedValue6[0] && selectedValue6[1]) {
        this.setState({
          prevSelectedValue: selectedValue6,
          firstSelectedValue: null
        });
        this.fireHoverValueChange([]);
        this.__emit("select", selectedValue6, cause);
      }
      if (!hasProp(this, "selectedValue")) {
        this.setState({
          sSelectedValue: selectedValue6
        });
      }
    },
    fireValueChange: function fireValueChange(value26) {
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: value26
        });
      }
      this.__emit("valueChange", value26);
    },
    fireHoverValueChange: function fireHoverValueChange(hoverValue2) {
      if (!hasProp(this, "hoverValue")) {
        this.setState({
          sHoverValue: hoverValue2
        });
      }
      this.__emit("hoverChange", hoverValue2);
    },
    clear: function clear2() {
      this.fireSelectValueChange([], true);
      this.__emit("clear");
    },
    disabledStartTime: function disabledStartTime(time) {
      return this.disabledTime(time, "start");
    },
    disabledEndTime: function disabledEndTime(time) {
      return this.disabledTime(time, "end");
    },
    disabledStartMonth: function disabledStartMonth(month) {
      var sValue = this.sValue;
      return month.isAfter(sValue[1], "month");
    },
    disabledEndMonth: function disabledEndMonth(month) {
      var sValue = this.sValue;
      return month.isBefore(sValue[0], "month");
    }
  },
  render: function render83() {
    var _className, _cls;
    var props2 = getOptionProps(this);
    var prefixCls2 = props2.prefixCls, dateInputPlaceholder = props2.dateInputPlaceholder, timePicker = props2.timePicker, showOk = props2.showOk, locale2 = props2.locale, showClear = props2.showClear, showToday = props2.showToday, type3 = props2.type, seperator = props2.seperator;
    var clearIcon = getComponent(this, "clearIcon");
    var sHoverValue = this.sHoverValue, sSelectedValue = this.sSelectedValue, mode4 = this.sMode, sShowTimePicker = this.sShowTimePicker, sValue = this.sValue;
    var className = (_className = {}, _defineProperty$U(_className, this.$attrs.class, !!this.$attrs.class), _defineProperty$U(_className, prefixCls2, 1), _defineProperty$U(_className, "".concat(prefixCls2, "-hidden"), !props2.visible), _defineProperty$U(_className, "".concat(prefixCls2, "-range"), 1), _defineProperty$U(_className, "".concat(prefixCls2, "-show-time-picker"), sShowTimePicker), _defineProperty$U(_className, "".concat(prefixCls2, "-week-number"), props2.showWeekNumber), _className);
    var baseProps3 = _extends$1(_extends$1({}, props2), this.$attrs);
    var newProps = {
      selectedValue: sSelectedValue,
      onSelect: this.onSelect,
      onDayHover: type3 === "start" && sSelectedValue[1] || type3 === "end" && sSelectedValue[0] || !!sHoverValue.length ? this.onDayHover : noop$i
    };
    var placeholder1;
    var placeholder2;
    if (dateInputPlaceholder) {
      if (Array.isArray(dateInputPlaceholder)) {
        var _dateInputPlaceholder = _slicedToArray$2(dateInputPlaceholder, 2);
        placeholder1 = _dateInputPlaceholder[0];
        placeholder2 = _dateInputPlaceholder[1];
      } else {
        placeholder1 = placeholder2 = dateInputPlaceholder;
      }
    }
    var showOkButton = showOk === true || showOk !== false && !!timePicker;
    var cls = (_cls = {}, _defineProperty$U(_cls, "".concat(prefixCls2, "-footer"), true), _defineProperty$U(_cls, "".concat(prefixCls2, "-range-bottom"), true), _defineProperty$U(_cls, "".concat(prefixCls2, "-footer-show-ok"), showOkButton), _cls);
    var startValue = this.getStartValue();
    var endValue = this.getEndValue();
    var todayTime = getTodayTime(startValue);
    var thisMonth = todayTime.month();
    var thisYear = todayTime.year();
    var isTodayInView = startValue.year() === thisYear && startValue.month() === thisMonth || endValue.year() === thisYear && endValue.month() === thisMonth;
    var nextMonthOfStart = startValue.clone().add(1, "months");
    var isClosestMonths = nextMonthOfStart.year() === endValue.year() && nextMonthOfStart.month() === endValue.month();
    var leftPartProps = _extends$1(_extends$1(_extends$1({}, baseProps3), newProps), {
      hoverValue: sHoverValue,
      direction: "left",
      disabledTime: this.disabledStartTime,
      disabledMonth: this.disabledStartMonth,
      format: this.getFormat(),
      value: startValue,
      mode: mode4[0],
      placeholder: placeholder1,
      showDateInput: this.showDateInput,
      timePicker,
      showTimePicker: sShowTimePicker || mode4[0] === "time",
      enablePrev: true,
      enableNext: !isClosestMonths || this.isMonthYearPanelShow(mode4[1]),
      clearIcon,
      onInputChange: this.onStartInputChange,
      onInputSelect: this.onStartInputSelect,
      onValueChange: this.onStartValueChange,
      onPanelChange: this.onStartPanelChange
    });
    var rightPartProps = _extends$1(_extends$1(_extends$1({}, baseProps3), newProps), {
      hoverValue: sHoverValue,
      direction: "right",
      format: this.getFormat(),
      timePickerDisabledTime: this.getEndDisableTime(),
      placeholder: placeholder2,
      value: endValue,
      mode: mode4[1],
      showDateInput: this.showDateInput,
      timePicker,
      showTimePicker: sShowTimePicker || mode4[1] === "time",
      disabledTime: this.disabledEndTime,
      disabledMonth: this.disabledEndMonth,
      enablePrev: !isClosestMonths || this.isMonthYearPanelShow(mode4[0]),
      enableNext: true,
      clearIcon,
      onInputChange: this.onEndInputChange,
      onInputSelect: this.onEndInputSelect,
      onValueChange: this.onEndValueChange,
      onPanelChange: this.onEndPanelChange
    });
    var TodayButtonNode = null;
    if (showToday) {
      var todayButtonProps = _extends$1(_extends$1({}, baseProps3), {
        disabled: isTodayInView,
        value: sValue[0],
        text: locale2.backToToday,
        onToday: this.onToday
      });
      TodayButtonNode = createVNode(TodayButton$1, _objectSpread2$2({
        "key": "todayButton"
      }, todayButtonProps), null);
    }
    var TimePickerButtonNode = null;
    if (props2.timePicker) {
      var timePickerButtonProps = _extends$1(_extends$1({}, baseProps3), {
        showTimePicker: sShowTimePicker || mode4[0] === "time" && mode4[1] === "time",
        timePickerDisabled: !this.hasSelectedValue() || sHoverValue.length,
        onOpenTimePicker: this.onOpenTimePicker,
        onCloseTimePicker: this.onCloseTimePicker
      });
      TimePickerButtonNode = createVNode(TimePickerButton$1, _objectSpread2$2({
        "key": "timePickerButton"
      }, timePickerButtonProps), null);
    }
    var OkButtonNode = null;
    if (showOkButton) {
      var okButtonProps = _extends$1(_extends$1({}, baseProps3), {
        okDisabled: !this.isAllowedDateAndTime(sSelectedValue) || !this.hasSelectedValue() || sHoverValue.length,
        onOk: this.onOk
      });
      OkButtonNode = createVNode(OkButton$1, _objectSpread2$2({
        "key": "okButtonNode"
      }, okButtonProps), null);
    }
    var extraFooter = this.renderFooter(mode4);
    return createVNode("div", {
      "ref": "rootInstance",
      "class": className,
      "tabindex": "0",
      "onKeydown": this.onKeyDown
    }, [props2.renderSidebar(), createVNode("div", {
      "class": "".concat(prefixCls2, "-panel")
    }, [showClear && sSelectedValue[0] && sSelectedValue[1] ? createVNode("a", {
      "role": "button",
      "title": locale2.clear,
      "onClick": this.clear
    }, [clearIcon || createVNode("span", {
      "class": "".concat(prefixCls2, "-clear-btn")
    }, null)]) : null, createVNode("div", {
      "class": "".concat(prefixCls2, "-date-panel"),
      "onMouseleave": type3 !== "both" ? this.onDatePanelLeave : noop$i,
      "onMouseenter": type3 !== "both" ? this.onDatePanelEnter : noop$i
    }, [createVNode(CalendarPart$1, leftPartProps, null), createVNode("span", {
      "class": "".concat(prefixCls2, "-range-middle")
    }, [seperator]), createVNode(CalendarPart$1, rightPartProps, null)]), createVNode("div", {
      "class": cls
    }, [showToday || props2.timePicker || showOkButton || extraFooter ? createVNode("div", {
      "class": "".concat(prefixCls2, "-footer-btn")
    }, [extraFooter, TodayButtonNode, TimePickerButtonNode, OkButtonNode]) : null])])]);
  }
});
var RangeCalendar$1 = RangeCalendar;
var CheckableTag = defineComponent({
  name: "ACheckableTag",
  props: {
    prefixCls: PropsTypes.string,
    checked: PropsTypes.looseBool,
    onChange: {
      type: Function
    },
    onClick: {
      type: Function
    }
  },
  emits: ["update:checked", "change", "click"],
  setup: function setup77(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var _useConfigInject = useConfigInject("tag", props2), prefixCls2 = _useConfigInject.prefixCls;
    var handleClick5 = function handleClick6(e2) {
      var checked2 = props2.checked;
      emit("update:checked", !checked2);
      emit("change", !checked2);
      emit("click", e2);
    };
    var cls = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-checkable"), true), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-checkable-checked"), props2.checked), _classNames));
    });
    return function() {
      var _a;
      return createVNode("span", {
        "class": cls.value,
        "onClick": handleClick5
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var CheckableTag$1 = CheckableTag;
var PresetColorRegex = new RegExp("^(".concat(PresetColorTypes.join("|"), ")(-inverse)?$"));
var PresetStatusColorRegex = new RegExp("^(".concat(PresetStatusColorTypes.join("|"), ")$"));
var tagProps = {
  prefixCls: PropsTypes.string,
  color: {
    type: String
  },
  closable: PropsTypes.looseBool.def(false),
  closeIcon: PropsTypes.VNodeChild,
  visible: PropsTypes.looseBool,
  onClose: {
    type: Function
  },
  icon: PropsTypes.VNodeChild
};
var Tag = defineComponent({
  name: "ATag",
  props: tagProps,
  emits: ["update:visible", "close"],
  slots: ["closeIcon", "icon"],
  setup: function setup78(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("tag", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var visible9 = ref(true);
    watchEffect(function() {
      if (props2.visible !== void 0) {
        visible9.value = props2.visible;
      }
    });
    var handleCloseClick = function handleCloseClick2(e2) {
      e2.stopPropagation();
      emit("update:visible", false);
      emit("close", e2);
      if (e2.defaultPrevented) {
        return;
      }
      if (props2.visible === void 0) {
        visible9.value = false;
      }
    };
    var isPresetColor2 = computed(function() {
      var color = props2.color;
      if (!color) {
        return false;
      }
      return PresetColorRegex.test(color) || PresetStatusColorRegex.test(color);
    });
    var tagClassName = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-").concat(props2.color), isPresetColor2.value), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-has-color"), props2.color && !isPresetColor2.value), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-hidden"), !visible9.value), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _classNames));
    });
    return function() {
      var _a, _b, _c;
      var _props$icon = props2.icon, icon = _props$icon === void 0 ? (_a = slots.icon) === null || _a === void 0 ? void 0 : _a.call(slots) : _props$icon, color = props2.color, _props$closeIcon = props2.closeIcon, closeIcon = _props$closeIcon === void 0 ? (_b = slots.closeIcon) === null || _b === void 0 ? void 0 : _b.call(slots) : _props$closeIcon, _props$closable = props2.closable, closable = _props$closable === void 0 ? false : _props$closable;
      var renderCloseIcon2 = function renderCloseIcon3() {
        if (closable) {
          return closeIcon ? createVNode("div", {
            "class": "".concat(prefixCls2.value, "-close-icon"),
            "onClick": handleCloseClick
          }, [closeIcon]) : createVNode(CloseOutlined$1, {
            "class": "".concat(prefixCls2.value, "-close-icon"),
            "onClick": handleCloseClick
          }, null);
        }
        return null;
      };
      var tagStyle = {
        backgroundColor: color && !isPresetColor2.value ? color : void 0
      };
      var iconNode = icon || null;
      var children = (_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots);
      var kids = iconNode ? createVNode(Fragment, null, [iconNode, createVNode("span", null, [children])]) : children;
      var isNeedWave = "onClick" in attrs;
      var tagNode = createVNode("span", {
        "class": tagClassName.value,
        "style": tagStyle
      }, [kids, renderCloseIcon2()]);
      return isNeedWave ? createVNode(Wave, null, {
        default: function _default8() {
          return [tagNode];
        }
      }) : tagNode;
    };
  }
});
Tag.CheckableTag = CheckableTag$1;
Tag.install = function(app) {
  app.component(Tag.name, Tag);
  app.component(CheckableTag$1.name, CheckableTag$1);
  return app;
};
var Tag$1 = Tag;
var PickerProps = {
  name: PropsTypes.string,
  transitionName: PropsTypes.string,
  prefixCls: PropsTypes.string,
  inputPrefixCls: PropsTypes.string,
  format: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array, PropsTypes.func]),
  disabled: PropsTypes.looseBool,
  allowClear: PropsTypes.looseBool,
  suffixIcon: PropsTypes.any,
  popupStyle: PropsTypes.object,
  dropdownClassName: PropsTypes.string,
  locale: PropsTypes.any,
  localeCode: PropsTypes.string,
  size: PropsTypes.oneOf(tuple("large", "small", "default")),
  getCalendarContainer: PropsTypes.func,
  open: PropsTypes.looseBool,
  disabledDate: PropsTypes.func,
  showToday: PropsTypes.looseBool,
  dateRender: PropsTypes.any,
  pickerClass: PropsTypes.string,
  pickerInputClass: PropsTypes.string,
  timePicker: PropsTypes.any,
  autofocus: PropsTypes.looseBool,
  tagPrefixCls: PropsTypes.string,
  tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  align: PropsTypes.object.def(function() {
    return {};
  }),
  inputReadOnly: PropsTypes.looseBool,
  valueFormat: PropsTypes.string,
  onOpenChange: PropsTypes.func,
  onFocus: PropsTypes.func,
  onBlur: PropsTypes.func,
  onMouseenter: PropsTypes.func,
  onMouseleave: PropsTypes.func
};
var SinglePickerProps = {
  value: {
    type: [String, Object]
  },
  defaultValue: {
    type: [String, Object]
  },
  defaultPickerValue: {
    type: [String, Object]
  },
  renderExtraFooter: PropsTypes.any,
  placeholder: PropsTypes.string,
  onChange: PropsTypes.func
};
var DatePickerProps = _extends$1(_extends$1(_extends$1({}, PickerProps), SinglePickerProps), {
  showTime: withUndefined(PropsTypes.oneOfType([PropsTypes.object, PropsTypes.looseBool])),
  open: PropsTypes.looseBool,
  disabledTime: PropsTypes.func,
  mode: PropsTypes.oneOf(tuple("time", "date", "month", "year", "decade")),
  onOpenChange: PropsTypes.func,
  onPanelChange: PropsTypes.func,
  onOk: PropsTypes.func
});
var MonthPickerProps = _extends$1(_extends$1(_extends$1({}, PickerProps), SinglePickerProps), {
  placeholder: PropsTypes.string,
  monthCellContentRender: PropsTypes.func
});
var RangePickerProps = _extends$1(_extends$1({}, PickerProps), {
  tagPrefixCls: PropsTypes.string,
  value: {
    type: Array
  },
  defaultValue: {
    type: Array
  },
  defaultPickerValue: {
    type: Array
  },
  timePicker: PropsTypes.any,
  showTime: withUndefined(PropsTypes.oneOfType([PropsTypes.object, PropsTypes.looseBool])),
  ranges: PropsTypes.object,
  placeholder: PropsTypes.arrayOf(String),
  mode: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(String)]),
  separator: PropsTypes.any,
  disabledTime: PropsTypes.func,
  showToday: PropsTypes.looseBool,
  renderExtraFooter: PropsTypes.any,
  onChange: PropsTypes.func,
  onCalendarChange: PropsTypes.func,
  onOk: PropsTypes.func,
  onPanelChange: PropsTypes.func,
  onMouseenter: PropsTypes.func,
  onMouseleave: PropsTypes.func
});
var WeekPickerProps = _extends$1(_extends$1(_extends$1({}, PickerProps), SinglePickerProps), {
  placeholder: PropsTypes.string
});
var InputIcon = function InputIcon2(_2, _ref) {
  var _classNames;
  var attrs = _ref.attrs;
  var _a, _b;
  var suffixIcon = attrs.suffixIcon, prefixCls2 = attrs.prefixCls;
  return (suffixIcon && isValidElement(suffixIcon) ? cloneElement(suffixIcon, {
    class: classNames((_classNames = {}, _defineProperty$U(_classNames, (_a = suffixIcon.props) === null || _a === void 0 ? void 0 : _a.class, (_b = suffixIcon.props) === null || _b === void 0 ? void 0 : _b.class), _defineProperty$U(_classNames, "".concat(prefixCls2, "-picker-icon"), true), _classNames))
  }) : createVNode("span", {
    "class": "".concat(prefixCls2, "-picker-icon")
  }, [suffixIcon])) || createVNode(CalendarOutlined$1, {
    "class": "".concat(prefixCls2, "-picker-icon")
  }, null);
};
InputIcon.inheritAttrs = false;
var InputIcon$1 = InputIcon;
function getShowDateFromValue(value26, mode4) {
  var _value = _slicedToArray$2(value26, 2), start = _value[0], end = _value[1];
  if (!start && !end) {
    return;
  }
  if (mode4 && mode4[0] === "month") {
    return [start, end];
  }
  var newEnd = end && end.isSame(start, "month") ? end.clone().add(1, "month") : end;
  return [start, newEnd];
}
function pickerValueAdapter(value26) {
  if (!value26) {
    return;
  }
  if (Array.isArray(value26)) {
    return value26;
  }
  return [value26, value26.clone().add(1, "month")];
}
function isEmptyArray(arr) {
  if (Array.isArray(arr)) {
    return arr.length === 0 || arr.every(function(i2) {
      return !i2;
    });
  }
  return false;
}
function fixLocale(value26, localeCode) {
  if (!localeCode) {
    return;
  }
  if (!value26 || value26.length === 0) {
    return;
  }
  var _value2 = _slicedToArray$2(value26, 2), start = _value2[0], end = _value2[1];
  if (start) {
    start.locale(localeCode);
  }
  if (end) {
    end.locale(localeCode);
  }
}
var RangePicker = defineComponent({
  name: "ARangePicker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(RangePickerProps, {
    allowClear: true,
    showToday: false,
    separator: "~"
  }),
  setup: function setup79() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      picker: null,
      sTagPrefixCls: void 0,
      sPrefixCls: ""
    };
  },
  data: function data41() {
    var value26 = this.value || this.defaultValue || [];
    var _value3 = _slicedToArray$2(value26, 2), start = _value3[0], end = _value3[1];
    if (start && !interopDefault(hooks).isMoment(start) || end && !interopDefault(hooks).isMoment(end)) {
      throw new Error("The value/defaultValue of RangePicker must be a moment object array after `antd@2.0`, see: https://u.ant.design/date-picker-value");
    }
    var pickerValue = !value26 || isEmptyArray(value26) ? this.defaultPickerValue : value26;
    return {
      sValue: value26,
      sShowDate: pickerValueAdapter(pickerValue || interopDefault(hooks)()),
      sOpen: this.open,
      sHoverValue: []
    };
  },
  watch: {
    value: function value23(val) {
      var value26 = val || [];
      var state2 = {
        sValue: value26
      };
      if (!shallowEqual$1(val, this.sValue)) {
        state2 = _extends$1(_extends$1({}, state2), {
          sShowDate: getShowDateFromValue(value26, this.mode) || this.sShowDate
        });
      }
      this.setState(state2);
    },
    open: function open4(val) {
      var state2 = {
        sOpen: val
      };
      this.setState(state2);
    },
    sOpen: function sOpen(val, oldVal) {
      var _this = this;
      nextTick(function() {
        if (!hasProp(_this, "open") && oldVal && !val) {
          _this.focus();
        }
      });
    }
  },
  methods: {
    setValue: function setValue8(value26, hidePanel) {
      this.handleChange(value26);
      if ((hidePanel || !this.showTime) && !hasProp(this, "open")) {
        this.setState({
          sOpen: false
        });
      }
    },
    savePicker: function savePicker(node) {
      this.picker = node;
    },
    clearSelection: function clearSelection2(e2) {
      e2.preventDefault();
      e2.stopPropagation();
      this.setState({
        sValue: []
      });
      this.handleChange([]);
    },
    clearHoverValue: function clearHoverValue() {
      this.setState({
        sHoverValue: []
      });
    },
    handleChange: function handleChange12(value26) {
      if (!hasProp(this, "value")) {
        this.setState(function(_ref) {
          var sShowDate = _ref.sShowDate;
          return {
            sValue: value26,
            sShowDate: getShowDateFromValue(value26) || sShowDate
          };
        });
      }
      if (value26[0] && value26[1] && value26[0].diff(value26[1]) > 0) {
        value26[1] = void 0;
      }
      var _value4 = _slicedToArray$2(value26, 2), start = _value4[0], end = _value4[1];
      this.$emit("change", value26, [formatDate(start, this.format), formatDate(end, this.format)]);
    },
    handleOpenChange: function handleOpenChange(open6) {
      if (!hasProp(this, "open")) {
        this.setState({
          sOpen: open6
        });
      }
      if (open6 === false) {
        this.clearHoverValue();
      }
      this.$emit("openChange", open6);
    },
    handleShowDateChange: function handleShowDateChange(showDate) {
      this.setState({
        sShowDate: showDate
      });
    },
    handleHoverChange: function handleHoverChange(hoverValue2) {
      this.setState({
        sHoverValue: hoverValue2
      });
    },
    handleRangeMouseLeave: function handleRangeMouseLeave() {
      if (this.sOpen) {
        this.clearHoverValue();
      }
    },
    handleCalendarInputSelect: function handleCalendarInputSelect(value26) {
      var _value5 = _slicedToArray$2(value26, 1), start = _value5[0];
      if (!start) {
        return;
      }
      this.setState(function(_ref2) {
        var sShowDate = _ref2.sShowDate;
        return {
          sValue: value26,
          sShowDate: getShowDateFromValue(value26) || sShowDate
        };
      });
    },
    handleRangeClick: function handleRangeClick(value26) {
      if (typeof value26 === "function") {
        value26 = value26();
      }
      this.setValue(value26, true);
      this.$emit("ok", value26);
      this.$emit("openChange", false);
    },
    onMouseEnter: function onMouseEnter(e2) {
      this.$emit("mouseenter", e2);
    },
    onMouseLeave: function onMouseLeave(e2) {
      this.$emit("mouseleave", e2);
    },
    focus: function focus15() {
      this.picker.focus();
    },
    blur: function blur12() {
      this.picker.blur();
    },
    renderFooter: function renderFooter() {
      var _this2 = this;
      var ranges = this.ranges, $slots = this.$slots;
      var prefixCls2 = this.sPrefixCls, tagPrefixCls = this.sTagPrefixCls;
      var renderExtraFooter = this.renderExtraFooter || $slots.renderExtraFooter;
      if (!ranges && !renderExtraFooter) {
        return null;
      }
      var customFooter = renderExtraFooter ? createVNode("div", {
        "class": "".concat(prefixCls2, "-footer-extra"),
        "key": "extra"
      }, [typeof renderExtraFooter === "function" ? renderExtraFooter() : renderExtraFooter]) : null;
      var operations = ranges && Object.keys(ranges).map(function(range2) {
        var value26 = ranges[range2];
        var hoverValue2 = typeof value26 === "function" ? value26.call(_this2) : value26;
        return createVNode(Tag$1, {
          "key": range2,
          "prefixCls": tagPrefixCls,
          "color": "blue",
          "onClick": function onClick7() {
            return _this2.handleRangeClick(value26);
          },
          "onMouseenter": function onMouseenter2() {
            return _this2.setState({
              sHoverValue: hoverValue2
            });
          },
          "onMouseleave": _this2.handleRangeMouseLeave
        }, {
          default: function _default8() {
            return [range2];
          }
        });
      });
      var rangeNode = operations && operations.length > 0 ? createVNode("div", {
        "class": "".concat(prefixCls2, "-footer-extra ").concat(prefixCls2, "-range-quick-selector"),
        "key": "range"
      }, [operations]) : null;
      return [rangeNode, customFooter];
    }
  },
  render: function render84() {
    var _classNames, _this3 = this;
    var props2 = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs);
    var suffixIcon = getComponent(this, "suffixIcon");
    suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
    var value26 = this.sValue, showDate = this.sShowDate, hoverValue2 = this.sHoverValue, open6 = this.sOpen, $slots = this.$slots;
    var customizePrefixCls = props2.prefixCls, customizeTagPrefixCls = props2.tagPrefixCls, popupStyle = props2.popupStyle, disabledDate = props2.disabledDate, disabledTime = props2.disabledTime, showTime = props2.showTime, showToday = props2.showToday, ranges = props2.ranges, locale2 = props2.locale, localeCode = props2.localeCode, format3 = props2.format, separator = props2.separator, inputReadOnly = props2.inputReadOnly, style3 = props2.style, onCalendarChange = props2.onCalendarChange, onOk3 = props2.onOk, onBlur7 = props2.onBlur, onFocus6 = props2.onFocus, onPanelChange3 = props2.onPanelChange;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("calendar", customizePrefixCls);
    var tagPrefixCls = getPrefixCls2("tag", customizeTagPrefixCls);
    this.sPrefixCls = prefixCls2;
    this.sTagPrefixCls = tagPrefixCls;
    var dateRender = props2.dateRender || $slots.dateRender;
    fixLocale(value26, localeCode);
    fixLocale(showDate, localeCode);
    var calendarClassName = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-time"), showTime), _defineProperty$U(_classNames, "".concat(prefixCls2, "-range-with-ranges"), ranges), _classNames));
    var pickerChangeHandler = {
      onChange: this.handleChange
    };
    var calendarProps = {
      onOk: this.handleChange
    };
    if (props2.timePicker) {
      pickerChangeHandler.onChange = function(changedValue) {
        return _this3.handleChange(changedValue);
      };
    } else {
      calendarProps = {};
    }
    if ("mode" in props2) {
      calendarProps.mode = props2.mode;
    }
    var startPlaceholder = Array.isArray(props2.placeholder) ? props2.placeholder[0] : locale2.lang.rangePlaceholder[0];
    var endPlaceholder = Array.isArray(props2.placeholder) ? props2.placeholder[1] : locale2.lang.rangePlaceholder[1];
    var rangeCalendarProps = _extends$1(_extends$1({}, calendarProps), {
      separator,
      format: format3,
      prefixCls: prefixCls2,
      renderFooter: this.renderFooter,
      timePicker: props2.timePicker,
      disabledDate,
      disabledTime,
      dateInputPlaceholder: [startPlaceholder, endPlaceholder],
      locale: locale2.lang,
      dateRender,
      value: showDate,
      hoverValue: hoverValue2,
      showToday,
      inputReadOnly,
      onChange: onCalendarChange,
      onOk: onOk3,
      onValueChange: this.handleShowDateChange,
      onHoverChange: this.handleHoverChange,
      onPanelChange: onPanelChange3,
      onInputSelect: this.handleCalendarInputSelect,
      class: calendarClassName
    });
    var calendar2 = createVNode(RangeCalendar$1, rangeCalendarProps, $slots);
    var pickerStyle = {};
    if (props2.showTime) {
      pickerStyle.width = "350px";
    }
    var _value6 = _slicedToArray$2(value26, 2), startValue = _value6[0], endValue = _value6[1];
    var clearIcon = !props2.disabled && props2.allowClear && value26 && (startValue || endValue) ? createVNode(CloseCircleFilled$1, {
      "class": "".concat(prefixCls2, "-picker-clear"),
      "onClick": this.clearSelection
    }, null) : null;
    var inputIcon = createVNode(InputIcon$1, {
      "suffixIcon": suffixIcon,
      "prefixCls": prefixCls2
    }, null);
    var input = function input2(_ref3) {
      var inputValue = _ref3.value;
      var _inputValue = _slicedToArray$2(inputValue, 2), start = _inputValue[0], end = _inputValue[1];
      return createVNode("span", {
        "class": props2.pickerInputClass
      }, [createVNode("input", {
        "disabled": props2.disabled,
        "readonly": true,
        "value": formatDate(start, props2.format),
        "placeholder": startPlaceholder,
        "class": "".concat(prefixCls2, "-range-picker-input"),
        "tabindex": -1
      }, null), createVNode("span", {
        "class": "".concat(prefixCls2, "-range-picker-separator")
      }, [createTextVNode(" "), separator, createTextVNode(" ")]), createVNode("input", {
        "disabled": props2.disabled,
        "readonly": true,
        "value": formatDate(end, props2.format),
        "placeholder": endPlaceholder,
        "class": "".concat(prefixCls2, "-range-picker-input"),
        "tabindex": -1
      }, null), clearIcon, inputIcon]);
    };
    var vcDatePickerProps = _extends$1(_extends$1(_extends$1({}, props2), pickerChangeHandler), {
      calendar: calendar2,
      value: value26,
      open: open6,
      prefixCls: "".concat(prefixCls2, "-picker-container"),
      onOpenChange: this.handleOpenChange,
      style: popupStyle
    });
    return createVNode("span", _objectSpread2$2({
      "ref": this.savePicker,
      "id": props2.id,
      "class": classNames(props2.class, props2.pickerClass),
      "style": _extends$1(_extends$1({}, pickerStyle), style3),
      "tabindex": props2.disabled ? -1 : 0,
      "onFocus": onFocus6,
      "onBlur": onBlur7,
      "onMouseenter": this.onMouseEnter,
      "onMouseleave": this.onMouseLeave
    }, getDataAndAriaProps$1(props2)), [createVNode(VcDatePicker, vcDatePickerProps, _extends$1({
      default: input
    }, $slots))]);
  }
});
function formatValue(value26, format3) {
  return value26 && value26.format(format3) || "";
}
function noop$h() {
}
var WeekPicker = defineComponent({
  name: "AWeekPicker",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(WeekPickerProps, {
    allowClear: true
  }),
  setup: function setup80() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      prevState: {},
      input: void 0,
      sPrefixCls: void 0
    };
  },
  data: function data42() {
    var value26 = this.value || this.defaultValue;
    if (value26 && !interopDefault(hooks).isMoment(value26)) {
      throw new Error("The value/defaultValue of WeekPicker or MonthPicker must be a moment object");
    }
    return {
      _value: value26,
      _open: this.open
    };
  },
  watch: {
    value: function value24(val) {
      var state2 = {
        _value: val
      };
      this.setState(state2);
      this.prevState = _extends$1(_extends$1({}, this.$data), state2);
    },
    open: function open5(val) {
      var state2 = {
        _open: val
      };
      this.setState(state2);
      this.prevState = _extends$1(_extends$1({}, this.$data), state2);
    },
    _open: function _open(val, oldVal) {
      var _this = this;
      nextTick(function() {
        if (!hasProp(_this, "open") && oldVal && !val) {
          _this.focus();
        }
      });
    }
  },
  mounted: function mounted21() {
    this.prevState = _extends$1({}, this.$data);
  },
  updated: function updated10() {
    var _this2 = this;
    nextTick(function() {
      if (!hasProp(_this2, "open") && _this2.prevState._open && !_this2._open) {
        _this2.focus();
      }
    });
  },
  methods: {
    saveInput: function saveInput5(node) {
      this.input = node;
    },
    weekDateRender: function weekDateRender(_ref) {
      var current2 = _ref.current;
      var selectedValue6 = this.$data._value;
      var prefixCls2 = this.sPrefixCls, $slots = this.$slots;
      var dateRender = this.dateRender || $slots.dateRender;
      var dateNode = dateRender ? dateRender({
        current: current2
      }) : current2.date();
      if (selectedValue6 && current2.year() === selectedValue6.year() && current2.week() === selectedValue6.week()) {
        return createVNode("div", {
          "class": "".concat(prefixCls2, "-selected-day")
        }, [createVNode("div", {
          "class": "".concat(prefixCls2, "-date")
        }, [dateNode])]);
      }
      return createVNode("div", {
        "class": "".concat(prefixCls2, "-date")
      }, [dateNode]);
    },
    handleChange: function handleChange13(value26) {
      if (!hasProp(this, "value")) {
        this.setState({
          _value: value26
        });
      }
      this.$emit("change", value26, formatValue(value26, this.format));
    },
    handleOpenChange: function handleOpenChange2(open6) {
      if (!hasProp(this, "open")) {
        this.setState({
          _open: open6
        });
      }
      this.$emit("openChange", open6);
    },
    clearSelection: function clearSelection3(e2) {
      e2.preventDefault();
      e2.stopPropagation();
      this.handleChange(null);
    },
    focus: function focus16() {
      this.input.focus();
    },
    blur: function blur13() {
      this.input.blur();
    },
    renderFooter: function renderFooter2() {
      var prefixCls2 = this.sPrefixCls, $slots = this.$slots;
      var renderExtraFooter = this.renderExtraFooter || $slots.renderExtraFooter;
      return renderExtraFooter ? createVNode("div", {
        "class": "".concat(prefixCls2, "-footer-extra")
      }, [renderExtraFooter.apply(void 0, arguments)]) : null;
    }
  },
  render: function render85() {
    var _this3 = this;
    var props2 = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs);
    var suffixIcon = getComponent(this, "suffixIcon");
    suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
    var customizePrefixCls = this.prefixCls, disabled = this.disabled, pickerClass = this.pickerClass, popupStyle = this.popupStyle, pickerInputClass = this.pickerInputClass, format3 = this.format, allowClear = this.allowClear, locale2 = this.locale, localeCode = this.localeCode, disabledDate = this.disabledDate, defaultPickerValue = this.defaultPickerValue, $data = this.$data, $slots = this.$slots;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("calendar", customizePrefixCls);
    this.sPrefixCls = prefixCls2;
    var pickerValue = $data._value, open6 = $data._open;
    var className = props2.class, style3 = props2.style, id2 = props2.id, _props$onFocus = props2.onFocus, onFocus6 = _props$onFocus === void 0 ? noop$h : _props$onFocus, _props$onBlur = props2.onBlur, onBlur7 = _props$onBlur === void 0 ? noop$h : _props$onBlur;
    if (pickerValue && localeCode) {
      pickerValue.locale(localeCode);
    }
    var placeholder = hasProp(this, "placeholder") ? this.placeholder : locale2.lang.placeholder;
    var weekDateRender2 = this.dateRender || $slots.dateRender || this.weekDateRender;
    var calendar2 = createVNode(Calendar$1, {
      "showWeekNumber": true,
      "dateRender": weekDateRender2,
      "prefixCls": prefixCls2,
      "format": format3,
      "locale": locale2.lang,
      "showDateInput": false,
      "showToday": false,
      "disabledDate": disabledDate,
      "renderFooter": this.renderFooter,
      "defaultValue": defaultPickerValue
    }, null);
    var clearIcon = !disabled && allowClear && $data._value ? createVNode(CloseCircleFilled$1, {
      "class": "".concat(prefixCls2, "-picker-clear"),
      "onClick": this.clearSelection
    }, null) : null;
    var inputIcon = createVNode(InputIcon$1, {
      "suffixIcon": suffixIcon,
      "prefixCls": prefixCls2
    }, null);
    var input = function input2(_ref2) {
      var value26 = _ref2.value;
      return createVNode("span", {
        "style": {
          display: "inline-block",
          width: "100%"
        }
      }, [createVNode("input", {
        "ref": _this3.saveInput,
        "disabled": disabled,
        "readonly": true,
        "value": value26 && value26.format(format3) || "",
        "placeholder": placeholder,
        "class": pickerInputClass,
        "onFocus": onFocus6,
        "onBlur": onBlur7
      }, null), clearIcon, inputIcon]);
    };
    var vcDatePickerProps = _extends$1(_extends$1({}, props2), {
      calendar: calendar2,
      prefixCls: "".concat(prefixCls2, "-picker-container"),
      value: pickerValue,
      open: open6,
      onChange: this.handleChange,
      onOpenChange: this.handleOpenChange,
      style: popupStyle
    });
    return createVNode("span", _objectSpread2$2({
      "class": classNames(className, pickerClass),
      "style": style3,
      "id": id2
    }, getDataAndAriaProps$1(props2)), [createVNode(VcDatePicker, vcDatePickerProps, _extends$1({
      default: input
    }, $slots))]);
  }
});
var WrappedRangePicker = wrapPicker(RangePicker, RangePickerProps, "date");
var WrappedWeekPicker = wrapPicker(WeekPicker, WeekPickerProps, "week");
var DatePicker = wrapPicker(createPicker(Calendar$1, DatePickerProps, "ADatePicker"), DatePickerProps, "date");
var MonthPicker = wrapPicker(createPicker(MonthCalendar$1, MonthPickerProps, "AMonthPicker"), MonthPickerProps, "month");
_extends$1(DatePicker, {
  RangePicker: WrappedRangePicker,
  MonthPicker,
  WeekPicker: WrappedWeekPicker
});
DatePicker.install = function(app) {
  app.component(DatePicker.name, DatePicker);
  app.component(DatePicker.RangePicker.name, DatePicker.RangePicker);
  app.component(DatePicker.MonthPicker.name, DatePicker.MonthPicker);
  app.component(DatePicker.WeekPicker.name, DatePicker.WeekPicker);
  return app;
};
var DatePicker$1 = DatePicker;
function notEmpty(val) {
  return val !== void 0 && val !== null;
}
var Cell = function Cell2(props2) {
  var itemPrefixCls = props2.itemPrefixCls, component = props2.component, span = props2.span, labelStyle = props2.labelStyle, contentStyle = props2.contentStyle, bordered = props2.bordered, label = props2.label, content = props2.content, colon = props2.colon;
  var Component = component;
  if (bordered) {
    var _ref;
    return createVNode(Component, {
      "class": [(_ref = {}, _defineProperty$U(_ref, "".concat(itemPrefixCls, "-item-label"), notEmpty(label)), _defineProperty$U(_ref, "".concat(itemPrefixCls, "-item-content"), notEmpty(content)), _ref)],
      "colSpan": span
    }, {
      default: function _default8() {
        return [notEmpty(label) && createVNode("span", {
          "style": labelStyle
        }, [label]), notEmpty(content) && createVNode("span", {
          "style": contentStyle
        }, [content])];
      }
    });
  }
  return createVNode(Component, {
    "class": ["".concat(itemPrefixCls, "-item")],
    "colSpan": span
  }, {
    default: function _default8() {
      return [createVNode("div", {
        "class": "".concat(itemPrefixCls, "-item-container")
      }, [label && createVNode("span", {
        "class": ["".concat(itemPrefixCls, "-item-label"), _defineProperty$U({}, "".concat(itemPrefixCls, "-item-no-colon"), !colon)],
        "style": labelStyle
      }, [label]), content && createVNode("span", {
        "class": "".concat(itemPrefixCls, "-item-content"),
        "style": contentStyle
      }, [content])])];
    }
  });
};
var Cell$1 = Cell;
var Row = function Row2(props2) {
  var renderCells = function renderCells2(items, _ref, _ref2) {
    var colon = _ref.colon, prefixCls3 = _ref.prefixCls, bordered2 = _ref.bordered;
    var component = _ref2.component, type3 = _ref2.type, showLabel = _ref2.showLabel, showContent = _ref2.showContent, rootLabelStyle = _ref2.labelStyle, rootContentStyle = _ref2.contentStyle;
    return items.map(function(item, index3) {
      var _a, _b;
      var _ref3 = item.props || {}, _ref3$prefixCls = _ref3.prefixCls, itemPrefixCls = _ref3$prefixCls === void 0 ? prefixCls3 : _ref3$prefixCls, _ref3$span = _ref3.span, span = _ref3$span === void 0 ? 1 : _ref3$span, labelStyle2 = _ref3.labelStyle, contentStyle2 = _ref3.contentStyle, _ref3$label = _ref3.label, label = _ref3$label === void 0 ? (_b = (_a = item.children) === null || _a === void 0 ? void 0 : _a.label) === null || _b === void 0 ? void 0 : _b.call(_a) : _ref3$label;
      var children = getSlot(item);
      var className = getClass(item);
      var style3 = getStyle$1(item);
      var key2 = item.key;
      if (typeof component === "string") {
        return createVNode(Cell$1, {
          "key": "".concat(type3, "-").concat(String(key2) || index3),
          "class": className,
          "style": style3,
          "labelStyle": _extends$1(_extends$1({}, rootLabelStyle.value), labelStyle2),
          "contentStyle": _extends$1(_extends$1({}, rootContentStyle.value), contentStyle2),
          "span": span,
          "colon": colon,
          "component": component,
          "itemPrefixCls": itemPrefixCls,
          "bordered": bordered2,
          "label": showLabel ? label : null,
          "content": showContent ? children : null
        }, null);
      }
      return [createVNode(Cell$1, {
        "key": "label-".concat(String(key2) || index3),
        "class": className,
        "style": _extends$1(_extends$1(_extends$1({}, rootLabelStyle.value), style3), labelStyle2),
        "span": 1,
        "colon": colon,
        "component": component[0],
        "itemPrefixCls": itemPrefixCls,
        "bordered": bordered2,
        "label": label
      }, null), createVNode(Cell$1, {
        "key": "content-".concat(String(key2) || index3),
        "class": className,
        "style": _extends$1(_extends$1(_extends$1({}, rootContentStyle.value), style3), contentStyle2),
        "span": span * 2 - 1,
        "component": component[1],
        "itemPrefixCls": itemPrefixCls,
        "bordered": bordered2,
        "content": children
      }, null)];
    });
  };
  var prefixCls2 = props2.prefixCls, vertical = props2.vertical, row = props2.row, index2 = props2.index, bordered = props2.bordered;
  var _inject = inject(descriptionsContext, {
    labelStyle: ref({}),
    contentStyle: ref({})
  }), labelStyle = _inject.labelStyle, contentStyle = _inject.contentStyle;
  if (vertical) {
    return createVNode(Fragment, null, [createVNode("tr", {
      "key": "label-".concat(index2),
      "class": "".concat(prefixCls2, "-row")
    }, [renderCells(row, props2, {
      component: "th",
      type: "label",
      showLabel: true,
      labelStyle,
      contentStyle
    })]), createVNode("tr", {
      "key": "content-".concat(index2),
      "class": "".concat(prefixCls2, "-row")
    }, [renderCells(row, props2, {
      component: "td",
      type: "content",
      showContent: true,
      labelStyle,
      contentStyle
    })])]);
  }
  return createVNode("tr", {
    "key": index2,
    "class": "".concat(prefixCls2, "-row")
  }, [renderCells(row, props2, {
    component: bordered ? ["th", "td"] : "td",
    type: "item",
    showLabel: true,
    showContent: true,
    labelStyle,
    contentStyle
  })]);
};
var Row$1 = Row;
({
  prefixCls: PropsTypes.string,
  label: PropsTypes.any,
  span: PropsTypes.number
});
var descriptionsItemProp = {
  prefixCls: PropsTypes.string,
  label: PropsTypes.VNodeChild,
  labelStyle: PropsTypes.style,
  contentStyle: PropsTypes.style,
  span: PropsTypes.number.def(1)
};
var DescriptionsItem = defineComponent({
  name: "ADescriptionsItem",
  props: descriptionsItemProp,
  slots: ["label"],
  setup: function setup81(_2, _ref) {
    var slots = _ref.slots;
    return function() {
      var _a;
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
var DEFAULT_COLUMN_MAP = {
  xxl: 3,
  xl: 3,
  lg: 3,
  md: 3,
  sm: 2,
  xs: 1
};
function getColumn(column, screens2) {
  if (typeof column === "number") {
    return column;
  }
  if (_typeof$2(column) === "object") {
    for (var i2 = 0; i2 < responsiveArray.length; i2++) {
      var breakpoint = responsiveArray[i2];
      if (screens2[breakpoint] && column[breakpoint] !== void 0) {
        return column[breakpoint] || DEFAULT_COLUMN_MAP[breakpoint];
      }
    }
  }
  return 3;
}
function getFilledItem(node, span, rowRestCol) {
  var clone4 = node;
  if (span === void 0 || span > rowRestCol) {
    clone4 = cloneElement(node, {
      span: rowRestCol
    });
    warning$4(span === void 0, "Descriptions", "Sum of column `span` in a line not match `column` of Descriptions.");
  }
  return clone4;
}
function getRows(children, column) {
  var childNodes = flattenChildren(children);
  var rows = [];
  var tmpRow = [];
  var rowRestCol = column;
  childNodes.forEach(function(node, index2) {
    var _a;
    var span = (_a = node.props) === null || _a === void 0 ? void 0 : _a.span;
    var mergedSpan = span || 1;
    if (index2 === childNodes.length - 1) {
      tmpRow.push(getFilledItem(node, span, rowRestCol));
      rows.push(tmpRow);
      return;
    }
    if (mergedSpan < rowRestCol) {
      rowRestCol -= mergedSpan;
      tmpRow.push(node);
    } else {
      tmpRow.push(getFilledItem(node, mergedSpan, rowRestCol));
      rows.push(tmpRow);
      rowRestCol = column;
      tmpRow = [];
    }
  });
  return rows;
}
var descriptionsProps = {
  prefixCls: PropsTypes.string,
  bordered: PropsTypes.looseBool,
  size: PropsTypes.oneOf(tuple("default", "middle", "small")).def("default"),
  title: PropsTypes.VNodeChild,
  extra: PropsTypes.VNodeChild,
  column: {
    type: [Number, Object],
    default: function _default6() {
      return DEFAULT_COLUMN_MAP;
    }
  },
  layout: PropsTypes.oneOf(tuple("horizontal", "vertical")),
  colon: PropsTypes.looseBool,
  labelStyle: PropsTypes.style,
  contentStyle: PropsTypes.style
};
var descriptionsContext = Symbol("descriptionsContext");
var Descriptions = defineComponent({
  name: "ADescriptions",
  props: descriptionsProps,
  slots: ["title", "extra"],
  Item: DescriptionsItem,
  setup: function setup82(props2, _ref2) {
    var slots = _ref2.slots;
    var _useConfigInject = useConfigInject("descriptions", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var token2;
    var screens2 = ref({});
    onMounted(function() {
      token2 = ResponsiveObserve.subscribe(function(screen) {
        if (_typeof$2(props2.column) !== "object") {
          return;
        }
        screens2.value = screen;
      });
    });
    onBeforeUnmount(function() {
      ResponsiveObserve.unsubscribe(token2);
    });
    provide(descriptionsContext, {
      labelStyle: toRef(props2, "labelStyle"),
      contentStyle: toRef(props2, "contentStyle")
    });
    var mergeColumn = computed(function() {
      return getColumn(props2.column, screens2.value);
    });
    return function() {
      var _ref3;
      var _a, _b, _c;
      var size2 = props2.size, _props$bordered = props2.bordered, bordered = _props$bordered === void 0 ? false : _props$bordered, _props$layout = props2.layout, layout = _props$layout === void 0 ? "horizontal" : _props$layout, _props$colon = props2.colon, colon = _props$colon === void 0 ? true : _props$colon, _props$title = props2.title, title2 = _props$title === void 0 ? (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots) : _props$title, _props$extra = props2.extra, extra = _props$extra === void 0 ? (_b = slots.extra) === null || _b === void 0 ? void 0 : _b.call(slots) : _props$extra;
      var children = (_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots);
      var rows = getRows(children, mergeColumn.value);
      return createVNode("div", {
        "class": [prefixCls2.value, (_ref3 = {}, _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-").concat(size2), size2 !== "default"), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-bordered"), !!bordered), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _ref3)]
      }, [(title2 || extra) && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-header")
      }, [title2 && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-title")
      }, [title2]), extra && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-extra")
      }, [extra])]), createVNode("div", {
        "class": "".concat(prefixCls2.value, "-view")
      }, [createVNode("table", null, [createVNode("tbody", null, [rows.map(function(row, index2) {
        return createVNode(Row$1, {
          "key": index2,
          "index": index2,
          "colon": colon,
          "prefixCls": prefixCls2.value,
          "vertical": layout === "vertical",
          "bordered": bordered,
          "row": row
        }, null);
      })])])])]);
    };
  }
});
Descriptions.install = function(app) {
  app.component(Descriptions.name, Descriptions);
  app.component(Descriptions.Item.name, Descriptions.Item);
  return app;
};
var __unplugin_components_3$1 = Descriptions;
var dividerProps = {
  prefixCls: String,
  type: {
    type: String,
    default: "horizontal"
  },
  dashed: {
    type: Boolean,
    default: false
  },
  orientation: {
    type: String,
    default: "center"
  },
  plain: {
    type: Boolean,
    default: false
  }
};
var Divider = defineComponent({
  name: "ADivider",
  props: dividerProps,
  setup: function setup83(props2, _ref) {
    var slots = _ref.slots;
    var configProvider = inject("configProvider", defaultConfigProvider);
    var prefixClsRef = computed(function() {
      return configProvider.getPrefixCls("divider", props2.prefixCls);
    });
    var classString = computed(function() {
      var _ref2;
      var type3 = props2.type, dashed = props2.dashed, plain = props2.plain;
      var prefixCls2 = prefixClsRef.value;
      return _ref2 = {}, _defineProperty$U(_ref2, prefixCls2, true), _defineProperty$U(_ref2, "".concat(prefixCls2, "-").concat(type3), true), _defineProperty$U(_ref2, "".concat(prefixCls2, "-dashed"), !!dashed), _defineProperty$U(_ref2, "".concat(prefixCls2, "-plain"), !!plain), _defineProperty$U(_ref2, "".concat(prefixCls2, "-rtl"), configProvider.direction === "rtl"), _ref2;
    });
    var orientationPrefix = computed(function() {
      return props2.orientation.length > 0 ? "-" + props2.orientation : props2.orientation;
    });
    return function() {
      var _a;
      var children = flattenChildren((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      return createVNode("div", {
        "class": [classString.value, children.length ? "".concat(prefixClsRef.value, "-with-text ").concat(prefixClsRef.value, "-with-text").concat(orientationPrefix.value) : ""],
        "role": "separator"
      }, [children.length ? createVNode("span", {
        "class": "".concat(prefixClsRef.value, "-inner-text")
      }, [children]) : null]);
    };
  }
});
var index$t = withInstall(Divider);
Dropdown$1.Button = DropdownButton;
Dropdown$1.install = function(app) {
  app.component(Dropdown$1.name, Dropdown$1);
  app.component(DropdownButton.name, DropdownButton);
  return app;
};
var cached;
function getScrollBarSize(fresh) {
  if (fresh || cached === void 0) {
    var inner = document.createElement("div");
    inner.style.width = "100%";
    inner.style.height = "200px";
    var outer = document.createElement("div");
    var outerStyle = outer.style;
    outerStyle.position = "absolute";
    outerStyle.top = 0;
    outerStyle.left = 0;
    outerStyle.pointerEvents = "none";
    outerStyle.visibility = "hidden";
    outerStyle.width = "200px";
    outerStyle.height = "150px";
    outerStyle.overflow = "hidden";
    outer.appendChild(inner);
    document.body.appendChild(outer);
    var widthContained = inner.offsetWidth;
    outer.style.overflow = "scroll";
    var widthScroll = inner.offsetWidth;
    if (widthContained === widthScroll) {
      widthScroll = outer.clientWidth;
    }
    document.body.removeChild(outer);
    cached = widthContained - widthScroll;
  }
  return cached;
}
var IProps = {
  width: PropsTypes.any,
  height: PropsTypes.any,
  defaultOpen: PropsTypes.looseBool,
  firstEnter: PropsTypes.looseBool,
  open: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  placement: PropsTypes.string,
  level: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array]),
  levelMove: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.func, PropsTypes.array]),
  ease: PropsTypes.string,
  duration: PropsTypes.string,
  handler: PropsTypes.any,
  showMask: PropsTypes.looseBool,
  maskStyle: PropsTypes.object,
  className: PropsTypes.string,
  wrapStyle: PropsTypes.object,
  maskClosable: PropsTypes.looseBool,
  afterVisibleChange: PropsTypes.func,
  keyboard: PropsTypes.looseBool
};
var IDrawerProps = _extends$1(_extends$1({}, IProps), {
  wrapperClassName: PropsTypes.string,
  forceRender: PropsTypes.looseBool,
  getContainer: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func, PropsTypes.object, PropsTypes.looseBool])
});
_extends$1(_extends$1({}, IProps), {
  getContainer: PropsTypes.func,
  getOpenCount: PropsTypes.func,
  switchScrollingEffect: PropsTypes.func
});
function dataToArray(vars) {
  if (Array.isArray(vars)) {
    return vars;
  }
  return [vars];
}
var transitionEndObject = {
  transition: "transitionend",
  WebkitTransition: "webkitTransitionEnd",
  MozTransition: "transitionend",
  OTransition: "oTransitionEnd otransitionend"
};
var transitionStr = Object.keys(transitionEndObject).filter(function(key2) {
  if (typeof document === "undefined") {
    return false;
  }
  var html = document.getElementsByTagName("html")[0];
  return key2 in (html ? html.style : {});
})[0];
var transitionEnd = transitionEndObject[transitionStr];
function addEventListener(target, eventType, callback, options2) {
  if (target.addEventListener) {
    target.addEventListener(eventType, callback, options2);
  } else if (target.attachEvent) {
    target.attachEvent("on".concat(eventType), callback);
  }
}
function removeEventListener(target, eventType, callback, options2) {
  if (target.removeEventListener) {
    target.removeEventListener(eventType, callback, options2);
  } else if (target.attachEvent) {
    target.detachEvent("on".concat(eventType), callback);
  }
}
function transformArguments(arg, cb) {
  var result;
  if (typeof arg === "function") {
    result = arg(cb);
  } else {
    result = arg;
  }
  if (Array.isArray(result)) {
    if (result.length === 2) {
      return result;
    }
    return [result[0], result[1]];
  }
  return [result];
}
var isNumeric = function isNumeric3(value26) {
  return !isNaN(parseFloat(value26)) && isFinite(value26);
};
var __rest$t = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$g() {
}
var currentDrawer = {};
var windowIsUndefined$1 = !(typeof window !== "undefined" && window.document && window.document.createElement);
var Drawer$1 = defineComponent({
  name: "Drawer",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(IDrawerProps, {
    prefixCls: "drawer",
    placement: "left",
    getContainer: "body",
    level: "all",
    duration: ".3s",
    ease: "cubic-bezier(0.78, 0.14, 0.15, 0.86)",
    firstEnter: false,
    showMask: true,
    handler: true,
    maskStyle: {},
    wrapperClassName: ""
  }),
  data: function data43() {
    this.levelDom = [];
    this.contentDom = null;
    this.maskDom = null;
    this.handlerdom = null;
    this.mousePos = null;
    this.sFirstEnter = this.firstEnter;
    this.timeout = null;
    this.children = null;
    this.dom = null;
    this.drawerId = Number((Date.now() + Math.random()).toString().replace(".", Math.round(Math.random() * 9))).toString(16);
    var open6 = this.open !== void 0 ? this.open : !!this.defaultOpen;
    currentDrawer[this.drawerId] = open6;
    this.orignalOpen = this.open;
    this.preProps = _extends$1({}, this.$props);
    return {
      sOpen: open6,
      isOpenChange: void 0,
      passive: void 0,
      container: void 0
    };
  },
  watch: {
    open: function(_open3) {
      function open6(_x) {
        return _open3.apply(this, arguments);
      }
      open6.toString = function() {
        return _open3.toString();
      };
      return open6;
    }(function(val) {
      var _this = this;
      if (val !== void 0 && val !== this.preProps.open) {
        this.isOpenChange = true;
        if (!this.container) {
          this.getDefault(this.$props);
        }
        this.setState({
          sOpen: open
        });
      }
      this.preProps.open = val;
      if (val) {
        setTimeout(function() {
          _this.domFocus();
        });
      }
    }),
    placement: function placement(val) {
      if (val !== this.preProps.placement) {
        this.contentDom = null;
      }
      this.preProps.placement = val;
    },
    level: function level(val) {
      if (this.preProps.level !== val) {
        this.getParentAndLevelDom(this.$props);
      }
      this.preProps.level = val;
    }
  },
  mounted: function mounted22() {
    var _this2 = this;
    nextTick(function() {
      if (!windowIsUndefined$1) {
        _this2.passive = supportsPassive$1 ? {
          passive: false
        } : false;
      }
      var open6 = _this2.getOpen();
      if (_this2.handler || open6 || _this2.sFirstEnter) {
        _this2.getDefault(_this2.$props);
        if (open6) {
          _this2.isOpenChange = true;
          nextTick(function() {
            _this2.domFocus();
          });
        }
        _this2.$forceUpdate();
      }
    });
  },
  updated: function updated11() {
    var _this3 = this;
    nextTick(function() {
      if (!_this3.sFirstEnter && _this3.container) {
        _this3.$forceUpdate();
        _this3.sFirstEnter = true;
      }
    });
  },
  beforeUnmount: function beforeUnmount14() {
    delete currentDrawer[this.drawerId];
    delete this.isOpenChange;
    if (this.container) {
      if (this.sOpen) {
        this.setLevelDomTransform(false, true);
      }
      document.body.style.overflow = "";
    }
    this.sFirstEnter = false;
    clearTimeout(this.timeout);
  },
  methods: {
    domFocus: function domFocus() {
      if (this.dom) {
        this.dom.focus();
      }
    },
    onKeyDown: function onKeyDown10(e2) {
      if (e2.keyCode === KeyCode$2.ESC) {
        e2.stopPropagation();
        this.__emit("close", e2);
      }
    },
    onMaskTouchEnd: function onMaskTouchEnd(e2) {
      this.__emit("close", e2);
      this.onTouchEnd(e2, true);
    },
    onIconTouchEnd: function onIconTouchEnd(e2) {
      this.__emit("handleClick", e2);
      this.onTouchEnd(e2);
    },
    onTouchEnd: function onTouchEnd(e2, close7) {
      if (this.open !== void 0) {
        return;
      }
      var open6 = close7 || this.sOpen;
      this.isOpenChange = true;
      this.setState({
        sOpen: !open6
      });
    },
    onWrapperTransitionEnd: function onWrapperTransitionEnd(e2) {
      if (e2.target === this.contentWrapper && e2.propertyName.match(/transform$/)) {
        var _open22 = this.getOpen();
        this.dom.style.transition = "";
        if (!_open22 && this.getCurrentDrawerSome()) {
          document.body.style.overflowX = "";
          if (this.maskDom) {
            this.maskDom.style.left = "";
            this.maskDom.style.width = "";
          }
        }
        if (this.afterVisibleChange) {
          this.afterVisibleChange(!!_open22);
        }
      }
    },
    getDefault: function getDefault(props2) {
      this.getParentAndLevelDom(props2);
      if (props2.getContainer || props2.parent) {
        this.container = this.defaultGetContainer();
      }
    },
    getCurrentDrawerSome: function getCurrentDrawerSome() {
      return !Object.keys(currentDrawer).some(function(key2) {
        return currentDrawer[key2];
      });
    },
    getSelfContainer: function getSelfContainer() {
      return this.container;
    },
    getParentAndLevelDom: function getParentAndLevelDom(props2) {
      var _this4 = this;
      if (windowIsUndefined$1) {
        return;
      }
      var level2 = props2.level, getContainer5 = props2.getContainer;
      this.levelDom = [];
      if (getContainer5) {
        if (typeof getContainer5 === "string") {
          var dom = document.querySelectorAll(getContainer5)[0];
          this.parent = dom;
        }
        if (typeof getContainer5 === "function") {
          this.parent = getContainer5();
        }
        if (_typeof$2(getContainer5) === "object" && getContainer5 instanceof window.HTMLElement) {
          this.parent = getContainer5;
        }
      }
      if (!getContainer5 && this.container) {
        this.parent = this.container.parentNode;
      }
      if (level2 === "all") {
        var children = Array.prototype.slice.call(this.parent.children);
        children.forEach(function(child) {
          if (child.nodeName !== "SCRIPT" && child.nodeName !== "STYLE" && child.nodeName !== "LINK" && child !== _this4.container) {
            _this4.levelDom.push(child);
          }
        });
      } else if (level2) {
        dataToArray(level2).forEach(function(key2) {
          document.querySelectorAll(key2).forEach(function(item) {
            _this4.levelDom.push(item);
          });
        });
      }
    },
    setLevelDomTransform: function setLevelDomTransform(open6, openTransition, placementName, value26) {
      var _this5 = this;
      var _this$$props = this.$props, placement2 = _this$$props.placement, levelMove = _this$$props.levelMove, duration2 = _this$$props.duration, ease = _this$$props.ease, getContainer5 = _this$$props.getContainer;
      if (!windowIsUndefined$1) {
        this.levelDom.forEach(function(dom) {
          if (dom && (_this5.isOpenChange || openTransition)) {
            dom.style.transition = "transform ".concat(duration2, " ").concat(ease);
            addEventListener(dom, transitionEnd, _this5.trnasitionEnd);
            var levelValue = open6 ? value26 : 0;
            if (levelMove) {
              var $levelMove = transformArguments(levelMove, {
                target: dom,
                open: open6
              });
              levelValue = open6 ? $levelMove[0] : $levelMove[1] || 0;
            }
            var $value = typeof levelValue === "number" ? "".concat(levelValue, "px") : levelValue;
            var placementPos = placement2 === "left" || placement2 === "top" ? $value : "-".concat($value);
            dom.style.transform = levelValue ? "".concat(placementName, "(").concat(placementPos, ")") : "";
            dom.style.msTransform = levelValue ? "".concat(placementName, "(").concat(placementPos, ")") : "";
          }
        });
        if (getContainer5 === "body") {
          var eventArray = ["touchstart"];
          var domArray = [document.body, this.maskDom, this.handlerdom, this.contentDom];
          var right = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth ? getScrollBarSize(1) : 0;
          var widthTransition = "width ".concat(duration2, " ").concat(ease);
          var trannsformTransition = "transform ".concat(duration2, " ").concat(ease);
          if (open6 && document.body.style.overflow !== "hidden") {
            document.body.style.overflow = "hidden";
            if (right) {
              document.body.style.position = "relative";
              document.body.style.width = "calc(100% - ".concat(right, "px)");
              clearTimeout(this.timeout);
              if (this.dom) {
                this.dom.style.transition = "none";
                switch (placement2) {
                  case "right":
                    this.dom.style.transform = "translateX(-".concat(right, "px)");
                    this.dom.style.msTransform = "translateX(-".concat(right, "px)");
                    break;
                  case "top":
                  case "bottom":
                    this.dom.style.width = "calc(100% - ".concat(right, "px)");
                    this.dom.style.transform = "translateZ(0)";
                    break;
                }
                this.timeout = setTimeout(function() {
                  _this5.dom.style.transition = "".concat(trannsformTransition, ",").concat(widthTransition);
                  _this5.dom.style.width = "";
                  _this5.dom.style.transform = "";
                  _this5.dom.style.msTransform = "";
                });
              }
            }
            domArray.forEach(function(item, i2) {
              if (!item) {
                return;
              }
              addEventListener(item, eventArray[i2] || "touchmove", i2 ? _this5.removeMoveHandler : _this5.removeStartHandler, _this5.passive);
            });
          } else if (this.getCurrentDrawerSome()) {
            document.body.style.overflow = "";
            if ((this.isOpenChange || openTransition) && right) {
              document.body.style.position = "";
              document.body.style.width = "";
              if (transitionStr) {
                document.body.style.overflowX = "hidden";
              }
              if (placement2 === "right" && this.maskDom) {
                this.maskDom.style.left = "-".concat(right, "px");
                this.maskDom.style.width = "calc(100% + ".concat(right, "px)");
              }
              clearTimeout(this.timeout);
              if (this.dom) {
                this.dom.style.transition = "none";
                var heightTransition;
                switch (placement2) {
                  case "right": {
                    this.dom.style.transform = "translateX(".concat(right, "px)");
                    this.dom.style.msTransform = "translateX(".concat(right, "px)");
                    this.dom.style.width = "100%";
                    widthTransition = "width 0s ".concat(ease, " ").concat(duration2);
                    break;
                  }
                  case "top":
                  case "bottom": {
                    this.dom.style.width = "calc(100% + ".concat(right, "px)");
                    this.dom.style.height = "100%";
                    this.dom.style.transform = "translateZ(0)";
                    heightTransition = "height 0s ".concat(ease, " ").concat(duration2);
                    break;
                  }
                }
                this.timeout = setTimeout(function() {
                  _this5.dom.style.transition = "".concat(trannsformTransition, ",").concat(heightTransition ? "".concat(heightTransition, ",") : "").concat(widthTransition);
                  _this5.dom.style.transform = "";
                  _this5.dom.style.msTransform = "";
                  _this5.dom.style.width = "";
                  _this5.dom.style.height = "";
                });
              }
            }
            domArray.forEach(function(item, i2) {
              if (!item) {
                return;
              }
              removeEventListener(item, eventArray[i2] || "touchmove", i2 ? _this5.removeMoveHandler : _this5.removeStartHandler, _this5.passive);
            });
          }
        }
      }
      var onChange9 = this.$attrs.onChange;
      if (onChange9 && this.isOpenChange && this.sFirstEnter) {
        onChange9(open6);
        this.isOpenChange = false;
      }
    },
    getChildToRender: function getChildToRender(open6) {
      var _classnames, _this6 = this, _touchEvents;
      var _this$$props2 = this.$props, prefixCls2 = _this$$props2.prefixCls, placement2 = _this$$props2.placement, handler8 = _this$$props2.handler, showMask = _this$$props2.showMask, maskStyle = _this$$props2.maskStyle, width = _this$$props2.width, height = _this$$props2.height, wrapStyle = _this$$props2.wrapStyle, keyboard = _this$$props2.keyboard, maskClosable = _this$$props2.maskClosable;
      var _a = this.$attrs, cls = _a.class, style3 = _a.style, restAttrs = __rest$t(_a, ["class", "style"]);
      var children = getSlot(this);
      var wrapperClassname = classNames(prefixCls2, (_classnames = {}, _defineProperty$U(_classnames, "".concat(prefixCls2, "-").concat(placement2), true), _defineProperty$U(_classnames, "".concat(prefixCls2, "-open"), open6), _defineProperty$U(_classnames, "no-mask", !showMask), _defineProperty$U(_classnames, cls, cls), _classnames));
      var isOpenChange = this.isOpenChange;
      var isHorizontal = placement2 === "left" || placement2 === "right";
      var placementName = "translate".concat(isHorizontal ? "X" : "Y");
      var placementPos = placement2 === "left" || placement2 === "top" ? "-100%" : "100%";
      var transform = open6 ? "" : "".concat(placementName, "(").concat(placementPos, ")");
      if (isOpenChange === void 0 || isOpenChange) {
        var contentValue = this.contentDom ? this.contentDom.getBoundingClientRect()[isHorizontal ? "width" : "height"] : 0;
        var value26 = (isHorizontal ? width : height) || contentValue;
        this.setLevelDomTransform(open6, false, placementName, value26);
      }
      var handlerChildren;
      if (handler8 !== false) {
        var handlerDefalut = createVNode("div", {
          "class": "drawer-handle",
          "onClick": function onClick7() {
          }
        }, [createVNode("i", {
          "class": "drawer-handle-icon"
        }, null)]);
        var handlerSlot = this.handler;
        var handlerSlotVnode = handlerSlot || handlerDefalut;
        var handleIconClick = handlerSlotVnode.props && handlerSlotVnode.props.onClick;
        handlerChildren = cloneElement(handlerSlotVnode, {
          onClick: function onClick7(e2) {
            handleIconClick && handleIconClick(e2);
            _this6.onIconTouchEnd(e2);
          },
          ref: function ref2(c2) {
            _this6.handlerdom = c2;
          }
        });
      }
      var domContProps = _extends$1(_extends$1({}, restAttrs), {
        class: wrapperClassname,
        onTransitionend: this.onWrapperTransitionEnd,
        onKeydown: open6 && keyboard ? this.onKeyDown : noop$g,
        style: _extends$1(_extends$1({}, wrapStyle), style3)
      });
      var touchEvents = (_touchEvents = {}, _defineProperty$U(_touchEvents, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", open6 ? this.removeStartHandler : noop$g), _defineProperty$U(_touchEvents, supportsPassive$1 ? "onTouchmovePassive" : "onTouchmove", open6 ? this.removeMoveHandler : noop$g), _touchEvents);
      return createVNode("div", _objectSpread2$2(_objectSpread2$2({
        "ref": function ref2(c2) {
          _this6.dom = c2;
        }
      }, domContProps), {}, {
        "tabindex": -1
      }), [showMask && createVNode("div", {
        "key": open6,
        "class": "".concat(prefixCls2, "-mask"),
        "onClick": maskClosable ? this.onMaskTouchEnd : noop$g,
        "style": maskStyle,
        "ref": function ref2(c2) {
          _this6.maskDom = c2;
        }
      }, null), createVNode("div", {
        "class": "".concat(prefixCls2, "-content-wrapper"),
        "style": {
          transform,
          msTransform: transform,
          width: isNumeric(width) ? "".concat(width, "px") : width,
          height: isNumeric(height) ? "".concat(height, "px") : height
        },
        "ref": function ref2(c2) {
          _this6.contentWrapper = c2;
        }
      }, [createVNode("div", _objectSpread2$2({
        "class": "".concat(prefixCls2, "-content"),
        "ref": function ref2(c2) {
          _this6.contentDom = c2;
        }
      }, touchEvents), [children]), handlerChildren])]);
    },
    getOpen: function getOpen() {
      return this.open !== void 0 ? this.open : this.sOpen;
    },
    getTouchParentScroll: function getTouchParentScroll(root2, currentTarget, differX, differY) {
      if (!currentTarget || currentTarget === document) {
        return false;
      }
      if (currentTarget === root2.parentNode) {
        return true;
      }
      var isY = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differY);
      var isX = Math.max(Math.abs(differX), Math.abs(differY)) === Math.abs(differX);
      var scrollY = currentTarget.scrollHeight - currentTarget.clientHeight;
      var scrollX = currentTarget.scrollWidth - currentTarget.clientWidth;
      var t2 = currentTarget.scrollTop;
      var l2 = currentTarget.scrollLeft;
      if (currentTarget.scrollTo) {
        currentTarget.scrollTo(currentTarget.scrollLeft + 1, currentTarget.scrollTop + 1);
      }
      var currentT = currentTarget.scrollTop;
      var currentL = currentTarget.scrollLeft;
      if (currentTarget.scrollTo) {
        currentTarget.scrollTo(currentTarget.scrollLeft - 1, currentTarget.scrollTop - 1);
      }
      if (isY && (!scrollY || !(currentT - t2) || scrollY && (currentTarget.scrollTop >= scrollY && differY < 0 || currentTarget.scrollTop <= 0 && differY > 0)) || isX && (!scrollX || !(currentL - l2) || scrollX && (currentTarget.scrollLeft >= scrollX && differX < 0 || currentTarget.scrollLeft <= 0 && differX > 0))) {
        return this.getTouchParentScroll(root2, currentTarget.parentNode, differX, differY);
      }
      return false;
    },
    removeStartHandler: function removeStartHandler(e2) {
      if (e2.touches.length > 1) {
        return;
      }
      this.startPos = {
        x: e2.touches[0].clientX,
        y: e2.touches[0].clientY
      };
    },
    removeMoveHandler: function removeMoveHandler(e2) {
      if (e2.changedTouches.length > 1) {
        return;
      }
      var currentTarget = e2.currentTarget;
      var differX = e2.changedTouches[0].clientX - this.startPos.x;
      var differY = e2.changedTouches[0].clientY - this.startPos.y;
      if (currentTarget === this.maskDom || currentTarget === this.handlerdom || currentTarget === this.contentDom && this.getTouchParentScroll(currentTarget, e2.target, differX, differY)) {
        e2.preventDefault();
      }
    },
    trnasitionEnd: function trnasitionEnd(e2) {
      removeEventListener(e2.target, transitionEnd, this.trnasitionEnd);
      e2.target.style.transition = "";
    },
    defaultGetContainer: function defaultGetContainer2() {
      if (windowIsUndefined$1) {
        return null;
      }
      var container = document.createElement("div");
      this.parent.appendChild(container);
      if (this.wrapperClassName) {
        container.className = this.wrapperClassName;
      }
      return container;
    }
  },
  render: function render86() {
    var _this7 = this;
    var _this$$props3 = this.$props, getContainer5 = _this$$props3.getContainer, wrapperClassName = _this$$props3.wrapperClassName, handler8 = _this$$props3.handler, forceRender = _this$$props3.forceRender;
    var open6 = this.getOpen();
    var portal = null;
    currentDrawer[this.drawerId] = open6 ? this.container : open6;
    var children = this.getChildToRender(this.sFirstEnter ? open6 : false);
    if (!getContainer5) {
      return createVNode("div", {
        "class": wrapperClassName,
        "ref": function ref2(c2) {
          _this7.container = c2;
        }
      }, [children]);
    }
    if (!this.container || !open6 && !this.sFirstEnter) {
      return null;
    }
    var $forceRender = !!handler8 || forceRender;
    if ($forceRender || open6 || this.dom) {
      portal = createVNode(Teleport, {
        "to": this.getSelfContainer()
      }, {
        default: function _default8() {
          return [children];
        }
      });
    }
    return portal;
  }
});
var Drawer$2 = Drawer$1;
var __rest$s = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var PlacementTypes = tuple("top", "right", "bottom", "left");
var Drawer = defineComponent({
  name: "ADrawer",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    closable: PropsTypes.looseBool.def(true),
    destroyOnClose: PropsTypes.looseBool,
    getContainer: PropsTypes.any,
    maskClosable: PropsTypes.looseBool.def(true),
    mask: PropsTypes.looseBool.def(true),
    maskStyle: PropsTypes.object,
    wrapStyle: PropsTypes.object,
    bodyStyle: PropsTypes.object,
    headerStyle: PropsTypes.object,
    drawerStyle: PropsTypes.object,
    title: PropsTypes.VNodeChild,
    visible: PropsTypes.looseBool,
    width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]).def(256),
    height: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]).def(256),
    zIndex: PropsTypes.number,
    prefixCls: PropsTypes.string,
    placement: PropsTypes.oneOf(PlacementTypes).def("right"),
    level: PropsTypes.any.def(null),
    wrapClassName: PropsTypes.string,
    handle: PropsTypes.VNodeChild,
    afterVisibleChange: PropsTypes.func,
    keyboard: PropsTypes.looseBool.def(true),
    onClose: PropsTypes.func,
    "onUpdate:visible": PropsTypes.func
  },
  setup: function setup84(props2) {
    var configProvider = inject("configProvider", defaultConfigProvider);
    return {
      configProvider,
      destroyClose: false,
      preVisible: props2.visible,
      parentDrawer: inject("parentDrawer", null)
    };
  },
  data: function data44() {
    return {
      sPush: false
    };
  },
  beforeCreate: function beforeCreate() {
    provide("parentDrawer", this);
  },
  mounted: function mounted23() {
    var visible9 = this.visible;
    if (visible9 && this.parentDrawer) {
      this.parentDrawer.push();
    }
  },
  updated: function updated12() {
    var _this = this;
    nextTick(function() {
      if (_this.preVisible !== _this.visible && _this.parentDrawer) {
        if (_this.visible) {
          _this.parentDrawer.push();
        } else {
          _this.parentDrawer.pull();
        }
      }
      _this.preVisible = _this.visible;
    });
  },
  beforeUnmount: function beforeUnmount15() {
    if (this.parentDrawer) {
      this.parentDrawer.pull();
    }
  },
  methods: {
    domFocus: function domFocus2() {
      if (this.$refs.vcDrawer) {
        this.$refs.vcDrawer.domFocus();
      }
    },
    close: function close3(e2) {
      this.$emit("update:visible", false);
      this.$emit("close", e2);
    },
    push: function push() {
      this.setState({
        sPush: true
      });
    },
    pull: function pull() {
      var _this2 = this;
      this.setState({
        sPush: false
      }, function() {
        _this2.domFocus();
      });
    },
    onDestroyTransitionEnd: function onDestroyTransitionEnd() {
      var isDestroyOnClose = this.getDestroyOnClose();
      if (!isDestroyOnClose) {
        return;
      }
      if (!this.visible) {
        this.destroyClose = true;
        this.$forceUpdate();
      }
    },
    getDestroyOnClose: function getDestroyOnClose() {
      return this.destroyOnClose && !this.visible;
    },
    getPushTransform: function getPushTransform(placement2) {
      if (placement2 === "left" || placement2 === "right") {
        return "translateX(".concat(placement2 === "left" ? 180 : -180, "px)");
      }
      if (placement2 === "top" || placement2 === "bottom") {
        return "translateY(".concat(placement2 === "top" ? 180 : -180, "px)");
      }
    },
    getRcDrawerStyle: function getRcDrawerStyle() {
      var _this$$props = this.$props, zIndex = _this$$props.zIndex, placement2 = _this$$props.placement, wrapStyle = _this$$props.wrapStyle;
      var push2 = this.$data.sPush;
      return _extends$1({
        zIndex,
        transform: push2 ? this.getPushTransform(placement2) : void 0
      }, wrapStyle);
    },
    renderHeader: function renderHeader(prefixCls2) {
      var _this$$props2 = this.$props, closable = _this$$props2.closable, headerStyle = _this$$props2.headerStyle;
      var title2 = getComponent(this, "title");
      if (!title2 && !closable) {
        return null;
      }
      var headerClassName = title2 ? "".concat(prefixCls2, "-header") : "".concat(prefixCls2, "-header-no-title");
      return createVNode("div", {
        "class": headerClassName,
        "style": headerStyle
      }, [title2 && createVNode("div", {
        "class": "".concat(prefixCls2, "-title")
      }, [title2]), closable ? this.renderCloseIcon(prefixCls2) : null]);
    },
    renderCloseIcon: function renderCloseIcon(prefixCls2) {
      var closable = this.closable;
      return closable && createVNode("button", {
        "key": "closer",
        "onClick": this.close,
        "aria-label": "Close",
        "class": "".concat(prefixCls2, "-close")
      }, [createVNode(CloseOutlined$1, null, null)]);
    },
    renderBody: function renderBody(prefixCls2) {
      var _a, _b;
      if (this.destroyClose && !this.visible) {
        return null;
      }
      this.destroyClose = false;
      var _this$$props3 = this.$props, bodyStyle = _this$$props3.bodyStyle, drawerStyle = _this$$props3.drawerStyle;
      var containerStyle = {};
      var isDestroyOnClose = this.getDestroyOnClose();
      if (isDestroyOnClose) {
        containerStyle.opacity = 0;
        containerStyle.transition = "opacity .3s";
      }
      return createVNode("div", {
        "class": "".concat(prefixCls2, "-wrapper-body"),
        "style": _extends$1(_extends$1({}, containerStyle), drawerStyle),
        "onTransitionend": this.onDestroyTransitionEnd
      }, [this.renderHeader(prefixCls2), createVNode("div", {
        "key": "body",
        "class": "".concat(prefixCls2, "-body"),
        "style": bodyStyle
      }, [(_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)])]);
    }
  },
  render: function render87() {
    var _classnames, _this3 = this;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, width = props2.width, height = props2.height, visible9 = props2.visible, placement2 = props2.placement, wrapClassName = props2.wrapClassName, mask = props2.mask, rest = __rest$s(props2, ["prefixCls", "width", "height", "visible", "placement", "wrapClassName", "mask"]);
    var haveMask = mask ? "" : "no-mask";
    var offsetStyle = {};
    if (placement2 === "left" || placement2 === "right") {
      offsetStyle.width = typeof width === "number" ? "".concat(width, "px") : width;
    } else {
      offsetStyle.height = typeof height === "number" ? "".concat(height, "px") : height;
    }
    var handler8 = getComponent(this, "handle") || false;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("drawer", customizePrefixCls);
    var className = this.$attrs.class;
    var vcDrawerProps = _extends$1(_extends$1(_extends$1(_extends$1(_extends$1({}, this.$attrs), omit$2(rest, ["closable", "destroyOnClose", "drawerStyle", "headerStyle", "bodyStyle", "title", "push", "visible", "getPopupContainer", "rootPrefixCls", "getPrefixCls", "renderEmpty", "csp", "pageHeader", "autoInsertSpaceInButton"])), {
      onClose: this.close,
      handler: handler8
    }), offsetStyle), {
      prefixCls: prefixCls2,
      open: visible9,
      showMask: mask,
      placement: placement2,
      class: classNames((_classnames = {}, _defineProperty$U(_classnames, className, !!className), _defineProperty$U(_classnames, wrapClassName, !!wrapClassName), _defineProperty$U(_classnames, haveMask, !!haveMask), _classnames)),
      wrapStyle: this.getRcDrawerStyle(),
      ref: "vcDrawer"
    });
    return createVNode(Drawer$2, vcDrawerProps, {
      default: function _default8() {
        return [_this3.renderBody(prefixCls2)];
      }
    });
  }
});
var index$s = withInstall(Drawer);
var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
function cloneDeep(value26) {
  return baseClone(value26, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}
var runtime = { exports: {} };
(function(module2) {
  var runtime2 = function(exports2) {
    var Op = Object.prototype;
    var hasOwn3 = Op.hasOwnProperty;
    var undefined$1;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define2(obj, key2, value26) {
      Object.defineProperty(obj, key2, {
        value: value26,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key2];
    }
    try {
      define2({}, "");
    } catch (err) {
      define2 = function(obj, key2, value26) {
        return obj[key2] = value26;
      };
    }
    function wrap(innerFn, outerFn, self2, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator2 = Object.create(protoGenerator.prototype);
      var context2 = new Context(tryLocsList || []);
      generator2._invoke = makeInvokeMethod(innerFn, self2, context2);
      return generator2;
    }
    exports2.wrap = wrap;
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var IteratorPrototype = {};
    define2(IteratorPrototype, iteratorSymbol, function() {
      return this;
    });
    var getProto2 = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto2 && getProto2(getProto2(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn3.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define2(Gp, "constructor", GeneratorFunctionPrototype);
    define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method3) {
        define2(prototype, method3, function(arg) {
          return this._invoke(method3, arg);
        });
      });
    }
    exports2.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports2.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define2(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };
    exports2.awrap = function(arg) {
      return { __await: arg };
    };
    function AsyncIterator(generator2, PromiseImpl) {
      function invoke(method3, arg, resolve2, reject) {
        var record = tryCatch(generator2[method3], generator2, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value26 = result.value;
          if (value26 && typeof value26 === "object" && hasOwn3.call(value26, "__await")) {
            return PromiseImpl.resolve(value26.__await).then(function(value27) {
              invoke("next", value27, resolve2, reject);
            }, function(err) {
              invoke("throw", err, resolve2, reject);
            });
          }
          return PromiseImpl.resolve(value26).then(function(unwrapped) {
            result.value = unwrapped;
            resolve2(result);
          }, function(error3) {
            return invoke("throw", error3, resolve2, reject);
          });
        }
      }
      var previousPromise;
      function enqueue(method3, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve2, reject) {
            invoke(method3, arg, resolve2, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
      this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
      return this;
    });
    exports2.AsyncIterator = AsyncIterator;
    exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0)
        PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
      return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
        return result.done ? result.value : iter.next();
      });
    };
    function makeInvokeMethod(innerFn, self2, context2) {
      var state2 = GenStateSuspendedStart;
      return function invoke(method3, arg) {
        if (state2 === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
        if (state2 === GenStateCompleted) {
          if (method3 === "throw") {
            throw arg;
          }
          return doneResult();
        }
        context2.method = method3;
        context2.arg = arg;
        while (true) {
          var delegate = context2.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context2);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel)
                continue;
              return delegateResult;
            }
          }
          if (context2.method === "next") {
            context2.sent = context2._sent = context2.arg;
          } else if (context2.method === "throw") {
            if (state2 === GenStateSuspendedStart) {
              state2 = GenStateCompleted;
              throw context2.arg;
            }
            context2.dispatchException(context2.arg);
          } else if (context2.method === "return") {
            context2.abrupt("return", context2.arg);
          }
          state2 = GenStateExecuting;
          var record = tryCatch(innerFn, self2, context2);
          if (record.type === "normal") {
            state2 = context2.done ? GenStateCompleted : GenStateSuspendedYield;
            if (record.arg === ContinueSentinel) {
              continue;
            }
            return {
              value: record.arg,
              done: context2.done
            };
          } else if (record.type === "throw") {
            state2 = GenStateCompleted;
            context2.method = "throw";
            context2.arg = record.arg;
          }
        }
      };
    }
    function maybeInvokeDelegate(delegate, context2) {
      var method3 = delegate.iterator[context2.method];
      if (method3 === undefined$1) {
        context2.delegate = null;
        if (context2.method === "throw") {
          if (delegate.iterator["return"]) {
            context2.method = "return";
            context2.arg = undefined$1;
            maybeInvokeDelegate(delegate, context2);
            if (context2.method === "throw") {
              return ContinueSentinel;
            }
          }
          context2.method = "throw";
          context2.arg = new TypeError("The iterator does not provide a 'throw' method");
        }
        return ContinueSentinel;
      }
      var record = tryCatch(method3, delegate.iterator, context2.arg);
      if (record.type === "throw") {
        context2.method = "throw";
        context2.arg = record.arg;
        context2.delegate = null;
        return ContinueSentinel;
      }
      var info3 = record.arg;
      if (!info3) {
        context2.method = "throw";
        context2.arg = new TypeError("iterator result is not an object");
        context2.delegate = null;
        return ContinueSentinel;
      }
      if (info3.done) {
        context2[delegate.resultName] = info3.value;
        context2.next = delegate.nextLoc;
        if (context2.method !== "return") {
          context2.method = "next";
          context2.arg = undefined$1;
        }
      } else {
        return info3;
      }
      context2.delegate = null;
      return ContinueSentinel;
    }
    defineIteratorMethods(Gp);
    define2(Gp, toStringTagSymbol, "Generator");
    define2(Gp, iteratorSymbol, function() {
      return this;
    });
    define2(Gp, "toString", function() {
      return "[object Generator]";
    });
    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
      this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
    exports2.keys = function(object3) {
      var keys2 = [];
      for (var key2 in object3) {
        keys2.push(key2);
      }
      keys2.reverse();
      return function next3() {
        while (keys2.length) {
          var key3 = keys2.pop();
          if (key3 in object3) {
            next3.value = key3;
            next3.done = false;
            return next3;
          }
        }
        next3.done = true;
        return next3;
      };
    };
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
        if (typeof iterable.next === "function") {
          return iterable;
        }
        if (!isNaN(iterable.length)) {
          var i2 = -1, next3 = function next4() {
            while (++i2 < iterable.length) {
              if (hasOwn3.call(iterable, i2)) {
                next4.value = iterable[i2];
                next4.done = false;
                return next4;
              }
            }
            next4.value = undefined$1;
            next4.done = true;
            return next4;
          };
          return next3.next = next3;
        }
      }
      return { next: doneResult };
    }
    exports2.values = values;
    function doneResult() {
      return { value: undefined$1, done: true };
    }
    Context.prototype = {
      constructor: Context,
      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);
        if (!skipTempReset) {
          for (var name2 in this) {
            if (name2.charAt(0) === "t" && hasOwn3.call(this, name2) && !isNaN(+name2.slice(1))) {
              this[name2] = undefined$1;
            }
          }
        }
      },
      stop: function() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
        return this.rval;
      },
      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }
        var context2 = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context2.next = loc;
          if (caught) {
            context2.method = "next";
            context2.arg = undefined$1;
          }
          return !!caught;
        }
        for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
          var entry = this.tryEntries[i2];
          var record = entry.completion;
          if (entry.tryLoc === "root") {
            return handle("end");
          }
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn3.call(entry, "catchLoc");
            var hasFinally = hasOwn3.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function(type3, arg) {
        for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
          var entry = this.tryEntries[i2];
          if (entry.tryLoc <= this.prev && hasOwn3.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        if (finallyEntry && (type3 === "break" || type3 === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type3;
        record.arg = arg;
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
        return this.complete(record);
      },
      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
        return ContinueSentinel;
      },
      finish: function(finallyLoc) {
        for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
          var entry = this.tryEntries[i2];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function(tryLoc) {
        for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
          var entry = this.tryEntries[i2];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName,
          nextLoc
        };
        if (this.method === "next") {
          this.arg = undefined$1;
        }
        return ContinueSentinel;
      }
    };
    return exports2;
  }(module2.exports);
  try {
    regeneratorRuntime = runtime2;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime2;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime2);
    }
  }
})(runtime);
var regenerator = runtime.exports;
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source2 = arguments[i2];
      for (var key2 in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key2)) {
          target[key2] = source2[key2];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct2(Parent2, args2, Class2) {
      var a2 = [null];
      a2.push.apply(a2, args2);
      var Constructor = Function.bind.apply(Parent2, a2);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var formatRegExp = /%[sdj%]/g;
var warning$1 = function warning2() {
};
if (typeof process !== "undefined" && process.env && false) {
  warning$1 = function warning4(type3, errors) {
    if (typeof console !== "undefined" && console.warn) {
      if (errors.every(function(e2) {
        return typeof e2 === "string";
      })) {
        console.warn(type3, errors);
      }
    }
  };
}
function convertFieldsError(errors) {
  if (!errors || !errors.length)
    return null;
  var fields = {};
  errors.forEach(function(error3) {
    var field = error3.field;
    fields[field] = fields[field] || [];
    fields[field].push(error3);
  });
  return fields;
}
function format$1() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var i2 = 1;
  var f2 = args[0];
  var len = args.length;
  if (typeof f2 === "function") {
    return f2.apply(null, args.slice(1));
  }
  if (typeof f2 === "string") {
    var str = String(f2).replace(formatRegExp, function(x2) {
      if (x2 === "%%") {
        return "%";
      }
      if (i2 >= len) {
        return x2;
      }
      switch (x2) {
        case "%s":
          return String(args[i2++]);
        case "%d":
          return Number(args[i2++]);
        case "%j":
          try {
            return JSON.stringify(args[i2++]);
          } catch (_2) {
            return "[Circular]";
          }
          break;
        default:
          return x2;
      }
    });
    return str;
  }
  return f2;
}
function isNativeStringType(type3) {
  return type3 === "string" || type3 === "url" || type3 === "hex" || type3 === "email" || type3 === "date" || type3 === "pattern";
}
function isEmptyValue(value26, type3) {
  if (value26 === void 0 || value26 === null) {
    return true;
  }
  if (type3 === "array" && Array.isArray(value26) && !value26.length) {
    return true;
  }
  if (isNativeStringType(type3) && typeof value26 === "string" && !value26) {
    return true;
  }
  return false;
}
function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total2 = 0;
  var arrLength = arr.length;
  function count(errors) {
    results.push.apply(results, errors);
    total2++;
    if (total2 === arrLength) {
      callback(results);
    }
  }
  arr.forEach(function(a2) {
    func(a2, count);
  });
}
function asyncSerialArray(arr, func, callback) {
  var index2 = 0;
  var arrLength = arr.length;
  function next3(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }
    var original = index2;
    index2 = index2 + 1;
    if (original < arrLength) {
      func(arr[original], next3);
    } else {
      callback([]);
    }
  }
  next3([]);
}
function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function(k2) {
    ret.push.apply(ret, objArr[k2]);
  });
  return ret;
}
var AsyncValidationError = /* @__PURE__ */ function(_Error) {
  _inheritsLoose(AsyncValidationError2, _Error);
  function AsyncValidationError2(errors, fields) {
    var _this;
    _this = _Error.call(this, "Async Validation Error") || this;
    _this.errors = errors;
    _this.fields = fields;
    return _this;
  }
  return AsyncValidationError2;
}(/* @__PURE__ */ _wrapNativeSuper(Error));
function asyncMap(objArr, option, func, callback) {
  if (option.first) {
    var _pending = new Promise(function(resolve2, reject) {
      var next3 = function next4(errors) {
        callback(errors);
        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve2();
      };
      var flattenArr = flattenObjArr(objArr);
      asyncSerialArray(flattenArr, func, next3);
    });
    _pending["catch"](function(e2) {
      return e2;
    });
    return _pending;
  }
  var firstFields = option.firstFields || [];
  if (firstFields === true) {
    firstFields = Object.keys(objArr);
  }
  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total2 = 0;
  var results = [];
  var pending = new Promise(function(resolve2, reject) {
    var next3 = function next4(errors) {
      results.push.apply(results, errors);
      total2++;
      if (total2 === objArrLength) {
        callback(results);
        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve2();
      }
    };
    if (!objArrKeys.length) {
      callback(results);
      resolve2();
    }
    objArrKeys.forEach(function(key2) {
      var arr = objArr[key2];
      if (firstFields.indexOf(key2) !== -1) {
        asyncSerialArray(arr, func, next3);
      } else {
        asyncParallelArray(arr, func, next3);
      }
    });
  });
  pending["catch"](function(e2) {
    return e2;
  });
  return pending;
}
function complementError(rule) {
  return function(oe) {
    if (oe && oe.message) {
      oe.field = oe.field || rule.fullField;
      return oe;
    }
    return {
      message: typeof oe === "function" ? oe() : oe,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target, source2) {
  if (source2) {
    for (var s2 in source2) {
      if (source2.hasOwnProperty(s2)) {
        var value26 = source2[s2];
        if (typeof value26 === "object" && typeof target[s2] === "object") {
          target[s2] = _extends({}, target[s2], value26);
        } else {
          target[s2] = value26;
        }
      }
    }
  }
  return target;
}
function required(rule, value26, source2, errors, options2, type3) {
  if (rule.required && (!source2.hasOwnProperty(rule.field) || isEmptyValue(value26, type3 || rule.type))) {
    errors.push(format$1(options2.messages.required, rule.fullField));
  }
}
function whitespace(rule, value26, source2, errors, options2) {
  if (/^\s+$/.test(value26) || value26 === "") {
    errors.push(format$1(options2.messages.whitespace, rule.fullField));
  }
}
var pattern = {
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", "i"),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer2(value26) {
    return types.number(value26) && parseInt(value26, 10) === value26;
  },
  "float": function float(value26) {
    return types.number(value26) && !types.integer(value26);
  },
  array: function array2(value26) {
    return Array.isArray(value26);
  },
  regexp: function regexp2(value26) {
    if (value26 instanceof RegExp) {
      return true;
    }
    try {
      return !!new RegExp(value26);
    } catch (e2) {
      return false;
    }
  },
  date: function date2(value26) {
    return typeof value26.getTime === "function" && typeof value26.getMonth === "function" && typeof value26.getYear === "function" && !isNaN(value26.getTime());
  },
  number: function number2(value26) {
    if (isNaN(value26)) {
      return false;
    }
    return typeof value26 === "number";
  },
  object: function object2(value26) {
    return typeof value26 === "object" && !types.array(value26);
  },
  method: function method2(value26) {
    return typeof value26 === "function";
  },
  email: function email(value26) {
    return typeof value26 === "string" && !!value26.match(pattern.email) && value26.length < 255;
  },
  url: function url(value26) {
    return typeof value26 === "string" && !!value26.match(pattern.url);
  },
  hex: function hex(value26) {
    return typeof value26 === "string" && !!value26.match(pattern.hex);
  }
};
function type(rule, value26, source2, errors, options2) {
  if (rule.required && value26 === void 0) {
    required(rule, value26, source2, errors, options2);
    return;
  }
  var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
  var ruleType = rule.type;
  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value26)) {
      errors.push(format$1(options2.messages.types[ruleType], rule.fullField, rule.type));
    }
  } else if (ruleType && typeof value26 !== rule.type) {
    errors.push(format$1(options2.messages.types[ruleType], rule.fullField, rule.type));
  }
}
function range(rule, value26, source2, errors, options2) {
  var len = typeof rule.len === "number";
  var min4 = typeof rule.min === "number";
  var max4 = typeof rule.max === "number";
  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val = value26;
  var key2 = null;
  var num = typeof value26 === "number";
  var str = typeof value26 === "string";
  var arr = Array.isArray(value26);
  if (num) {
    key2 = "number";
  } else if (str) {
    key2 = "string";
  } else if (arr) {
    key2 = "array";
  }
  if (!key2) {
    return false;
  }
  if (arr) {
    val = value26.length;
  }
  if (str) {
    val = value26.replace(spRegexp, "_").length;
  }
  if (len) {
    if (val !== rule.len) {
      errors.push(format$1(options2.messages[key2].len, rule.fullField, rule.len));
    }
  } else if (min4 && !max4 && val < rule.min) {
    errors.push(format$1(options2.messages[key2].min, rule.fullField, rule.min));
  } else if (max4 && !min4 && val > rule.max) {
    errors.push(format$1(options2.messages[key2].max, rule.fullField, rule.max));
  } else if (min4 && max4 && (val < rule.min || val > rule.max)) {
    errors.push(format$1(options2.messages[key2].range, rule.fullField, rule.min, rule.max));
  }
}
var ENUM = "enum";
function enumerable(rule, value26, source2, errors, options2) {
  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
  if (rule[ENUM].indexOf(value26) === -1) {
    errors.push(format$1(options2.messages[ENUM], rule.fullField, rule[ENUM].join(", ")));
  }
}
function pattern$1(rule, value26, source2, errors, options2) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      rule.pattern.lastIndex = 0;
      if (!rule.pattern.test(value26)) {
        errors.push(format$1(options2.messages.pattern.mismatch, rule.fullField, value26, rule.pattern));
      }
    } else if (typeof rule.pattern === "string") {
      var _pattern = new RegExp(rule.pattern);
      if (!_pattern.test(value26)) {
        errors.push(format$1(options2.messages.pattern.mismatch, rule.fullField, value26, rule.pattern));
      }
    }
  }
}
var rules = {
  required,
  whitespace,
  type,
  range,
  "enum": enumerable,
  pattern: pattern$1
};
function string(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2, "string");
    if (!isEmptyValue(value26, "string")) {
      rules.type(rule, value26, source2, errors, options2);
      rules.range(rule, value26, source2, errors, options2);
      rules.pattern(rule, value26, source2, errors, options2);
      if (rule.whitespace === true) {
        rules.whitespace(rule, value26, source2, errors, options2);
      }
    }
  }
  callback(errors);
}
function method(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (value26 !== void 0) {
      rules.type(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function number(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (value26 === "") {
      value26 = void 0;
    }
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (value26 !== void 0) {
      rules.type(rule, value26, source2, errors, options2);
      rules.range(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function _boolean(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (value26 !== void 0) {
      rules.type(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function regexp(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (!isEmptyValue(value26)) {
      rules.type(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function integer(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (value26 !== void 0) {
      rules.type(rule, value26, source2, errors, options2);
      rules.range(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function floatFn(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (value26 !== void 0) {
      rules.type(rule, value26, source2, errors, options2);
      rules.range(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function array(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if ((value26 === void 0 || value26 === null) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2, "array");
    if (value26 !== void 0 && value26 !== null) {
      rules.type(rule, value26, source2, errors, options2);
      rules.range(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function object(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (value26 !== void 0) {
      rules.type(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
var ENUM$1 = "enum";
function enumerable$1(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (value26 !== void 0) {
      rules[ENUM$1](rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function pattern$2(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (!isEmptyValue(value26, "string")) {
      rules.pattern(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function date(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26, "date") && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
    if (!isEmptyValue(value26, "date")) {
      var dateObject;
      if (value26 instanceof Date) {
        dateObject = value26;
      } else {
        dateObject = new Date(value26);
      }
      rules.type(rule, dateObject, source2, errors, options2);
      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source2, errors, options2);
      }
    }
  }
  callback(errors);
}
function required$1(rule, value26, callback, source2, options2) {
  var errors = [];
  var type3 = Array.isArray(value26) ? "array" : typeof value26;
  rules.required(rule, value26, source2, errors, options2, type3);
  callback(errors);
}
function type$1(rule, value26, callback, source2, options2) {
  var ruleType = rule.type;
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26, ruleType) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2, ruleType);
    if (!isEmptyValue(value26, ruleType)) {
      rules.type(rule, value26, source2, errors, options2);
    }
  }
  callback(errors);
}
function any(rule, value26, callback, source2, options2) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source2.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value26) && !rule.required) {
      return callback();
    }
    rules.required(rule, value26, source2, errors, options2);
  }
  callback(errors);
}
var validators$2 = {
  string,
  method,
  number,
  "boolean": _boolean,
  regexp,
  integer,
  "float": floatFn,
  array,
  object,
  "enum": enumerable$1,
  pattern: pattern$2,
  date,
  url: type$1,
  hex: type$1,
  email: type$1,
  required: required$1,
  any
};
function newMessages() {
  return {
    "default": "Validation error on field %s",
    required: "%s is required",
    "enum": "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      "boolean": "%s is not a %s",
      integer: "%s is not an %s",
      "float": "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function clone4() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages = newMessages();
function Schema(descriptor) {
  this.rules = null;
  this._messages = messages;
  this.define(descriptor);
}
Schema.prototype = {
  messages: function messages2(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }
    return this._messages;
  },
  define: function define(rules2) {
    if (!rules2) {
      throw new Error("Cannot configure a schema with no rules");
    }
    if (typeof rules2 !== "object" || Array.isArray(rules2)) {
      throw new Error("Rules must be an object");
    }
    this.rules = {};
    var z2;
    var item;
    for (z2 in rules2) {
      if (rules2.hasOwnProperty(z2)) {
        item = rules2[z2];
        this.rules[z2] = Array.isArray(item) ? item : [item];
      }
    }
  },
  validate: function validate(source_, o2, oc) {
    var _this = this;
    if (o2 === void 0) {
      o2 = {};
    }
    if (oc === void 0) {
      oc = function oc2() {
      };
    }
    var source2 = source_;
    var options2 = o2;
    var callback = oc;
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback();
      }
      return Promise.resolve();
    }
    function complete(results) {
      var i2;
      var errors = [];
      var fields = {};
      function add3(e2) {
        if (Array.isArray(e2)) {
          var _errors;
          errors = (_errors = errors).concat.apply(_errors, e2);
        } else {
          errors.push(e2);
        }
      }
      for (i2 = 0; i2 < results.length; i2++) {
        add3(results[i2]);
      }
      if (!errors.length) {
        errors = null;
        fields = null;
      } else {
        fields = convertFieldsError(errors);
      }
      callback(errors, fields);
    }
    if (options2.messages) {
      var messages$1 = this.messages();
      if (messages$1 === messages) {
        messages$1 = newMessages();
      }
      deepMerge(messages$1, options2.messages);
      options2.messages = messages$1;
    } else {
      options2.messages = this.messages();
    }
    var arr;
    var value26;
    var series = {};
    var keys2 = options2.keys || Object.keys(this.rules);
    keys2.forEach(function(z2) {
      arr = _this.rules[z2];
      value26 = source2[z2];
      arr.forEach(function(r2) {
        var rule = r2;
        if (typeof rule.transform === "function") {
          if (source2 === source_) {
            source2 = _extends({}, source2);
          }
          value26 = source2[z2] = rule.transform(value26);
        }
        if (typeof rule === "function") {
          rule = {
            validator: rule
          };
        } else {
          rule = _extends({}, rule);
        }
        rule.validator = _this.getValidationMethod(rule);
        rule.field = z2;
        rule.fullField = rule.fullField || z2;
        rule.type = _this.getType(rule);
        if (!rule.validator) {
          return;
        }
        series[z2] = series[z2] || [];
        series[z2].push({
          rule,
          value: value26,
          source: source2,
          field: z2
        });
      });
    });
    var errorFields = {};
    return asyncMap(series, options2, function(data80, doIt) {
      var rule = data80.rule;
      var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
      deep = deep && (rule.required || !rule.required && data80.value);
      rule.field = data80.field;
      function addFullfield(key2, schema) {
        return _extends({}, schema, {
          fullField: rule.fullField + "." + key2
        });
      }
      function cb(e2) {
        if (e2 === void 0) {
          e2 = [];
        }
        var errors = e2;
        if (!Array.isArray(errors)) {
          errors = [errors];
        }
        if (!options2.suppressWarning && errors.length) {
          Schema.warning("async-validator:", errors);
        }
        if (errors.length && rule.message !== void 0) {
          errors = [].concat(rule.message);
        }
        errors = errors.map(complementError(rule));
        if (options2.first && errors.length) {
          errorFields[rule.field] = 1;
          return doIt(errors);
        }
        if (!deep) {
          doIt(errors);
        } else {
          if (rule.required && !data80.value) {
            if (rule.message !== void 0) {
              errors = [].concat(rule.message).map(complementError(rule));
            } else if (options2.error) {
              errors = [options2.error(rule, format$1(options2.messages.required, rule.field))];
            }
            return doIt(errors);
          }
          var fieldsSchema = {};
          if (rule.defaultField) {
            for (var k2 in data80.value) {
              if (data80.value.hasOwnProperty(k2)) {
                fieldsSchema[k2] = rule.defaultField;
              }
            }
          }
          fieldsSchema = _extends({}, fieldsSchema, data80.rule.fields);
          for (var f2 in fieldsSchema) {
            if (fieldsSchema.hasOwnProperty(f2)) {
              var fieldSchema = Array.isArray(fieldsSchema[f2]) ? fieldsSchema[f2] : [fieldsSchema[f2]];
              fieldsSchema[f2] = fieldSchema.map(addFullfield.bind(null, f2));
            }
          }
          var schema = new Schema(fieldsSchema);
          schema.messages(options2.messages);
          if (data80.rule.options) {
            data80.rule.options.messages = options2.messages;
            data80.rule.options.error = options2.error;
          }
          schema.validate(data80.value, data80.rule.options || options2, function(errs) {
            var finalErrors = [];
            if (errors && errors.length) {
              finalErrors.push.apply(finalErrors, errors);
            }
            if (errs && errs.length) {
              finalErrors.push.apply(finalErrors, errs);
            }
            doIt(finalErrors.length ? finalErrors : null);
          });
        }
      }
      var res;
      if (rule.asyncValidator) {
        res = rule.asyncValidator(rule, data80.value, cb, data80.source, options2);
      } else if (rule.validator) {
        res = rule.validator(rule, data80.value, cb, data80.source, options2);
        if (res === true) {
          cb();
        } else if (res === false) {
          cb(rule.message || rule.field + " fails");
        } else if (res instanceof Array) {
          cb(res);
        } else if (res instanceof Error) {
          cb(res.message);
        }
      }
      if (res && res.then) {
        res.then(function() {
          return cb();
        }, function(e2) {
          return cb(e2);
        });
      }
    }, function(results) {
      complete(results);
    });
  },
  getType: function getType2(rule) {
    if (rule.type === void 0 && rule.pattern instanceof RegExp) {
      rule.type = "pattern";
    }
    if (typeof rule.validator !== "function" && rule.type && !validators$2.hasOwnProperty(rule.type)) {
      throw new Error(format$1("Unknown rule type %s", rule.type));
    }
    return rule.type || "string";
  },
  getValidationMethod: function getValidationMethod(rule) {
    if (typeof rule.validator === "function") {
      return rule.validator;
    }
    var keys2 = Object.keys(rule);
    var messageIndex = keys2.indexOf("message");
    if (messageIndex !== -1) {
      keys2.splice(messageIndex, 1);
    }
    if (keys2.length === 1 && keys2[0] === "required") {
      return validators$2.required;
    }
    return validators$2[this.getType(rule)] || false;
  }
};
Schema.register = function register2(type3, validator5) {
  if (typeof validator5 !== "function") {
    throw new Error("Cannot register a validator by type, validator is not a function");
  }
  validators$2[type3] = validator5;
};
Schema.warning = warning$1;
Schema.messages = messages;
Schema.validators = validators$2;
function toArray$3(value26) {
  if (value26 === void 0 || value26 === null) {
    return [];
  }
  return Array.isArray(value26) ? value26 : [value26];
}
function getNamePath(path2) {
  return toArray$3(path2);
}
function containsNamePath(namePathList, namePath) {
  return namePathList && namePathList.some(function(path2) {
    return matchNamePath(path2, namePath);
  });
}
function isObject$1(obj) {
  return _typeof$2(obj) === "object" && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
}
function internalSetValues(store, values) {
  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _extends$1({}, store);
  if (!values) {
    return newStore;
  }
  Object.keys(values).forEach(function(key2) {
    var prevValue = newStore[key2];
    var value26 = values[key2];
    var recursive = isObject$1(prevValue) && isObject$1(value26);
    newStore[key2] = recursive ? internalSetValues(prevValue, value26 || {}) : value26;
  });
  return newStore;
}
function setValues(store) {
  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    restValues[_key - 1] = arguments[_key];
  }
  return restValues.reduce(function(current2, newStore) {
    return internalSetValues(current2, newStore);
  }, store);
}
function matchNamePath(namePath, changedNamePath) {
  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {
    return false;
  }
  return namePath.every(function(nameUnit, i2) {
    return changedNamePath[i2] === nameUnit;
  });
}
var typeTemplate = "'${name}' is not a valid ${type}";
var defaultValidateMessages = {
  default: "Validation error on field '${name}'",
  required: "'${name}' is required",
  enum: "'${name}' must be one of [${enum}]",
  whitespace: "'${name}' cannot be empty",
  date: {
    format: "'${name}' is invalid for format date",
    parse: "'${name}' could not be parsed as date",
    invalid: "'${name}' is invalid date"
  },
  types: {
    string: typeTemplate,
    method: typeTemplate,
    array: typeTemplate,
    object: typeTemplate,
    number: typeTemplate,
    date: typeTemplate,
    boolean: typeTemplate,
    integer: typeTemplate,
    float: typeTemplate,
    regexp: typeTemplate,
    email: typeTemplate,
    url: typeTemplate,
    hex: typeTemplate
  },
  string: {
    len: "'${name}' must be exactly ${len} characters",
    min: "'${name}' must be at least ${min} characters",
    max: "'${name}' cannot be longer than ${max} characters",
    range: "'${name}' must be between ${min} and ${max} characters"
  },
  number: {
    len: "'${name}' must equal ${len}",
    min: "'${name}' cannot be less than ${min}",
    max: "'${name}' cannot be greater than ${max}",
    range: "'${name}' must be between ${min} and ${max}"
  },
  array: {
    len: "'${name}' must be exactly ${len} in length",
    min: "'${name}' cannot be less than ${min} in length",
    max: "'${name}' cannot be greater than ${max} in length",
    range: "'${name}' must be between ${min} and ${max} in length"
  },
  pattern: {
    mismatch: "'${name}' does not match pattern ${pattern}"
  }
};
var __awaiter = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P2, generator2) {
  function adopt(value26) {
    return value26 instanceof P2 ? value26 : new P2(function(resolve2) {
      resolve2(value26);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value26) {
      try {
        step(generator2.next(value26));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value26) {
      try {
        step(generator2["throw"](value26));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator2 = generator2.apply(thisArg, _arguments || [])).next());
  });
};
var AsyncValidator = Schema;
function replaceMessage(template, kv) {
  return template.replace(/\$\{\w+\}/g, function(str) {
    var key2 = str.slice(2, -1);
    return kv[key2];
  });
}
function validateRule(name2, value26, rule, options2, messageVariables) {
  return __awaiter(this, void 0, void 0, /* @__PURE__ */ regenerator.mark(function _callee() {
    var cloneRule, subRuleField, validator5, messages3, result, subResults, kv, fillVariableResult;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cloneRule = _extends$1({}, rule);
            delete cloneRule.ruleIndex;
            subRuleField = null;
            if (cloneRule && cloneRule.type === "array" && cloneRule.defaultField) {
              subRuleField = cloneRule.defaultField;
              delete cloneRule.defaultField;
            }
            validator5 = new AsyncValidator(_defineProperty$U({}, name2, [cloneRule]));
            messages3 = setValues({}, defaultValidateMessages, options2.validateMessages);
            validator5.messages(messages3);
            result = [];
            _context.prev = 8;
            _context.next = 11;
            return Promise.resolve(validator5.validate(_defineProperty$U({}, name2, value26), _extends$1({}, options2)));
          case 11:
            _context.next = 16;
            break;
          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](8);
            if (_context.t0.errors) {
              result = _context.t0.errors.map(function(_ref, index2) {
                var message2 = _ref.message;
                return isValidElement(message2) ? cloneVNode(message2, {
                  key: "error_".concat(index2)
                }) : message2;
              });
            } else {
              console.error(_context.t0);
              result = [messages3.default()];
            }
          case 16:
            if (!(!result.length && subRuleField)) {
              _context.next = 21;
              break;
            }
            _context.next = 19;
            return Promise.all(value26.map(function(subValue, i2) {
              return validateRule("".concat(name2, ".").concat(i2), subValue, subRuleField, options2, messageVariables);
            }));
          case 19:
            subResults = _context.sent;
            return _context.abrupt("return", subResults.reduce(function(prev3, errors) {
              return [].concat(_toConsumableArray(prev3), _toConsumableArray(errors));
            }, []));
          case 21:
            kv = _extends$1(_extends$1(_extends$1({}, rule), {
              name: name2,
              enum: (rule.enum || []).join(", ")
            }), messageVariables);
            fillVariableResult = result.map(function(error3) {
              if (typeof error3 === "string") {
                return replaceMessage(error3, kv);
              }
              return error3;
            });
            return _context.abrupt("return", fillVariableResult);
          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 13]]);
  }));
}
function validateRules(namePath, value26, rules2, options2, validateFirst, messageVariables) {
  var _this = this;
  var name2 = namePath.join(".");
  var filledRules = rules2.map(function(currentRule, ruleIndex) {
    var originValidatorFunc = currentRule.validator;
    var cloneRule = _extends$1(_extends$1({}, currentRule), {
      ruleIndex
    });
    if (originValidatorFunc) {
      cloneRule.validator = function(rule, val, callback) {
        var hasPromise = false;
        var wrappedCallback = function wrappedCallback2() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          Promise.resolve().then(function() {
            if (!hasPromise) {
              callback.apply(void 0, args);
            }
          });
        };
        var promise = originValidatorFunc(rule, val, wrappedCallback);
        hasPromise = promise && typeof promise.then === "function" && typeof promise.catch === "function";
        if (hasPromise) {
          promise.then(function() {
            callback();
          }).catch(function(err) {
            callback(err || " ");
          });
        }
      };
    }
    return cloneRule;
  }).sort(function(_ref2, _ref3) {
    var w1 = _ref2.warningOnly, i1 = _ref2.ruleIndex;
    var w2 = _ref3.warningOnly, i2 = _ref3.ruleIndex;
    if (!!w1 === !!w2) {
      return i1 - i2;
    }
    if (w1) {
      return 1;
    }
    return -1;
  });
  var summaryPromise;
  if (validateFirst === true) {
    summaryPromise = new Promise(function(resolve2, reject) {
      return __awaiter(_this, void 0, void 0, /* @__PURE__ */ regenerator.mark(function _callee2() {
        var i2, rule, errors;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                i2 = 0;
              case 1:
                if (!(i2 < filledRules.length)) {
                  _context2.next = 12;
                  break;
                }
                rule = filledRules[i2];
                _context2.next = 5;
                return validateRule(name2, value26, rule, options2, messageVariables);
              case 5:
                errors = _context2.sent;
                if (!errors.length) {
                  _context2.next = 9;
                  break;
                }
                reject([{
                  errors,
                  rule
                }]);
                return _context2.abrupt("return");
              case 9:
                i2 += 1;
                _context2.next = 1;
                break;
              case 12:
                resolve2([]);
              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));
    });
  } else {
    var rulePromises = filledRules.map(function(rule) {
      return validateRule(name2, value26, rule, options2, messageVariables).then(function(errors) {
        return {
          errors,
          rule
        };
      });
    });
    summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function(errors) {
      return Promise.reject(errors);
    });
  }
  summaryPromise.catch(function(e2) {
    return e2;
  });
  return summaryPromise;
}
function finishOnAllFailed(rulePromises) {
  return __awaiter(this, void 0, void 0, /* @__PURE__ */ regenerator.mark(function _callee3() {
    return regenerator.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", Promise.all(rulePromises).then(function(errorsList) {
              var _ref4;
              var errors = (_ref4 = []).concat.apply(_ref4, _toConsumableArray(errorsList));
              return errors;
            }));
          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
}
function finishOnFirstFailed(rulePromises) {
  return __awaiter(this, void 0, void 0, /* @__PURE__ */ regenerator.mark(function _callee4() {
    var count;
    return regenerator.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            count = 0;
            return _context4.abrupt("return", new Promise(function(resolve2) {
              rulePromises.forEach(function(promise) {
                promise.then(function(ruleError) {
                  if (ruleError.errors.length) {
                    resolve2([ruleError]);
                  }
                  count += 1;
                  if (count === rulePromises.length) {
                    resolve2([]);
                  }
                });
              });
            }));
          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
}
var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
function baseIsMatch(object3, source2, matchData, customizer) {
  var index2 = matchData.length, length = index2, noCustomizer = !customizer;
  if (object3 == null) {
    return !length;
  }
  object3 = Object(object3);
  while (index2--) {
    var data80 = matchData[index2];
    if (noCustomizer && data80[2] ? data80[1] !== object3[data80[0]] : !(data80[0] in object3)) {
      return false;
    }
  }
  while (++index2 < length) {
    data80 = matchData[index2];
    var key2 = data80[0], objValue = object3[key2], srcValue = data80[1];
    if (noCustomizer && data80[2]) {
      if (objValue === void 0 && !(key2 in object3)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key2, object3, source2, stack);
      }
      if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
function isStrictComparable(value26) {
  return value26 === value26 && !isObject$2(value26);
}
function getMatchData(object3) {
  var result = keys(object3), length = result.length;
  while (length--) {
    var key2 = result[length], value26 = object3[key2];
    result[length] = [key2, value26, isStrictComparable(value26)];
  }
  return result;
}
function matchesStrictComparable(key2, srcValue) {
  return function(object3) {
    if (object3 == null) {
      return false;
    }
    return object3[key2] === srcValue && (srcValue !== void 0 || key2 in Object(object3));
  };
}
function baseMatches(source2) {
  var matchData = getMatchData(source2);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object3) {
    return object3 === source2 || baseIsMatch(object3, source2, matchData);
  };
}
function get(object3, path2, defaultValue) {
  var result = object3 == null ? void 0 : baseGet(object3, path2);
  return result === void 0 ? defaultValue : result;
}
function baseHasIn(object3, key2) {
  return object3 != null && key2 in Object(object3);
}
function hasPath(object3, path2, hasFunc) {
  path2 = castPath(path2, object3);
  var index2 = -1, length = path2.length, result = false;
  while (++index2 < length) {
    var key2 = toKey(path2[index2]);
    if (!(result = object3 != null && hasFunc(object3, key2))) {
      break;
    }
    object3 = object3[key2];
  }
  if (result || ++index2 != length) {
    return result;
  }
  length = object3 == null ? 0 : object3.length;
  return !!length && isLength(length) && isIndex(key2, length) && (isArray$2(object3) || isArguments$1(object3));
}
function hasIn(object3, path2) {
  return object3 != null && hasPath(object3, path2, baseHasIn);
}
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
function baseMatchesProperty(path2, srcValue) {
  if (isKey(path2) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path2), srcValue);
  }
  return function(object3) {
    var objValue = get(object3, path2);
    return objValue === void 0 && objValue === srcValue ? hasIn(object3, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
function baseProperty(key2) {
  return function(object3) {
    return object3 == null ? void 0 : object3[key2];
  };
}
function basePropertyDeep(path2) {
  return function(object3) {
    return baseGet(object3, path2);
  };
}
function property(path2) {
  return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
}
function baseIteratee(value26) {
  if (typeof value26 == "function") {
    return value26;
  }
  if (value26 == null) {
    return identity;
  }
  if (typeof value26 == "object") {
    return isArray$2(value26) ? baseMatchesProperty(value26[0], value26[1]) : baseMatches(value26);
  }
  return property(value26);
}
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate);
      collection = keys(collection);
      predicate = function(key2) {
        return iteratee(iterable[key2], key2, iterable);
      };
    }
    var index2 = findIndexFunc(collection, predicate, fromIndex);
    return index2 > -1 ? iterable[iteratee ? collection[index2] : index2] : void 0;
  };
}
var nativeMax = Math.max;
function findIndex(array3, predicate, fromIndex) {
  var length = array3 == null ? 0 : array3.length;
  if (!length) {
    return -1;
  }
  var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index2 < 0) {
    index2 = nativeMax(length + index2, 0);
  }
  return baseFindIndex(array3, baseIteratee(predicate), index2);
}
var find = createFind(findIndex);
var find$1 = find;
var FormContextKey = Symbol("formContextKey");
var useProvideForm = function useProvideForm2(state2) {
  provide(FormContextKey, state2);
};
var useInjectForm = function useInjectForm2() {
  return inject(FormContextKey, {
    labelAlign: computed(function() {
      return "right";
    }),
    vertical: computed(function() {
      return false;
    }),
    addField: function addField(_eventKey, _field) {
    },
    removeField: function removeField(_eventKey) {
    },
    model: computed(function() {
      return void 0;
    }),
    rules: computed(function() {
      return void 0;
    }),
    requiredMark: computed(function() {
      return false;
    })
  });
};
var FormItemPrefixContextKey = Symbol("formItemPrefixContextKey");
var useProvideFormItemPrefix = function useProvideFormItemPrefix2(state2) {
  provide(FormItemPrefixContextKey, state2);
};
var useInjectFormItemPrefix = function useInjectFormItemPrefix2() {
  return inject(FormItemPrefixContextKey, {
    prefixCls: computed(function() {
      return "";
    })
  });
};
var FormItemLabel = function FormItemLabel2(props2, _ref) {
  var _classNames;
  var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs;
  var _a, _b, _c, _d, _e;
  var _Object$assign = _extends$1(_extends$1({}, props2), attrs), prefixCls2 = _Object$assign.prefixCls, htmlFor = _Object$assign.htmlFor, labelCol = _Object$assign.labelCol, labelAlign = _Object$assign.labelAlign, colon = _Object$assign.colon, required2 = _Object$assign.required, requiredMark = _Object$assign.requiredMark;
  var _useLocaleReceiver = useLocaleReceiver("Form"), _useLocaleReceiver2 = _slicedToArray$2(_useLocaleReceiver, 1), formLocale = _useLocaleReceiver2[0];
  var label = (_a = props2.label) !== null && _a !== void 0 ? _a : (_b = slots.label) === null || _b === void 0 ? void 0 : _b.call(slots);
  if (!label)
    return null;
  var _useInjectForm = useInjectForm(), vertical = _useInjectForm.vertical, contextLabelAlign = _useInjectForm.labelAlign, contextLabelCol = _useInjectForm.labelCol, contextColon = _useInjectForm.colon;
  var mergedLabelCol = labelCol || (contextLabelCol === null || contextLabelCol === void 0 ? void 0 : contextLabelCol.value) || {};
  var mergedLabelAlign = labelAlign || (contextLabelAlign === null || contextLabelAlign === void 0 ? void 0 : contextLabelAlign.value);
  var labelClsBasic = "".concat(prefixCls2, "-item-label");
  var labelColClassName = classNames(labelClsBasic, mergedLabelAlign === "left" && "".concat(labelClsBasic, "-left"), mergedLabelCol.class);
  var labelChildren = label;
  var computedColon = colon === true || (contextColon === null || contextColon === void 0 ? void 0 : contextColon.value) !== false && colon !== false;
  var haveColon = computedColon && !vertical.value;
  if (haveColon && typeof label === "string" && label.trim() !== "") {
    labelChildren = label.replace(/[:|：]\s*$/, "");
  }
  labelChildren = createVNode(Fragment, null, [labelChildren, (_c = slots.tooltip) === null || _c === void 0 ? void 0 : _c.call(slots, {
    class: "".concat(prefixCls2, "-item-tooltip")
  })]);
  if (requiredMark === "optional" && !required2) {
    labelChildren = createVNode(Fragment, null, [labelChildren, createVNode("span", {
      "class": "".concat(prefixCls2, "-item-optional")
    }, [((_d = formLocale.value) === null || _d === void 0 ? void 0 : _d.optional) || ((_e = defaultLocale.Form) === null || _e === void 0 ? void 0 : _e.optional)])]);
  }
  var labelClassName = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-item-required"), required2), _defineProperty$U(_classNames, "".concat(prefixCls2, "-item-required-mark-optional"), requiredMark === "optional"), _defineProperty$U(_classNames, "".concat(prefixCls2, "-item-no-colon"), !computedColon), _classNames));
  return createVNode(Col$1, _objectSpread2$2(_objectSpread2$2({}, mergedLabelCol), {}, {
    "class": labelColClassName
  }), {
    default: function _default8() {
      return [createVNode("label", {
        "html-for": htmlFor,
        "class": labelClassName,
        "title": typeof label === "string" ? label : "",
        "onClick": function onClick7(e2) {
          return emit("click", e2);
        }
      }, [labelChildren])];
    }
  });
};
FormItemLabel.displayName = "FormItemLabel";
FormItemLabel.inheritAttrs = false;
var FormItemLabel$1 = FormItemLabel;
var ErrorList = defineComponent({
  name: "ErrorList",
  props: ["errors", "help", "onDomErrorVisibleChange"],
  setup: function setup85(props2) {
    var _useConfigInject = useConfigInject("", props2), rootPrefixCls = _useConfigInject.prefixCls;
    var _useInjectFormItemPre = useInjectFormItemPrefix(), prefixCls2 = _useInjectFormItemPre.prefixCls, status = _useInjectFormItemPre.status;
    var visible9 = ref(!!(props2.errors && props2.errors.length));
    var innerStatus = ref(status.value);
    var timeout = ref();
    var cacheErrors = ref(_toConsumableArray(props2.errors));
    watch([function() {
      return _toConsumableArray(props2.errors);
    }, function() {
      return props2.help;
    }], function(newValues) {
      window.clearTimeout(timeout.value);
      if (props2.help) {
        visible9.value = !!(props2.errors && props2.errors.length);
        if (visible9.value) {
          cacheErrors.value = newValues[0];
        }
      } else {
        timeout.value = window.setTimeout(function() {
          visible9.value = !!(props2.errors && props2.errors.length);
          if (visible9.value) {
            cacheErrors.value = newValues[0];
          }
        });
      }
    });
    onBeforeUnmount(function() {
      window.clearTimeout(timeout.value);
    });
    watch([visible9, status], function() {
      if (visible9.value && status.value) {
        innerStatus.value = status.value;
      }
    });
    watch(visible9, function() {
      var _a;
      if (visible9.value) {
        (_a = props2.onDomErrorVisibleChange) === null || _a === void 0 ? void 0 : _a.call(props2, true);
      }
    }, {
      immediate: true,
      flush: "post"
    });
    return function() {
      var _a;
      var baseClassName = "".concat(prefixCls2.value, "-item-explain");
      var transitionProps = getTransitionProps("".concat(rootPrefixCls.value, "-show-help"), {
        onAfterLeave: function onAfterLeave() {
          var _a2;
          (_a2 = props2.onDomErrorVisibleChange) === null || _a2 === void 0 ? void 0 : _a2.call(props2, false);
        }
      });
      return createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [visible9.value ? createVNode("div", {
            "class": classNames(baseClassName, _defineProperty$U({}, "".concat(baseClassName, "-").concat(innerStatus.value), innerStatus.value)),
            "key": "help"
          }, [(_a = cacheErrors.value) === null || _a === void 0 ? void 0 : _a.map(function(error3, index2) {
            return createVNode("div", {
              "key": index2,
              "role": "alert"
            }, [error3]);
          })]) : null];
        }
      });
    };
  }
});
var iconMap$1 = {
  success: CheckCircleFilled$1,
  warning: ExclamationCircleFilled$1,
  error: CloseCircleFilled$1,
  validating: LoadingOutlined$1
};
var FormItemInput = defineComponent({
  slots: ["help", "extra", "errors"],
  inheritAttrs: false,
  props: ["prefixCls", "errors", "hasFeedback", "validateStatus", "onDomErrorVisibleChange", "wrapperCol", "help", "extra", "status"],
  setup: function setup86(props2, _ref) {
    var slots = _ref.slots;
    var formContext = useInjectForm();
    var contextWrapperCol = formContext.wrapperCol;
    var subFormContext = _extends$1({}, formContext);
    delete subFormContext.labelCol;
    delete subFormContext.wrapperCol;
    useProvideForm(subFormContext);
    useProvideFormItemPrefix({
      prefixCls: computed(function() {
        return props2.prefixCls;
      }),
      status: computed(function() {
        return props2.status;
      })
    });
    onUnmounted(function() {
      props2.onDomErrorVisibleChange(false);
    });
    return function() {
      var _a, _b, _c, _d;
      var prefixCls2 = props2.prefixCls, wrapperCol = props2.wrapperCol, _props$help = props2.help, help = _props$help === void 0 ? (_a = slots.help) === null || _a === void 0 ? void 0 : _a.call(slots) : _props$help, _props$errors = props2.errors, errors = _props$errors === void 0 ? (_b = slots.errors) === null || _b === void 0 ? void 0 : _b.call(slots) : _props$errors, onDomErrorVisibleChange = props2.onDomErrorVisibleChange, hasFeedback = props2.hasFeedback, validateStatus2 = props2.validateStatus, _props$extra = props2.extra, extra = _props$extra === void 0 ? (_c = slots.extra) === null || _c === void 0 ? void 0 : _c.call(slots) : _props$extra;
      var baseClassName = "".concat(prefixCls2, "-item");
      var mergedWrapperCol = wrapperCol || (contextWrapperCol === null || contextWrapperCol === void 0 ? void 0 : contextWrapperCol.value) || {};
      var className = classNames("".concat(baseClassName, "-control"), mergedWrapperCol.class);
      var IconNode = validateStatus2 && iconMap$1[validateStatus2];
      var icon = hasFeedback && IconNode ? createVNode("span", {
        "class": "".concat(baseClassName, "-children-icon")
      }, [createVNode(IconNode, null, null)]) : null;
      var inputDom = createVNode("div", {
        "class": "".concat(baseClassName, "-control-input")
      }, [createVNode("div", {
        "class": "".concat(baseClassName, "-control-input-content")
      }, [(_d = slots.default) === null || _d === void 0 ? void 0 : _d.call(slots)]), icon]);
      var errorListDom = createVNode(ErrorList, {
        "errors": errors,
        "help": help,
        "onDomErrorVisibleChange": onDomErrorVisibleChange
      }, null);
      var extraDom = extra ? createVNode("div", {
        "class": "".concat(baseClassName, "-extra")
      }, [extra]) : null;
      return createVNode(Col$1, _objectSpread2$2(_objectSpread2$2({}, mergedWrapperCol), {}, {
        "class": className
      }), {
        default: function _default8() {
          return [inputDom, errorListDom, extraDom];
        }
      });
    };
  }
});
var FormItemInput$1 = FormItemInput;
tuple("success", "warning", "error", "validating", "");
function getPropByPath$1(obj, namePathList, strict) {
  var tempObj = obj;
  var keyArr = namePathList;
  var i2 = 0;
  try {
    for (var len = keyArr.length; i2 < len - 1; ++i2) {
      if (!tempObj && !strict)
        break;
      var key2 = keyArr[i2];
      if (key2 in tempObj) {
        tempObj = tempObj[key2];
      } else {
        if (strict) {
          throw Error("please transfer a valid name path to form item!");
        }
        break;
      }
    }
    if (strict && !tempObj) {
      throw Error("please transfer a valid name path to form item!");
    }
  } catch (error3) {
    console.error("please transfer a valid name path to form item!");
  }
  return {
    o: tempObj,
    k: keyArr[i2],
    v: tempObj ? tempObj[keyArr[i2]] : void 0
  };
}
var formItemProps = {
  id: PropsTypes.string,
  htmlFor: PropsTypes.string,
  prefixCls: PropsTypes.string,
  label: PropsTypes.VNodeChild,
  help: PropsTypes.VNodeChild,
  extra: PropsTypes.VNodeChild,
  labelCol: {
    type: Object
  },
  wrapperCol: {
    type: Object
  },
  hasFeedback: PropsTypes.looseBool.def(false),
  colon: PropsTypes.looseBool,
  labelAlign: PropsTypes.oneOf(tuple("left", "right")),
  prop: {
    type: [String, Number, Array]
  },
  name: {
    type: [String, Number, Array]
  },
  rules: PropsTypes.oneOfType([Array, Object]),
  autoLink: PropsTypes.looseBool.def(true),
  required: PropsTypes.looseBool,
  validateFirst: PropsTypes.looseBool,
  validateStatus: PropsTypes.oneOf(tuple("", "success", "warning", "error", "validating")),
  validateTrigger: {
    type: [String, Array]
  },
  messageVariables: {
    type: Object
  },
  hidden: Boolean
};
var indexGuid = 0;
var __unplugin_components_6 = defineComponent({
  name: "AFormItem",
  mixins: [BaseMixin],
  inheritAttrs: false,
  __ANT_NEW_FORM_ITEM: true,
  props: formItemProps,
  slots: ["help", "label", "extra"],
  setup: function setup87(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, expose = _ref.expose;
    warning$5(props2.prop === void 0);
    var eventKey = "form-item-".concat(++indexGuid);
    var _useConfigInject = useConfigInject("form", props2), prefixCls2 = _useConfigInject.prefixCls;
    var formContext = useInjectForm();
    var fieldName = computed(function() {
      return props2.name || props2.prop;
    });
    var errors = ref([]);
    var validateDisabled = ref(false);
    var domErrorVisible = ref(false);
    var inputRef = ref();
    var namePath = computed(function() {
      var val = fieldName.value;
      return getNamePath(val);
    });
    var fieldId = computed(function() {
      var id2 = props2.id;
      if (id2) {
        return id2;
      } else if (!namePath.value.length) {
        return void 0;
      } else {
        var formName = formContext.name.value;
        var mergedId = namePath.value.join("_");
        return formName ? "".concat(formName, "_").concat(mergedId) : mergedId;
      }
    });
    var fieldValue = computed(function() {
      var model = formContext.model.value;
      if (!model || !fieldName.value) {
        return;
      }
      return getPropByPath$1(model, namePath.value, true).v;
    });
    var initialValue = ref(cloneDeep(fieldValue.value));
    var mergedValidateTrigger = computed(function() {
      var validateTrigger = props2.validateTrigger !== void 0 ? props2.validateTrigger : formContext.validateTrigger.value;
      validateTrigger = validateTrigger === void 0 ? "change" : validateTrigger;
      return toArray$3(validateTrigger);
    });
    var rulesRef = computed(function() {
      var formRules = formContext.rules.value;
      var selfRules = props2.rules;
      var requiredRule = props2.required !== void 0 ? {
        required: !!props2.required,
        trigger: mergedValidateTrigger.value
      } : [];
      var prop = getPropByPath$1(formRules, namePath.value);
      formRules = formRules ? prop.o[prop.k] || prop.v : [];
      var rules2 = [].concat(selfRules || formRules || []);
      if (find$1(rules2, function(rule) {
        return rule.required;
      })) {
        return rules2;
      } else {
        return rules2.concat(requiredRule);
      }
    });
    var isRequired2 = computed(function() {
      var rules2 = rulesRef.value;
      var isRequired3 = false;
      if (rules2 && rules2.length) {
        rules2.every(function(rule) {
          if (rule.required) {
            isRequired3 = true;
            return false;
          }
          return true;
        });
      }
      return isRequired3 || props2.required;
    });
    var validateState = ref();
    watchEffect(function() {
      validateState.value = props2.validateStatus;
    });
    var validateRules$1 = function validateRules$12(options2) {
      var _props$validateFirst = props2.validateFirst, validateFirst = _props$validateFirst === void 0 ? false : _props$validateFirst, messageVariables = props2.messageVariables;
      var _ref2 = options2 || {}, triggerName = _ref2.triggerName;
      var filteredRules = rulesRef.value;
      if (triggerName) {
        filteredRules = filteredRules.filter(function(rule) {
          var trigger2 = rule.trigger;
          if (!trigger2 && !mergedValidateTrigger.value.length) {
            return true;
          }
          var triggerList = toArray$3(trigger2 || mergedValidateTrigger.value);
          return triggerList.includes(triggerName);
        });
      }
      if (!filteredRules.length) {
        return Promise.resolve();
      }
      var promise = validateRules(namePath.value, fieldValue.value, filteredRules, options2, validateFirst, messageVariables);
      validateState.value = "validating";
      errors.value = [];
      promise.catch(function(e2) {
        return e2;
      }).then(function() {
        var results = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        if (validateState.value === "validating") {
          var res = results.filter(function(result) {
            return result && result.errors.length;
          });
          validateState.value = res.length ? "error" : "success";
          errors.value = res.map(function(r2) {
            return r2.errors;
          });
        }
      });
      return promise;
    };
    var onFieldBlur = function onFieldBlur2() {
      validateRules$1({
        triggerName: "blur"
      });
    };
    var onFieldChange = function onFieldChange2() {
      if (validateDisabled.value) {
        validateDisabled.value = false;
        return;
      }
      validateRules$1({
        triggerName: "change"
      });
    };
    var clearValidate = function clearValidate2() {
      validateState.value = "";
      validateDisabled.value = false;
      errors.value = [];
    };
    var resetField = function resetField2() {
      validateState.value = "";
      validateDisabled.value = true;
      errors.value = [];
      var model = formContext.model.value || {};
      var value26 = fieldValue.value;
      var prop = getPropByPath$1(model, namePath.value, true);
      if (Array.isArray(value26)) {
        prop.o[prop.k] = [].concat(initialValue.value);
      } else {
        prop.o[prop.k] = initialValue.value;
      }
      nextTick(function() {
        validateDisabled.value = false;
      });
    };
    var onLabelClick = function onLabelClick2() {
      var id2 = fieldId.value;
      if (!id2 || !inputRef.value) {
        return;
      }
      var control = inputRef.value.$el.querySelector('[id="'.concat(id2, '"]'));
      if (control && control.focus) {
        control.focus();
      }
    };
    expose({
      onFieldBlur,
      onFieldChange,
      clearValidate,
      resetField
    });
    var registered = false;
    watch(fieldName, function(val) {
      if (val) {
        if (!registered) {
          registered = true;
          formContext.addField(eventKey, {
            fieldValue,
            fieldId,
            fieldName,
            resetField,
            clearValidate,
            namePath,
            validateRules: validateRules$1,
            rules: rulesRef
          });
        }
      } else {
        registered = false;
        formContext.removeField(eventKey);
      }
    }, {
      immediate: true
    });
    onBeforeUnmount(function() {
      formContext.removeField(eventKey);
    });
    var itemClassName = computed(function() {
      var _ref3;
      return _ref3 = {}, _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-item"), true), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-item-has-feedback"), validateState.value && props2.hasFeedback), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-item-has-success"), validateState.value === "success"), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-item-has-warning"), validateState.value === "warning"), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-item-has-error"), validateState.value === "error"), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-item-is-validating"), validateState.value === "validating"), _defineProperty$U(_ref3, "".concat(prefixCls2.value, "-item-hidden"), props2.hidden), _ref3;
    });
    return function() {
      var _a, _b, _c, _d, _e, _f;
      var help = (_a = props2.help) !== null && _a !== void 0 ? _a : slots.help ? filterEmpty(slots.help()) : null;
      var children = flattenChildren((_b = slots.default) === null || _b === void 0 ? void 0 : _b.call(slots));
      var firstChildren = children[0];
      if (fieldName.value && props2.autoLink && isValidElement(firstChildren)) {
        var originalEvents = firstChildren.props || {};
        var originalBlur = originalEvents.onBlur;
        var originalChange = originalEvents.onChange;
        firstChildren = cloneElement(firstChildren, _extends$1(_extends$1({}, fieldId.value ? {
          id: fieldId.value
        } : void 0), {
          onBlur: function onBlur7() {
            if (Array.isArray(originalChange)) {
              for (var i2 = 0, l2 = originalChange.length; i2 < l2; i2++) {
                originalBlur[i2].apply(originalBlur, arguments);
              }
            } else if (originalBlur) {
              originalBlur.apply(void 0, arguments);
            }
            onFieldBlur();
          },
          onChange: function onChange9() {
            if (Array.isArray(originalChange)) {
              for (var i2 = 0, l2 = originalChange.length; i2 < l2; i2++) {
                originalChange[i2].apply(originalChange, arguments);
              }
            } else if (originalChange) {
              originalChange.apply(void 0, arguments);
            }
            onFieldChange();
          }
        }));
      }
      return createVNode(Row$3, _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "class": [itemClassName.value, domErrorVisible.value || !!help ? "".concat(prefixCls2.value, "-item-with-help") : "", attrs.class],
        "key": "row"
      }), {
        default: function _default8() {
          return [createVNode(FormItemLabel$1, _objectSpread2$2(_objectSpread2$2({}, props2), {}, {
            "htmlFor": fieldId.value,
            "required": isRequired2.value,
            "requiredMark": formContext.requiredMark.value,
            "prefixCls": prefixCls2.value,
            "onClick": onLabelClick,
            "label": (_c = props2.label) !== null && _c !== void 0 ? _c : (_d = slots.label) === null || _d === void 0 ? void 0 : _d.call(slots)
          }), null), createVNode(FormItemInput$1, _objectSpread2$2(_objectSpread2$2({}, props2), {}, {
            "errors": help !== void 0 && help !== null ? toArray$3(help) : errors.value,
            "prefixCls": prefixCls2.value,
            "status": validateState.value,
            "onDomErrorVisibleChange": function onDomErrorVisibleChange(v2) {
              return domErrorVisible.value = v2;
            },
            "validateStatus": validateState.value,
            "ref": inputRef,
            "help": help,
            "extra": (_e = props2.extra) !== null && _e !== void 0 ? _e : (_f = slots.extra) === null || _f === void 0 ? void 0 : _f.call(slots)
          }), {
            default: function _default9() {
              return [[firstChildren, children.slice(1)]];
            }
          })];
        }
      });
    };
  }
});
function allPromiseFinish(promiseList) {
  var hasError = false;
  var count = promiseList.length;
  var results = [];
  if (!promiseList.length) {
    return Promise.resolve([]);
  }
  return new Promise(function(resolve2, reject) {
    promiseList.forEach(function(promise, index2) {
      promise.catch(function(e2) {
        hasError = true;
        return e2;
      }).then(function(result) {
        count -= 1;
        results[index2] = result;
        if (count > 0) {
          return;
        }
        if (hasError) {
          reject(results);
        }
        resolve2(results);
      });
    });
  });
}
function t(t2) {
  return typeof t2 == "object" && t2 != null && t2.nodeType === 1;
}
function e(t2, e2) {
  return (!e2 || t2 !== "hidden") && t2 !== "visible" && t2 !== "clip";
}
function n(t2, n2) {
  if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
    var r2 = getComputedStyle(t2, null);
    return e(r2.overflowY, n2) || e(r2.overflowX, n2) || function(t3) {
      var e2 = function(t4) {
        if (!t4.ownerDocument || !t4.ownerDocument.defaultView)
          return null;
        try {
          return t4.ownerDocument.defaultView.frameElement;
        } catch (t5) {
          return null;
        }
      }(t3);
      return !!e2 && (e2.clientHeight < t3.scrollHeight || e2.clientWidth < t3.scrollWidth);
    }(t2);
  }
  return false;
}
function r(t2, e2, n2, r2, i2, o2, l2, d2) {
  return o2 < t2 && l2 > e2 || o2 > t2 && l2 < e2 ? 0 : o2 <= t2 && d2 <= n2 || l2 >= e2 && d2 >= n2 ? o2 - t2 - r2 : l2 > e2 && d2 < n2 || o2 < t2 && d2 > n2 ? l2 - e2 + i2 : 0;
}
function compute(e2, i2) {
  var o2 = window, l2 = i2.scrollMode, d2 = i2.block, u2 = i2.inline, h2 = i2.boundary, a2 = i2.skipOverflowHiddenElements, c2 = typeof h2 == "function" ? h2 : function(t2) {
    return t2 !== h2;
  };
  if (!t(e2))
    throw new TypeError("Invalid target");
  for (var f2 = document.scrollingElement || document.documentElement, s2 = [], p2 = e2; t(p2) && c2(p2); ) {
    if ((p2 = p2.parentElement) === f2) {
      s2.push(p2);
      break;
    }
    p2 != null && p2 === document.body && n(p2) && !n(document.documentElement) || p2 != null && n(p2, a2) && s2.push(p2);
  }
  for (var m2 = o2.visualViewport ? o2.visualViewport.width : innerWidth, g2 = o2.visualViewport ? o2.visualViewport.height : innerHeight, w2 = window.scrollX || pageXOffset, v2 = window.scrollY || pageYOffset, W = e2.getBoundingClientRect(), b2 = W.height, H = W.width, y2 = W.top, E2 = W.right, M2 = W.bottom, V2 = W.left, x2 = d2 === "start" || d2 === "nearest" ? y2 : d2 === "end" ? M2 : y2 + b2 / 2, I2 = u2 === "center" ? V2 + H / 2 : u2 === "end" ? E2 : V2, C = [], T2 = 0; T2 < s2.length; T2++) {
    var k2 = s2[T2], B2 = k2.getBoundingClientRect(), D2 = B2.height, O2 = B2.width, R2 = B2.top, X = B2.right, Y2 = B2.bottom, L2 = B2.left;
    if (l2 === "if-needed" && y2 >= 0 && V2 >= 0 && M2 <= g2 && E2 <= m2 && y2 >= R2 && M2 <= Y2 && V2 >= L2 && E2 <= X)
      return C;
    var S2 = getComputedStyle(k2), j2 = parseInt(S2.borderLeftWidth, 10), q2 = parseInt(S2.borderTopWidth, 10), z2 = parseInt(S2.borderRightWidth, 10), A2 = parseInt(S2.borderBottomWidth, 10), F2 = 0, G = 0, J2 = "offsetWidth" in k2 ? k2.offsetWidth - k2.clientWidth - j2 - z2 : 0, K = "offsetHeight" in k2 ? k2.offsetHeight - k2.clientHeight - q2 - A2 : 0;
    if (f2 === k2)
      F2 = d2 === "start" ? x2 : d2 === "end" ? x2 - g2 : d2 === "nearest" ? r(v2, v2 + g2, g2, q2, A2, v2 + x2, v2 + x2 + b2, b2) : x2 - g2 / 2, G = u2 === "start" ? I2 : u2 === "center" ? I2 - m2 / 2 : u2 === "end" ? I2 - m2 : r(w2, w2 + m2, m2, j2, z2, w2 + I2, w2 + I2 + H, H), F2 = Math.max(0, F2 + v2), G = Math.max(0, G + w2);
    else {
      F2 = d2 === "start" ? x2 - R2 - q2 : d2 === "end" ? x2 - Y2 + A2 + K : d2 === "nearest" ? r(R2, Y2, D2, q2, A2 + K, x2, x2 + b2, b2) : x2 - (R2 + D2 / 2) + K / 2, G = u2 === "start" ? I2 - L2 - j2 : u2 === "center" ? I2 - (L2 + O2 / 2) + J2 / 2 : u2 === "end" ? I2 - X + z2 + J2 : r(L2, X, O2, j2, z2 + J2, I2, I2 + H, H);
      var N2 = k2.scrollLeft, P2 = k2.scrollTop;
      x2 += P2 - (F2 = Math.max(0, Math.min(P2 + F2, k2.scrollHeight - D2 + K))), I2 += N2 - (G = Math.max(0, Math.min(N2 + G, k2.scrollWidth - O2 + J2)));
    }
    C.push({ el: k2, top: F2, left: G });
  }
  return C;
}
function isOptionsObject(options2) {
  return options2 === Object(options2) && Object.keys(options2).length !== 0;
}
function defaultBehavior(actions, behavior) {
  if (behavior === void 0) {
    behavior = "auto";
  }
  var canSmoothScroll = "scrollBehavior" in document.body.style;
  actions.forEach(function(_ref) {
    var el = _ref.el, top = _ref.top, left = _ref.left;
    if (el.scroll && canSmoothScroll) {
      el.scroll({
        top,
        left,
        behavior
      });
    } else {
      el.scrollTop = top;
      el.scrollLeft = left;
    }
  });
}
function getOptions(options2) {
  if (options2 === false) {
    return {
      block: "end",
      inline: "nearest"
    };
  }
  if (isOptionsObject(options2)) {
    return options2;
  }
  return {
    block: "start",
    inline: "nearest"
  };
}
function scrollIntoView$1(target, options2) {
  var targetIsDetached = !target.ownerDocument.documentElement.contains(target);
  if (isOptionsObject(options2) && typeof options2.behavior === "function") {
    return options2.behavior(targetIsDetached ? [] : compute(target, options2));
  }
  if (targetIsDetached) {
    return;
  }
  var computeOptions = getOptions(options2);
  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);
}
var nativeMin = Math.min;
function baseIntersection(arrays2, iteratee, comparator) {
  var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays2[0].length, othLength = arrays2.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
  while (othIndex--) {
    var array3 = arrays2[othIndex];
    if (othIndex && iteratee) {
      array3 = arrayMap(array3, baseUnary(iteratee));
    }
    maxLength = nativeMin(array3.length, maxLength);
    caches[othIndex] = !comparator && (iteratee || length >= 120 && array3.length >= 120) ? new SetCache(othIndex && array3) : void 0;
  }
  array3 = arrays2[0];
  var index2 = -1, seen = caches[0];
  outer:
    while (++index2 < length && result.length < maxLength) {
      var value26 = array3[index2], computed2 = iteratee ? iteratee(value26) : value26;
      value26 = comparator || value26 !== 0 ? value26 : 0;
      if (!(seen ? cacheHas(seen, computed2) : includes(result, computed2, comparator))) {
        othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if (!(cache ? cacheHas(cache, computed2) : includes(arrays2[othIndex], computed2, comparator))) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(computed2);
        }
        result.push(value26);
      }
    }
  return result;
}
function baseRest(func, start) {
  return setToString$1(overRest(func, start, identity), func + "");
}
function isArrayLikeObject(value26) {
  return isObjectLike(value26) && isArrayLike(value26);
}
function castArrayLikeObject(value26) {
  return isArrayLikeObject(value26) ? value26 : [];
}
var intersection = baseRest(function(arrays2) {
  var mapped = arrayMap(arrays2, castArrayLikeObject);
  return mapped.length && mapped[0] === arrays2[0] ? baseIntersection(mapped) : [];
});
var intersection$1 = intersection;
function isRequired(rules2) {
  var isRequired2 = false;
  if (rules2 && rules2.length) {
    rules2.every(function(rule) {
      if (rule.required) {
        isRequired2 = true;
        return false;
      }
      return true;
    });
  }
  return isRequired2;
}
function toArray$2(value26) {
  if (value26 === void 0 || value26 === null) {
    return [];
  }
  return Array.isArray(value26) ? value26 : [value26];
}
function getPropByPath(obj, path2, strict) {
  var tempObj = obj;
  path2 = path2.replace(/\[(\w+)\]/g, ".$1");
  path2 = path2.replace(/^\./, "");
  var keyArr = path2.split(".");
  var i2 = 0;
  for (var len = keyArr.length; i2 < len - 1; ++i2) {
    if (!tempObj && !strict)
      break;
    var key2 = keyArr[i2];
    if (key2 in tempObj) {
      tempObj = tempObj[key2];
    } else {
      if (strict) {
        throw new Error("please transfer a valid name path to validate!");
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i2],
    v: tempObj ? tempObj[keyArr[i2]] : null,
    isValid: tempObj && keyArr[i2] in tempObj
  };
}
function useForm(modelRef, rulesRef, options2) {
  var initialModel = cloneDeep(unref(modelRef));
  var validateInfos = reactive({});
  var rulesKeys = computed(function() {
    return rulesRef ? Object.keys(unref(rulesRef)) : [];
  });
  watch(rulesKeys, function() {
    var newValidateInfos = {};
    rulesKeys.value.forEach(function(key3) {
      newValidateInfos[key3] = validateInfos[key3] || {
        autoLink: false,
        required: isRequired(unref(rulesRef)[key3])
      };
      delete validateInfos[key3];
    });
    for (var key2 in validateInfos) {
      if (Object.prototype.hasOwnProperty.call(validateInfos, key2)) {
        delete validateInfos[key2];
      }
    }
    _extends$1(validateInfos, newValidateInfos);
  }, {
    immediate: true
  });
  var resetFields = function resetFields2(newValues) {
    _extends$1(unref(modelRef), _extends$1(_extends$1({}, cloneDeep(initialModel)), newValues));
    nextTick(function() {
      Object.keys(validateInfos).forEach(function(key2) {
        validateInfos[key2] = {
          autoLink: false,
          required: isRequired(unref(rulesRef)[key2])
        };
      });
    });
  };
  var filterRules = function filterRules2() {
    var rules2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var trigger2 = arguments.length > 1 ? arguments[1] : void 0;
    if (!trigger2.length) {
      return rules2;
    } else {
      return rules2.filter(function(rule) {
        var triggerList = toArray$2(rule.trigger || "change");
        return intersection$1(triggerList, trigger2).length;
      });
    }
  };
  var lastValidatePromise = null;
  var validateFields = function validateFields2(names2) {
    var option = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var strict = arguments.length > 2 ? arguments[2] : void 0;
    var promiseList = [];
    var values = {};
    var _loop = function _loop2(i3) {
      var name2 = names2[i3];
      var prop = getPropByPath(unref(modelRef), name2, strict);
      if (!prop.isValid)
        return "continue";
      values[name2] = prop.v;
      var rules2 = filterRules(unref(rulesRef)[name2], toArray$2(option && option.trigger));
      if (rules2.length) {
        promiseList.push(validateField(name2, prop.v, rules2, option || {}).then(function() {
          return {
            name: name2,
            errors: [],
            warnings: []
          };
        }).catch(function(ruleErrors) {
          var mergedErrors = [];
          var mergedWarnings = [];
          ruleErrors.forEach(function(_ref) {
            var warningOnly = _ref.rule.warningOnly, errors = _ref.errors;
            if (warningOnly) {
              mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors));
            } else {
              mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors));
            }
          });
          if (mergedErrors.length) {
            return Promise.reject({
              name: name2,
              errors: mergedErrors,
              warnings: mergedWarnings
            });
          }
          return {
            name: name2,
            errors: mergedErrors,
            warnings: mergedWarnings
          };
        }));
      }
    };
    for (var i2 = 0; i2 < names2.length; i2++) {
      var _ret = _loop(i2);
      if (_ret === "continue")
        continue;
    }
    var summaryPromise = allPromiseFinish(promiseList);
    lastValidatePromise = summaryPromise;
    var returnPromise = summaryPromise.then(function() {
      if (lastValidatePromise === summaryPromise) {
        return Promise.resolve(values);
      }
      return Promise.reject([]);
    }).catch(function(results) {
      var errorList = results.filter(function(result) {
        return result && result.errors.length;
      });
      return Promise.reject({
        values,
        errorFields: errorList,
        outOfDate: lastValidatePromise !== summaryPromise
      });
    });
    returnPromise.catch(function(e2) {
      return e2;
    });
    return returnPromise;
  };
  var validateField = function validateField2(name2, value26, rules2) {
    var option = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var promise = validateRules([name2], value26, rules2, _extends$1({
      validateMessages: defaultValidateMessages
    }, option), !!option.validateFirst);
    if (!validateInfos[name2]) {
      return promise.catch(function(e2) {
        return e2;
      });
    }
    validateInfos[name2].validateStatus = "validating";
    promise.catch(function(e2) {
      return e2;
    }).then(function() {
      var results = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      if (validateInfos[name2].validateStatus === "validating") {
        var res = results.filter(function(result) {
          return result && result.errors.length;
        });
        validateInfos[name2].validateStatus = res.length ? "error" : "success";
        validateInfos[name2].help = res.length ? res.map(function(r2) {
          return r2.errors;
        }) : "";
      }
    });
    return promise;
  };
  var validate2 = function validate3(names2, option) {
    var keys2 = [];
    var strict = true;
    if (!names2) {
      strict = false;
      keys2 = rulesKeys.value;
    } else if (Array.isArray(names2)) {
      keys2 = names2;
    } else {
      keys2 = [names2];
    }
    var promises = validateFields(keys2, option || {}, strict);
    promises.catch(function(e2) {
      return e2;
    });
    return promises;
  };
  var clearValidate = function clearValidate2(names2) {
    var keys2 = [];
    if (!names2) {
      keys2 = rulesKeys.value;
    } else if (Array.isArray(names2)) {
      keys2 = names2;
    } else {
      keys2 = [names2];
    }
    keys2.forEach(function(key2) {
      validateInfos[key2] && _extends$1(validateInfos[key2], {
        validateStatus: "",
        help: ""
      });
    });
  };
  var mergeValidateInfo = function mergeValidateInfo2(items) {
    var info3 = {
      autoLink: false
    };
    var help = [];
    var infos = Array.isArray(items) ? items : [items];
    for (var i2 = 0; i2 < infos.length; i2++) {
      var arg = infos[i2];
      if ((arg === null || arg === void 0 ? void 0 : arg.validateStatus) === "error") {
        info3.validateStatus = "error";
        arg.help && help.push(arg.help);
      }
      info3.required = info3.required || (arg === null || arg === void 0 ? void 0 : arg.required);
    }
    info3.help = help;
    return info3;
  };
  var oldModel = initialModel;
  var isFirstTime = true;
  var modelFn = function modelFn2(model) {
    var names2 = [];
    rulesKeys.value.forEach(function(key2) {
      var prop = getPropByPath(model, key2, false);
      var oldProp = getPropByPath(oldModel, key2, false);
      var isFirstValidation = isFirstTime && (options2 === null || options2 === void 0 ? void 0 : options2.immediate) && prop.isValid;
      if (isFirstValidation || !isEqual$1(prop.v, oldProp.v)) {
        names2.push(key2);
      }
    });
    validate2(names2, {
      trigger: "change"
    });
    isFirstTime = false;
    oldModel = cloneDeep(model);
  };
  var debounceOptions = options2 === null || options2 === void 0 ? void 0 : options2.debounce;
  watch(modelRef, debounceOptions && debounceOptions.wait ? debounce$1(modelFn, debounceOptions.wait, omit$1(debounceOptions, ["wait"])) : modelFn, {
    immediate: options2 && !!options2.immediate,
    deep: true
  });
  watch(rulesRef, function() {
    if (options2 && options2.validateOnRuleChange) {
      validate2();
    }
  }, {
    deep: true
  });
  return {
    modelRef,
    rulesRef,
    initialModel,
    validateInfos,
    resetFields,
    validate: validate2,
    validateField,
    mergeValidateInfo,
    clearValidate
  };
}
var formProps = {
  layout: PropsTypes.oneOf(tuple("horizontal", "inline", "vertical")),
  labelCol: {
    type: Object
  },
  wrapperCol: {
    type: Object
  },
  colon: PropsTypes.looseBool,
  labelAlign: PropsTypes.oneOf(tuple("left", "right")),
  prefixCls: PropsTypes.string,
  requiredMark: {
    type: [String, Boolean],
    default: void 0
  },
  hideRequiredMark: PropsTypes.looseBool,
  model: PropsTypes.object,
  rules: {
    type: Object
  },
  validateMessages: PropsTypes.object,
  validateOnRuleChange: PropsTypes.looseBool,
  scrollToFirstError: {
    type: [Boolean, Object]
  },
  onSubmit: PropsTypes.func,
  onFinish: PropsTypes.func,
  onFinishFailed: PropsTypes.func,
  name: PropsTypes.string,
  validateTrigger: {
    type: [String, Array]
  },
  size: {
    type: String
  }
};
function isEqualName(name1, name2) {
  return isEqual$1(toArray$3(name1), toArray$3(name2));
}
var Form = defineComponent({
  name: "AForm",
  inheritAttrs: false,
  props: initDefaultProps$1(formProps, {
    layout: "horizontal",
    hideRequiredMark: false,
    colon: true
  }),
  Item: __unplugin_components_6,
  useForm,
  emits: ["finishFailed", "submit", "finish"],
  setup: function setup88(props2, _ref) {
    var emit = _ref.emit, slots = _ref.slots, expose = _ref.expose, attrs = _ref.attrs;
    var size2 = useInjectSize(props2);
    var _useConfigInject = useConfigInject("form", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction, contextForm = _useConfigInject.form;
    var requiredMark = computed(function() {
      return props2.requiredMark === "" || props2.requiredMark;
    });
    var mergedRequiredMark = computed(function() {
      var _a;
      if (requiredMark.value !== void 0) {
        return requiredMark.value;
      }
      if (contextForm && ((_a = contextForm.value) === null || _a === void 0 ? void 0 : _a.requiredMark) !== void 0) {
        return contextForm.value.requiredMark;
      }
      if (props2.hideRequiredMark) {
        return false;
      }
      return true;
    });
    var formClassName = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-").concat(props2.layout), true), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-hide-required-mark"), mergedRequiredMark.value === false), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-").concat(size2.value), size2.value), _classNames));
    });
    var lastValidatePromise = ref();
    var fields = {};
    var addField = function addField2(eventKey, field) {
      fields[eventKey] = field;
    };
    var removeField = function removeField2(eventKey) {
      delete fields[eventKey];
    };
    var getFieldsByNameList = function getFieldsByNameList2(nameList) {
      var provideNameList = !!nameList;
      var namePathList = provideNameList ? toArray$3(nameList).map(getNamePath) : [];
      if (!provideNameList) {
        return Object.values(fields);
      } else {
        return Object.values(fields).filter(function(field) {
          return namePathList.findIndex(function(namePath) {
            return isEqualName(namePath, field.fieldName.value);
          }) > -1;
        });
      }
    };
    var resetFields = function resetFields2(name2) {
      if (!props2.model) {
        warning$4(false, "Form", "model is required for resetFields to work.");
        return;
      }
      getFieldsByNameList(name2).forEach(function(field) {
        field.resetField();
      });
    };
    var clearValidate = function clearValidate2(name2) {
      getFieldsByNameList(name2).forEach(function(field) {
        field.clearValidate();
      });
    };
    var handleFinishFailed = function handleFinishFailed2(errorInfo) {
      var scrollToFirstError = props2.scrollToFirstError;
      emit("finishFailed", errorInfo);
      if (scrollToFirstError && errorInfo.errorFields.length) {
        var scrollToFieldOptions = {};
        if (_typeof$2(scrollToFirstError) === "object") {
          scrollToFieldOptions = scrollToFirstError;
        }
        scrollToField(errorInfo.errorFields[0].name, scrollToFieldOptions);
      }
    };
    var validate2 = function validate3() {
      return validateField.apply(void 0, arguments);
    };
    var scrollToField = function scrollToField2(name2) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var fields2 = getFieldsByNameList(name2);
      if (fields2.length) {
        var fieldId = fields2[0].fieldId.value;
        var node = fieldId ? document.getElementById(fieldId) : null;
        if (node) {
          scrollIntoView$1(node, _extends$1({
            scrollMode: "if-needed",
            block: "nearest"
          }, options2));
        }
      }
    };
    var getFieldsValue = function getFieldsValue2() {
      var nameList = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      var values = {};
      Object.values(fields).forEach(function(_ref2) {
        var fieldName = _ref2.fieldName, fieldValue = _ref2.fieldValue;
        values[fieldName.value] = fieldValue.value;
      });
      if (nameList === true) {
        return values;
      } else {
        var res = {};
        toArray$3(nameList).forEach(function(namePath) {
          return res[namePath] = values[namePath];
        });
        return res;
      }
    };
    var validateFields = function validateFields2(nameList, options2) {
      warning$4(!(nameList instanceof Function), "Form", "validateFields/validateField/validate not support callback, please use promise instead");
      if (!props2.model) {
        warning$4(false, "Form", "model is required for validateFields to work.");
        return Promise.reject("Form `model` is required for validateFields to work.");
      }
      var provideNameList = !!nameList;
      var namePathList = provideNameList ? toArray$3(nameList).map(getNamePath) : [];
      var promiseList = [];
      Object.values(fields).forEach(function(field) {
        var _a;
        if (!provideNameList) {
          namePathList.push(field.namePath.value);
        }
        if (!((_a = field.rules) === null || _a === void 0 ? void 0 : _a.value.length)) {
          return;
        }
        var fieldNamePath = field.namePath.value;
        if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {
          var promise = field.validateRules(_extends$1({
            validateMessages: _extends$1(_extends$1({}, defaultValidateMessages), props2.validateMessages)
          }, options2));
          promiseList.push(promise.then(function() {
            return {
              name: fieldNamePath,
              errors: [],
              warnings: []
            };
          }).catch(function(ruleErrors) {
            var mergedErrors = [];
            var mergedWarnings = [];
            ruleErrors.forEach(function(_ref3) {
              var warningOnly = _ref3.rule.warningOnly, errors = _ref3.errors;
              if (warningOnly) {
                mergedWarnings.push.apply(mergedWarnings, _toConsumableArray(errors));
              } else {
                mergedErrors.push.apply(mergedErrors, _toConsumableArray(errors));
              }
            });
            if (mergedErrors.length) {
              return Promise.reject({
                name: fieldNamePath,
                errors: mergedErrors,
                warnings: mergedWarnings
              });
            }
            return {
              name: fieldNamePath,
              errors: mergedErrors,
              warnings: mergedWarnings
            };
          }));
        }
      });
      var summaryPromise = allPromiseFinish(promiseList);
      lastValidatePromise.value = summaryPromise;
      var returnPromise = summaryPromise.then(function() {
        if (lastValidatePromise.value === summaryPromise) {
          return Promise.resolve(getFieldsValue(namePathList));
        }
        return Promise.reject([]);
      }).catch(function(results) {
        var errorList = results.filter(function(result) {
          return result && result.errors.length;
        });
        return Promise.reject({
          values: getFieldsValue(namePathList),
          errorFields: errorList,
          outOfDate: lastValidatePromise.value !== summaryPromise
        });
      });
      returnPromise.catch(function(e2) {
        return e2;
      });
      return returnPromise;
    };
    var validateField = function validateField2() {
      return validateFields.apply(void 0, arguments);
    };
    var handleSubmit = function handleSubmit2(e2) {
      e2.preventDefault();
      e2.stopPropagation();
      emit("submit", e2);
      if (props2.model) {
        var res = validateFields();
        res.then(function(values) {
          emit("finish", values);
        }).catch(function(errors) {
          handleFinishFailed(errors);
        });
      }
    };
    expose({
      resetFields,
      clearValidate,
      validateFields,
      getFieldsValue,
      validate: validate2,
      scrollToField
    });
    useProvideForm({
      model: computed(function() {
        return props2.model;
      }),
      name: computed(function() {
        return props2.name;
      }),
      labelAlign: computed(function() {
        return props2.labelAlign;
      }),
      labelCol: computed(function() {
        return props2.labelCol;
      }),
      wrapperCol: computed(function() {
        return props2.wrapperCol;
      }),
      vertical: computed(function() {
        return props2.layout === "vertical";
      }),
      colon: computed(function() {
        return props2.colon;
      }),
      requiredMark: mergedRequiredMark,
      validateTrigger: computed(function() {
        return props2.validateTrigger;
      }),
      rules: computed(function() {
        return props2.rules;
      }),
      addField,
      removeField
    });
    watch(function() {
      return props2.rules;
    }, function() {
      if (props2.validateOnRuleChange) {
        validateFields();
      }
    });
    return function() {
      var _a;
      return createVNode("form", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "onSubmit": handleSubmit,
        "class": [formClassName.value, attrs.class]
      }), [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var Form$1 = Form;
Form$1.install = function(app) {
  app.component(Form$1.name, Form$1);
  app.component(Form$1.Item.name, Form$1.Item);
  return app;
};
var numberTag = "[object Number]";
function isNumber$1(value26) {
  return typeof value26 == "number" || isObjectLike(value26) && baseGetTag(value26) == numberTag;
}
function getClientSize() {
  var width = document.documentElement.clientWidth;
  var height = window.innerHeight || document.documentElement.clientHeight;
  return {
    width,
    height
  };
}
function getOffset$1(node) {
  var box = node.getBoundingClientRect();
  var docElem = document.documentElement;
  return {
    left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
    top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
  };
}
var RotateLeftOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M672 418H144c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H188V494h440v326z" } }, { "tag": "path", "attrs": { "d": "M819.3 328.5c-78.8-100.7-196-153.6-314.6-154.2l-.2-64c0-6.5-7.6-10.1-12.6-6.1l-128 101c-4 3.1-3.9 9.1 0 12.3L492 318.6c5.1 4 12.7.4 12.6-6.1v-63.9c12.9.1 25.9.9 38.8 2.5 42.1 5.2 82.1 18.2 119 38.7 38.1 21.2 71.2 49.7 98.4 84.3 27.1 34.7 46.7 73.7 58.1 115.8a325.95 325.95 0 016.5 140.9h74.9c14.8-103.6-11.3-213-81-302.3z" } }] }, "name": "rotate-left", "theme": "outlined" };
var RotateLeftOutlinedSvg = RotateLeftOutlined$2;
function _objectSpread$q(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$r(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$r(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var RotateLeftOutlined = function RotateLeftOutlined2(props2, context2) {
  var p2 = _objectSpread$q({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": RotateLeftOutlinedSvg
  }), null);
};
RotateLeftOutlined.displayName = "RotateLeftOutlined";
RotateLeftOutlined.inheritAttrs = false;
var RotateLeftOutlined$1 = RotateLeftOutlined;
var RotateRightOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M480.5 251.2c13-1.6 25.9-2.4 38.8-2.5v63.9c0 6.5 7.5 10.1 12.6 6.1L660 217.6c4-3.2 4-9.2 0-12.3l-128-101c-5.1-4-12.6-.4-12.6 6.1l-.2 64c-118.6.5-235.8 53.4-314.6 154.2A399.75 399.75 0 00123.5 631h74.9c-.9-5.3-1.7-10.7-2.4-16.1-5.1-42.1-2.1-84.1 8.9-124.8 11.4-42.2 31-81.1 58.1-115.8 27.2-34.7 60.3-63.2 98.4-84.3 37-20.6 76.9-33.6 119.1-38.8z" } }, { "tag": "path", "attrs": { "d": "M880 418H352c-17.7 0-32 14.3-32 32v414c0 17.7 14.3 32 32 32h528c17.7 0 32-14.3 32-32V450c0-17.7-14.3-32-32-32zm-44 402H396V494h440v326z" } }] }, "name": "rotate-right", "theme": "outlined" };
var RotateRightOutlinedSvg = RotateRightOutlined$2;
function _objectSpread$p(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$q(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$q(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var RotateRightOutlined = function RotateRightOutlined2(props2, context2) {
  var p2 = _objectSpread$p({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": RotateRightOutlinedSvg
  }), null);
};
RotateRightOutlined.displayName = "RotateRightOutlined";
RotateRightOutlined.inheritAttrs = false;
var RotateRightOutlined$1 = RotateRightOutlined;
var ZoomInOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M637 443H519V309c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v134H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h118v134c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V519h118c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z" } }] }, "name": "zoom-in", "theme": "outlined" };
var ZoomInOutlinedSvg = ZoomInOutlined$2;
function _objectSpread$o(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$p(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$p(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var ZoomInOutlined = function ZoomInOutlined2(props2, context2) {
  var p2 = _objectSpread$o({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": ZoomInOutlinedSvg
  }), null);
};
ZoomInOutlined.displayName = "ZoomInOutlined";
ZoomInOutlined.inheritAttrs = false;
var ZoomInOutlined$1 = ZoomInOutlined;
var ZoomOutOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M637 443H325c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h312c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8zm284 424L775 721c122.1-148.9 113.6-369.5-26-509-148-148.1-388.4-148.1-537 0-148.1 148.6-148.1 389 0 537 139.5 139.6 360.1 148.1 509 26l146 146c3.2 2.8 8.3 2.8 11 0l43-43c2.8-2.7 2.8-7.8 0-11zM696 696c-118.8 118.7-311.2 118.7-430 0-118.7-118.8-118.7-311.2 0-430 118.8-118.7 311.2-118.7 430 0 118.7 118.8 118.7 311.2 0 430z" } }] }, "name": "zoom-out", "theme": "outlined" };
var ZoomOutOutlinedSvg = ZoomOutOutlined$2;
function _objectSpread$n(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$o(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$o(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var ZoomOutOutlined = function ZoomOutOutlined2(props2, context2) {
  var p2 = _objectSpread$n({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": ZoomOutOutlinedSvg
  }), null);
};
ZoomOutOutlined.displayName = "ZoomOutOutlined";
ZoomOutOutlined.inheritAttrs = false;
var ZoomOutOutlined$1 = ZoomOutOutlined;
var ILazyRenderBoxPropTypes = {
  visible: PropsTypes.looseBool,
  hiddenClassName: PropsTypes.string,
  forceRender: PropsTypes.looseBool
};
var LazyRenderBox = {
  props: ILazyRenderBoxPropTypes,
  render: function render88() {
    return createVNode("div", null, [getSlot(this)]);
  }
};
var _switchScrollingEffect = function(close7) {
  var bodyIsOverflowing = document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
  if (!bodyIsOverflowing) {
    return;
  }
  if (close7) {
    document.body.style.position = "";
    document.body.style.width = "";
    return;
  }
  var scrollBarSize = getScrollBarSize();
  if (scrollBarSize) {
    document.body.style.position = "relative";
    document.body.style.width = "calc(100% - ".concat(scrollBarSize, "px)");
  }
};
function IDialogPropTypes$3() {
  return {
    keyboard: PropsTypes.looseBool,
    mask: PropsTypes.looseBool,
    afterClose: PropsTypes.func,
    closable: PropsTypes.looseBool,
    maskClosable: PropsTypes.looseBool,
    visible: PropsTypes.looseBool,
    destroyOnClose: PropsTypes.looseBool,
    mousePosition: PropsTypes.shape({
      x: PropsTypes.number,
      y: PropsTypes.number
    }).loose,
    title: PropsTypes.any,
    footer: PropsTypes.any,
    transitionName: PropsTypes.string,
    maskTransitionName: PropsTypes.string,
    animation: PropsTypes.any,
    maskAnimation: PropsTypes.any,
    wrapStyle: PropsTypes.object,
    bodyStyle: PropsTypes.object,
    maskStyle: PropsTypes.object,
    prefixCls: PropsTypes.string,
    wrapClassName: PropsTypes.string,
    width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    height: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    zIndex: PropsTypes.number,
    bodyProps: PropsTypes.any,
    maskProps: PropsTypes.any,
    wrapProps: PropsTypes.any,
    getContainer: PropsTypes.any,
    dialogStyle: PropsTypes.object,
    dialogClass: PropsTypes.string,
    closeIcon: PropsTypes.any,
    forceRender: PropsTypes.looseBool,
    getOpenCount: PropsTypes.func,
    focusTriggerAfterClose: PropsTypes.looseBool,
    onClose: PropsTypes.func
  };
}
var IDialogPropTypes$2 = IDialogPropTypes$3();
var uuid$1 = 0;
function noop$f() {
}
function getScroll$2(w2, top) {
  var ret = w2["page".concat(top ? "Y" : "X", "Offset")];
  var method3 = "scroll".concat(top ? "Top" : "Left");
  if (typeof ret !== "number") {
    var d2 = w2.document;
    ret = d2.documentElement[method3];
    if (typeof ret !== "number") {
      ret = d2.body[method3];
    }
  }
  return ret;
}
function setTransformOrigin(node, value26) {
  var style3 = node.style;
  ["Webkit", "Moz", "Ms", "ms"].forEach(function(prefix) {
    style3["".concat(prefix, "TransformOrigin")] = value26;
  });
  style3["transformOrigin"] = value26;
}
function offset(el) {
  var rect = el.getBoundingClientRect();
  var pos = {
    left: rect.left,
    top: rect.top
  };
  var doc2 = el.ownerDocument;
  var w2 = doc2.defaultView || doc2.parentWindow;
  pos.left += getScroll$2(w2);
  pos.top += getScroll$2(w2, true);
  return pos;
}
var cacheOverflow$1 = {};
var Dialog = defineComponent({
  name: "VcDialog",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(IDialogPropTypes$2, {
    mask: true,
    visible: false,
    keyboard: true,
    closable: true,
    maskClosable: true,
    destroyOnClose: false,
    prefixCls: "rc-dialog",
    getOpenCount: function getOpenCount() {
      return null;
    },
    focusTriggerAfterClose: true
  }),
  data: function data45() {
    warning$4(!this.dialogClass, "Modal", "dialogClass is deprecated, please use class instead.");
    warning$4(!this.dialogStyle, "Modal", "dialogStyle is deprecated, please use style instead.");
    return {
      inTransition: false,
      titleId: "rcDialogTitle".concat(uuid$1++),
      dialogMouseDown: void 0
    };
  },
  watch: {
    visible: function visible4(val) {
      var _this = this;
      this.$nextTick(function() {
        _this.updatedCallback(!val);
      });
    }
  },
  created: function created12() {
    provide("dialogContext", this);
  },
  mounted: function mounted24() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.updatedCallback(false);
      if ((_this2.forceRender || _this2.getContainer === false && !_this2.visible) && _this2.$refs.wrap) {
        _this2.$refs.wrap.style.display = "none";
      }
    });
  },
  beforeUnmount: function beforeUnmount16() {
    var visible9 = this.visible, getOpenCount2 = this.getOpenCount;
    if ((visible9 || this.inTransition) && !getOpenCount2()) {
      this.switchScrollingEffect();
    }
    clearTimeout(this.timeoutId);
  },
  methods: {
    getDialogWrap: function getDialogWrap() {
      return this.$refs.wrap;
    },
    updatedCallback: function updatedCallback(visible9) {
      var mousePosition2 = this.mousePosition;
      var mask = this.mask, focusTriggerAfterClose = this.focusTriggerAfterClose;
      if (this.visible) {
        if (!visible9) {
          this.openTime = Date.now();
          this.switchScrollingEffect();
          this.tryFocus();
          var dialogNode = findDOMNode(this.$refs.dialog);
          if (mousePosition2) {
            var elOffset = offset(dialogNode);
            setTransformOrigin(dialogNode, "".concat(mousePosition2.x - elOffset.left, "px ").concat(mousePosition2.y - elOffset.top, "px"));
          } else {
            setTransformOrigin(dialogNode, "");
          }
        }
      } else if (visible9) {
        this.inTransition = true;
        if (mask && this.lastOutSideFocusNode && focusTriggerAfterClose) {
          try {
            this.lastOutSideFocusNode.focus();
          } catch (e2) {
            this.lastOutSideFocusNode = null;
          }
          this.lastOutSideFocusNode = null;
        }
      }
    },
    tryFocus: function tryFocus() {
      if (!contains(this.$refs.wrap, document.activeElement)) {
        this.lastOutSideFocusNode = document.activeElement;
        this.$refs.sentinelStart.focus();
      }
    },
    onAnimateLeave: function onAnimateLeave() {
      var afterClose = this.afterClose;
      if (this.$refs.wrap) {
        this.$refs.wrap.style.display = "none";
      }
      this.inTransition = false;
      this.switchScrollingEffect();
      if (afterClose) {
        afterClose();
      }
    },
    onDialogMouseDown: function onDialogMouseDown() {
      this.dialogMouseDown = true;
    },
    onMaskMouseUp: function onMaskMouseUp() {
      var _this3 = this;
      if (this.dialogMouseDown) {
        this.timeoutId = setTimeout(function() {
          _this3.dialogMouseDown = false;
        }, 0);
      }
    },
    onMaskClick: function onMaskClick(e2) {
      if (Date.now() - this.openTime < 300) {
        return;
      }
      if (e2.target === e2.currentTarget && !this.dialogMouseDown) {
        this.close(e2);
      }
    },
    onKeydown: function onKeydown(e2) {
      var props2 = this.$props;
      if (props2.keyboard && e2.keyCode === KeyCode$2.ESC) {
        e2.stopPropagation();
        this.close(e2);
        return;
      }
      if (props2.visible) {
        if (e2.keyCode === KeyCode$2.TAB) {
          var activeElement = document.activeElement;
          var sentinelStart = this.$refs.sentinelStart;
          if (e2.shiftKey) {
            if (activeElement === sentinelStart) {
              this.$refs.sentinelEnd.focus();
            }
          } else if (activeElement === this.$refs.sentinelEnd) {
            sentinelStart.focus();
          }
        }
      }
    },
    getDialogElement: function getDialogElement() {
      var _this4 = this;
      var closable = this.closable, prefixCls2 = this.prefixCls, width = this.width, height = this.height, title2 = this.title, tempFooter = this.footer, bodyStyle = this.bodyStyle, visible9 = this.visible, bodyProps = this.bodyProps, forceRender = this.forceRender, closeIcon = this.closeIcon, _this$dialogStyle = this.dialogStyle, dialogStyle = _this$dialogStyle === void 0 ? {} : _this$dialogStyle, _this$dialogClass = this.dialogClass, dialogClass = _this$dialogClass === void 0 ? "" : _this$dialogClass;
      var dest = _extends$1({}, dialogStyle);
      if (width !== void 0) {
        dest.width = typeof width === "number" ? "".concat(width, "px") : width;
      }
      if (height !== void 0) {
        dest.height = typeof height === "number" ? "".concat(height, "px") : height;
      }
      var footer;
      if (tempFooter) {
        footer = createVNode("div", {
          "key": "footer",
          "class": "".concat(prefixCls2, "-footer"),
          "ref": "footer"
        }, [tempFooter]);
      }
      var header;
      if (title2) {
        header = createVNode("div", {
          "key": "header",
          "class": "".concat(prefixCls2, "-header"),
          "ref": "header"
        }, [createVNode("div", {
          "class": "".concat(prefixCls2, "-title"),
          "id": this.titleId
        }, [title2])]);
      }
      var closer;
      if (closable) {
        closer = createVNode("button", {
          "type": "button",
          "key": "close",
          "onClick": this.close || noop$f,
          "aria-label": "Close",
          "class": "".concat(prefixCls2, "-close")
        }, [closeIcon || createVNode("span", {
          "class": "".concat(prefixCls2, "-close-x")
        }, null)]);
      }
      var _this$$attrs = this.$attrs, stl = _this$$attrs.style, className = _this$$attrs.class;
      var style3 = _extends$1(_extends$1({}, stl), dest);
      var sentinelStyle2 = {
        width: 0,
        height: 0,
        overflow: "hidden"
      };
      var cls = [prefixCls2, className, dialogClass];
      var transitionName2 = this.getTransitionName();
      var dialogElement = withDirectives(createVNode(LazyRenderBox, {
        "key": "dialog-element",
        "role": "document",
        "ref": "dialog",
        "style": style3,
        "class": cls,
        "forceRender": forceRender,
        "onMousedown": this.onDialogMouseDown
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "tabindex": 0,
            "ref": "sentinelStart",
            "style": sentinelStyle2,
            "aria-hidden": "true"
          }, null), createVNode("div", {
            "class": "".concat(prefixCls2, "-content")
          }, [closer, header, createVNode("div", _objectSpread2$2({
            "key": "body",
            "class": "".concat(prefixCls2, "-body"),
            "style": bodyStyle,
            "ref": "body"
          }, bodyProps), [getSlot(_this4)]), footer]), createVNode("div", {
            "tabindex": 0,
            "ref": "sentinelEnd",
            "style": sentinelStyle2,
            "aria-hidden": "true"
          }, null)];
        }
      }), [[vShow, visible9]]);
      var dialogTransitionProps = getTransitionProps(transitionName2, {
        onAfterLeave: this.onAnimateLeave
      });
      return createVNode(Transition, _objectSpread2$2({
        "key": "dialog"
      }, dialogTransitionProps), {
        default: function _default8() {
          return [visible9 || !_this4.destroyOnClose ? dialogElement : null];
        }
      });
    },
    getZIndexStyle: function getZIndexStyle2() {
      var style3 = {};
      var props2 = this.$props;
      if (props2.zIndex !== void 0) {
        style3.zIndex = props2.zIndex;
      }
      return style3;
    },
    getWrapStyle: function getWrapStyle() {
      return _extends$1(_extends$1({}, this.getZIndexStyle()), this.wrapStyle);
    },
    getMaskStyle: function getMaskStyle() {
      return _extends$1(_extends$1({}, this.getZIndexStyle()), this.maskStyle);
    },
    getMaskElement: function getMaskElement2() {
      var props2 = this.$props;
      var maskElement;
      if (props2.mask) {
        var maskTransition = this.getMaskTransitionName();
        var tempMaskElement = withDirectives(createVNode(LazyRenderBox, _objectSpread2$2({
          "style": this.getMaskStyle(),
          "key": "mask",
          "class": "".concat(props2.prefixCls, "-mask")
        }, props2.maskProps || {}), null), [[vShow, props2.visible]]);
        if (maskTransition) {
          var maskTransitionProps = getTransitionProps(maskTransition);
          maskElement = createVNode(Transition, _objectSpread2$2({
            "key": "mask"
          }, maskTransitionProps), {
            default: function _default8() {
              return [tempMaskElement];
            }
          });
        } else {
          maskElement = tempMaskElement;
        }
      }
      return maskElement;
    },
    getMaskTransitionName: function getMaskTransitionName2() {
      var props2 = this.$props;
      var transitionName2 = props2.maskTransitionName;
      var animation2 = props2.maskAnimation;
      if (!transitionName2 && animation2) {
        transitionName2 = "".concat(props2.prefixCls, "-").concat(animation2);
      }
      return transitionName2;
    },
    getTransitionName: function getTransitionName4() {
      var props2 = this.$props;
      var transitionName2 = props2.transitionName;
      var animation2 = props2.animation;
      if (!transitionName2 && animation2) {
        transitionName2 = "".concat(props2.prefixCls, "-").concat(animation2);
      }
      return transitionName2;
    },
    switchScrollingEffect: function switchScrollingEffect() {
      var getOpenCount2 = this.getOpenCount;
      var openCount2 = getOpenCount2();
      if (openCount2 === 1) {
        if (cacheOverflow$1.hasOwnProperty("overflowX")) {
          return;
        }
        cacheOverflow$1 = {
          overflowX: document.body.style.overflowX,
          overflowY: document.body.style.overflowY,
          overflow: document.body.style.overflow
        };
        _switchScrollingEffect();
        document.body.style.overflow = "hidden";
      } else if (!openCount2) {
        if (cacheOverflow$1.overflow !== void 0) {
          document.body.style.overflow = cacheOverflow$1.overflow;
        }
        if (cacheOverflow$1.overflowX !== void 0) {
          document.body.style.overflowX = cacheOverflow$1.overflowX;
        }
        if (cacheOverflow$1.overflowY !== void 0) {
          document.body.style.overflowY = cacheOverflow$1.overflowY;
        }
        cacheOverflow$1 = {};
        _switchScrollingEffect(true);
      }
    },
    close: function close4(e2) {
      this.__emit("close", e2);
    }
  },
  render: function render89() {
    var prefixCls2 = this.prefixCls, maskClosable = this.maskClosable, visible9 = this.visible, wrapClassName = this.wrapClassName, title2 = this.title, wrapProps = this.wrapProps;
    var style3 = this.getWrapStyle();
    if (visible9) {
      style3.display = null;
    }
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-root")
    }, [this.getMaskElement(), createVNode("div", _objectSpread2$2({
      "tabindex": -1,
      "onKeydown": this.onKeydown,
      "class": "".concat(prefixCls2, "-wrap ").concat(wrapClassName || ""),
      "ref": "wrap",
      "onClick": maskClosable ? this.onMaskClick : noop$f,
      "onMouseup": maskClosable ? this.onMaskMouseUp : noop$f,
      "role": "dialog",
      "aria-labelledby": title2 ? this.titleId : null,
      "style": style3
    }, wrapProps), [this.getDialogElement()])]);
  }
});
function setStyle(style3) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _options$element = options2.element, element = _options$element === void 0 ? document.body : _options$element;
  var oldStyle = {};
  var styleKeys = Object.keys(style3);
  styleKeys.forEach(function(key2) {
    oldStyle[key2] = element.style[key2];
  });
  styleKeys.forEach(function(key2) {
    element.style[key2] = style3[key2];
  });
  return oldStyle;
}
var openCount = 0;
var windowIsUndefined = !(typeof window !== "undefined" && window.document && window.document.createElement);
var cacheOverflow = {};
var Portal = defineComponent({
  name: "PortalWrapper",
  props: {
    wrapperClassName: PropsTypes.string,
    forceRender: PropsTypes.looseBool,
    getContainer: PropsTypes.any,
    children: PropsTypes.func,
    visible: PropsTypes.looseBool
  },
  data: function data46() {
    this._component = null;
    var visible9 = this.$props.visible;
    openCount = visible9 ? openCount + 1 : openCount;
    return {};
  },
  watch: {
    visible: function visible5(val) {
      openCount = val ? openCount + 1 : openCount - 1;
    },
    getContainer: function getContainer3(_getContainer, prevGetContainer) {
      var getContainerIsFunc = typeof _getContainer === "function" && typeof prevGetContainer === "function";
      if (getContainerIsFunc ? _getContainer.toString() !== prevGetContainer.toString() : _getContainer !== prevGetContainer) {
        this.removeCurrentContainer(false);
      }
    }
  },
  updated: function updated13() {
    this.setWrapperClassName();
  },
  beforeUnmount: function beforeUnmount17() {
    var visible9 = this.$props.visible;
    openCount = visible9 && openCount ? openCount - 1 : openCount;
    this.removeCurrentContainer(visible9);
  },
  methods: {
    getParent: function getParent3() {
      var getContainer5 = this.$props.getContainer;
      if (getContainer5) {
        if (typeof getContainer5 === "string") {
          return document.querySelectorAll(getContainer5)[0];
        }
        if (typeof getContainer5 === "function") {
          return getContainer5();
        }
        if (_typeof$2(getContainer5) === "object" && getContainer5 instanceof window.HTMLElement) {
          return getContainer5;
        }
      }
      return document.body;
    },
    getDomContainer: function getDomContainer() {
      if (windowIsUndefined) {
        return null;
      }
      if (!this.container) {
        this.container = document.createElement("div");
        var parent2 = this.getParent();
        if (parent2) {
          parent2.appendChild(this.container);
        }
      }
      this.setWrapperClassName();
      return this.container;
    },
    setWrapperClassName: function setWrapperClassName() {
      var wrapperClassName = this.$props.wrapperClassName;
      if (this.container && wrapperClassName && wrapperClassName !== this.container.className) {
        this.container.className = wrapperClassName;
      }
    },
    savePortal: function savePortal(c2) {
      this._component = c2;
    },
    removeCurrentContainer: function removeCurrentContainer() {
      this.container = null;
      this._component = null;
    },
    switchScrollingEffect: function switchScrollingEffect2() {
      if (openCount === 1 && !Object.keys(cacheOverflow).length) {
        _switchScrollingEffect();
        cacheOverflow = setStyle({
          overflow: "hidden",
          overflowX: "hidden",
          overflowY: "hidden"
        });
      } else if (!openCount) {
        setStyle(cacheOverflow);
        cacheOverflow = {};
        _switchScrollingEffect(true);
      }
    }
  },
  render: function render90() {
    var _this$$props = this.$props, children = _this$$props.children, forceRender = _this$$props.forceRender, visible9 = _this$$props.visible;
    var portal = null;
    var childProps = {
      getOpenCount: function getOpenCount2() {
        return openCount;
      },
      getContainer: this.getDomContainer,
      switchScrollingEffect: this.switchScrollingEffect
    };
    if (forceRender || visible9 || this._component) {
      portal = createVNode(Portal$1, {
        "getContainer": this.getDomContainer,
        "children": children(childProps),
        "ref": this.savePortal
      }, null);
    }
    return portal;
  }
});
var IDialogPropTypes$1 = IDialogPropTypes$3();
var DialogWrap = defineComponent({
  inheritAttrs: false,
  props: _extends$1(_extends$1({}, IDialogPropTypes$1), {
    visible: IDialogPropTypes$1.visible.def(false)
  }),
  render: function render91() {
    var _this = this;
    var _this$$props = this.$props, visible9 = _this$$props.visible, getContainer5 = _this$$props.getContainer, forceRender = _this$$props.forceRender;
    var dialogProps = _extends$1(_extends$1(_extends$1({}, this.$props), this.$attrs), {
      ref: "_component",
      key: "dialog"
    });
    if (getContainer5 === false) {
      return createVNode(Dialog, _objectSpread2$2(_objectSpread2$2({}, dialogProps), {}, {
        "getOpenCount": function getOpenCount2() {
          return 2;
        }
      }), {
        default: function _default8() {
          return [getSlot(_this)];
        }
      });
    }
    return createVNode(Portal, {
      "visible": visible9,
      "forceRender": forceRender,
      "getContainer": getContainer5,
      "children": function children(childProps) {
        dialogProps = _extends$1(_extends$1({}, dialogProps), childProps);
        return createVNode(Dialog, dialogProps, {
          default: function _default8() {
            return [getSlot(_this)];
          }
        });
      }
    }, null);
  }
});
var DialogWrap$1 = DialogWrap;
function useFrameSetState(initial) {
  var frame = ref(null);
  var state2 = reactive(_extends$1({}, initial));
  var queue2 = ref([]);
  var setFrameState = function setFrameState2(newState) {
    if (frame.value === null) {
      queue2.value = [];
      frame.value = wrapperRaf(function() {
        var memoState;
        queue2.value.forEach(function(queueState) {
          memoState = _extends$1(_extends$1({}, memoState), queueState);
        });
        _extends$1(state2, memoState);
        frame.value = null;
      });
    }
    queue2.value.push(newState);
  };
  onMounted(function() {
    frame.value && wrapperRaf.cancel(frame.value);
  });
  return [state2, setFrameState];
}
function fixPoint(key2, start, width, clientWidth) {
  var startAddWidth = start + width;
  var offsetStart = (width - clientWidth) / 2;
  if (width > clientWidth) {
    if (start > 0) {
      return _defineProperty$U({}, key2, offsetStart);
    }
    if (start < 0 && startAddWidth < clientWidth) {
      return _defineProperty$U({}, key2, -offsetStart);
    }
  } else if (start < 0 || startAddWidth > clientWidth) {
    return _defineProperty$U({}, key2, start < 0 ? offsetStart : -offsetStart);
  }
  return {};
}
function getFixScaleEleTransPosition(width, height, left, top) {
  var _getClientSize = getClientSize(), clientWidth = _getClientSize.width, clientHeight = _getClientSize.height;
  var fixPos = null;
  if (width <= clientWidth && height <= clientHeight) {
    fixPos = {
      x: 0,
      y: 0
    };
  } else if (width > clientWidth || height > clientHeight) {
    fixPos = _extends$1(_extends$1({}, fixPoint("x", left, width, clientWidth)), fixPoint("y", top, height, clientHeight));
  }
  return fixPos;
}
var previewGroupContext = Symbol("previewGroupContext");
var context = {
  provide: function provide$1(val) {
    provide(previewGroupContext, val);
  },
  inject: function inject$1() {
    return inject(previewGroupContext, {
      isPreviewGroup: ref(false),
      previewUrls: reactive({}),
      setPreviewUrls: function setPreviewUrls() {
      },
      current: ref(null),
      setCurrent: function setCurrent() {
      },
      setShowPreview: function setShowPreview() {
      },
      setMousePosition: function setMousePosition() {
      },
      registerImage: null
    });
  }
};
var Group = defineComponent({
  name: "PreviewGroup",
  inheritAttrs: false,
  props: {
    previewPrefixCls: String
  },
  setup: function setup89(props2, _ref) {
    var slots = _ref.slots;
    var previewUrls = reactive({});
    var current2 = ref();
    var isShowPreview = ref(false);
    var mousePosition2 = ref(null);
    var setPreviewUrls = function setPreviewUrls2(val) {
      _extends$1(previewUrls, val);
    };
    var setCurrent = function setCurrent2(val) {
      current2.value = val;
    };
    var setMousePosition = function setMousePosition2(val) {
      mousePosition2.value = val;
    };
    var setShowPreview = function setShowPreview2(val) {
      isShowPreview.value = val;
    };
    var registerImage = function registerImage2(id2, url2) {
      previewUrls[id2] = url2;
      return function() {
        delete previewUrls[id2];
      };
    };
    var onPreviewClose = function onPreviewClose2(e2) {
      e2 === null || e2 === void 0 ? void 0 : e2.stopPropagation();
      isShowPreview.value = false;
      mousePosition2.value = null;
    };
    context.provide({
      isPreviewGroup: ref(true),
      previewUrls,
      setPreviewUrls,
      current: current2,
      setCurrent,
      setShowPreview,
      setMousePosition,
      registerImage
    });
    return function() {
      return createVNode(Fragment, null, [slots.default && slots.default(), createVNode(Preview$1, {
        "ria-hidden": !isShowPreview.value,
        "visible": isShowPreview.value,
        "prefixCls": props2.previewPrefixCls,
        "onClose": onPreviewClose,
        "mousePosition": mousePosition2.value,
        "src": previewUrls[current2.value]
      }, null)]);
    };
  }
});
var PreviewGroup$1 = Group;
var IDialogPropTypes = IDialogPropTypes$3();
var initialPosition = {
  x: 0,
  y: 0
};
var PreviewType = _extends$1({
  src: PropsTypes.string,
  alt: PropsTypes.string
}, IDialogPropTypes);
var Preview = defineComponent({
  name: "Preview",
  inheritAttrs: false,
  props: PreviewType,
  emits: ["close", "afterClose"],
  setup: function setup90(props2, _ref) {
    var emit = _ref.emit, attrs = _ref.attrs;
    var scale = ref(1);
    var rotate = ref(0);
    var _useFrameSetState = useFrameSetState(initialPosition), _useFrameSetState2 = _slicedToArray$2(_useFrameSetState, 2), position = _useFrameSetState2[0], setPosition = _useFrameSetState2[1];
    var onClose = function onClose2() {
      return emit("close");
    };
    var imgRef = ref();
    var originPositionRef = reactive({
      originX: 0,
      originY: 0,
      deltaX: 0,
      deltaY: 0
    });
    var isMoving = ref(false);
    var groupContext = context.inject();
    var previewUrls = groupContext.previewUrls, current2 = groupContext.current, isPreviewGroup = groupContext.isPreviewGroup, setCurrent = groupContext.setCurrent;
    var previewGroupCount = computed(function() {
      return Object.keys(previewUrls).length;
    });
    var previewUrlsKeys = computed(function() {
      return Object.keys(previewUrls);
    });
    var currentPreviewIndex = computed(function() {
      return previewUrlsKeys.value.indexOf(String(current2.value));
    });
    var combinationSrc = computed(function() {
      return isPreviewGroup.value ? previewUrls[current2.value] : props2.src;
    });
    var showLeftOrRightSwitches = computed(function() {
      return isPreviewGroup.value && previewGroupCount.value > 1;
    });
    var onAfterClose = function onAfterClose2() {
      scale.value = 1;
      rotate.value = 0;
      setPosition(initialPosition);
    };
    var onZoomIn = function onZoomIn2() {
      scale.value++;
      setPosition(initialPosition);
    };
    var onZoomOut = function onZoomOut2() {
      if (scale.value > 1) {
        scale.value--;
      }
      setPosition(initialPosition);
    };
    var onRotateRight = function onRotateRight2() {
      rotate.value += 90;
    };
    var onRotateLeft = function onRotateLeft2() {
      rotate.value -= 90;
    };
    var onSwitchLeft = function onSwitchLeft2(event) {
      event.preventDefault();
      event.stopPropagation();
      if (currentPreviewIndex.value > 0) {
        setCurrent(previewUrlsKeys.value[String(currentPreviewIndex.value - 1)]);
      }
    };
    var onSwitchRight = function onSwitchRight2(event) {
      event.preventDefault();
      event.stopPropagation();
      if (currentPreviewIndex.value < previewGroupCount.value - 1) {
        setCurrent(previewUrlsKeys.value[String(currentPreviewIndex.value + 1)]);
      }
    };
    var wrapClassName = classNames(_defineProperty$U({}, "".concat(props2.prefixCls, "-moving"), isMoving.value));
    var toolClassName = "".concat(props2.prefixCls, "-operations-operation");
    var iconClassName = "".concat(props2.prefixCls, "-operations-icon");
    var tools = [{
      icon: CloseOutlined$1,
      onClick: onClose,
      type: "close"
    }, {
      icon: ZoomInOutlined$1,
      onClick: onZoomIn,
      type: "zoomIn"
    }, {
      icon: ZoomOutOutlined$1,
      onClick: onZoomOut,
      type: "zoomOut",
      disabled: computed(function() {
        return scale.value === 1;
      })
    }, {
      icon: RotateRightOutlined$1,
      onClick: onRotateRight,
      type: "rotateRight"
    }, {
      icon: RotateLeftOutlined$1,
      onClick: onRotateLeft,
      type: "rotateLeft"
    }];
    var onMouseUp3 = function onMouseUp4() {
      if (props2.visible && isMoving.value) {
        var width = imgRef.value.offsetWidth * scale.value;
        var height = imgRef.value.offsetHeight * scale.value;
        var _getOffset = getOffset$1(imgRef.value), left = _getOffset.left, top = _getOffset.top;
        var isRotate = rotate.value % 180 !== 0;
        isMoving.value = false;
        var fixState = getFixScaleEleTransPosition(isRotate ? height : width, isRotate ? width : height, left, top);
        if (fixState) {
          setPosition(_extends$1({}, fixState));
        }
      }
    };
    var onMouseDown3 = function onMouseDown4(event) {
      event.preventDefault();
      event.stopPropagation();
      originPositionRef.deltaX = event.pageX - position.x;
      originPositionRef.deltaY = event.pageY - position.y;
      originPositionRef.originX = position.x;
      originPositionRef.originY = position.y;
      isMoving.value = true;
    };
    var onMouseMove3 = function onMouseMove4(event) {
      if (props2.visible && isMoving.value) {
        setPosition({
          x: event.pageX - originPositionRef.deltaX,
          y: event.pageY - originPositionRef.deltaY
        });
      }
    };
    var removeListeners = function removeListeners2() {
    };
    onMounted(function() {
      watch([function() {
        return props2.visible;
      }, isMoving], function() {
        removeListeners();
        var onTopMouseUpListener;
        var onTopMouseMoveListener;
        var onMouseUpListener = addEventListenerWrap(window, "mouseup", onMouseUp3, false);
        var onMouseMoveListener = addEventListenerWrap(window, "mousemove", onMouseMove3, false);
        try {
          if (window.top !== window.self) {
            onTopMouseUpListener = addEventListenerWrap(window.top, "mouseup", onMouseUp3, false);
            onTopMouseMoveListener = addEventListenerWrap(window.top, "mousemove", onMouseMove3, false);
          }
        } catch (error3) {
        }
        removeListeners = function removeListeners2() {
          onMouseUpListener.remove();
          onMouseMoveListener.remove();
          if (onTopMouseUpListener)
            onTopMouseUpListener.remove();
          if (onTopMouseMoveListener)
            onTopMouseMoveListener.remove();
        };
      }, {
        flush: "post",
        immediate: true
      });
    });
    onUnmounted(function() {
      removeListeners();
    });
    return function() {
      return createVNode(DialogWrap$1, _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "transitionName": "zoom",
        "maskTransitionName": "fade",
        "closable": false,
        "keyboard": true,
        "prefixCls": props2.prefixCls,
        "onClose": onClose,
        "afterClose": onAfterClose,
        "visible": props2.visible,
        "wrapClassName": wrapClassName,
        "getContainer": props2.getContainer
      }), {
        default: function _default8() {
          return [createVNode("ul", {
            "class": "".concat(props2.prefixCls, "-operations")
          }, [tools.map(function(_ref2) {
            var IconType = _ref2.icon, onClick7 = _ref2.onClick, type3 = _ref2.type, disabled = _ref2.disabled;
            return createVNode("li", {
              "class": classNames(toolClassName, _defineProperty$U({}, "".concat(props2.prefixCls, "-operations-operation-disabled"), disabled && (disabled === null || disabled === void 0 ? void 0 : disabled.value))),
              "onClick": onClick7,
              "key": type3
            }, [createVNode(IconType, {
              "class": iconClassName
            }, null)]);
          })]), createVNode("div", {
            "class": "".concat(props2.prefixCls, "-img-wrapper"),
            "style": {
              transform: "translate3d(".concat(position.x, "px, ").concat(position.y, "px, 0)")
            }
          }, [createVNode("img", {
            "onMousedown": onMouseDown3,
            "ref": imgRef,
            "class": "".concat(props2.prefixCls, "-img"),
            "src": combinationSrc.value,
            "alt": props2.alt,
            "style": {
              transform: "scale3d(".concat(scale.value, ", ").concat(scale.value, ", 1) rotate(").concat(rotate.value, "deg)")
            }
          }, null)]), showLeftOrRightSwitches.value && createVNode("div", {
            "class": classNames("".concat(props2.prefixCls, "-switch-left"), _defineProperty$U({}, "".concat(props2.prefixCls, "-switch-left-disabled"), currentPreviewIndex.value <= 0)),
            "onClick": onSwitchLeft
          }, [createVNode(LeftOutlined$1, null, null)]), showLeftOrRightSwitches.value && createVNode("div", {
            "class": classNames("".concat(props2.prefixCls, "-switch-right"), _defineProperty$U({}, "".concat(props2.prefixCls, "-switch-right-disabled"), currentPreviewIndex.value >= previewGroupCount.value - 1)),
            "onClick": onSwitchRight
          }, [createVNode(RightOutlined$1, null, null)])];
        }
      });
    };
  }
});
var Preview$1 = Preview;
var imageProps = {
  src: PropsTypes.string,
  wrapperClassName: PropsTypes.string,
  wrapperStyle: PropsTypes.style,
  prefixCls: PropsTypes.string,
  previewPrefixCls: PropsTypes.string,
  placeholder: PropsTypes.VNodeChild,
  fallback: PropsTypes.string,
  preview: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.shape({
    visible: PropsTypes.bool,
    onVisibleChange: PropsTypes.func,
    getContainer: PropsTypes.oneOfType([PropsTypes.func, PropsTypes.looseBool, PropsTypes.string])
  }).loose]).def(true)
};
var mergeDefaultValue = function mergeDefaultValue2(obj, defaultValues) {
  var res = _extends$1({}, obj);
  Object.keys(defaultValues).forEach(function(key2) {
    if (obj[key2] === void 0) {
      res[key2] = defaultValues[key2];
    }
  });
  return res;
};
var uuid = 0;
var ImageInternal = defineComponent({
  name: "Image",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: imageProps,
  emits: ["click"],
  setup: function setup91(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots, emit = _ref.emit;
    var prefixCls2 = computed(function() {
      return props2.prefixCls;
    });
    var previewPrefixCls = computed(function() {
      return "".concat(prefixCls2.value, "-preview");
    });
    var preview = computed(function() {
      var defaultValues = {
        visible: void 0,
        onVisibleChange: function onVisibleChange6() {
        },
        getContainer: void 0
      };
      return _typeof$2(props2.preview) === "object" ? mergeDefaultValue(props2.preview, defaultValues) : defaultValues;
    });
    var isCustomPlaceholder = computed(function() {
      return props2.placeholder && props2.placeholder !== true || slots.placeholder;
    });
    var previewVisible = computed(function() {
      return preview.value.visible;
    });
    var onPreviewVisibleChange = computed(function() {
      return preview.value.onVisibleChange;
    });
    var getPreviewContainer = computed(function() {
      return preview.value.getContainer;
    });
    var isControlled = computed(function() {
      return previewVisible.value !== void 0;
    });
    var isShowPreview = ref(!!previewVisible.value);
    watch(previewVisible, function() {
      isShowPreview.value = !!previewVisible.value;
    });
    watch(isShowPreview, function(val, preVal) {
      onPreviewVisibleChange.value(val, preVal);
    });
    var status = ref(isCustomPlaceholder.value ? "loading" : "normal");
    watch(function() {
      return props2.src;
    }, function() {
      status.value = isCustomPlaceholder.value ? "loading" : "normal";
    });
    var mousePosition2 = ref(null);
    var isError = computed(function() {
      return status.value === "error";
    });
    var groupContext = context.inject();
    var isPreviewGroup = groupContext.isPreviewGroup, setCurrent = groupContext.setCurrent, setGroupShowPreview = groupContext.setShowPreview, setGroupMousePosition = groupContext.setMousePosition, registerImage = groupContext.registerImage;
    var currentId = ref(uuid++);
    var canPreview = computed(function() {
      return props2.preview && !isError.value;
    });
    var onLoad3 = function onLoad4() {
      status.value = "normal";
    };
    var onError2 = function onError3() {
      status.value = "error";
    };
    var onPreview = function onPreview2(e2) {
      if (!isControlled.value) {
        var _getOffset = getOffset$1(e2.target), left = _getOffset.left, top = _getOffset.top;
        if (isPreviewGroup.value) {
          setCurrent(currentId.value);
          setGroupMousePosition({
            x: left,
            y: top
          });
        } else {
          mousePosition2.value = {
            x: left,
            y: top
          };
        }
      }
      if (isPreviewGroup.value) {
        setGroupShowPreview(true);
      } else {
        isShowPreview.value = true;
      }
      emit("click", e2);
    };
    var onPreviewClose = function onPreviewClose2() {
      isShowPreview.value = false;
      if (!isControlled.value) {
        mousePosition2.value = null;
      }
    };
    var img = ref(null);
    watch(function() {
      return img;
    }, function() {
      if (status.value !== "loading")
        return;
      if (img.value.complete && (img.value.naturalWidth || img.value.naturalHeight)) {
        onLoad3();
      }
    });
    var unRegister = function unRegister2() {
    };
    onMounted(function() {
      watch([function() {
        return props2.src;
      }, canPreview], function() {
        unRegister();
        if (!isPreviewGroup.value) {
          return function() {
          };
        }
        unRegister = registerImage(currentId.value, props2.src);
        if (!canPreview.value) {
          unRegister();
        }
      }, {
        flush: "post",
        immediate: true
      });
    });
    var toSizePx = function toSizePx2(l2) {
      if (isNumber$1(l2))
        return l2 + "px";
      return l2;
    };
    return function() {
      var prefixCls3 = props2.prefixCls, wrapperClassName = props2.wrapperClassName, fallback = props2.fallback, src = props2.src, preview2 = props2.preview, placeholder = props2.placeholder, wrapperStyle2 = props2.wrapperStyle;
      var width = attrs.width, height = attrs.height, crossorigin = attrs.crossorigin, decoding = attrs.decoding, alt = attrs.alt, sizes = attrs.sizes, srcset = attrs.srcset, usemap = attrs.usemap, cls = attrs.class, style3 = attrs.style;
      var wrappperClass = classNames(prefixCls3, wrapperClassName, _defineProperty$U({}, "".concat(prefixCls3, "-error"), isError.value));
      var mergedSrc = isError.value && fallback ? fallback : src;
      var previewMask = slots.previewMask && slots.previewMask();
      var imgCommonProps = {
        crossorigin,
        decoding,
        alt,
        sizes,
        srcset,
        usemap,
        class: classNames("".concat(prefixCls3, "-img"), _defineProperty$U({}, "".concat(prefixCls3, "-img-placeholder"), placeholder === true), cls),
        style: _extends$1({
          height
        }, style3)
      };
      return createVNode(Fragment, null, [createVNode("div", {
        "class": wrappperClass,
        "onClick": preview2 && !isError.value ? onPreview : function(e2) {
          emit("click", e2);
        },
        "style": _extends$1({
          width: toSizePx(width),
          height: toSizePx(height)
        }, wrapperStyle2)
      }, [createVNode("img", _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, imgCommonProps), isError.value && fallback ? {
        src: fallback
      } : {
        onLoad: onLoad3,
        onError: onError2,
        src
      }), {}, {
        "ref": img
      }), null), status.value === "loading" && createVNode("div", {
        "aria-hidden": "true",
        "class": "".concat(prefixCls3, "-placeholder")
      }, [placeholder || slots.placeholder && slots.placeholder()]), previewMask && canPreview.value && createVNode("div", {
        "class": "".concat(prefixCls3, "-mask")
      }, [previewMask])]), !isPreviewGroup.value && canPreview.value && createVNode(Preview$1, {
        "aria-hidden": !isShowPreview.value,
        "visible": isShowPreview.value,
        "prefixCls": previewPrefixCls.value,
        "onClose": onPreviewClose,
        "mousePosition": mousePosition2.value,
        "src": mergedSrc,
        "alt": alt,
        "getContainer": getPreviewContainer.value
      }, null)]);
    };
  }
});
ImageInternal.PreviewGroup = PreviewGroup$1;
var Image$3 = ImageInternal;
var InternalPreviewGroup = defineComponent({
  name: "AImagePreviewGroup",
  inheritAttrs: false,
  props: {
    previewPrefixCls: PropsTypes.string
  },
  setup: function setup92(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots;
    var configProvider = inject("configProvider", defaultConfigProvider);
    var prefixCls2 = computed(function() {
      return configProvider.getPrefixCls("image-preview", props2.previewPrefixCls);
    });
    return function() {
      return createVNode(PreviewGroup$1, _objectSpread2$2(_objectSpread2$2({}, _extends$1(_extends$1({}, attrs), props2)), {}, {
        "previewPrefixCls": prefixCls2.value
      }), slots);
    };
  }
});
var PreviewGroup = InternalPreviewGroup;
var Image$1 = defineComponent({
  name: "AImage",
  inheritAttrs: false,
  props: imageProps,
  setup: function setup93(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("image", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      return createVNode(Image$3, _extends$1(_extends$1(_extends$1({}, attrs), props2), {
        prefixCls: prefixCls2.value
      }), slots);
    };
  }
});
Image$1.PreviewGroup = PreviewGroup;
Image$1.install = function(app) {
  app.component(Image$1.name, Image$1);
  app.component(Image$1.PreviewGroup.name, Image$1.PreviewGroup);
  return app;
};
var Image$2 = Image$1;
var ITouchProps = {
  disabled: PropsTypes.looseBool,
  activeClassName: PropsTypes.string,
  activeStyle: PropsTypes.any
};
var TouchFeedback = defineComponent({
  name: "TouchFeedback",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(ITouchProps, {
    disabled: false
  }),
  data: function data47() {
    this.child = null;
    return {
      active: false
    };
  },
  mounted: function mounted25() {
    var _this = this;
    this.$nextTick(function() {
      if (_this.disabled && _this.active) {
        _this.setState({
          active: false
        });
      }
    });
  },
  methods: {
    triggerEvent: function triggerEvent2(type3, isActive, ev) {
      var eventType = "on".concat(type3);
      var child = this.child;
      if (child.props[eventType]) {
        child.props[eventType](ev);
      }
      if (isActive !== this.active) {
        this.setState({
          active: isActive
        });
      }
    },
    onTouchStart: function onTouchStart(e2) {
      this.triggerEvent("Touchstart", true, e2);
    },
    onTouchMove: function onTouchMove(e2) {
      this.triggerEvent("Touchmove", false, e2);
    },
    onTouchEnd: function onTouchEnd2(e2) {
      this.triggerEvent("Touchend", false, e2);
    },
    onTouchCancel: function onTouchCancel(e2) {
      this.triggerEvent("Touchcancel", false, e2);
    },
    onMouseDown: function onMouseDown2(e2) {
      this.triggerEvent("Mousedown", true, e2);
    },
    onMouseUp: function onMouseUp2(e2) {
      this.triggerEvent("Mouseup", false, e2);
    },
    onMouseLeave: function onMouseLeave2(e2) {
      this.triggerEvent("Mouseleave", false, e2);
    }
  },
  render: function render92() {
    var _ref;
    var _this$$props = this.$props, disabled = _this$$props.disabled, _this$$props$activeCl = _this$$props.activeClassName, activeClassName = _this$$props$activeCl === void 0 ? "" : _this$$props$activeCl, _this$$props$activeSt = _this$$props.activeStyle, activeStyle = _this$$props$activeSt === void 0 ? {} : _this$$props$activeSt;
    var child = getSlot(this);
    if (child.length !== 1) {
      warning$4(false, "m-feedback\u7EC4\u4EF6\u53EA\u80FD\u5305\u542B\u4E00\u4E2A\u5B50\u5143\u7D20");
      return null;
    }
    var events = disabled ? void 0 : (_ref = {}, _defineProperty$U(_ref, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", this.onTouchStart), _defineProperty$U(_ref, supportsPassive$1 ? "onTouchmovePassive" : "onTouchmove", this.onTouchMove), _defineProperty$U(_ref, "onTouchend", this.onTouchEnd), _defineProperty$U(_ref, "onTouchcancel", this.onTouchCancel), _defineProperty$U(_ref, "onMousedown", this.onMouseDown), _defineProperty$U(_ref, "onMouseup", this.onMouseUp), _defineProperty$U(_ref, "onMouseleave", this.onMouseLeave), _ref);
    child = child[0];
    this.child = child;
    if (!disabled && this.active) {
      var _child$props = child.props, style3 = _child$props.style, className = _child$props.class;
      if (activeStyle !== false) {
        if (activeStyle) {
          style3 = _extends$1(_extends$1({}, style3), activeStyle);
        }
        className = classNames(className, activeClassName);
      }
      return cloneElement(child, _extends$1({
        class: className,
        style: style3
      }, events));
    }
    return cloneElement(child, events);
  }
});
var InputHandler = {
  name: "InputHandler",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    disabled: PropsTypes.looseBool
  },
  render: function render93() {
    var _this = this;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, disabled = _this$$props.disabled;
    var touchableProps = {
      disabled,
      activeClassName: "".concat(prefixCls2, "-handler-active")
    };
    return createVNode(TouchFeedback, touchableProps, {
      default: function _default8() {
        return [createVNode("span", _this.$attrs, [getSlot(_this)])];
      }
    });
  }
};
var InputHandler$1 = InputHandler;
function preventDefault(e2) {
  e2.preventDefault();
}
function defaultParser(input) {
  return input.replace(/[^\w\.-]+/g, "");
}
var SPEED = 200;
var DELAY = 600;
var MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
var isValidProps = function isValidProps2(value26) {
  return value26 !== void 0 && value26 !== null;
};
var isEqual = function isEqual2(oldValue, newValue) {
  return newValue === oldValue || typeof newValue === "number" && typeof oldValue === "number" && isNaN(newValue) && isNaN(oldValue);
};
var inputNumberProps$1 = {
  value: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  defaultValue: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  focusOnUpDown: PropsTypes.looseBool,
  autofocus: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  placeholder: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  readonly: PropsTypes.looseBool,
  max: PropsTypes.number,
  min: PropsTypes.number,
  step: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  upHandler: PropsTypes.any,
  downHandler: PropsTypes.any,
  useTouch: PropsTypes.looseBool,
  formatter: PropsTypes.func,
  parser: PropsTypes.func,
  precision: PropsTypes.number,
  required: PropsTypes.looseBool,
  pattern: PropsTypes.string,
  decimalSeparator: PropsTypes.string,
  autocomplete: PropsTypes.string,
  title: PropsTypes.string,
  name: PropsTypes.string,
  id: PropsTypes.string,
  type: PropsTypes.string,
  maxlength: PropsTypes.any
};
var VcInputNumber = defineComponent({
  name: "VCInputNumber",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(inputNumberProps$1, {
    focusOnUpDown: true,
    useTouch: false,
    prefixCls: "rc-input-number",
    min: -MAX_SAFE_INTEGER$1,
    step: 1,
    parser: defaultParser,
    required: false,
    autocomplete: "off"
  }),
  data: function data48() {
    var props2 = getOptionProps(this);
    this.prevProps = _extends$1({}, props2);
    var value26;
    if ("value" in props2) {
      value26 = this.value;
    } else {
      value26 = this.defaultValue;
    }
    var validValue = this.getValidValue(this.toNumber(value26));
    return {
      inputValue: this.toPrecisionAsStep(validValue),
      sValue: validValue,
      focused: this.autofocus
    };
  },
  mounted: function mounted26() {
    var _this = this;
    this.$nextTick(function() {
      _this.updatedFunc();
    });
  },
  updated: function updated14() {
    var _this2 = this;
    var _this$$props = this.$props, value26 = _this$$props.value, max4 = _this$$props.max, min4 = _this$$props.min;
    var focused = this.$data.focused;
    var prevProps = this.prevProps;
    var props2 = getOptionProps(this);
    if (prevProps) {
      if (!isEqual(prevProps.value, value26) || !isEqual(prevProps.max, max4) || !isEqual(prevProps.min, min4)) {
        var validValue = focused ? value26 : this.getValidValue(value26);
        var nextInputValue;
        if (this.pressingUpOrDown) {
          nextInputValue = validValue;
        } else if (this.inputting) {
          nextInputValue = this.rawInput;
        } else {
          nextInputValue = this.toPrecisionAsStep(validValue);
        }
        this.setState({
          sValue: validValue,
          inputValue: nextInputValue
        });
      }
      var nextValue = "value" in props2 ? value26 : this.$data.sValue;
      if ("max" in props2 && prevProps.max !== max4 && typeof nextValue === "number" && nextValue > max4) {
        this.__emit("update:value", max4);
        this.__emit("change", max4);
      }
      if ("min" in props2 && prevProps.min !== min4 && typeof nextValue === "number" && nextValue < min4) {
        this.__emit("update:value", min4);
        this.__emit("change", min4);
      }
    }
    this.prevProps = _extends$1({}, props2);
    this.$nextTick(function() {
      _this2.updatedFunc();
    });
  },
  beforeUnmount: function beforeUnmount18() {
    this.stop();
  },
  methods: {
    updatedFunc: function updatedFunc() {
      var inputElem = this.inputRef;
      try {
        if (this.cursorStart !== void 0 && this.$data.focused) {
          if (!this.partRestoreByAfter(this.cursorAfter) && this.$data.sValue !== this.value) {
            var pos = this.cursorStart + 1;
            if (!this.cursorAfter) {
              pos = inputElem.value.length;
            } else if (this.lastKeyCode === KeyCode$2.BACKSPACE) {
              pos = this.cursorStart - 1;
            } else if (this.lastKeyCode === KeyCode$2.DELETE) {
              pos = this.cursorStart;
            }
            this.fixCaret(pos, pos);
          } else if (this.currentValue === inputElem.value) {
            switch (this.lastKeyCode) {
              case KeyCode$2.BACKSPACE:
                this.fixCaret(this.cursorStart - 1, this.cursorStart - 1);
                break;
              case KeyCode$2.DELETE:
                this.fixCaret(this.cursorStart + 1, this.cursorStart + 1);
                break;
              default:
            }
          }
        }
      } catch (e2) {
      }
      this.lastKeyCode = null;
      if (!this.pressingUpOrDown) {
        return;
      }
      if (this.focusOnUpDown && this.$data.focused) {
        if (document.activeElement !== inputElem) {
          this.focus();
        }
      }
      this.pressingUpOrDown = false;
    },
    onKeyDown: function onKeyDown11(e2) {
      if (e2.keyCode === KeyCode$2.UP) {
        var ratio = this.getRatio(e2);
        this.up(e2, ratio);
        this.stop();
      } else if (e2.keyCode === KeyCode$2.DOWN) {
        var _ratio = this.getRatio(e2);
        this.down(e2, _ratio);
        this.stop();
      } else if (e2.keyCode === KeyCode$2.ENTER) {
        this.__emit("pressEnter", e2);
      }
      this.recordCursorPosition();
      this.lastKeyCode = e2.keyCode;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      this.__emit.apply(this, ["keydown", e2].concat(args));
    },
    onKeyUp: function onKeyUp(e2) {
      this.stop();
      this.recordCursorPosition();
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      this.__emit.apply(this, ["keyup", e2].concat(args));
    },
    onTrigger: function onTrigger(e2) {
      if (e2.target.composing)
        return false;
      this.onChange(e2);
    },
    onChange: function onChange3(e2) {
      if (this.$data.focused) {
        this.inputting = true;
      }
      this.rawInput = this.parser(this.getValueFromEvent(e2));
      this.setState({
        inputValue: this.rawInput
      });
      var num = this.toNumber(this.rawInput);
      this.__emit("update:value", num);
      this.__emit("change", num);
    },
    onFocus: function onFocus4() {
      this.setState({
        focused: true
      });
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      this.__emit.apply(this, ["focus"].concat(args));
    },
    onBlur: function onBlur5() {
      this.inputting = false;
      this.setState({
        focused: false
      });
      var value26 = this.getCurrentValidValue(this.$data.inputValue);
      var newValue = this.setValue(value26);
      if (this.$attrs.onBlur && this.inputRef) {
        var originValue = this.inputRef.value;
        var inputValue = this.getInputDisplayValue({
          focused: false,
          sValue: newValue
        });
        this.inputRef.value = inputValue;
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        this.__emit.apply(this, ["blur"].concat(args));
        this.inputRef.value = originValue;
      }
    },
    getCurrentValidValue: function getCurrentValidValue(value26) {
      var val = value26;
      if (val === "") {
        val = "";
      } else if (!this.isNotCompleteNumber(parseFloat(val, 10))) {
        val = this.getValidValue(val);
      } else {
        val = this.$data.sValue;
      }
      return this.toNumber(val);
    },
    getRatio: function getRatio(e2) {
      var ratio = 1;
      if (e2.metaKey || e2.ctrlKey) {
        ratio = 0.1;
      } else if (e2.shiftKey) {
        ratio = 10;
      }
      return ratio;
    },
    getValueFromEvent: function getValueFromEvent(e2) {
      var value26 = e2.target.value.trim().replace(/。/g, ".");
      if (isValidProps(this.decimalSeparator)) {
        value26 = value26.replace(this.decimalSeparator, ".");
      }
      return value26;
    },
    getValidValue: function getValidValue(value26) {
      var min4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.min;
      var max4 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.max;
      var val = parseFloat(value26, 10);
      if (isNaN(val)) {
        return value26;
      }
      if (val < min4) {
        val = min4;
      }
      if (val > max4) {
        val = max4;
      }
      return val;
    },
    setValue: function setValue9(v2, callback) {
      var precision = this.$props.precision;
      var newValue = this.isNotCompleteNumber(parseFloat(v2, 10)) ? null : parseFloat(v2, 10);
      var _this$$data = this.$data, _this$$data$sValue = _this$$data.sValue, value26 = _this$$data$sValue === void 0 ? null : _this$$data$sValue, _this$$data$inputValu = _this$$data.inputValue, inputValue = _this$$data$inputValu === void 0 ? null : _this$$data$inputValu;
      var newValueInString = typeof newValue === "number" ? newValue.toFixed(precision) : "".concat(newValue);
      var changed = newValue !== value26 || newValueInString !== "".concat(inputValue);
      if (!hasProp(this, "value")) {
        this.setState({
          sValue: newValue,
          inputValue: this.toPrecisionAsStep(v2)
        }, callback);
      } else {
        this.setState({
          inputValue: this.toPrecisionAsStep(this.$data.sValue)
        }, callback);
      }
      if (changed) {
        this.__emit("update:value", newValue);
        this.__emit("change", newValue);
      }
      return newValue;
    },
    getPrecision: function getPrecision2(value26) {
      if (isValidProps(this.precision)) {
        return this.precision;
      }
      var valueString = value26.toString();
      if (valueString.indexOf("e-") >= 0) {
        return parseInt(valueString.slice(valueString.indexOf("e-") + 2), 10);
      }
      var precision = 0;
      if (valueString.indexOf(".") >= 0) {
        precision = valueString.length - valueString.indexOf(".") - 1;
      }
      return precision;
    },
    getMaxPrecision: function getMaxPrecision(currentValue) {
      var ratio = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      if (isValidProps(this.precision)) {
        return this.precision;
      }
      var step = this.step;
      var ratioPrecision = this.getPrecision(ratio);
      var stepPrecision = this.getPrecision(step);
      var currentValuePrecision = this.getPrecision(currentValue);
      if (!currentValue) {
        return ratioPrecision + stepPrecision;
      }
      return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);
    },
    getPrecisionFactor: function getPrecisionFactor(currentValue) {
      var ratio = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var precision = this.getMaxPrecision(currentValue, ratio);
      return Math.pow(10, precision);
    },
    getInputDisplayValue: function getInputDisplayValue(state2) {
      var _ref = state2 || this.$data, focused = _ref.focused, inputValue = _ref.inputValue, sValue = _ref.sValue;
      var inputDisplayValue;
      if (focused) {
        inputDisplayValue = inputValue;
      } else {
        inputDisplayValue = this.toPrecisionAsStep(sValue);
      }
      if (inputDisplayValue === void 0 || inputDisplayValue === null) {
        inputDisplayValue = "";
      }
      var inputDisplayValueFormat = this.formatWrapper(inputDisplayValue);
      if (isValidProps(this.$props.decimalSeparator)) {
        inputDisplayValueFormat = inputDisplayValueFormat.toString().replace(".", this.$props.decimalSeparator);
      }
      return inputDisplayValueFormat;
    },
    recordCursorPosition: function recordCursorPosition() {
      try {
        var inputElem = this.inputRef;
        this.cursorStart = inputElem.selectionStart;
        this.cursorEnd = inputElem.selectionEnd;
        this.currentValue = inputElem.value;
        this.cursorBefore = inputElem.value.substring(0, this.cursorStart);
        this.cursorAfter = inputElem.value.substring(this.cursorEnd);
      } catch (e2) {
      }
    },
    fixCaret: function fixCaret(start, end) {
      if (start === void 0 || end === void 0 || !this.inputRef || !this.inputRef.value) {
        return;
      }
      try {
        var inputElem = this.inputRef;
        var currentStart = inputElem.selectionStart;
        var currentEnd = inputElem.selectionEnd;
        if (start !== currentStart || end !== currentEnd) {
          inputElem.setSelectionRange(start, end);
        }
      } catch (e2) {
      }
    },
    restoreByAfter: function restoreByAfter(str) {
      if (str === void 0)
        return false;
      var fullStr = this.inputRef.value;
      var index2 = fullStr.lastIndexOf(str);
      if (index2 === -1)
        return false;
      var prevCursorPos = this.cursorBefore.length;
      if (this.lastKeyCode === KeyCode$2.DELETE && this.cursorBefore.charAt(prevCursorPos - 1) === str[0]) {
        this.fixCaret(prevCursorPos, prevCursorPos);
        return true;
      }
      if (index2 + str.length === fullStr.length) {
        this.fixCaret(index2, index2);
        return true;
      }
      return false;
    },
    partRestoreByAfter: function partRestoreByAfter(str) {
      var _this3 = this;
      if (str === void 0)
        return false;
      return Array.prototype.some.call(str, function(_2, start) {
        var partStr = str.substring(start);
        return _this3.restoreByAfter(partStr);
      });
    },
    focus: function focus17() {
      this.inputRef.focus();
      this.recordCursorPosition();
    },
    blur: function blur14() {
      this.inputRef.blur();
    },
    formatWrapper: function formatWrapper(num) {
      if (this.formatter) {
        return this.formatter(num);
      }
      return num;
    },
    toPrecisionAsStep: function toPrecisionAsStep(num) {
      if (this.isNotCompleteNumber(num) || num === "") {
        return num;
      }
      var precision = Math.abs(this.getMaxPrecision(num));
      if (!isNaN(precision)) {
        return Number(num).toFixed(precision);
      }
      return num.toString();
    },
    isNotCompleteNumber: function isNotCompleteNumber(num) {
      return isNaN(num) || num === "" || num === null || num && num.toString().indexOf(".") === num.toString().length - 1;
    },
    toNumber: function toNumber2(num) {
      var _this$$props2 = this.$props, precision = _this$$props2.precision, autofocus = _this$$props2.autofocus;
      var _this$$data$focused = this.$data.focused, focused = _this$$data$focused === void 0 ? autofocus : _this$$data$focused;
      var numberIsTooLarge = num && num.length > 16 && focused;
      if (this.isNotCompleteNumber(num) || numberIsTooLarge) {
        return num;
      }
      if (isValidProps(precision)) {
        return Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision);
      }
      return Number(num);
    },
    upStep: function upStep(val, rat) {
      var step = this.step;
      var precisionFactor = this.getPrecisionFactor(val, rat);
      var precision = Math.abs(this.getMaxPrecision(val, rat));
      var result = ((precisionFactor * val + precisionFactor * step * rat) / precisionFactor).toFixed(precision);
      return this.toNumber(result);
    },
    downStep: function downStep(val, rat) {
      var step = this.step;
      var precisionFactor = this.getPrecisionFactor(val, rat);
      var precision = Math.abs(this.getMaxPrecision(val, rat));
      var result = ((precisionFactor * val - precisionFactor * step * rat) / precisionFactor).toFixed(precision);
      return this.toNumber(result);
    },
    stepFn: function stepFn(type3, e2) {
      var _this4 = this;
      var ratio = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var recursive = arguments.length > 3 ? arguments[3] : void 0;
      this.stop();
      if (e2) {
        e2.preventDefault();
      }
      if (this.disabled) {
        return;
      }
      var max4 = this.max, min4 = this.min;
      var value26 = this.getCurrentValidValue(this.$data.inputValue) || 0;
      if (this.isNotCompleteNumber(value26)) {
        return;
      }
      var val = this["".concat(type3, "Step")](value26, ratio);
      var outOfRange = val > max4 || val < min4;
      if (val > max4) {
        val = max4;
      } else if (val < min4) {
        val = min4;
      }
      this.setValue(val);
      this.setState({
        focused: true
      });
      if (outOfRange) {
        return;
      }
      this.autoStepTimer = setTimeout(function() {
        _this4[type3](e2, ratio, true);
      }, recursive ? SPEED : DELAY);
    },
    stop: function stop() {
      if (this.autoStepTimer) {
        clearTimeout(this.autoStepTimer);
      }
    },
    down: function down(e2, ratio, recursive) {
      this.pressingUpOrDown = true;
      this.stepFn("down", e2, ratio, recursive);
    },
    up: function up(e2, ratio, recursive) {
      this.pressingUpOrDown = true;
      this.stepFn("up", e2, ratio, recursive);
    },
    handleInputClick: function handleInputClick2() {
      this.__emit("click");
    },
    saveUp: function saveUp(node) {
      this.upHandlerRef = node;
    },
    saveDown: function saveDown(node) {
      this.downHandlerRef = node;
    },
    saveInput: function saveInput6(node) {
      this.inputRef = node;
    },
    onCompositionstart: function onCompositionstart(e2) {
      e2.target.composing = true;
    },
    onCompositionend: function onCompositionend(e2) {
      this.onChange(e2);
      e2.target.composing = false;
    }
  },
  render: function render94() {
    var _classNames;
    var props2 = _extends$1(_extends$1({}, this.$props), this.$attrs);
    var prefixCls2 = props2.prefixCls, disabled = props2.disabled, readonly2 = props2.readonly, useTouch = props2.useTouch, autocomplete = props2.autocomplete, upHandler = props2.upHandler, downHandler = props2.downHandler, className = props2.class;
    var classes4 = classNames((_classNames = {}, _defineProperty$U(_classNames, className, className), _defineProperty$U(_classNames, prefixCls2, true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty$U(_classNames, "".concat(prefixCls2, "-focused"), this.$data.focused), _classNames));
    var upDisabledClass = "";
    var downDisabledClass = "";
    var sValue = this.$data.sValue;
    if (sValue || sValue === 0) {
      if (!isNaN(sValue)) {
        var val = Number(sValue);
        if (val >= this.max) {
          upDisabledClass = "".concat(prefixCls2, "-handler-up-disabled");
        }
        if (val <= this.min) {
          downDisabledClass = "".concat(prefixCls2, "-handler-down-disabled");
        }
      } else {
        upDisabledClass = "".concat(prefixCls2, "-handler-up-disabled");
        downDisabledClass = "".concat(prefixCls2, "-handler-down-disabled");
      }
    }
    var dataOrAriaAttributeProps = {};
    for (var key2 in props2) {
      if (props2.hasOwnProperty(key2) && (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-" || key2 === "role")) {
        dataOrAriaAttributeProps[key2] = props2[key2];
      }
    }
    var editable = !this.readonly && !this.disabled;
    var inputDisplayValue = this.getInputDisplayValue();
    var upEvents;
    var downEvents;
    if (useTouch) {
      var _upEvents, _downEvents;
      upEvents = (_upEvents = {}, _defineProperty$U(_upEvents, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", editable && !upDisabledClass && this.up), _defineProperty$U(_upEvents, "onTouchend", this.stop), _upEvents);
      downEvents = (_downEvents = {}, _defineProperty$U(_downEvents, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", editable && !downDisabledClass && this.down), _defineProperty$U(_downEvents, "onTouchend", this.stop), _downEvents);
    } else {
      upEvents = {
        onMousedown: editable && !upDisabledClass && this.up,
        onMouseup: this.stop,
        onMouseleave: this.stop
      };
      downEvents = {
        onMousedown: editable && !downDisabledClass && this.down,
        onMouseup: this.stop,
        onMouseleave: this.stop
      };
    }
    var isUpDisabled = !!upDisabledClass || disabled || readonly2;
    var isDownDisabled = !!downDisabledClass || disabled || readonly2;
    var upHandlerProps = _extends$1(_extends$1({
      disabled: isUpDisabled,
      prefixCls: prefixCls2,
      unselectable: "unselectable",
      role: "button",
      "aria-label": "Increase Value",
      "aria-disabled": !!isUpDisabled,
      class: "".concat(prefixCls2, "-handler ").concat(prefixCls2, "-handler-up ").concat(upDisabledClass)
    }, upEvents), {
      ref: this.saveUp
    });
    var downHandlerProps = _extends$1(_extends$1({
      disabled: isDownDisabled,
      prefixCls: prefixCls2,
      unselectable: "unselectable",
      role: "button",
      "aria-label": "Decrease Value",
      "aria-disabled": !!isDownDisabled,
      class: "".concat(prefixCls2, "-handler ").concat(prefixCls2, "-handler-down ").concat(downDisabledClass)
    }, downEvents), {
      ref: this.saveDown
    });
    return createVNode("div", {
      "class": classes4,
      "style": props2.style,
      "title": props2.title,
      "onMouseenter": props2.onMouseenter,
      "onMouseleave": props2.onMouseleave,
      "onMouseover": props2.onMouseover,
      "onMouseout": props2.onMouseout
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-handler-wrap")
    }, [createVNode("span", null, [createVNode(InputHandler$1, _objectSpread2$2(_objectSpread2$2({}, upHandlerProps), {}, {
      "key": "upHandler"
    }), {
      default: function _default8() {
        return [upHandler || createVNode("span", {
          "unselectable": "unselectable",
          "class": "".concat(prefixCls2, "-handler-up-inner"),
          "onClick": preventDefault
        }, null)];
      }
    })]), createVNode(InputHandler$1, _objectSpread2$2(_objectSpread2$2({}, downHandlerProps), {}, {
      "key": "downHandler"
    }), {
      default: function _default8() {
        return [downHandler || createVNode("span", {
          "unselectable": "unselectable",
          "class": "".concat(prefixCls2, "-handler-down-inner"),
          "onClick": preventDefault
        }, null)];
      }
    })]), createVNode("div", {
      "class": "".concat(prefixCls2, "-input-wrap")
    }, [createVNode("input", _objectSpread2$2({
      "role": "spinbutton",
      "aria-valuemin": this.min,
      "aria-valuemax": this.max,
      "aria-valuenow": sValue,
      "required": this.required,
      "type": props2.type,
      "placeholder": this.placeholder,
      "onClick": this.handleInputClick,
      "class": "".concat(prefixCls2, "-input"),
      "tabindex": this.tabindex,
      "autocomplete": autocomplete,
      "onFocus": this.onFocus,
      "onBlur": this.onBlur,
      "onKeydown": editable && this.onKeyDown,
      "onKeyup": editable && this.onKeyUp,
      "autofocus": this.autofocus,
      "maxlength": this.maxlength,
      "readonly": this.readonly,
      "disabled": this.disabled,
      "max": this.max,
      "min": this.min,
      "step": this.step,
      "name": this.name,
      "title": this.title,
      "id": this.id,
      "onInput": this.onTrigger,
      "onCompositionstart": this.onCompositionstart,
      "onCompositionend": this.onCompositionend,
      "ref": this.saveInput,
      "value": inputDisplayValue,
      "pattern": this.pattern
    }, dataOrAriaAttributeProps), null)])]);
  }
});
var __rest$r = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var inputNumberProps = {
  prefixCls: PropsTypes.string,
  min: PropsTypes.number,
  max: PropsTypes.number,
  value: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  step: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]).def(1),
  defaultValue: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  disabled: PropsTypes.looseBool,
  size: PropsTypes.oneOf(tuple("large", "small", "default")),
  formatter: PropsTypes.func,
  parser: PropsTypes.func,
  decimalSeparator: PropsTypes.string,
  placeholder: PropsTypes.string,
  name: PropsTypes.string,
  id: PropsTypes.string,
  precision: PropsTypes.number,
  autofocus: PropsTypes.looseBool,
  onPressEnter: {
    type: Function
  },
  onChange: Function
};
var InputNumber = defineComponent({
  name: "AInputNumber",
  inheritAttrs: false,
  props: inputNumberProps,
  setup: function setup94(props2) {
    var inputNumberRef = ref(null);
    var focus27 = function focus28() {
      inputNumberRef.value.focus();
    };
    var blur24 = function blur25() {
      inputNumberRef.value.blur();
    };
    onMounted(function() {
      nextTick(function() {
      });
    });
    return {
      configProvider: inject("configProvider", defaultConfigProvider),
      inputNumberRef,
      focus: focus27,
      blur: blur24
    };
  },
  render: function render95() {
    var _classNames;
    var _a = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs), customizePrefixCls = _a.prefixCls, size2 = _a.size, className = _a.class, others = __rest$r(_a, ["prefixCls", "size", "class"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("input-number", customizePrefixCls);
    var inputNumberClass = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-lg"), size2 === "large"), _defineProperty$U(_classNames, "".concat(prefixCls2, "-sm"), size2 === "small"), _classNames), className);
    var upIcon = createVNode(UpOutlined$1, {
      "class": "".concat(prefixCls2, "-handler-up-inner")
    }, null);
    var downIcon = createVNode(DownOutlined$1, {
      "class": "".concat(prefixCls2, "-handler-down-inner")
    }, null);
    var vcInputNumberProps = _extends$1(_extends$1({
      prefixCls: prefixCls2,
      upHandler: upIcon,
      downHandler: downIcon
    }, others), {
      class: inputNumberClass
    });
    return createVNode(VcInputNumber, _objectSpread2$2(_objectSpread2$2({}, vcInputNumberProps), {}, {
      "ref": "inputNumberRef"
    }), null);
  }
});
var index$r = withInstall(InputNumber);
var basicProps = {
  prefixCls: PropsTypes.string,
  hasSider: PropsTypes.looseBool,
  tagName: PropsTypes.string
};
function generator(_ref) {
  var suffixCls = _ref.suffixCls, tagName = _ref.tagName, name2 = _ref.name;
  return function(BasicComponent) {
    var Adapter = defineComponent({
      name: name2,
      props: basicProps,
      setup: function setup161(props2, _ref2) {
        var slots = _ref2.slots;
        var _useConfigInject = useConfigInject(suffixCls, props2), prefixCls2 = _useConfigInject.prefixCls;
        return function() {
          var _a;
          var basicComponentProps = _extends$1(_extends$1({}, props2), {
            prefixCls: prefixCls2.value,
            tagName
          });
          return createVNode(BasicComponent, basicComponentProps, {
            default: function _default8() {
              return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
            }
          });
        };
      }
    });
    return Adapter;
  };
}
var Basic = defineComponent({
  props: basicProps,
  setup: function setup95(props2, _ref3) {
    var slots = _ref3.slots;
    return function() {
      var _a;
      return createVNode(props2.tagName, {
        class: props2.prefixCls
      }, (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
    };
  }
});
var BasicLayout = defineComponent({
  props: basicProps,
  setup: function setup96(props2, _ref4) {
    var slots = _ref4.slots;
    var _useConfigInject2 = useConfigInject("", props2), direction = _useConfigInject2.direction;
    var siders = ref([]);
    var siderHookProvider = {
      addSider: function addSider(id2) {
        siders.value = [].concat(_toConsumableArray(siders.value), [id2]);
      },
      removeSider: function removeSider(id2) {
        siders.value = siders.value.filter(function(currentId) {
          return currentId !== id2;
        });
      }
    };
    provide(SiderHookProviderKey, siderHookProvider);
    return function() {
      var _classNames;
      var _a;
      var prefixCls2 = props2.prefixCls, hasSider = props2.hasSider, tagName = props2.tagName;
      var divCls = classNames(prefixCls2, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-has-sider"), typeof hasSider === "boolean" ? hasSider : siders.value.length > 0), _defineProperty$U(_classNames, "".concat(prefixCls2, "-rtl"), direction.value === "rtl"), _classNames));
      return createVNode(tagName, {
        class: divCls
      }, (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
    };
  }
});
var Layout = generator({
  suffixCls: "layout",
  tagName: "section",
  name: "ALayout"
})(BasicLayout);
var Header = generator({
  suffixCls: "layout-header",
  tagName: "header",
  name: "ALayoutHeader"
})(Basic);
var Footer = generator({
  suffixCls: "layout-footer",
  tagName: "footer",
  name: "ALayoutFooter"
})(Basic);
var Content = generator({
  suffixCls: "layout-content",
  tagName: "main",
  name: "ALayoutContent"
})(Basic);
Layout.Header = Header;
Layout.Footer = Footer;
Layout.Content = Content;
var Layout$1 = Layout;
var BarsOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z" } }] }, "name": "bars", "theme": "outlined" };
var BarsOutlinedSvg = BarsOutlined$2;
function _objectSpread$m(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$n(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$n(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var BarsOutlined = function BarsOutlined2(props2, context2) {
  var p2 = _objectSpread$m({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": BarsOutlinedSvg
  }), null);
};
BarsOutlined.displayName = "BarsOutlined";
BarsOutlined.inheritAttrs = false;
var BarsOutlined$1 = BarsOutlined;
var dimensionMaxMap = {
  xs: "479.98px",
  sm: "575.98px",
  md: "767.98px",
  lg: "991.98px",
  xl: "1199.98px",
  xxl: "1599.98px"
};
var siderProps = {
  prefixCls: PropsTypes.string,
  collapsible: PropsTypes.looseBool,
  collapsed: PropsTypes.looseBool,
  defaultCollapsed: PropsTypes.looseBool,
  reverseArrow: PropsTypes.looseBool,
  zeroWidthTriggerStyle: PropsTypes.style,
  trigger: PropsTypes.VNodeChild,
  width: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  collapsedWidth: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  breakpoint: PropsTypes.oneOf(tuple("xs", "sm", "md", "lg", "xl", "xxl")),
  theme: PropsTypes.oneOf(tuple("light", "dark")).def("dark"),
  onBreakpoint: Function,
  onCollapse: Function
};
var generateId = function() {
  var i2 = 0;
  return function() {
    var prefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    i2 += 1;
    return "".concat(prefix).concat(i2);
  };
}();
var Sider = defineComponent({
  name: "ALayoutSider",
  inheritAttrs: false,
  props: initDefaultProps$1(siderProps, {
    collapsible: false,
    defaultCollapsed: false,
    reverseArrow: false,
    width: 200,
    collapsedWidth: 80
  }),
  emits: ["breakpoint", "update:collapsed", "collapse"],
  setup: function setup97(props2, _ref) {
    var emit = _ref.emit, attrs = _ref.attrs, slots = _ref.slots;
    var _useConfigInject = useConfigInject("layout-sider", props2), prefixCls2 = _useConfigInject.prefixCls;
    var siderHook = inject(SiderHookProviderKey, void 0);
    var collapsed = ref(!!(props2.collapsed !== void 0 ? props2.collapsed : props2.defaultCollapsed));
    var below = ref(false);
    watch(function() {
      return props2.collapsed;
    }, function() {
      collapsed.value = !!props2.collapsed;
    });
    provide(SiderCollapsedKey, collapsed);
    var handleSetCollapsed = function handleSetCollapsed2(value26, type3) {
      if (props2.collapsed === void 0) {
        collapsed.value = value26;
      }
      emit("update:collapsed", value26);
      emit("collapse", value26, type3);
    };
    var responsiveHandlerRef = ref(function(mql2) {
      below.value = mql2.matches;
      emit("breakpoint", mql2.matches);
      if (collapsed.value !== mql2.matches) {
        handleSetCollapsed(mql2.matches, "responsive");
      }
    });
    var mql;
    function responsiveHandler(mql2) {
      return responsiveHandlerRef.value(mql2);
    }
    var uniqueId = generateId("ant-sider-");
    onMounted(function() {
      if (typeof window !== "undefined") {
        var _window = window, matchMedia = _window.matchMedia;
        if (matchMedia && props2.breakpoint && props2.breakpoint in dimensionMaxMap) {
          mql = matchMedia("(max-width: ".concat(dimensionMaxMap[props2.breakpoint], ")"));
          try {
            mql.addEventListener("change", responsiveHandler);
          } catch (error3) {
            mql.addListener(responsiveHandler);
          }
          responsiveHandler(mql);
        }
      }
      siderHook && siderHook.addSider(uniqueId);
    });
    onBeforeUnmount(function() {
      try {
        mql === null || mql === void 0 ? void 0 : mql.removeEventListener("change", responsiveHandler);
      } catch (error3) {
        mql === null || mql === void 0 ? void 0 : mql.removeListener(responsiveHandler);
      }
      siderHook && siderHook.removeSider(uniqueId);
    });
    var toggle = function toggle2() {
      handleSetCollapsed(!collapsed.value, "clickTrigger");
    };
    return function() {
      var _classNames;
      var _a;
      var pre = prefixCls2.value;
      var collapsedWidth = props2.collapsedWidth, width = props2.width, reverseArrow = props2.reverseArrow, zeroWidthTriggerStyle = props2.zeroWidthTriggerStyle, trigger2 = props2.trigger, collapsible = props2.collapsible, theme = props2.theme;
      var rawWidth = collapsed.value ? collapsedWidth : width;
      var siderWidth = isNumeric$2(rawWidth) ? "".concat(rawWidth, "px") : String(rawWidth);
      var zeroWidthTrigger = parseFloat(String(collapsedWidth || 0)) === 0 ? createVNode("span", {
        "onClick": toggle,
        "class": classNames("".concat(pre, "-zero-width-trigger"), "".concat(pre, "-zero-width-trigger-").concat(reverseArrow ? "right" : "left")),
        "style": zeroWidthTriggerStyle
      }, [trigger2 || createVNode(BarsOutlined$1, null, null)]) : null;
      var iconObj = {
        expanded: reverseArrow ? createVNode(RightOutlined$1, null, null) : createVNode(LeftOutlined$1, null, null),
        collapsed: reverseArrow ? createVNode(LeftOutlined$1, null, null) : createVNode(RightOutlined$1, null, null)
      };
      var status = collapsed.value ? "collapsed" : "expanded";
      var defaultTrigger = iconObj[status];
      var triggerDom = trigger2 !== null ? zeroWidthTrigger || createVNode("div", {
        "class": "".concat(pre, "-trigger"),
        "onClick": toggle,
        "style": {
          width: siderWidth
        }
      }, [trigger2 || defaultTrigger]) : null;
      var divStyle = _extends$1(_extends$1({}, attrs.style), {
        flex: "0 0 ".concat(siderWidth),
        maxWidth: siderWidth,
        minWidth: siderWidth,
        width: siderWidth
      });
      var siderCls = classNames(pre, "".concat(pre, "-").concat(theme), (_classNames = {}, _defineProperty$U(_classNames, "".concat(pre, "-collapsed"), !!collapsed.value), _defineProperty$U(_classNames, "".concat(pre, "-has-trigger"), collapsible && trigger2 !== null && !zeroWidthTrigger), _defineProperty$U(_classNames, "".concat(pre, "-below"), !!below.value), _defineProperty$U(_classNames, "".concat(pre, "-zero-width"), parseFloat(siderWidth) === 0), _classNames), attrs.class);
      return createVNode("aside", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "class": siderCls,
        "style": divStyle,
        "ref": ref
      }), [createVNode("div", {
        "class": "".concat(pre, "-children")
      }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]), collapsible || below.value && zeroWidthTrigger ? triggerDom : null]);
    };
  }
});
Layout$1.Sider = Sider;
Layout$1.install = function(app) {
  app.component(Layout$1.name, Layout$1);
  app.component(Layout$1.Header.name, Layout$1.Header);
  app.component(Layout$1.Footer.name, Layout$1.Footer);
  app.component(Layout$1.Sider.name, Layout$1.Sider);
  app.component(Layout$1.Content.name, Layout$1.Content);
  return app;
};
var LayoutHeader = Layout$1.Header;
var LayoutFooter = Layout$1.Footer;
var LayoutSider = Layout$1.Sider;
var LayoutContent = Layout$1.Content;
var __rest$q = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var SpinSize = PropsTypes.oneOf(tuple("small", "default", "large"));
var getSpinProps = function getSpinProps2() {
  return {
    prefixCls: PropsTypes.string,
    spinning: PropsTypes.looseBool,
    size: SpinSize,
    wrapperClassName: PropsTypes.string,
    tip: PropsTypes.string,
    delay: PropsTypes.number,
    indicator: PropsTypes.any
  };
};
var defaultIndicator = null;
function shouldDelay(spinning, delay) {
  return !!spinning && !!delay && !isNaN(Number(delay));
}
function setDefaultIndicator(Content2) {
  var Indicator = Content2.indicator;
  defaultIndicator = typeof Indicator === "function" ? Indicator : function() {
    return createVNode(Indicator, null, null);
  };
}
var Spin = defineComponent({
  name: "ASpin",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(getSpinProps(), {
    size: "default",
    spinning: true,
    wrapperClassName: ""
  }),
  setup: function setup98() {
    return {
      originalUpdateSpinning: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data49() {
    var spinning = this.spinning, delay = this.delay;
    var shouldBeDelayed = shouldDelay(spinning, delay);
    return {
      sSpinning: spinning && !shouldBeDelayed
    };
  },
  created: function created13() {
    this.originalUpdateSpinning = this.updateSpinning;
    this.debouncifyUpdateSpinning(this.$props);
  },
  mounted: function mounted27() {
    this.updateSpinning();
  },
  updated: function updated15() {
    var _this = this;
    nextTick(function() {
      _this.debouncifyUpdateSpinning();
      _this.updateSpinning();
    });
  },
  beforeUnmount: function beforeUnmount19() {
    this.cancelExistingSpin();
  },
  methods: {
    debouncifyUpdateSpinning: function debouncifyUpdateSpinning(props2) {
      var _ref = props2 || this.$props, delay = _ref.delay;
      if (delay) {
        this.cancelExistingSpin();
        this.updateSpinning = debounce$1(this.originalUpdateSpinning, delay);
      }
    },
    updateSpinning: function updateSpinning() {
      var spinning = this.spinning, sSpinning = this.sSpinning;
      if (sSpinning !== spinning) {
        this.setState({
          sSpinning: spinning
        });
      }
    },
    cancelExistingSpin: function cancelExistingSpin() {
      var updateSpinning2 = this.updateSpinning;
      if (updateSpinning2 && updateSpinning2.cancel) {
        updateSpinning2.cancel();
      }
    },
    renderIndicator: function renderIndicator(prefixCls2) {
      var dotClassName = "".concat(prefixCls2, "-dot");
      var indicator = getComponent(this, "indicator");
      if (indicator === null) {
        return null;
      }
      if (Array.isArray(indicator)) {
        indicator = indicator.length === 1 ? indicator[0] : indicator;
      }
      if (isVNode(indicator)) {
        return cloneVNode(indicator, {
          class: dotClassName
        });
      }
      if (defaultIndicator && isVNode(defaultIndicator())) {
        return cloneVNode(defaultIndicator(), {
          class: dotClassName
        });
      }
      return createVNode("span", {
        "class": "".concat(dotClassName, " ").concat(prefixCls2, "-dot-spin")
      }, [createVNode("i", {
        "class": "".concat(prefixCls2, "-dot-item")
      }, null), createVNode("i", {
        "class": "".concat(prefixCls2, "-dot-item")
      }, null), createVNode("i", {
        "class": "".concat(prefixCls2, "-dot-item")
      }, null), createVNode("i", {
        "class": "".concat(prefixCls2, "-dot-item")
      }, null)]);
    }
  },
  render: function render96() {
    var _spinClassName;
    var _this$$props = this.$props, size2 = _this$$props.size, customizePrefixCls = _this$$props.prefixCls, tip = _this$$props.tip, wrapperClassName = _this$$props.wrapperClassName;
    var _a = this.$attrs, cls = _a.class, style3 = _a.style, divProps = __rest$q(_a, ["class", "style"]);
    var _this$configProvider = this.configProvider, getPrefixCls2 = _this$configProvider.getPrefixCls, direction = _this$configProvider.direction;
    var prefixCls2 = getPrefixCls2("spin", customizePrefixCls);
    var sSpinning = this.sSpinning;
    var spinClassName = (_spinClassName = {}, _defineProperty$U(_spinClassName, prefixCls2, true), _defineProperty$U(_spinClassName, "".concat(prefixCls2, "-sm"), size2 === "small"), _defineProperty$U(_spinClassName, "".concat(prefixCls2, "-lg"), size2 === "large"), _defineProperty$U(_spinClassName, "".concat(prefixCls2, "-spinning"), sSpinning), _defineProperty$U(_spinClassName, "".concat(prefixCls2, "-show-text"), !!tip), _defineProperty$U(_spinClassName, "".concat(prefixCls2, "-rtl"), direction === "rtl"), _defineProperty$U(_spinClassName, cls, !!cls), _spinClassName);
    var spinElement = createVNode("div", _objectSpread2$2(_objectSpread2$2({}, divProps), {}, {
      "style": style3,
      "class": spinClassName
    }), [this.renderIndicator(prefixCls2), tip ? createVNode("div", {
      "class": "".concat(prefixCls2, "-text")
    }, [tip]) : null]);
    var children = getSlot(this);
    if (children && children.length) {
      var _containerClassName;
      var containerClassName = (_containerClassName = {}, _defineProperty$U(_containerClassName, "".concat(prefixCls2, "-container"), true), _defineProperty$U(_containerClassName, "".concat(prefixCls2, "-blur"), sSpinning), _containerClassName);
      return createVNode("div", {
        "class": ["".concat(prefixCls2, "-nested-loading"), wrapperClassName]
      }, [sSpinning && createVNode("div", {
        "key": "loading"
      }, [spinElement]), createVNode("div", {
        "class": containerClassName,
        "key": "container"
      }, [children])]);
    }
    return spinElement;
  }
});
Spin.setDefaultIndicator = setDefaultIndicator;
Spin.install = function(app) {
  app.component(Spin.name, Spin);
  return app;
};
var DoubleLeftOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M272.9 512l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L186.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H532c6.7 0 10.4-7.7 6.3-12.9L272.9 512zm304 0l265.4-339.1c4.1-5.2.4-12.9-6.3-12.9h-77.3c-4.9 0-9.6 2.3-12.6 6.1L490.8 492.3a31.99 31.99 0 000 39.5l255.3 326.1c3 3.9 7.7 6.1 12.6 6.1H836c6.7 0 10.4-7.7 6.3-12.9L576.9 512z" } }] }, "name": "double-left", "theme": "outlined" };
var DoubleLeftOutlinedSvg = DoubleLeftOutlined$2;
function _objectSpread$l(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$m(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$m(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var DoubleLeftOutlined = function DoubleLeftOutlined2(props2, context2) {
  var p2 = _objectSpread$l({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": DoubleLeftOutlinedSvg
  }), null);
};
DoubleLeftOutlined.displayName = "DoubleLeftOutlined";
DoubleLeftOutlined.inheritAttrs = false;
var DoubleLeftOutlined$1 = DoubleLeftOutlined;
var DoubleRightOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M533.2 492.3L277.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H188c-6.7 0-10.4 7.7-6.3 12.9L447.1 512 181.7 851.1A7.98 7.98 0 00188 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5zm304 0L581.9 166.1c-3-3.9-7.7-6.1-12.6-6.1H492c-6.7 0-10.4 7.7-6.3 12.9L751.1 512 485.7 851.1A7.98 7.98 0 00492 864h77.3c4.9 0 9.6-2.3 12.6-6.1l255.3-326.1c9.1-11.7 9.1-27.9 0-39.5z" } }] }, "name": "double-right", "theme": "outlined" };
var DoubleRightOutlinedSvg = DoubleRightOutlined$2;
function _objectSpread$k(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$l(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$l(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var DoubleRightOutlined = function DoubleRightOutlined2(props2, context2) {
  var p2 = _objectSpread$k({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": DoubleRightOutlinedSvg
  }), null);
};
DoubleRightOutlined.displayName = "DoubleRightOutlined";
DoubleRightOutlined.inheritAttrs = false;
var DoubleRightOutlined$1 = DoubleRightOutlined;
var MiniSelect = defineComponent({
  inheritAttrs: false,
  props: SelectProps(),
  Option: VcSelect.Option,
  render: function render97() {
    var _this = this;
    var selectOptionsProps = getOptionProps(this);
    var selelctProps = _extends$1(_extends$1(_extends$1({}, selectOptionsProps), {
      size: "small"
    }), this.$attrs);
    return createVNode(VcSelect, selelctProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
var Pager = {
  name: "Pager",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    rootPrefixCls: PropsTypes.string,
    page: PropsTypes.number,
    active: PropsTypes.looseBool,
    last: PropsTypes.looseBool,
    locale: PropsTypes.object,
    showTitle: PropsTypes.looseBool,
    itemRender: {
      type: Function,
      default: function _default7() {
      }
    }
  },
  methods: {
    handleClick: function handleClick2() {
      this.__emit("click", this.page);
    },
    handleKeyPress: function handleKeyPress2(event) {
      this.__emit("keypress", event, this.handleClick, this.page);
    }
  },
  render: function render98() {
    var _classNames;
    var _this$$attrs = this.$attrs, _cls = _this$$attrs.class, style3 = _this$$attrs.style;
    var props2 = this.$props;
    var prefixCls2 = "".concat(props2.rootPrefixCls, "-item");
    var cls = classNames(prefixCls2, "".concat(prefixCls2, "-").concat(props2.page), (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-active"), props2.active), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), !props2.page), _classNames), _cls);
    return createVNode("li", {
      "onClick": this.handleClick,
      "onKeypress": this.handleKeyPress,
      "title": this.showTitle ? this.page : null,
      "tabindex": "0",
      "class": cls,
      "style": style3
    }, [this.itemRender({
      page: this.page,
      type: "page",
      originalElement: createVNode("a", null, [this.page])
    })]);
  }
};
var KEYCODE = {
  ZERO: 48,
  NINE: 57,
  NUMPAD_ZERO: 96,
  NUMPAD_NINE: 105,
  BACKSPACE: 8,
  DELETE: 46,
  ENTER: 13,
  ARROW_UP: 38,
  ARROW_DOWN: 40
};
var Options = {
  mixins: [BaseMixin],
  props: {
    disabled: PropsTypes.looseBool,
    changeSize: PropsTypes.func,
    quickGo: PropsTypes.func,
    selectComponentClass: PropsTypes.any,
    current: PropsTypes.number,
    pageSizeOptions: PropsTypes.array.def(["10", "20", "30", "40"]),
    pageSize: PropsTypes.number,
    buildOptionText: PropsTypes.func,
    locale: PropsTypes.object,
    rootPrefixCls: PropsTypes.string,
    selectPrefixCls: PropsTypes.string,
    goButton: PropsTypes.any
  },
  data: function data50() {
    return {
      goInputText: ""
    };
  },
  methods: {
    getValidValue: function getValidValue2() {
      var goInputText = this.goInputText, current2 = this.current;
      return !goInputText || isNaN(goInputText) ? current2 : Number(goInputText);
    },
    defaultBuildOptionText: function defaultBuildOptionText(opt) {
      return "".concat(opt.value, " ").concat(this.locale.items_per_page);
    },
    handleChange: function handleChange14(e2) {
      var _e$target = e2.target, value26 = _e$target.value, composing = _e$target.composing;
      if (e2.isComposing || composing || this.goInputText === value26)
        return;
      this.setState({
        goInputText: value26
      });
    },
    handleBlur: function handleBlur(e2) {
      var _this$$props = this.$props, goButton = _this$$props.goButton, quickGo = _this$$props.quickGo, rootPrefixCls = _this$$props.rootPrefixCls;
      if (goButton) {
        return;
      }
      if (e2.relatedTarget && (e2.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-prev")) >= 0 || e2.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-next")) >= 0)) {
        return;
      }
      quickGo(this.getValidValue());
    },
    go: function go(e2) {
      var goInputText = this.goInputText;
      if (goInputText === "") {
        return;
      }
      if (e2.keyCode === KEYCODE.ENTER || e2.type === "click") {
        this.quickGo(this.getValidValue());
        this.setState({
          goInputText: ""
        });
      }
    }
  },
  render: function render99() {
    var _this = this;
    var rootPrefixCls = this.rootPrefixCls, locale2 = this.locale, changeSize = this.changeSize, quickGo = this.quickGo, goButton = this.goButton, Select2 = this.selectComponentClass, defaultBuildOptionText2 = this.defaultBuildOptionText, selectPrefixCls = this.selectPrefixCls, pageSize2 = this.pageSize, pageSizeOptions = this.pageSizeOptions, goInputText = this.goInputText, disabled = this.disabled;
    var prefixCls2 = "".concat(rootPrefixCls, "-options");
    var changeSelect = null;
    var goInput = null;
    var gotoButton = null;
    if (!changeSize && !quickGo) {
      return null;
    }
    if (changeSize && Select2) {
      var buildOptionText = this.buildOptionText || defaultBuildOptionText2;
      var options2 = pageSizeOptions.map(function(opt, i2) {
        return createVNode(Select2.Option, {
          "key": i2,
          "value": opt
        }, {
          default: function _default8() {
            return [buildOptionText({
              value: opt
            })];
          }
        });
      });
      changeSelect = createVNode(Select2, {
        "disabled": disabled,
        "prefixCls": selectPrefixCls,
        "showSearch": false,
        "class": "".concat(prefixCls2, "-size-changer"),
        "optionLabelProp": "children",
        "value": (pageSize2 || pageSizeOptions[0]).toString(),
        "onChange": function onChange9(value26) {
          return _this.changeSize(Number(value26));
        },
        "getPopupContainer": function getPopupContainer(triggerNode) {
          return triggerNode.parentNode;
        }
      }, {
        default: function _default8() {
          return [options2];
        }
      });
    }
    if (quickGo) {
      if (goButton) {
        gotoButton = typeof goButton === "boolean" ? createVNode("button", {
          "type": "button",
          "onClick": this.go,
          "onKeyup": this.go,
          "disabled": disabled
        }, [locale2.jump_to_confirm]) : createVNode("span", {
          "onClick": this.go,
          "onKeyup": this.go
        }, [goButton]);
      }
      goInput = createVNode("div", {
        "class": "".concat(prefixCls2, "-quick-jumper")
      }, [locale2.jump_to, withDirectives(createVNode("input", {
        "disabled": disabled,
        "type": "text",
        "value": goInputText,
        "onInput": this.handleChange,
        "onChange": this.handleChange,
        "onKeyup": this.go,
        "onBlur": this.handleBlur
      }, null), [[antInput$1]]), locale2.page, gotoButton]);
    }
    return createVNode("li", {
      "class": "".concat(prefixCls2)
    }, [changeSelect, goInput]);
  }
};
var LOCALE = {
  items_per_page: "\u6761/\u9875",
  jump_to: "\u8DF3\u81F3",
  jump_to_confirm: "\u786E\u5B9A",
  page: "\u9875",
  prev_page: "\u4E0A\u4E00\u9875",
  next_page: "\u4E0B\u4E00\u9875",
  prev_5: "\u5411\u524D 5 \u9875",
  next_5: "\u5411\u540E 5 \u9875",
  prev_3: "\u5411\u524D 3 \u9875",
  next_3: "\u5411\u540E 3 \u9875"
};
var __rest$p = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$e() {
}
function isInteger(value26) {
  return typeof value26 === "number" && isFinite(value26) && Math.floor(value26) === value26;
}
function defaultItemRender(_ref) {
  var originalElement = _ref.originalElement;
  return originalElement;
}
function calculatePage(p2, state2, props2) {
  var pageSize2 = p2;
  if (typeof pageSize2 === "undefined") {
    pageSize2 = state2.statePageSize;
  }
  return Math.floor((props2.total - 1) / pageSize2) + 1;
}
var VcPagination = defineComponent({
  name: "Pagination",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    disabled: PropsTypes.looseBool,
    prefixCls: PropsTypes.string.def("rc-pagination"),
    selectPrefixCls: PropsTypes.string.def("rc-select"),
    current: PropsTypes.number,
    defaultCurrent: PropsTypes.number.def(1),
    total: PropsTypes.number.def(0),
    pageSize: PropsTypes.number,
    defaultPageSize: PropsTypes.number.def(10),
    hideOnSinglePage: PropsTypes.looseBool.def(false),
    showSizeChanger: PropsTypes.looseBool.def(false),
    showLessItems: PropsTypes.looseBool.def(false),
    selectComponentClass: PropsTypes.any,
    showPrevNextJumpers: PropsTypes.looseBool.def(true),
    showQuickJumper: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]).def(false),
    showTitle: PropsTypes.looseBool.def(true),
    pageSizeOptions: PropsTypes.arrayOf(PropsTypes.string),
    buildOptionText: PropsTypes.func,
    showTotal: PropsTypes.func,
    simple: PropsTypes.looseBool,
    locale: PropsTypes.object.def(LOCALE),
    itemRender: PropsTypes.func,
    prevIcon: PropsTypes.any,
    nextIcon: PropsTypes.any,
    jumpPrevIcon: PropsTypes.any,
    jumpNextIcon: PropsTypes.any
  },
  data: function data51() {
    var props2 = getOptionProps(this);
    var hasOnChange = this.onChange !== noop$e;
    var hasCurrent = "current" in props2;
    if (hasCurrent && !hasOnChange) {
      console.warn("Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.");
    }
    var current2 = this.defaultCurrent;
    if ("current" in props2) {
      current2 = this.current;
    }
    var pageSize2 = this.defaultPageSize;
    if ("pageSize" in props2) {
      pageSize2 = this.pageSize;
    }
    current2 = Math.min(current2, calculatePage(pageSize2, void 0, props2));
    return {
      stateCurrent: current2,
      stateCurrentInputValue: current2,
      statePageSize: pageSize2
    };
  },
  watch: {
    current: function current(val) {
      this.setState({
        stateCurrent: val,
        stateCurrentInputValue: val
      });
    },
    pageSize: function pageSize(val) {
      var newState = {};
      var current2 = this.stateCurrent;
      var newCurrent = calculatePage(val, this.$data, this.$props);
      current2 = current2 > newCurrent ? newCurrent : current2;
      if (!hasProp(this, "current")) {
        newState.stateCurrent = current2;
        newState.stateCurrentInputValue = current2;
      }
      newState.statePageSize = val;
      this.setState(newState);
    },
    stateCurrent: function stateCurrent(val, oldValue) {
      var _this = this;
      this.$nextTick(function() {
        if (_this.$refs.paginationNode) {
          var lastCurrentNode = _this.$refs.paginationNode.querySelector(".".concat(_this.prefixCls, "-item-").concat(oldValue));
          if (lastCurrentNode && document.activeElement === lastCurrentNode) {
            lastCurrentNode.blur();
          }
        }
      });
    },
    total: function total() {
      var newState = {};
      var newCurrent = calculatePage(this.pageSize, this.$data, this.$props);
      if (hasProp(this, "current")) {
        var current2 = Math.min(this.current, newCurrent);
        newState.stateCurrent = current2;
        newState.stateCurrentInputValue = current2;
      } else {
        var _current = this.stateCurrent;
        if (_current === 0 && newCurrent > 0) {
          _current = 1;
        } else {
          _current = Math.min(this.stateCurrent, newCurrent);
        }
        newState.stateCurrent = _current;
      }
      this.setState(newState);
    }
  },
  methods: {
    getJumpPrevPage: function getJumpPrevPage() {
      return Math.max(1, this.stateCurrent - (this.showLessItems ? 3 : 5));
    },
    getJumpNextPage: function getJumpNextPage() {
      return Math.min(calculatePage(void 0, this.$data, this.$props), this.stateCurrent + (this.showLessItems ? 3 : 5));
    },
    getItemIcon: function getItemIcon(icon) {
      var prefixCls2 = this.$props.prefixCls;
      var iconNode = getComponent(this, icon, this.$props) || createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, null);
      return iconNode;
    },
    getValidValue: function getValidValue3(e2) {
      var inputValue = e2.target.value;
      var allPages = calculatePage(void 0, this.$data, this.$props);
      var stateCurrentInputValue = this.$data.stateCurrentInputValue;
      var value26;
      if (inputValue === "") {
        value26 = inputValue;
      } else if (isNaN(Number(inputValue))) {
        value26 = stateCurrentInputValue;
      } else if (inputValue >= allPages) {
        value26 = allPages;
      } else {
        value26 = Number(inputValue);
      }
      return value26;
    },
    isValid: function isValid3(page) {
      return isInteger(page) && page !== this.stateCurrent;
    },
    shouldDisplayQuickJumper: function shouldDisplayQuickJumper() {
      var _this$$props = this.$props, showQuickJumper = _this$$props.showQuickJumper, pageSize2 = _this$$props.pageSize, total2 = _this$$props.total;
      if (total2 <= pageSize2) {
        return false;
      }
      return showQuickJumper;
    },
    handleKeyDown: function handleKeyDown5(event) {
      if (event.keyCode === KEYCODE.ARROW_UP || event.keyCode === KEYCODE.ARROW_DOWN) {
        event.preventDefault();
      }
    },
    handleKeyUp: function handleKeyUp(e2) {
      if (e2.isComposing || e2.target.composing)
        return;
      var value26 = this.getValidValue(e2);
      var stateCurrentInputValue = this.stateCurrentInputValue;
      if (value26 !== stateCurrentInputValue) {
        this.setState({
          stateCurrentInputValue: value26
        });
      }
      if (e2.keyCode === KEYCODE.ENTER) {
        this.handleChange(value26);
      } else if (e2.keyCode === KEYCODE.ARROW_UP) {
        this.handleChange(value26 - 1);
      } else if (e2.keyCode === KEYCODE.ARROW_DOWN) {
        this.handleChange(value26 + 1);
      }
    },
    changePageSize: function changePageSize(size2) {
      var current2 = this.stateCurrent;
      var preCurrent = current2;
      var newCurrent = calculatePage(size2, this.$data, this.$props);
      current2 = current2 > newCurrent ? newCurrent : current2;
      if (newCurrent === 0) {
        current2 = this.stateCurrent;
      }
      if (typeof size2 === "number") {
        if (!hasProp(this, "pageSize")) {
          this.setState({
            statePageSize: size2
          });
        }
        if (!hasProp(this, "current")) {
          this.setState({
            stateCurrent: current2,
            stateCurrentInputValue: current2
          });
        }
      }
      this.__emit("update:pageSize", size2);
      if (current2 !== preCurrent) {
        this.__emit("update:current", current2);
      }
      this.__emit("showSizeChange", current2, size2);
    },
    handleChange: function handleChange15(p2) {
      var disabled = this.$props.disabled;
      var page = p2;
      if (this.isValid(page) && !disabled) {
        var currentPage = calculatePage(void 0, this.$data, this.$props);
        if (page > currentPage) {
          page = currentPage;
        } else if (page < 1) {
          page = 1;
        }
        if (!hasProp(this, "current")) {
          this.setState({
            stateCurrent: page,
            stateCurrentInputValue: page
          });
        }
        this.__emit("update:current", page);
        this.__emit("change", page, this.statePageSize);
        return page;
      }
      return this.stateCurrent;
    },
    prev: function prev2() {
      if (this.hasPrev()) {
        this.handleChange(this.stateCurrent - 1);
      }
    },
    next: function next2() {
      if (this.hasNext()) {
        this.handleChange(this.stateCurrent + 1);
      }
    },
    jumpPrev: function jumpPrev() {
      this.handleChange(this.getJumpPrevPage());
    },
    jumpNext: function jumpNext() {
      this.handleChange(this.getJumpNextPage());
    },
    hasPrev: function hasPrev() {
      return this.stateCurrent > 1;
    },
    hasNext: function hasNext() {
      return this.stateCurrent < calculatePage(void 0, this.$data, this.$props);
    },
    runIfEnter: function runIfEnter(event, callback) {
      if (event.key === "Enter" || event.charCode === 13) {
        for (var _len = arguments.length, restParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          restParams[_key - 2] = arguments[_key];
        }
        callback.apply(void 0, restParams);
      }
    },
    runIfEnterPrev: function runIfEnterPrev(event) {
      this.runIfEnter(event, this.prev);
    },
    runIfEnterNext: function runIfEnterNext(event) {
      this.runIfEnter(event, this.next);
    },
    runIfEnterJumpPrev: function runIfEnterJumpPrev(event) {
      this.runIfEnter(event, this.jumpPrev);
    },
    runIfEnterJumpNext: function runIfEnterJumpNext(event) {
      this.runIfEnter(event, this.jumpNext);
    },
    handleGoTO: function handleGoTO(event) {
      if (event.keyCode === KEYCODE.ENTER || event.type === "click") {
        this.handleChange(this.stateCurrentInputValue);
      }
    }
  },
  render: function render100() {
    var _classNames;
    var _this$$props2 = this.$props, prefixCls2 = _this$$props2.prefixCls, disabled = _this$$props2.disabled;
    var _a = splitAttrs(this.$attrs).extraAttrs, className = _a.class, restAttrs = __rest$p(_a, ["class"]);
    if (this.hideOnSinglePage === true && this.total <= this.statePageSize) {
      return null;
    }
    var itemRender = this.itemRender || defaultItemRender;
    var props2 = this.$props;
    var locale2 = this.locale;
    var allPages = calculatePage(void 0, this.$data, this.$props);
    var pagerList = [];
    var jumpPrev2 = null;
    var jumpNext2 = null;
    var firstPager = null;
    var lastPager = null;
    var gotoButton = null;
    var goButton = this.showQuickJumper && this.showQuickJumper.goButton;
    var pageBufferSize = this.showLessItems ? 1 : 2;
    var stateCurrent2 = this.stateCurrent, statePageSize = this.statePageSize;
    var prevPage = stateCurrent2 - 1 > 0 ? stateCurrent2 - 1 : 0;
    var nextPage = stateCurrent2 + 1 < allPages ? stateCurrent2 + 1 : allPages;
    if (this.simple) {
      if (goButton) {
        if (typeof goButton === "boolean") {
          gotoButton = createVNode("button", {
            "type": "button",
            "onClick": this.handleGoTO,
            "onKeyup": this.handleGoTO
          }, [locale2.jump_to_confirm]);
        } else {
          gotoButton = createVNode("span", {
            "onClick": this.handleGoTO,
            "onKeyup": this.handleGoTO
          }, [goButton]);
        }
        gotoButton = createVNode("li", {
          "title": this.showTitle ? "".concat(locale2.jump_to).concat(this.stateCurrent, "/").concat(allPages) : null,
          "class": "".concat(prefixCls2, "-simple-pager")
        }, [gotoButton]);
      }
      var hasPrev2 = this.hasPrev();
      var hasNext2 = this.hasNext();
      return createVNode("ul", _objectSpread2$2({
        "class": classNames("".concat(prefixCls2, " ").concat(prefixCls2, "-simple"), className)
      }, restAttrs), [createVNode("li", {
        "title": this.showTitle ? locale2.prev_page : null,
        "onClick": this.prev,
        "tabindex": hasPrev2 ? 0 : null,
        "onKeypress": this.runIfEnterPrev,
        "class": "".concat(hasPrev2 ? "" : "".concat(prefixCls2, "-disabled"), " ").concat(prefixCls2, "-prev"),
        "aria-disabled": !this.hasPrev()
      }, [itemRender({
        page: prevPage,
        type: "prev",
        originalElement: this.getItemIcon("prevIcon")
      })]), createVNode("li", {
        "title": this.showTitle ? "".concat(stateCurrent2, "/").concat(allPages) : null,
        "class": "".concat(prefixCls2, "-simple-pager")
      }, [withDirectives(createVNode("input", {
        "type": "text",
        "value": this.stateCurrentInputValue,
        "onKeydown": this.handleKeyDown,
        "onKeyup": this.handleKeyUp,
        "onInput": this.handleKeyUp,
        "onChange": this.handleKeyUp,
        "size": "3"
      }, null), [[antInput$1]]), createVNode("span", {
        "class": "".concat(prefixCls2, "-slash")
      }, [createTextVNode("\uFF0F")]), allPages]), createVNode("li", {
        "title": this.showTitle ? locale2.next_page : null,
        "onClick": this.next,
        "tabindex": this.hasNext ? 0 : null,
        "onKeypress": this.runIfEnterNext,
        "class": "".concat(hasNext2 ? "" : "".concat(prefixCls2, "-disabled"), " ").concat(prefixCls2, "-next"),
        "aria-disabled": !this.hasNext()
      }, [itemRender({
        page: nextPage,
        type: "next",
        originalElement: this.getItemIcon("nextIcon")
      })]), gotoButton]);
    }
    if (allPages <= 5 + pageBufferSize * 2) {
      var pagerProps = {
        locale: locale2,
        rootPrefixCls: prefixCls2,
        showTitle: props2.showTitle,
        itemRender,
        onClick: this.handleChange,
        onKeypress: this.runIfEnter
      };
      if (!allPages) {
        pagerList.push(createVNode(Pager, _objectSpread2$2(_objectSpread2$2({}, pagerProps), {}, {
          "key": "noPager",
          "page": allPages,
          "class": "".concat(prefixCls2, "-disabled")
        }), null));
      }
      for (var i2 = 1; i2 <= allPages; i2++) {
        var active = stateCurrent2 === i2;
        pagerList.push(createVNode(Pager, _objectSpread2$2(_objectSpread2$2({}, pagerProps), {}, {
          "key": i2,
          "page": i2,
          "active": active
        }), null));
      }
    } else {
      var prevItemTitle = this.showLessItems ? locale2.prev_3 : locale2.prev_5;
      var nextItemTitle = this.showLessItems ? locale2.next_3 : locale2.next_5;
      if (this.showPrevNextJumpers) {
        var jumpPrevClassString = "".concat(prefixCls2, "-jump-prev");
        if (props2.jumpPrevIcon) {
          jumpPrevClassString += " ".concat(prefixCls2, "-jump-prev-custom-icon");
        }
        jumpPrev2 = createVNode("li", {
          "title": this.showTitle ? prevItemTitle : null,
          "key": "prev",
          "onClick": this.jumpPrev,
          "tabindex": "0",
          "onKeypress": this.runIfEnterJumpPrev,
          "class": jumpPrevClassString
        }, [itemRender({
          page: this.getJumpPrevPage(),
          type: "jump-prev",
          originalElement: this.getItemIcon("jumpPrevIcon")
        })]);
        var jumpNextClassString = "".concat(prefixCls2, "-jump-next");
        if (props2.jumpNextIcon) {
          jumpNextClassString += " ".concat(prefixCls2, "-jump-next-custom-icon");
        }
        jumpNext2 = createVNode("li", {
          "title": this.showTitle ? nextItemTitle : null,
          "key": "next",
          "tabindex": "0",
          "onClick": this.jumpNext,
          "onKeypress": this.runIfEnterJumpNext,
          "class": jumpNextClassString
        }, [itemRender({
          page: this.getJumpNextPage(),
          type: "jump-next",
          originalElement: this.getItemIcon("jumpNextIcon")
        })]);
      }
      lastPager = createVNode(Pager, {
        "locale": locale2,
        "last": true,
        "rootPrefixCls": prefixCls2,
        "onClick": this.handleChange,
        "onKeypress": this.runIfEnter,
        "key": allPages,
        "page": allPages,
        "active": false,
        "showTitle": this.showTitle,
        "itemRender": itemRender
      }, null);
      firstPager = createVNode(Pager, {
        "locale": locale2,
        "rootPrefixCls": prefixCls2,
        "onClick": this.handleChange,
        "onKeypress": this.runIfEnter,
        "key": 1,
        "page": 1,
        "active": false,
        "showTitle": this.showTitle,
        "itemRender": itemRender
      }, null);
      var left = Math.max(1, stateCurrent2 - pageBufferSize);
      var right = Math.min(stateCurrent2 + pageBufferSize, allPages);
      if (stateCurrent2 - 1 <= pageBufferSize) {
        right = 1 + pageBufferSize * 2;
      }
      if (allPages - stateCurrent2 <= pageBufferSize) {
        left = allPages - pageBufferSize * 2;
      }
      for (var _i = left; _i <= right; _i++) {
        var _active = stateCurrent2 === _i;
        pagerList.push(createVNode(Pager, {
          "locale": locale2,
          "rootPrefixCls": prefixCls2,
          "onClick": this.handleChange,
          "onKeypress": this.runIfEnter,
          "key": _i,
          "page": _i,
          "active": _active,
          "showTitle": this.showTitle,
          "itemRender": itemRender
        }, null));
      }
      if (stateCurrent2 - 1 >= pageBufferSize * 2 && stateCurrent2 !== 1 + 2) {
        pagerList[0] = createVNode(Pager, {
          "locale": locale2,
          "rootPrefixCls": prefixCls2,
          "onClick": this.handleChange,
          "onKeypress": this.runIfEnter,
          "key": left,
          "page": left,
          "class": "".concat(prefixCls2, "-item-after-jump-prev"),
          "active": false,
          "showTitle": this.showTitle,
          "itemRender": itemRender
        }, null);
        pagerList.unshift(jumpPrev2);
      }
      if (allPages - stateCurrent2 >= pageBufferSize * 2 && stateCurrent2 !== allPages - 2) {
        pagerList[pagerList.length - 1] = createVNode(Pager, {
          "locale": locale2,
          "rootPrefixCls": prefixCls2,
          "onClick": this.handleChange,
          "onKeypress": this.runIfEnter,
          "key": right,
          "page": right,
          "class": "".concat(prefixCls2, "-item-before-jump-next"),
          "active": false,
          "showTitle": this.showTitle,
          "itemRender": itemRender
        }, null);
        pagerList.push(jumpNext2);
      }
      if (left !== 1) {
        pagerList.unshift(firstPager);
      }
      if (right !== allPages) {
        pagerList.push(lastPager);
      }
    }
    var totalText = null;
    if (this.showTotal) {
      totalText = createVNode("li", {
        "class": "".concat(prefixCls2, "-total-text")
      }, [this.showTotal(this.total, [this.total === 0 ? 0 : (stateCurrent2 - 1) * statePageSize + 1, stateCurrent2 * statePageSize > this.total ? this.total : stateCurrent2 * statePageSize])]);
    }
    var prevDisabled = !this.hasPrev() || !allPages;
    var nextDisabled = !this.hasNext() || !allPages;
    var buildOptionText = this.buildOptionText || this.$slots.buildOptionText;
    return createVNode("ul", _objectSpread2$2(_objectSpread2$2({
      "unselectable": "unselectable",
      "ref": "paginationNode"
    }, restAttrs), {}, {
      "class": classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _classNames), className)
    }), [totalText, createVNode("li", {
      "title": this.showTitle ? locale2.prev_page : null,
      "onClick": this.prev,
      "tabindex": prevDisabled ? null : 0,
      "onKeypress": this.runIfEnterPrev,
      "class": "".concat(!prevDisabled ? "" : "".concat(prefixCls2, "-disabled"), " ").concat(prefixCls2, "-prev"),
      "aria-disabled": prevDisabled
    }, [itemRender({
      page: prevPage,
      type: "prev",
      originalElement: this.getItemIcon("prevIcon")
    })]), pagerList, createVNode("li", {
      "title": this.showTitle ? locale2.next_page : null,
      "onClick": this.next,
      "tabindex": nextDisabled ? null : 0,
      "onKeypress": this.runIfEnterNext,
      "class": "".concat(!nextDisabled ? "" : "".concat(prefixCls2, "-disabled"), " ").concat(prefixCls2, "-next"),
      "aria-disabled": nextDisabled
    }, [itemRender({
      page: nextPage,
      type: "next",
      originalElement: this.getItemIcon("nextIcon")
    })]), createVNode(Options, {
      "disabled": disabled,
      "locale": locale2,
      "rootPrefixCls": prefixCls2,
      "selectComponentClass": this.selectComponentClass,
      "selectPrefixCls": this.selectPrefixCls,
      "changeSize": this.showSizeChanger ? this.changePageSize : null,
      "current": stateCurrent2,
      "pageSize": statePageSize,
      "pageSizeOptions": this.pageSizeOptions,
      "buildOptionText": buildOptionText || null,
      "quickGo": this.shouldDisplayQuickJumper() ? this.handleChange : null,
      "goButton": goButton
    }, null)]);
  }
});
var __rest$o = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var paginationProps$1 = function paginationProps2() {
  return {
    total: PropsTypes.number,
    defaultCurrent: PropsTypes.number,
    disabled: PropsTypes.looseBool,
    current: PropsTypes.number,
    defaultPageSize: PropsTypes.number,
    pageSize: PropsTypes.number,
    hideOnSinglePage: PropsTypes.looseBool,
    showSizeChanger: PropsTypes.looseBool,
    pageSizeOptions: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string])),
    buildOptionText: PropsTypes.func,
    showSizeChange: PropsTypes.func,
    showQuickJumper: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    showTotal: PropsTypes.any,
    size: PropsTypes.string,
    simple: PropsTypes.looseBool,
    locale: PropsTypes.object,
    prefixCls: PropsTypes.string,
    selectPrefixCls: PropsTypes.string,
    itemRender: PropsTypes.func,
    role: PropsTypes.string,
    showLessItems: PropsTypes.looseBool,
    onChange: PropsTypes.func,
    onShowSizeChange: PropsTypes.func,
    "onUpdate:current": PropsTypes.func,
    "onUpdate:pageSize": PropsTypes.func
  };
};
var paginationConfig = function paginationConfig2() {
  return _extends$1(_extends$1({}, paginationProps$1()), {
    position: PropsTypes.oneOf(tuple("top", "bottom", "both"))
  });
};
var Pagination$1 = defineComponent({
  name: "APagination",
  inheritAttrs: false,
  props: _extends$1({}, paginationProps$1()),
  emits: ["change", "showSizeChange", "update:current", "update:pageSize"],
  setup: function setup99() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    getIconsProps: function getIconsProps(prefixCls2) {
      var prevIcon = createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, [createVNode(LeftOutlined$1, null, null)]);
      var nextIcon = createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, [createVNode(RightOutlined$1, null, null)]);
      var jumpPrevIcon = createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-item-container")
      }, [createVNode(DoubleLeftOutlined$1, {
        "class": "".concat(prefixCls2, "-item-link-icon")
      }, null), createVNode("span", {
        "class": "".concat(prefixCls2, "-item-ellipsis")
      }, [createTextVNode("\u2022\u2022\u2022")])])]);
      var jumpNextIcon = createVNode("a", {
        "class": "".concat(prefixCls2, "-item-link")
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-item-container")
      }, [createVNode(DoubleRightOutlined$1, {
        "class": "".concat(prefixCls2, "-item-link-icon")
      }, null), createVNode("span", {
        "class": "".concat(prefixCls2, "-item-ellipsis")
      }, [createTextVNode("\u2022\u2022\u2022")])])]);
      return {
        prevIcon,
        nextIcon,
        jumpPrevIcon,
        jumpNextIcon
      };
    },
    renderPagination: function renderPagination(contextLocale) {
      var _a = getOptionProps(this), customizePrefixCls = _a.prefixCls, customizeSelectPrefixCls = _a.selectPrefixCls, buildOptionText = _a.buildOptionText, size2 = _a.size, customLocale = _a.locale, restProps = __rest$o(_a, ["prefixCls", "selectPrefixCls", "buildOptionText", "size", "locale"]);
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("pagination", customizePrefixCls);
      var selectPrefixCls = getPrefixCls2("select", customizeSelectPrefixCls);
      var isSmall = size2 === "small";
      var paginationProps3 = _extends$1(_extends$1(_extends$1(_extends$1(_extends$1({
        prefixCls: prefixCls2,
        selectPrefixCls
      }, restProps), this.getIconsProps(prefixCls2)), {
        selectComponentClass: isSmall ? MiniSelect : VcSelect,
        locale: _extends$1(_extends$1({}, contextLocale), customLocale),
        buildOptionText: buildOptionText || this.$slots.buildOptionText
      }), this.$attrs), {
        class: classNames({
          mini: isSmall
        }, this.$attrs.class),
        itemRender: this.itemRender || this.$slots.itemRender
      });
      return createVNode(VcPagination, paginationProps3, null);
    }
  },
  render: function render101() {
    return createVNode(LocaleReceiver, {
      "componentName": "Pagination",
      "defaultLocale": enUS$2,
      "children": this.renderPagination
    }, null);
  }
});
var Pagination = withInstall(Pagination$1);
var listItemMetaProps = {
  avatar: PropsTypes.any,
  description: PropsTypes.any,
  prefixCls: PropsTypes.string,
  title: PropsTypes.any
};
var ItemMeta = defineComponent({
  name: "AListItemMeta",
  props: listItemMetaProps,
  displayName: "AListItemMeta",
  __ANT_LIST_ITEM_META: true,
  slots: ["avatar", "description", "title"],
  setup: function setup100(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("list", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a, _b, _c, _d, _e, _f;
      var classString = "".concat(prefixCls2.value, "-item-meta");
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var description2 = (_c = props2.description) !== null && _c !== void 0 ? _c : (_d = slots.description) === null || _d === void 0 ? void 0 : _d.call(slots);
      var avatar = (_e = props2.avatar) !== null && _e !== void 0 ? _e : (_f = slots.avatar) === null || _f === void 0 ? void 0 : _f.call(slots);
      var content = createVNode("div", {
        "class": "".concat(prefixCls2.value, "-item-meta-content")
      }, [title2 && createVNode("h4", {
        "class": "".concat(prefixCls2.value, "-item-meta-title")
      }, [title2]), description2 && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-item-meta-description")
      }, [description2])]);
      return createVNode("div", {
        "class": classString
      }, [avatar && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-item-meta-avatar")
      }, [avatar]), (title2 || description2) && content]);
    };
  }
});
var ListContextKey = Symbol("ListContextKey");
var __rest$n = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var ListItemProps = {
  prefixCls: PropsTypes.string,
  extra: PropsTypes.any,
  actions: PropsTypes.array,
  grid: PropsTypes.any,
  colStyle: PropsTypes.style
};
var Item = defineComponent({
  name: "AListItem",
  inheritAttrs: false,
  Meta: ItemMeta,
  props: ListItemProps,
  slots: ["actions", "extra"],
  setup: function setup101(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _inject = inject(ListContextKey, {
      grid: ref(),
      itemLayout: ref()
    }), itemLayout = _inject.itemLayout, grid = _inject.grid;
    var _useConfigInject = useConfigInject("list", props2), prefixCls2 = _useConfigInject.prefixCls;
    var isItemContainsTextNodeAndNotSingular = function isItemContainsTextNodeAndNotSingular2() {
      var _a;
      var children = ((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)) || [];
      var result;
      children.forEach(function(element) {
        if (isStringElement(element) && !isEmptyElement(element)) {
          result = true;
        }
      });
      return result && children.length > 1;
    };
    var isFlexMode = function isFlexMode2() {
      var _a, _b;
      var extra = (_a = props2.extra) !== null && _a !== void 0 ? _a : (_b = slots.extra) === null || _b === void 0 ? void 0 : _b.call(slots);
      if (itemLayout.value === "vertical") {
        return !!extra;
      }
      return !isItemContainsTextNodeAndNotSingular();
    };
    return function() {
      var _a, _b, _c, _d, _e;
      var className = attrs.class, restAttrs = __rest$n(attrs, ["class"]);
      var pre = prefixCls2.value;
      var extra = (_a = props2.extra) !== null && _a !== void 0 ? _a : (_b = slots.extra) === null || _b === void 0 ? void 0 : _b.call(slots);
      var children = (_c = slots.default) === null || _c === void 0 ? void 0 : _c.call(slots);
      var actions = (_d = props2.actions) !== null && _d !== void 0 ? _d : flattenChildren((_e = slots.actions) === null || _e === void 0 ? void 0 : _e.call(slots));
      actions = actions && !Array.isArray(actions) ? [actions] : actions;
      var actionsContent = actions && actions.length > 0 && createVNode("ul", {
        "class": "".concat(pre, "-item-action"),
        "key": "actions"
      }, [actions.map(function(action, i2) {
        return createVNode("li", {
          "key": "".concat(pre, "-item-action-").concat(i2)
        }, [action, i2 !== actions.length - 1 && createVNode("em", {
          "class": "".concat(pre, "-item-action-split")
        }, null)]);
      })]);
      var Element3 = grid.value ? "div" : "li";
      var itemChildren = createVNode(Element3, _objectSpread2$2(_objectSpread2$2({}, restAttrs), {}, {
        "class": classNames("".concat(pre, "-item"), _defineProperty$U({}, "".concat(pre, "-item-no-flex"), !isFlexMode()), className)
      }), {
        default: function _default8() {
          return [itemLayout.value === "vertical" && extra ? [createVNode("div", {
            "class": "".concat(pre, "-item-main"),
            "key": "content"
          }, [children, actionsContent]), createVNode("div", {
            "class": "".concat(pre, "-item-extra"),
            "key": "extra"
          }, [extra])] : [children, actionsContent, cloneElement(extra, {
            key: "extra"
          })]];
        }
      });
      return grid.value ? createVNode(Col$1, {
        "flex": 1,
        "style": props2.colStyle
      }, {
        default: function _default8() {
          return [itemChildren];
        }
      }) : itemChildren;
    };
  }
});
var ListGridType = {
  gutter: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.arrayOf(Number)]),
  column: PropsTypes.number,
  xs: PropsTypes.number,
  sm: PropsTypes.number,
  md: PropsTypes.number,
  lg: PropsTypes.number,
  xl: PropsTypes.number,
  xxl: PropsTypes.number
};
var ListSize = tuple("small", "default", "large");
var listProps = {
  bordered: PropsTypes.looseBool,
  dataSource: PropsTypes.array,
  extra: PropsTypes.any,
  grid: PropsTypes.shape(ListGridType).loose,
  itemLayout: PropsTypes.oneOf(tuple("horizontal", "vertical")),
  loading: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
  loadMore: PropsTypes.any,
  pagination: withUndefined(PropsTypes.oneOfType([PropsTypes.shape(paginationConfig()).loose, PropsTypes.looseBool])),
  prefixCls: PropsTypes.string,
  rowKey: PropsTypes.any,
  renderItem: PropsTypes.any,
  size: PropsTypes.oneOf(ListSize),
  split: PropsTypes.looseBool,
  header: PropsTypes.any,
  footer: PropsTypes.any,
  locale: {
    type: Object
  }
};
var List$1 = defineComponent({
  name: "AList",
  Item,
  props: initDefaultProps$1(listProps, {
    dataSource: [],
    bordered: false,
    split: true,
    loading: false,
    pagination: false
  }),
  slots: ["extra", "loadMore", "renderItem", "header", "footer"],
  setup: function setup102(props2, _ref) {
    var slots = _ref.slots;
    var _a, _b;
    provide(ListContextKey, {
      grid: toRef(props2, "grid"),
      itemLayout: toRef(props2, "itemLayout")
    });
    var defaultPaginationProps = {
      current: 1,
      total: 0
    };
    var _useConfigInject = useConfigInject("list", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction, renderEmpty2 = _useConfigInject.renderEmpty;
    var paginationObj = computed(function() {
      return props2.pagination && _typeof$2(props2.pagination) === "object" ? props2.pagination : {};
    });
    var paginationCurrent = ref((_a = paginationObj.value.defaultCurrent) !== null && _a !== void 0 ? _a : 1);
    var paginationSize = ref((_b = paginationObj.value.defaultPageSize) !== null && _b !== void 0 ? _b : 10);
    watch(paginationObj, function() {
      if ("current" in paginationObj.value) {
        paginationCurrent.value = paginationObj.value.current;
      }
      if ("pageSize" in paginationObj.value) {
        paginationSize.value = paginationObj.value.pageSize;
      }
    });
    var triggerPaginationEvent = function triggerPaginationEvent2(eventName) {
      return function(page, pageSize2) {
        paginationCurrent.value = page;
        paginationSize.value = pageSize2;
        if (paginationObj.value[eventName]) {
          paginationObj.value[eventName](page, pageSize2);
        }
      };
    };
    var onPaginationChange = triggerPaginationEvent("onChange");
    var onPaginationShowSizeChange = triggerPaginationEvent("onShowSizeChange");
    var renderEmptyFunc = function renderEmptyFunc2(renderEmptyHandler) {
      var _a2;
      return createVNode("div", {
        "class": "".concat(prefixCls2.value, "-empty-text")
      }, [((_a2 = props2.locale) === null || _a2 === void 0 ? void 0 : _a2.emptyText) || renderEmptyHandler("List")]);
    };
    var loadingProp = computed(function() {
      if (typeof props2.loading === "boolean") {
        return {
          spinning: props2.loading
        };
      } else {
        return props2.loading;
      }
    });
    var isLoading = computed(function() {
      return loadingProp.value && loadingProp.value.spinning;
    });
    var sizeCls = computed(function() {
      var size2 = "";
      switch (props2.size) {
        case "large":
          size2 = "lg";
          break;
        case "small":
          size2 = "sm";
          break;
      }
      return size2;
    });
    var classObj = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty$U(_ref2, "".concat(prefixCls2.value), true), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-vertical"), props2.itemLayout === "vertical"), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-").concat(sizeCls.value), sizeCls.value), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-split"), props2.split), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-bordered"), props2.bordered), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-loading"), isLoading.value), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-grid"), !!props2.grid), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _ref2;
    });
    var paginationProps3 = computed(function() {
      var pp = _extends$1(_extends$1(_extends$1({}, defaultPaginationProps), {
        total: props2.dataSource.length,
        current: paginationCurrent.value,
        pageSize: paginationSize.value
      }), props2.pagination || {});
      var largestPage = Math.ceil(pp.total / pp.pageSize);
      if (pp.current > largestPage) {
        pp.current = largestPage;
      }
      return pp;
    });
    var splitDataSource = computed(function() {
      var dd = _toConsumableArray(props2.dataSource);
      if (props2.pagination) {
        if (props2.dataSource.length > (paginationProps3.value.current - 1) * paginationProps3.value.pageSize) {
          dd = _toConsumableArray(props2.dataSource).splice((paginationProps3.value.current - 1) * paginationProps3.value.pageSize, paginationProps3.value.pageSize);
        }
      }
      return dd;
    });
    var screens2 = useBreakpoint();
    var currentBreakpoint = computed(function() {
      for (var i2 = 0; i2 < responsiveArray.length; i2 += 1) {
        var breakpoint = responsiveArray[i2];
        if (screens2.value[breakpoint]) {
          return breakpoint;
        }
      }
      return void 0;
    });
    var colStyle = computed(function() {
      if (!props2.grid) {
        return void 0;
      }
      var columnCount = currentBreakpoint.value && props2.grid[currentBreakpoint.value] ? props2.grid[currentBreakpoint.value] : props2.grid.column;
      if (columnCount) {
        return {
          width: "".concat(100 / columnCount, "%"),
          maxWidth: "".concat(100 / columnCount, "%")
        };
      }
      return void 0;
    });
    var renderInnerItem = function renderInnerItem2(keys2, item, index2) {
      var _a2;
      var renderItem = (_a2 = props2.renderItem) !== null && _a2 !== void 0 ? _a2 : slots.renderItem;
      if (!renderItem)
        return null;
      var key2;
      if (typeof props2.rowKey === "function") {
        key2 = props2.rowKey(item);
      } else if (typeof props2.rowKey === "string") {
        key2 = item[props2.rowKey];
      } else {
        key2 = item.key;
      }
      if (!key2) {
        key2 = "list-item-".concat(index2);
      }
      keys2[index2] = key2;
      return renderItem({
        item,
        index: index2
      });
    };
    return function() {
      var _a2, _b2, _c, _d, _e, _f, _g;
      var loadMore = (_a2 = props2.loadMore) !== null && _a2 !== void 0 ? _a2 : (_b2 = slots.loadMore) === null || _b2 === void 0 ? void 0 : _b2.call(slots);
      var footer = (_c = props2.footer) !== null && _c !== void 0 ? _c : (_d = slots.footer) === null || _d === void 0 ? void 0 : _d.call(slots);
      var header = (_e = props2.header) !== null && _e !== void 0 ? _e : (_f = slots.header) === null || _f === void 0 ? void 0 : _f.call(slots);
      var children = flattenChildren((_g = slots.default) === null || _g === void 0 ? void 0 : _g.call(slots));
      var keys2 = [];
      var isSomethingAfterLastItem = !!(loadMore || props2.pagination || footer);
      var classString = _extends$1(_extends$1({}, classObj.value), _defineProperty$U({}, "".concat(prefixCls2.value, "-something-after-last-item"), isSomethingAfterLastItem));
      var paginationContent = props2.pagination ? createVNode("div", {
        "class": "".concat(prefixCls2.value, "-pagination")
      }, [createVNode(Pagination, _objectSpread2$2(_objectSpread2$2({}, paginationProps3.value), {}, {
        "onChange": onPaginationChange,
        "onShowSizeChange": onPaginationShowSizeChange
      }), null)]) : null;
      var childrenContent = isLoading.value && createVNode("div", {
        "style": {
          minHeight: "53px"
        }
      }, null);
      if (splitDataSource.value.length > 0) {
        var items = splitDataSource.value.map(function(item, index2) {
          return renderInnerItem(keys2, item, index2);
        });
        var childrenList = items.map(function(child, index2) {
          return createVNode("div", {
            "key": keys2[index2],
            "style": colStyle.value
          }, [child]);
        });
        childrenContent = props2.grid ? createVNode(Row$3, {
          "gutter": props2.grid.gutter
        }, {
          default: function _default8() {
            return [childrenList];
          }
        }) : createVNode("ul", {
          "class": "".concat(prefixCls2.value, "-items")
        }, [items]);
      } else if (!children.length && !isLoading.value) {
        childrenContent = renderEmptyFunc(renderEmpty2.value);
      }
      var paginationPosition = paginationProps3.value.position || "bottom";
      return createVNode("div", {
        "class": classString
      }, [(paginationPosition === "top" || paginationPosition === "both") && paginationContent, header && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-header")
      }, [header]), createVNode(Spin, loadingProp.value, {
        default: function _default8() {
          return [childrenContent, children];
        }
      }), footer && createVNode("div", {
        "class": "".concat(prefixCls2.value, "-footer")
      }, [footer]), loadMore || (paginationPosition === "bottom" || paginationPosition === "both") && paginationContent]);
    };
  }
});
List$1.install = function(app) {
  app.component(List$1.name, List$1);
  app.component(List$1.Item.name, List$1.Item);
  app.component(List$1.Item.Meta.name, List$1.Item.Meta);
  return app;
};
var List$2 = List$1;
var Notice = {
  mixins: [BaseMixin],
  props: {
    duration: PropsTypes.number.def(1.5),
    closable: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    update: PropsTypes.looseBool,
    closeIcon: PropsTypes.any,
    onClose: PropsTypes.func
  },
  watch: {
    duration: function duration() {
      this.restartCloseTimer();
    }
  },
  mounted: function mounted28() {
    this.startCloseTimer();
  },
  updated: function updated16() {
    if (this.update) {
      this.restartCloseTimer();
    }
  },
  beforeUnmount: function beforeUnmount20() {
    this.clearCloseTimer();
    this.willDestroy = true;
  },
  methods: {
    close: function close5(e2) {
      if (e2) {
        e2.stopPropagation();
      }
      this.clearCloseTimer();
      this.__emit("close");
    },
    startCloseTimer: function startCloseTimer() {
      var _this = this;
      this.clearCloseTimer();
      if (!this.willDestroy && this.duration) {
        this.closeTimer = setTimeout(function() {
          _this.close();
        }, this.duration * 1e3);
      }
    },
    clearCloseTimer: function clearCloseTimer() {
      if (this.closeTimer) {
        clearTimeout(this.closeTimer);
        this.closeTimer = null;
      }
    },
    restartCloseTimer: function restartCloseTimer() {
      this.clearCloseTimer();
      this.startCloseTimer();
    }
  },
  render: function render102() {
    var _className;
    var prefixCls2 = this.prefixCls, closable = this.closable, clearCloseTimer2 = this.clearCloseTimer, startCloseTimer2 = this.startCloseTimer, close7 = this.close, $attrs = this.$attrs;
    var componentClass = "".concat(prefixCls2, "-notice");
    var className = (_className = {}, _defineProperty$U(_className, "".concat(componentClass), 1), _defineProperty$U(_className, "".concat(componentClass, "-closable"), closable), _className);
    var closeIcon = getComponent(this, "closeIcon");
    return createVNode("div", {
      "class": className,
      "style": $attrs.style || {
        right: "50%"
      },
      "onMouseenter": clearCloseTimer2,
      "onMouseleave": startCloseTimer2
    }, [createVNode("div", {
      "class": "".concat(componentClass, "-content")
    }, [getSlot(this)]), closable ? createVNode("a", {
      "tabindex": "0",
      "onClick": close7,
      "class": "".concat(componentClass, "-close")
    }, [closeIcon || createVNode("span", {
      "class": "".concat(componentClass, "-close-x")
    }, null)]) : null]);
  }
};
var __rest$m = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$d() {
}
var seed = 0;
var now$1 = Date.now();
function getUuid() {
  return "rcNotification_".concat(now$1, "_").concat(seed++);
}
var Notification = defineComponent({
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string.def("rc-notification"),
    transitionName: PropsTypes.string,
    animation: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]).def("fade"),
    maxCount: PropsTypes.number,
    closeIcon: PropsTypes.any
  },
  data: function data52() {
    return {
      notices: []
    };
  },
  methods: {
    getTransitionName: function getTransitionName5() {
      var props2 = this.$props;
      var transitionName2 = props2.transitionName;
      if (!transitionName2 && props2.animation) {
        transitionName2 = "".concat(props2.prefixCls, "-").concat(props2.animation);
      }
      return transitionName2;
    },
    add: function add2(notice2) {
      var key2 = notice2.key = notice2.key || getUuid();
      var maxCount2 = this.$props.maxCount;
      this.setState(function(previousState) {
        var notices = previousState.notices;
        var noticeIndex = notices.map(function(v2) {
          return v2.key;
        }).indexOf(key2);
        var updatedNotices = notices.concat();
        if (noticeIndex !== -1) {
          updatedNotices.splice(noticeIndex, 1, notice2);
        } else {
          if (maxCount2 && notices.length >= maxCount2) {
            notice2.updateKey = updatedNotices[0].updateKey || updatedNotices[0].key;
            updatedNotices.shift();
          }
          updatedNotices.push(notice2);
        }
        return {
          notices: updatedNotices
        };
      });
    },
    remove: function remove2(key2) {
      this.setState(function(previousState) {
        return {
          notices: previousState.notices.filter(function(notice2) {
            return notice2.key !== key2;
          })
        };
      });
    }
  },
  render: function render103() {
    var _this = this;
    var prefixCls2 = this.prefixCls, notices = this.notices, remove3 = this.remove, getTransitionName6 = this.getTransitionName, $attrs = this.$attrs;
    var transitionProps = getTransitionGroupProps(getTransitionName6());
    var noticeNodes = notices.map(function(notice2, index2) {
      var update = Boolean(index2 === notices.length - 1 && notice2.updateKey);
      var key2 = notice2.updateKey ? notice2.updateKey : notice2.key;
      var content = notice2.content, duration2 = notice2.duration, closable = notice2.closable, onClose = notice2.onClose, style3 = notice2.style, className2 = notice2.class;
      var close7 = createChainedFunction(remove3.bind(_this, notice2.key), onClose);
      var noticeProps = {
        prefixCls: prefixCls2,
        duration: duration2,
        closable,
        update,
        closeIcon: getComponent(_this, "closeIcon"),
        onClose: close7,
        onClick: notice2.onClick || noop$d,
        style: style3,
        class: className2,
        key: key2
      };
      return createVNode(Notice, noticeProps, {
        default: function _default8() {
          return [typeof content === "function" ? content() : content];
        }
      });
    });
    var className = _defineProperty$U({}, prefixCls2, 1);
    return createVNode("div", {
      "class": className,
      "style": $attrs.style || {
        top: "65px",
        left: "50%"
      }
    }, [createVNode(TransitionGroup, _objectSpread2$2({
      "tag": "span"
    }, transitionProps), {
      default: function _default8() {
        return [noticeNodes];
      }
    })]);
  }
});
Notification.newInstance = function newNotificationInstance(properties, callback) {
  var _a = properties || {}, getContainer5 = _a.getContainer, style3 = _a.style, className = _a.class, props2 = __rest$m(_a, ["getContainer", "style", "class"]);
  var div = document.createElement("div");
  if (getContainer5) {
    var root2 = getContainer5();
    root2.appendChild(div);
  } else {
    document.body.appendChild(div);
  }
  var app = createApp({
    mounted: function mounted45() {
      var self2 = this;
      this.$nextTick(function() {
        callback({
          notice: function notice2(noticeProps) {
            self2.$refs.notification.add(noticeProps);
          },
          removeNotice: function removeNotice(key2) {
            self2.$refs.notification.remove(key2);
          },
          component: self2,
          destroy: function destroy3() {
            app.unmount(div);
            if (div.parentNode) {
              div.parentNode.removeChild(div);
            }
          }
        });
      });
    },
    render: function render166() {
      var p2 = _extends$1(_extends$1({}, props2), {
        ref: "notification",
        style: style3,
        class: className
      });
      return createVNode(Notification, p2, null);
    }
  });
  app.mount(div);
};
var Notification$1 = Notification;
var defaultDuration$1 = 3;
var defaultTop$1;
var messageInstance;
var key = 1;
var prefixCls = "ant-message";
var transitionName = "move-up";
var getContainer = function getContainer4() {
  return document.body;
};
var maxCount;
function getMessageInstance(callback) {
  if (messageInstance) {
    callback(messageInstance);
    return;
  }
  Notification$1.newInstance({
    prefixCls,
    transitionName,
    style: {
      top: defaultTop$1
    },
    getContainer,
    maxCount
  }, function(instance) {
    if (messageInstance) {
      callback(messageInstance);
      return;
    }
    messageInstance = instance;
    callback(instance);
  });
}
var iconMap = {
  info: InfoCircleFilled$1,
  success: CheckCircleFilled$1,
  error: CloseCircleFilled$1,
  warning: ExclamationCircleFilled$1,
  loading: LoadingOutlined$1
};
function notice$1(args) {
  var duration2 = args.duration !== void 0 ? args.duration : defaultDuration$1;
  var Icon3 = iconMap[args.type];
  var iconNode = Icon3 ? createVNode(Icon3, null, null) : "";
  var target = args.key || key++;
  var closePromise = new Promise(function(resolve2) {
    var callback = function callback2() {
      if (typeof args.onClose === "function") {
        args.onClose();
      }
      return resolve2(true);
    };
    getMessageInstance(function(instance) {
      instance.notice({
        key: target,
        duration: duration2,
        style: args.style || {},
        class: args.class,
        content: function content() {
          return createVNode("div", {
            "class": "".concat(prefixCls, "-custom-content").concat(args.type ? " ".concat(prefixCls, "-").concat(args.type) : "")
          }, [args.icon || iconNode, createVNode("span", null, [args.content])]);
        },
        onClose: callback
      });
    });
  });
  var result = function result2() {
    if (messageInstance) {
      messageInstance.removeNotice(target);
    }
  };
  result.then = function(filled, rejected) {
    return closePromise.then(filled, rejected);
  };
  result.promise = closePromise;
  return result;
}
function isArgsProps(content) {
  return Object.prototype.toString.call(content) === "[object Object]" && !!content.content;
}
var api$2 = {
  open: notice$1,
  config: function config(options2) {
    if (options2.top !== void 0) {
      defaultTop$1 = options2.top;
      messageInstance = null;
    }
    if (options2.duration !== void 0) {
      defaultDuration$1 = options2.duration;
    }
    if (options2.prefixCls !== void 0) {
      prefixCls = options2.prefixCls;
    }
    if (options2.getContainer !== void 0) {
      getContainer = options2.getContainer;
    }
    if (options2.transitionName !== void 0) {
      transitionName = options2.transitionName;
      messageInstance = null;
    }
    if (options2.maxCount !== void 0) {
      maxCount = options2.maxCount;
      messageInstance = null;
    }
  },
  destroy: function destroy() {
    if (messageInstance) {
      messageInstance.destroy();
      messageInstance = null;
    }
  }
};
["success", "info", "warning", "error", "loading"].forEach(function(type3) {
  api$2[type3] = function(content, duration2, onClose) {
    if (isArgsProps(content)) {
      return api$2.open(_extends$1(_extends$1({}, content), {
        type: type3
      }));
    }
    if (typeof duration2 === "function") {
      onClose = duration2;
      duration2 = void 0;
    }
    return api$2.open({
      content,
      duration: duration2,
      type: type3,
      onClose
    });
  };
});
api$2.warn = api$2.warning;
var message = api$2;
function getBeforeSelectionText(input) {
  var selectionStart = input.selectionStart;
  return input.value.slice(0, selectionStart);
}
function lower(char) {
  return (char || "").toLowerCase();
}
function getLastMeasureIndex(text) {
  var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var prefixList = Array.isArray(prefix) ? prefix : [prefix];
  return prefixList.reduce(function(lastMatch, prefixStr) {
    var lastIndex = text.lastIndexOf(prefixStr);
    if (lastIndex > lastMatch.location) {
      return {
        location: lastIndex,
        prefix: prefixStr
      };
    }
    return lastMatch;
  }, {
    location: -1,
    prefix: ""
  });
}
function reduceText(text, targetText, split) {
  var firstChar = text[0];
  if (!firstChar || firstChar === split) {
    return text;
  }
  var restText = text;
  var targetTextLen = targetText.length;
  for (var i2 = 0; i2 < targetTextLen; i2 += 1) {
    if (lower(restText[i2]) !== lower(targetText[i2])) {
      restText = restText.slice(i2);
      break;
    } else if (i2 === targetTextLen - 1) {
      restText = restText.slice(targetTextLen);
    }
  }
  return restText;
}
function replaceWithMeasure(text, measureConfig) {
  var measureLocation = measureConfig.measureLocation, prefix = measureConfig.prefix, targetText = measureConfig.targetText, selectionStart = measureConfig.selectionStart, split = measureConfig.split;
  var beforeMeasureText = text.slice(0, measureLocation);
  if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {
    beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);
  }
  if (beforeMeasureText) {
    beforeMeasureText = "".concat(beforeMeasureText).concat(split);
  }
  var restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);
  if (restText.slice(0, split.length) === split) {
    restText = restText.slice(split.length);
  }
  var connectedStartText = "".concat(beforeMeasureText).concat(prefix).concat(targetText).concat(split);
  return {
    text: "".concat(connectedStartText).concat(restText),
    selectionLocation: connectedStartText.length
  };
}
function setInputSelection(input, location2) {
  input.setSelectionRange(location2, location2);
  input.blur();
  input.focus();
}
function validateSearch() {
  var text = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var props2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var split = props2.split;
  return !split || text.indexOf(split) === -1;
}
function filterOption() {
  var input = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$value = _ref.value, value26 = _ref$value === void 0 ? "" : _ref$value;
  var lowerCase = input.toLowerCase();
  return value26.toLowerCase().indexOf(lowerCase) !== -1;
}
var OptionProps = {
  value: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  children: PropsTypes.any
};
var Option$1 = defineComponent({
  name: "Option",
  props: OptionProps,
  render: function render104() {
    return null;
  }
});
function noop$c() {
}
var DropdownMenu = {
  name: "DropdownMenu",
  props: {
    prefixCls: PropsTypes.string,
    options: PropsTypes.arrayOf(OptionProps)
  },
  setup: function setup103() {
    return {
      mentionsContext: inject("mentionsContext")
    };
  },
  render: function render105() {
    var _this$mentionsContext = this.mentionsContext, notFoundContent = _this$mentionsContext.notFoundContent, activeIndex = _this$mentionsContext.activeIndex, setActiveIndex2 = _this$mentionsContext.setActiveIndex, selectOption2 = _this$mentionsContext.selectOption, _this$mentionsContext2 = _this$mentionsContext.onFocus, onFocus6 = _this$mentionsContext2 === void 0 ? noop$c : _this$mentionsContext2, _this$mentionsContext3 = _this$mentionsContext.onBlur, onBlur7 = _this$mentionsContext3 === void 0 ? noop$c : _this$mentionsContext3;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, options2 = _this$$props.options;
    var activeOption = options2[activeIndex] || {};
    return createVNode(Menu, {
      "prefixCls": "".concat(prefixCls2, "-menu"),
      "activeKey": activeOption.value,
      "onSelect": function onSelect6(_ref) {
        var key2 = _ref.key;
        var option = options2.find(function(_ref2) {
          var value26 = _ref2.value;
          return value26 === key2;
        });
        selectOption2(option);
      },
      "onBlur": onBlur7,
      "onFocus": onFocus6
    }, {
      default: function _default8() {
        return [[].concat(_toConsumableArray(options2.map(function(option, index2) {
          var value26 = option.value, disabled = option.disabled, children = option.children;
          return createVNode(MenuItem, {
            "key": value26,
            "disabled": disabled,
            "onMouseenter": function onMouseenter2() {
              setActiveIndex2(index2);
            }
          }, {
            default: function _default9() {
              return [children];
            }
          });
        })), [!options2.length && createVNode(MenuItem, {
          "key": "notFoundContent",
          "disabled": true
        }, {
          default: function _default9() {
            return [notFoundContent];
          }
        })]).filter(Boolean)];
      }
    });
  }
};
var PlaceMent = tuple("top", "bottom");
var BUILT_IN_PLACEMENTS$1 = {
  bottomRight: {
    points: ["tl", "br"],
    offset: [0, 4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    }
  },
  topRight: {
    points: ["bl", "tr"],
    offset: [0, -4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    }
  }
};
var KeywordTrigger = {
  name: "KeywordTrigger",
  props: {
    loading: PropsTypes.looseBool,
    options: PropsTypes.arrayOf(OptionProps),
    prefixCls: PropsTypes.string,
    placement: PropsTypes.oneOf(PlaceMent),
    visible: PropsTypes.looseBool,
    transitionName: PropsTypes.string,
    getPopupContainer: PropsTypes.func
  },
  methods: {
    getDropdownPrefix: function getDropdownPrefix() {
      return "".concat(this.$props.prefixCls, "-dropdown");
    },
    getDropdownElement: function getDropdownElement() {
      var options2 = this.$props.options;
      return createVNode(DropdownMenu, {
        "prefixCls": this.getDropdownPrefix(),
        "options": options2
      }, null);
    }
  },
  render: function render106() {
    var _a;
    var _this$$props = this.$props, visible9 = _this$$props.visible, placement2 = _this$$props.placement, transitionName2 = _this$$props.transitionName, getPopupContainer = _this$$props.getPopupContainer;
    var $slots = this.$slots;
    var children = (_a = $slots.default) === null || _a === void 0 ? void 0 : _a.call($slots);
    var popupElement = this.getDropdownElement();
    return createVNode(Trigger, {
      "prefixCls": this.getDropdownPrefix(),
      "popupVisible": visible9,
      "popup": popupElement,
      "popupPlacement": placement2 === "top" ? "topRight" : "bottomRight",
      "popupTransitionName": transitionName2,
      "builtinPlacements": BUILT_IN_PLACEMENTS$1,
      "getPopupContainer": getPopupContainer
    }, {
      default: function _default8() {
        return [children];
      }
    });
  }
};
var mentionsProps$1 = {
  autofocus: PropsTypes.looseBool,
  prefix: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.array]),
  prefixCls: PropsTypes.string,
  value: PropsTypes.string,
  defaultValue: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  notFoundContent: PropsTypes.VNodeChild,
  split: PropsTypes.string,
  transitionName: PropsTypes.string,
  placement: PropsTypes.oneOf(PlaceMent),
  character: PropsTypes.any,
  characterRender: PropsTypes.func,
  filterOption: {
    type: [Boolean, Function]
  },
  validateSearch: PropsTypes.func,
  getPopupContainer: {
    type: Function
  }
};
var vcMentionsProps = _extends$1(_extends$1({}, mentionsProps$1), {
  children: PropsTypes.any
});
var defaultProps$1 = {
  prefix: "@",
  split: " ",
  validateSearch,
  filterOption
};
initDefaultProps$2(vcMentionsProps, defaultProps$1);
var __rest$l = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$b() {
}
var Mentions$2 = {
  name: "Mentions",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(vcMentionsProps, defaultProps$1),
  created: function created14() {
    this.mentionsContext = provide("mentionsContext", this);
  },
  data: function data53() {
    var _this$$props = this.$props, _this$$props$value = _this$$props.value, value26 = _this$$props$value === void 0 ? "" : _this$$props$value, _this$$props$defaultV = _this$$props.defaultValue, defaultValue = _this$$props$defaultV === void 0 ? "" : _this$$props$defaultV;
    warning_1(this.$props.children);
    return {
      _value: !hasProp(this, "value") ? defaultValue : value26,
      measuring: false,
      measureLocation: 0,
      measureText: null,
      measurePrefix: "",
      activeIndex: 0,
      isFocus: false
    };
  },
  watch: {
    value: function value25(val) {
      this.$data._value = val;
    }
  },
  updated: function updated17() {
    var _this = this;
    this.$nextTick(function() {
      var measuring = _this.$data.measuring;
      if (measuring) {
        _this.$refs.measure.scrollTop = _this.$refs.textarea.scrollTop;
      }
    });
  },
  methods: {
    triggerChange: function triggerChange3(value26) {
      var props2 = getOptionProps(this);
      if (!("value" in props2)) {
        this.setState({
          _value: value26
        });
      } else {
        this.$forceUpdate();
      }
      this.__emit("change", value26);
    },
    onChange: function onChange4(_ref) {
      var _ref$target = _ref.target, value26 = _ref$target.value, composing = _ref$target.composing, isComposing = _ref.isComposing;
      if (isComposing || composing)
        return;
      this.triggerChange(value26);
    },
    onKeyDown: function onKeyDown12(event) {
      var which = event.which;
      var _this$$data = this.$data, activeIndex = _this$$data.activeIndex, measuring = _this$$data.measuring;
      if (!measuring) {
        return;
      }
      if (which === KeyCode$2.UP || which === KeyCode$2.DOWN) {
        var optionLen = this.getOptions().length;
        var offset4 = which === KeyCode$2.UP ? -1 : 1;
        var newActiveIndex = (activeIndex + offset4 + optionLen) % optionLen;
        this.setState({
          activeIndex: newActiveIndex
        });
        event.preventDefault();
      } else if (which === KeyCode$2.ESC) {
        this.stopMeasure();
      } else if (which === KeyCode$2.ENTER) {
        event.preventDefault();
        var options2 = this.getOptions();
        if (!options2.length) {
          this.stopMeasure();
          return;
        }
        var option = options2[activeIndex];
        this.selectOption(option);
      }
    },
    onKeyUp: function onKeyUp2(event) {
      var key2 = event.key, which = event.which;
      var _this$$data2 = this.$data, prevMeasureText = _this$$data2.measureText, measuring = _this$$data2.measuring;
      var _this$$props2 = this.$props, _this$$props2$prefix = _this$$props2.prefix, prefix = _this$$props2$prefix === void 0 ? "" : _this$$props2$prefix, validateSearch2 = _this$$props2.validateSearch;
      var target = event.target;
      if (target.composing) {
        return;
      }
      var selectionStartText = getBeforeSelectionText(target);
      var _getLastMeasureIndex = getLastMeasureIndex(selectionStartText, prefix), measureIndex = _getLastMeasureIndex.location, measurePrefix = _getLastMeasureIndex.prefix;
      if ([KeyCode$2.ESC, KeyCode$2.UP, KeyCode$2.DOWN, KeyCode$2.ENTER].indexOf(which) !== -1) {
        return;
      }
      if (measureIndex !== -1) {
        var measureText = selectionStartText.slice(measureIndex + measurePrefix.length);
        var validateMeasure = validateSearch2(measureText, this.$props);
        var matchOption = !!this.getOptions(measureText).length;
        if (validateMeasure) {
          if (key2 === measurePrefix || measuring || measureText !== prevMeasureText && matchOption) {
            this.startMeasure(measureText, measurePrefix, measureIndex);
          }
        } else if (measuring) {
          this.stopMeasure();
        }
        if (validateMeasure) {
          this.__emit("search", measureText, measurePrefix);
        }
      } else if (measuring) {
        this.stopMeasure();
      }
    },
    onInputFocus: function onInputFocus(event) {
      this.onFocus(event);
    },
    onInputBlur: function onInputBlur(event) {
      this.onBlur(event);
    },
    onDropdownFocus: function onDropdownFocus() {
      this.onFocus();
    },
    onDropdownBlur: function onDropdownBlur() {
      this.onBlur();
    },
    onFocus: function onFocus5(event) {
      window.clearTimeout(this.focusId);
      var isFocus = this.$data.isFocus;
      if (!isFocus && event) {
        this.__emit("focus", event);
      }
      this.setState({
        isFocus: true
      });
    },
    onBlur: function onBlur6(event) {
      var _this2 = this;
      this.focusId = window.setTimeout(function() {
        _this2.setState({
          isFocus: false
        });
        _this2.stopMeasure();
        _this2.__emit("blur", event);
      }, 100);
    },
    selectOption: function selectOption(option) {
      var _this3 = this;
      var _this$$data3 = this.$data, value26 = _this$$data3._value, measureLocation = _this$$data3.measureLocation, measurePrefix = _this$$data3.measurePrefix;
      var split = this.$props.split;
      var _option$value = option.value, mentionValue = _option$value === void 0 ? "" : _option$value;
      var _replaceWithMeasure = replaceWithMeasure(value26, {
        measureLocation,
        targetText: mentionValue,
        prefix: measurePrefix,
        selectionStart: this.$refs.textarea.selectionStart,
        split
      }), text = _replaceWithMeasure.text, selectionLocation = _replaceWithMeasure.selectionLocation;
      this.triggerChange(text);
      this.stopMeasure(function() {
        setInputSelection(_this3.$refs.textarea, selectionLocation);
      });
      this.__emit("select", option, measurePrefix);
    },
    setActiveIndex: function setActiveIndex(activeIndex) {
      this.setState({
        activeIndex
      });
    },
    getOptions: function getOptions4(measureText) {
      var targetMeasureText = measureText || this.$data.measureText || "";
      var _this$$props3 = this.$props, filterOption2 = _this$$props3.filterOption, _this$$props3$childre = _this$$props3.children, children = _this$$props3$childre === void 0 ? [] : _this$$props3$childre;
      var list = (Array.isArray(children) ? children : [children]).map(function(item) {
        var _a, _b;
        return _extends$1(_extends$1({}, getOptionProps(item)), {
          children: (_b = (_a = item.children).default) === null || _b === void 0 ? void 0 : _b.call(_a)
        });
      }).filter(function(option) {
        if (filterOption2 === false) {
          return true;
        }
        return filterOption2(targetMeasureText, option);
      });
      return list;
    },
    startMeasure: function startMeasure(measureText, measurePrefix, measureLocation) {
      this.setState({
        measuring: true,
        measureText,
        measurePrefix,
        measureLocation,
        activeIndex: 0
      });
    },
    stopMeasure: function stopMeasure(callback) {
      this.setState({
        measuring: false,
        measureLocation: 0,
        measureText: null
      }, callback);
    },
    focus: function focus18() {
      this.$refs.textarea.focus();
    },
    blur: function blur15() {
      this.$refs.textarea.blur();
    }
  },
  render: function render107() {
    var _this$$data4 = this.$data, value26 = _this$$data4._value, measureLocation = _this$$data4.measureLocation, measurePrefix = _this$$data4.measurePrefix, measuring = _this$$data4.measuring;
    var _a = getOptionProps(this), prefixCls2 = _a.prefixCls, placement2 = _a.placement, transitionName2 = _a.transitionName;
    _a.notFoundContent;
    var getPopupContainer = _a.getPopupContainer, restProps = __rest$l(_a, ["prefixCls", "placement", "transitionName", "notFoundContent", "getPopupContainer"]);
    var _b = this.$attrs, className = _b.class, style3 = _b.style, otherAttrs = __rest$l(_b, ["class", "style"]);
    var inputProps2 = omit$2(restProps, ["value", "defaultValue", "prefix", "split", "children", "validateSearch", "filterOption"]);
    var options2 = measuring ? this.getOptions() : [];
    var textareaProps = _extends$1(_extends$1(_extends$1({}, inputProps2), otherAttrs), {
      onChange: noop$b,
      onSelect: noop$b,
      value: value26,
      onInput: this.onChange,
      onBlur: this.onInputBlur,
      onKeydown: this.onKeyDown,
      onKeyup: this.onKeyUp,
      onFocus: this.onInputFocus
    });
    return createVNode("div", {
      "class": classNames(prefixCls2, className),
      "style": style3
    }, [withDirectives(createVNode("textarea", _objectSpread2$2({
      "ref": "textarea"
    }, textareaProps), null), [[antInput$1]]), measuring && createVNode("div", {
      "ref": "measure",
      "class": "".concat(prefixCls2, "-measure")
    }, [value26.slice(0, measureLocation), createVNode(KeywordTrigger, {
      "prefixCls": prefixCls2,
      "transitionName": transitionName2,
      "placement": placement2,
      "options": options2,
      "visible": true,
      "getPopupContainer": getPopupContainer
    }, {
      default: function _default8() {
        return [createVNode("span", null, [measurePrefix])];
      }
    }), value26.slice(measureLocation + measurePrefix.length)])]);
  }
};
var Mentions$3 = defineComponent(Mentions$2);
Mentions$3.Option = Option$1;
var __rest$k = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Option = Mentions$3.Option;
function loadingFilterOption() {
  return true;
}
function getMentions() {
  var value26 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var config2 = arguments.length > 1 ? arguments[1] : void 0;
  var _ref = config2 || {}, _ref$prefix = _ref.prefix, prefix = _ref$prefix === void 0 ? "@" : _ref$prefix, _ref$split = _ref.split, split = _ref$split === void 0 ? " " : _ref$split;
  var prefixList = Array.isArray(prefix) ? prefix : [prefix];
  return value26.split(split).map(function() {
    var str = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var hitPrefix = null;
    prefixList.some(function(prefixStr) {
      var startStr = str.slice(0, prefixStr.length);
      if (startStr === prefixStr) {
        hitPrefix = prefixStr;
        return true;
      }
      return false;
    });
    if (hitPrefix !== null) {
      return {
        prefix: hitPrefix,
        value: str.slice(hitPrefix.length)
      };
    }
    return null;
  }).filter(function(entity) {
    return !!entity && !!entity.value;
  });
}
var mentionsProps = _extends$1(_extends$1({}, mentionsProps$1), {
  loading: PropsTypes.looseBool,
  onFocus: {
    type: Function
  },
  onBlur: {
    type: Function
  },
  onSelect: {
    type: Function
  },
  onChange: {
    type: Function
  }
});
var Mentions = defineComponent({
  name: "AMentions",
  mixins: [BaseMixin],
  inheritAttrs: false,
  Option: _extends$1(_extends$1({}, Option), {
    name: "AMentionsOption"
  }),
  getMentions,
  props: mentionsProps,
  emits: ["update:value", "change", "focus", "blur", "select"],
  setup: function setup104() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data54() {
    return {
      focused: false
    };
  },
  mounted: function mounted29() {
    nextTick(function() {
    });
  },
  methods: {
    handleFocus: function handleFocus(e2) {
      this.$emit("focus", e2);
      this.setState({
        focused: true
      });
    },
    handleBlur: function handleBlur2(e2) {
      this.$emit("blur", e2);
      this.setState({
        focused: false
      });
    },
    handleSelect: function handleSelect() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.$emit.apply(this, ["select"].concat(args));
      this.setState({
        focused: true
      });
    },
    handleChange: function handleChange16(val) {
      this.$emit("update:value", val);
      this.$emit("change", val);
    },
    getNotFoundContent: function getNotFoundContent(renderEmpty2) {
      var notFoundContent = getComponent(this, "notFoundContent");
      if (notFoundContent !== void 0) {
        return notFoundContent;
      }
      return renderEmpty2("Select");
    },
    getOptions: function getOptions5() {
      var loading = this.$props.loading;
      var children = getSlot(this);
      if (loading) {
        return createVNode(Option, {
          "value": "ANTD_SEARCHING",
          "disabled": true
        }, {
          default: function _default8() {
            return [createVNode(Spin, {
              "size": "small"
            }, null)];
          }
        });
      }
      return children;
    },
    getFilterOption: function getFilterOption() {
      var _this$$props = this.$props, filterOption2 = _this$$props.filterOption, loading = _this$$props.loading;
      if (loading) {
        return loadingFilterOption;
      }
      return filterOption2;
    },
    focus: function focus19() {
      this.$refs.vcMentions.focus();
    },
    blur: function blur16() {
      this.$refs.vcMentions.blur();
    }
  },
  render: function render108() {
    var _classNames;
    var focused = this.$data.focused;
    var _this$configProvider = this.configProvider, getPrefixCls2 = _this$configProvider.getPrefixCls, renderEmpty2 = _this$configProvider.renderEmpty;
    var _a = getOptionProps(this), customizePrefixCls = _a.prefixCls, disabled = _a.disabled, getPopupContainer = _a.getPopupContainer, restProps = __rest$k(_a, ["prefixCls", "disabled", "getPopupContainer"]);
    var _b = this.$attrs, className = _b.class, otherAttrs = __rest$k(_b, ["class"]);
    var prefixCls2 = getPrefixCls2("mentions", customizePrefixCls);
    var otherProps = omit$2(restProps, ["loading", "onUpdate:value"]);
    var mergedClassName = classNames(className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty$U(_classNames, "".concat(prefixCls2, "-focused"), focused), _classNames));
    var mentionsProps2 = _extends$1(_extends$1(_extends$1(_extends$1({
      prefixCls: prefixCls2,
      notFoundContent: this.getNotFoundContent(renderEmpty2)
    }, otherProps), {
      disabled,
      filterOption: this.getFilterOption(),
      getPopupContainer,
      children: this.getOptions(),
      class: mergedClassName,
      rows: 1
    }), otherAttrs), {
      onChange: this.handleChange,
      onSelect: this.handleSelect,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      ref: "vcMentions"
    });
    return createVNode(Mentions$3, mentionsProps2, null);
  }
});
Mentions.install = function(app) {
  app.component(Mentions.name, Mentions);
  app.component(Mentions.Option.name, Mentions.Option);
  return app;
};
var MentionsOption = Mentions.Option;
var Mentions$1 = Mentions;
var mousePosition = null;
var getClickPosition = function getClickPosition2(e2) {
  mousePosition = {
    x: e2.pageX,
    y: e2.pageY
  };
  setTimeout(function() {
    return mousePosition = null;
  }, 100);
};
if (typeof window !== "undefined" && window.document && window.document.documentElement) {
  addEventListenerWrap(document.documentElement, "click", getClickPosition, true);
}
function noop$a() {
}
var modalProps = {
  prefixCls: PropsTypes.string,
  visible: PropsTypes.looseBool,
  confirmLoading: PropsTypes.looseBool,
  title: PropsTypes.any,
  closable: PropsTypes.looseBool,
  closeIcon: PropsTypes.any,
  onOk: {
    type: Function
  },
  onCancel: {
    type: Function
  },
  afterClose: PropsTypes.func.def(noop$a),
  centered: PropsTypes.looseBool,
  width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  footer: PropsTypes.any,
  okText: PropsTypes.any,
  okType: {
    type: String
  },
  cancelText: PropsTypes.any,
  icon: PropsTypes.any,
  maskClosable: PropsTypes.looseBool,
  forceRender: PropsTypes.looseBool,
  okButtonProps: PropsTypes.shape(buttonTypes).loose,
  cancelButtonProps: PropsTypes.shape(buttonTypes).loose,
  destroyOnClose: PropsTypes.looseBool,
  wrapClassName: PropsTypes.string,
  maskTransitionName: PropsTypes.string,
  transitionName: PropsTypes.string,
  getContainer: PropsTypes.any,
  zIndex: PropsTypes.number,
  bodyStyle: PropsTypes.style,
  maskStyle: PropsTypes.style,
  mask: PropsTypes.looseBool,
  keyboard: PropsTypes.looseBool,
  wrapProps: PropsTypes.object,
  focusTriggerAfterClose: PropsTypes.looseBool
};
var destroyFns = [];
var Modal = defineComponent({
  name: "AModal",
  inheritAttrs: false,
  props: initDefaultProps$1(modalProps, {
    width: 520,
    transitionName: "zoom",
    maskTransitionName: "fade",
    confirmLoading: false,
    visible: false,
    okType: "primary"
  }),
  emits: ["update:visible", "cancel", "change", "ok"],
  setup: function setup105() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data55() {
    return {
      sVisible: !!this.visible
    };
  },
  watch: {
    visible: function visible6(val) {
      this.sVisible = val;
    }
  },
  methods: {
    handleCancel: function handleCancel(e2) {
      this.$emit("update:visible", false);
      this.$emit("cancel", e2);
      this.$emit("change", false);
    },
    handleOk: function handleOk(e2) {
      this.$emit("ok", e2);
    },
    renderFooter: function renderFooter3(locale2) {
      var _this = this;
      var okType = this.okType, confirmLoading = this.confirmLoading;
      var cancelBtnProps = _extends$1({
        onClick: this.handleCancel
      }, this.cancelButtonProps || {});
      var okBtnProps = _extends$1(_extends$1(_extends$1({
        onClick: this.handleOk
      }, convertLegacyProps(okType)), {
        loading: confirmLoading
      }), this.okButtonProps || {});
      return createVNode("div", null, [createVNode(Button, cancelBtnProps, {
        default: function _default8() {
          return [getComponent(_this, "cancelText") || locale2.cancelText];
        }
      }), createVNode(Button, okBtnProps, {
        default: function _default8() {
          return [getComponent(_this, "okText") || locale2.okText];
        }
      })]);
    }
  },
  render: function render109() {
    var customizePrefixCls = this.prefixCls, visible9 = this.sVisible, wrapClassName = this.wrapClassName, centered = this.centered, getContainer5 = this.getContainer, $attrs = this.$attrs;
    var children = getSlot(this);
    var _this$configProvider = this.configProvider, getPrefixCls2 = _this$configProvider.getPrefixCls, getContextPopupContainer = _this$configProvider.getPopupContainer;
    var prefixCls2 = getPrefixCls2("modal", customizePrefixCls);
    var defaultFooter = createVNode(LocaleReceiver, {
      "componentName": "Modal",
      "defaultLocale": getConfirmLocale(),
      "children": this.renderFooter
    }, null);
    var closeIcon = getComponent(this, "closeIcon");
    var closeIconToRender = createVNode("span", {
      "class": "".concat(prefixCls2, "-close-x")
    }, [closeIcon || createVNode(CloseOutlined$1, {
      "class": "".concat(prefixCls2, "-close-icon")
    }, null)]);
    var footer = getComponent(this, "footer");
    var title2 = getComponent(this, "title");
    var dialogProps = _extends$1(_extends$1(_extends$1({}, this.$props), $attrs), {
      getContainer: getContainer5 === void 0 ? getContextPopupContainer : getContainer5,
      prefixCls: prefixCls2,
      wrapClassName: classNames(_defineProperty$U({}, "".concat(prefixCls2, "-centered"), !!centered), wrapClassName),
      title: title2,
      footer: footer === void 0 ? defaultFooter : footer,
      visible: visible9,
      mousePosition,
      closeIcon: closeIconToRender,
      onClose: this.handleCancel
    });
    return createVNode(DialogWrap$1, dialogProps, {
      default: function _default8() {
        return [children];
      }
    });
  }
});
var ActionButtonProps = {
  type: {
    type: String
  },
  actionFn: PropsTypes.func,
  closeModal: PropsTypes.func,
  autofocus: PropsTypes.looseBool,
  buttonProps: PropsTypes.object
};
var ActionButton = defineComponent({
  mixins: [BaseMixin],
  props: ActionButtonProps,
  setup: function setup106() {
    return {
      timeoutId: void 0
    };
  },
  data: function data56() {
    return {
      loading: false
    };
  },
  mounted: function mounted30() {
    var _this = this;
    if (this.autofocus) {
      this.timeoutId = setTimeout(function() {
        return findDOMNode(_this).focus();
      });
    }
  },
  beforeUnmount: function beforeUnmount21() {
    clearTimeout(this.timeoutId);
  },
  methods: {
    onClick: function onClick5() {
      var _this2 = this;
      var actionFn = this.actionFn, closeModal = this.closeModal;
      if (actionFn) {
        var ret;
        if (actionFn.length) {
          ret = actionFn(closeModal);
        } else {
          ret = actionFn();
          if (!ret) {
            closeModal();
          }
        }
        if (ret && ret.then) {
          this.setState({
            loading: true
          });
          ret.then(function() {
            closeModal.apply(void 0, arguments);
          }, function(e2) {
            console.error(e2);
            _this2.setState({
              loading: false
            });
          });
        }
      } else {
        closeModal();
      }
    }
  },
  render: function render110() {
    var _this3 = this;
    var type3 = this.type, loading = this.loading, buttonProps3 = this.buttonProps;
    var props2 = _extends$1(_extends$1(_extends$1({}, convertLegacyProps(type3)), {
      onClick: this.onClick,
      loading
    }), buttonProps3);
    return createVNode(Button, props2, {
      default: function _default8() {
        return [getSlot(_this3)];
      }
    });
  }
});
function renderSomeContent(_name, someContent) {
  if (typeof someContent === "function") {
    return someContent();
  }
  return someContent;
}
var ConfirmDialog = function ConfirmDialog2(props2) {
  var icon = props2.icon, onCancel = props2.onCancel, onOk3 = props2.onOk, close7 = props2.close, _props$closable = props2.closable, closable = _props$closable === void 0 ? false : _props$closable, zIndex = props2.zIndex, afterClose = props2.afterClose, visible9 = props2.visible, keyboard = props2.keyboard, centered = props2.centered, getContainer5 = props2.getContainer, maskStyle = props2.maskStyle, okButtonProps = props2.okButtonProps, cancelButtonProps = props2.cancelButtonProps;
  var okType = props2.okType || "primary";
  var prefixCls2 = props2.prefixCls || "ant-modal";
  var contentPrefixCls = "".concat(prefixCls2, "-confirm");
  var okCancel = "okCancel" in props2 ? props2.okCancel : true;
  var width = props2.width || 416;
  var style3 = props2.style || {};
  var mask = props2.mask === void 0 ? true : props2.mask;
  var maskClosable = props2.maskClosable === void 0 ? false : props2.maskClosable;
  var runtimeLocale2 = getConfirmLocale();
  var okText = renderSomeContent("okText", props2.okText) || (okCancel ? runtimeLocale2.okText : runtimeLocale2.justOkText);
  var cancelText = renderSomeContent("cancelText", props2.cancelText) || runtimeLocale2.cancelText;
  var autoFocusButton = props2.autoFocusButton === null ? false : props2.autoFocusButton || "ok";
  var transitionName2 = props2.transitionName || "zoom";
  var maskTransitionName = props2.maskTransitionName || "fade";
  var classString = classNames(contentPrefixCls, "".concat(contentPrefixCls, "-").concat(props2.type), "".concat(prefixCls2, "-").concat(props2.type), props2.class);
  var cancelButton = okCancel && createVNode(ActionButton, {
    "actionFn": onCancel,
    "closeModal": close7,
    "autofocus": autoFocusButton === "cancel",
    "buttonProps": cancelButtonProps
  }, {
    default: function _default8() {
      return [cancelText];
    }
  });
  return createVNode(Modal, {
    "prefixCls": prefixCls2,
    "class": classString,
    "wrapClassName": classNames(_defineProperty$U({}, "".concat(contentPrefixCls, "-centered"), !!centered)),
    "onCancel": function onCancel2(e2) {
      return close7({
        triggerCancel: true
      }, e2);
    },
    "visible": visible9,
    "title": "",
    "transitionName": transitionName2,
    "footer": "",
    "maskTransitionName": maskTransitionName,
    "mask": mask,
    "maskClosable": maskClosable,
    "maskStyle": maskStyle,
    "style": style3,
    "width": width,
    "zIndex": zIndex,
    "afterClose": afterClose,
    "keyboard": keyboard,
    "centered": centered,
    "getContainer": getContainer5,
    "closable": closable
  }, {
    default: function _default8() {
      return [createVNode("div", {
        "class": "".concat(contentPrefixCls, "-body-wrapper")
      }, [createVNode("div", {
        "class": "".concat(contentPrefixCls, "-body")
      }, [renderSomeContent("icon", icon), props2.title === void 0 ? null : createVNode("span", {
        "class": "".concat(contentPrefixCls, "-title")
      }, [renderSomeContent("title", props2.title)]), createVNode("div", {
        "class": "".concat(contentPrefixCls, "-content")
      }, [renderSomeContent("content", props2.content)])]), createVNode("div", {
        "class": "".concat(contentPrefixCls, "-btns")
      }, [cancelButton, createVNode(ActionButton, {
        "type": okType,
        "actionFn": onOk3,
        "closeModal": close7,
        "autofocus": autoFocusButton === "ok",
        "buttonProps": okButtonProps
      }, {
        default: function _default9() {
          return [okText];
        }
      })])])];
    }
  });
};
ConfirmDialog.inheritAttrs = false;
var ConfirmDialog$1 = ConfirmDialog;
var confirm$1 = function confirm2(config2) {
  var div = document.createElement("div");
  document.body.appendChild(div);
  var currentConfig = _extends$1(_extends$1({}, omit$2(config2, ["parentContext", "appContext"])), {
    close: close7,
    visible: true
  });
  var confirmDialogInstance = null;
  function close7() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    currentConfig = _extends$1(_extends$1({}, currentConfig), {
      visible: false,
      afterClose: destroy3.bind.apply(destroy3, [this].concat(args))
    });
    update(currentConfig);
  }
  function update(newConfig) {
    currentConfig = _extends$1(_extends$1({}, currentConfig), newConfig);
    if (confirmDialogInstance) {
      _extends$1(confirmDialogInstance.component.props, currentConfig);
      confirmDialogInstance.component.update();
    }
  }
  function destroy3() {
    if (confirmDialogInstance && div.parentNode) {
      _extends$1(confirmDialogInstance.component.props, {
        vIf: false
      });
      confirmDialogInstance.component.update();
      confirmDialogInstance = null;
      div.parentNode.removeChild(div);
    }
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var triggerCancel = args.some(function(param) {
      return param && param.triggerCancel;
    });
    if (config2.onCancel && triggerCancel) {
      config2.onCancel.apply(config2, args);
    }
    for (var i2 = 0; i2 < destroyFns.length; i2++) {
      var fn = destroyFns[i2];
      if (fn === close7) {
        destroyFns.splice(i2, 1);
        break;
      }
    }
  }
  var Wrapper = function Wrapper2(p2) {
    return p2.vIf ? createVNode(ConfirmDialog$1, p2, null) : null;
  };
  function render$1(props2) {
    var vm = createVNode(Wrapper, _extends$1(_extends$1({}, props2), {
      vIf: true
    }));
    vm.appContext = config2.parentContext || config2.appContext || vm.appContext;
    render(vm, div);
    return vm;
  }
  confirmDialogInstance = render$1(currentConfig);
  destroyFns.push(close7);
  return {
    destroy: close7,
    update
  };
};
var modalConfirm = confirm$1;
var info = function info2(props2) {
  var config2 = _extends$1({
    type: "info",
    icon: function icon() {
      return createVNode(InfoCircleOutlined$1, null, null);
    },
    okCancel: false
  }, props2);
  return modalConfirm(config2);
};
var success = function success2(props2) {
  var config2 = _extends$1({
    type: "success",
    icon: function icon() {
      return createVNode(CheckCircleOutlined$1, null, null);
    },
    okCancel: false
  }, props2);
  return modalConfirm(config2);
};
var error = function error2(props2) {
  var config2 = _extends$1({
    type: "error",
    icon: function icon() {
      return createVNode(CloseCircleOutlined$1, null, null);
    },
    okCancel: false
  }, props2);
  return modalConfirm(config2);
};
var warning = function warning3(props2) {
  var config2 = _extends$1({
    type: "warning",
    icon: function icon() {
      return createVNode(ExclamationCircleOutlined$1, null, null);
    },
    okCancel: false
  }, props2);
  return modalConfirm(config2);
};
var warn = warning;
var confirm = function confirmFn(props2) {
  var config2 = _extends$1({
    type: "confirm",
    okCancel: true
  }, props2);
  return modalConfirm(config2);
};
Modal.info = info;
Modal.success = success;
Modal.error = error;
Modal.warning = warning;
Modal.warn = warn;
Modal.confirm = confirm;
Modal.destroyAll = function destroyAllFn() {
  while (destroyFns.length) {
    var close7 = destroyFns.pop();
    if (close7) {
      close7();
    }
  }
};
Modal.install = function(app) {
  app.component(Modal.name, Modal);
  return app;
};
var MAX_SAFE_INTEGER = 9007199254740991;
var nativeFloor = Math.floor;
function baseRepeat(string2, n2) {
  var result = "";
  if (!string2 || n2 < 1 || n2 > MAX_SAFE_INTEGER) {
    return result;
  }
  do {
    if (n2 % 2) {
      result += string2;
    }
    n2 = nativeFloor(n2 / 2);
    if (n2) {
      string2 += string2;
    }
  } while (n2);
  return result;
}
function castSlice(array3, start, end) {
  var length = array3.length;
  end = end === void 0 ? length : end;
  return !start && end >= length ? array3 : baseSlice(array3, start, end);
}
var rsAstralRange$2 = "\\ud800-\\udfff", rsComboMarksRange$2 = "\\u0300-\\u036f", reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$2 = "\\u20d0-\\u20ff", rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2, rsVarRange$2 = "\\ufe0e\\ufe0f";
var rsZWJ$2 = "\\u200d";
var reHasUnicode = RegExp("[" + rsZWJ$2 + rsAstralRange$2 + rsComboRange$2 + rsVarRange$2 + "]");
function hasUnicode(string2) {
  return reHasUnicode.test(string2);
}
var asciiSize = baseProperty("length");
var asciiSize$1 = asciiSize;
var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1, rsVarRange$1 = "\\ufe0e\\ufe0f";
var rsAstral$1 = "[" + rsAstralRange$1 + "]", rsCombo$1 = "[" + rsComboRange$1 + "]", rsFitz$1 = "\\ud83c[\\udffb-\\udfff]", rsModifier$1 = "(?:" + rsCombo$1 + "|" + rsFitz$1 + ")", rsNonAstral$1 = "[^" + rsAstralRange$1 + "]", rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ$1 = "\\u200d";
var reOptMod$1 = rsModifier$1 + "?", rsOptVar$1 = "[" + rsVarRange$1 + "]?", rsOptJoin$1 = "(?:" + rsZWJ$1 + "(?:" + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsOptVar$1 + reOptMod$1 + ")*", rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1, rsSymbol$1 = "(?:" + [rsNonAstral$1 + rsCombo$1 + "?", rsCombo$1, rsRegional$1, rsSurrPair$1, rsAstral$1].join("|") + ")";
var reUnicode$1 = RegExp(rsFitz$1 + "(?=" + rsFitz$1 + ")|" + rsSymbol$1 + rsSeq$1, "g");
function unicodeSize(string2) {
  var result = reUnicode$1.lastIndex = 0;
  while (reUnicode$1.test(string2)) {
    ++result;
  }
  return result;
}
function stringSize(string2) {
  return hasUnicode(string2) ? unicodeSize(string2) : asciiSize$1(string2);
}
function asciiToArray(string2) {
  return string2.split("");
}
var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
function unicodeToArray(string2) {
  return string2.match(reUnicode) || [];
}
function stringToArray(string2) {
  return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
}
var nativeCeil = Math.ceil;
function createPadding(length, chars) {
  chars = chars === void 0 ? " " : baseToString(chars);
  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }
  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
  return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join("") : result.slice(0, length);
}
function padEnd(string2, length, chars) {
  string2 = toString$2(string2);
  length = toInteger(length);
  var strLength = length ? stringSize(string2) : 0;
  return length && strLength < length ? string2 + createPadding(length - strLength, chars) : string2;
}
var StatisticNumber = function StatisticNumber2(props2) {
  var value26 = props2.value, formatter = props2.formatter, precision = props2.precision, decimalSeparator = props2.decimalSeparator, _props$groupSeparator = props2.groupSeparator, groupSeparator = _props$groupSeparator === void 0 ? "" : _props$groupSeparator, prefixCls2 = props2.prefixCls;
  var valueNode;
  if (typeof formatter === "function") {
    valueNode = formatter({
      value: value26
    });
  } else {
    var val = String(value26);
    var cells = val.match(/^(-?)(\d*)(\.(\d+))?$/);
    if (!cells) {
      valueNode = val;
    } else {
      var negative = cells[1];
      var int = cells[2] || "0";
      var decimal = cells[4] || "";
      int = int.replace(/\B(?=(\d{3})+(?!\d))/g, groupSeparator);
      if (typeof precision === "number") {
        decimal = padEnd(decimal, precision, "0").slice(0, precision);
      }
      if (decimal) {
        decimal = "".concat(decimalSeparator).concat(decimal);
      }
      valueNode = [createVNode("span", {
        "key": "int",
        "class": "".concat(prefixCls2, "-content-value-int")
      }, [negative, int]), decimal && createVNode("span", {
        "key": "decimal",
        "class": "".concat(prefixCls2, "-content-value-decimal")
      }, [decimal])];
    }
  }
  return createVNode("span", {
    "class": "".concat(prefixCls2, "-content-value")
  }, [valueNode]);
};
StatisticNumber.displayName = "StatisticNumber";
var StatisticNumber$1 = StatisticNumber;
var skeletonElementProps = function skeletonElementProps2() {
  return {
    prefixCls: PropsTypes.string,
    size: PropsTypes.oneOfType([PropsTypes.oneOf(tuple("large", "small", "default")), PropsTypes.number]),
    shape: PropsTypes.oneOf(tuple("circle", "square", "round")),
    active: PropsTypes.looseBool
  };
};
var Element$1 = function Element2(props2) {
  var _classNames, _classNames2;
  var prefixCls2 = props2.prefixCls, size2 = props2.size, shape = props2.shape;
  var sizeCls = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-lg"), size2 === "large"), _defineProperty$U(_classNames, "".concat(prefixCls2, "-sm"), size2 === "small"), _classNames));
  var shapeCls = classNames((_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(prefixCls2, "-circle"), shape === "circle"), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-square"), shape === "square"), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-round"), shape === "round"), _classNames2));
  var sizeStyle = typeof size2 === "number" ? {
    width: "".concat(size2, "px"),
    height: "".concat(size2, "px"),
    lineHeight: "".concat(size2, "px")
  } : {};
  return createVNode("span", {
    "class": classNames(prefixCls2, sizeCls, shapeCls),
    "style": sizeStyle
  }, null);
};
Element$1.displayName = "SkeletonElement";
var Element$2 = Element$1;
var avatarProps = initDefaultProps$1(_extends$1(_extends$1({}, skeletonElementProps()), {
  shape: PropsTypes.oneOf(tuple("circle", "square"))
}), {
  size: "large"
});
var SkeletonAvatar = defineComponent({
  name: "ASkeletonAvatar",
  props: avatarProps,
  setup: function setup107(props2) {
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls;
    var cls = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-element"), _defineProperty$U({}, "".concat(prefixCls2.value, "-active"), props2.active));
    });
    return function() {
      return createVNode("div", {
        "class": cls.value
      }, [createVNode(Element$2, _objectSpread2$2(_objectSpread2$2({}, props2), {}, {
        "prefixCls": "".concat(prefixCls2.value, "-avatar")
      }), null)]);
    };
  }
});
var SkeletonAvatar$1 = SkeletonAvatar;
var skeletonTitleProps = {
  prefixCls: PropsTypes.string,
  width: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string])
};
var SkeletonTitle = defineComponent({
  name: "SkeletonTitle",
  props: skeletonTitleProps,
  setup: function setup108(props2) {
    return function() {
      var prefixCls2 = props2.prefixCls, width = props2.width;
      var zWidth = typeof width === "number" ? "".concat(width, "px") : width;
      return createVNode("h3", {
        "class": prefixCls2,
        "style": {
          width: zWidth
        }
      }, null);
    };
  }
});
var Title$2 = SkeletonTitle;
var widthUnit = PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]);
var skeletonParagraphProps = {
  prefixCls: PropsTypes.string,
  width: PropsTypes.oneOfType([widthUnit, PropsTypes.arrayOf(widthUnit)]),
  rows: PropsTypes.number
};
var SkeletonParagraph = defineComponent({
  name: "SkeletonParagraph",
  props: skeletonParagraphProps,
  setup: function setup109(props2) {
    var getWidth3 = function getWidth4(index2) {
      var width = props2.width, _props$rows = props2.rows, rows = _props$rows === void 0 ? 2 : _props$rows;
      if (Array.isArray(width)) {
        return width[index2];
      }
      if (rows - 1 === index2) {
        return width;
      }
      return void 0;
    };
    return function() {
      var prefixCls2 = props2.prefixCls, rows = props2.rows;
      var rowList = _toConsumableArray(Array(rows)).map(function(_2, index2) {
        var width = getWidth3(index2);
        return createVNode("li", {
          "key": index2,
          "style": {
            width: typeof width === "number" ? "".concat(width, "px") : width
          }
        }, null);
      });
      return createVNode("ul", {
        "class": prefixCls2
      }, [rowList]);
    };
  }
});
var Paragraph$2 = SkeletonParagraph;
var skeletonProps = {
  active: PropsTypes.looseBool,
  loading: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  avatar: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.shape(omit$2(avatarProps, ["active"])).loose, PropsTypes.looseBool])),
  title: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.string, PropsTypes.shape(skeletonTitleProps).loose])),
  paragraph: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.string, PropsTypes.shape(skeletonParagraphProps).loose]))
};
function getComponentProps(prop) {
  if (prop && _typeof$2(prop) === "object") {
    return prop;
  }
  return {};
}
function getAvatarBasicProps(hasTitle, hasParagraph) {
  if (hasTitle && !hasParagraph) {
    return {
      size: "large",
      shape: "square"
    };
  }
  return {
    size: "large",
    shape: "circle"
  };
}
function getTitleBasicProps(hasAvatar, hasParagraph) {
  if (!hasAvatar && hasParagraph) {
    return {
      width: "38%"
    };
  }
  if (hasAvatar && hasParagraph) {
    return {
      width: "50%"
    };
  }
  return {};
}
function getParagraphBasicProps(hasAvatar, hasTitle) {
  var basicProps2 = {};
  if (!hasAvatar || !hasTitle) {
    basicProps2.width = "61%";
  }
  if (!hasAvatar && hasTitle) {
    basicProps2.rows = 3;
  } else {
    basicProps2.rows = 2;
  }
  return basicProps2;
}
var Skeleton = defineComponent({
  name: "ASkeleton",
  props: initDefaultProps$2(skeletonProps, {
    avatar: false,
    title: true,
    paragraph: true
  }),
  setup: function setup110(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    return function() {
      var _a;
      var loading = props2.loading, avatar = props2.avatar, title2 = props2.title, paragraph = props2.paragraph, active = props2.active, round2 = props2.round;
      var pre = prefixCls2.value;
      if (loading || props2.loading === void 0) {
        var _classNames;
        var hasAvatar = !!avatar || avatar === "";
        var hasTitle = !!title2 || title2 === "";
        var hasParagraph = !!paragraph || paragraph === "";
        var avatarNode;
        if (hasAvatar) {
          var _avatarProps = _extends$1(_extends$1({
            prefixCls: "".concat(pre, "-avatar")
          }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));
          avatarNode = createVNode("div", {
            "class": "".concat(pre, "-header")
          }, [createVNode(Element$2, _avatarProps, null)]);
        }
        var contentNode;
        if (hasTitle || hasParagraph) {
          var $title;
          if (hasTitle) {
            var titleProps = _extends$1(_extends$1({
              prefixCls: "".concat(pre, "-title")
            }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title2));
            $title = createVNode(Title$2, titleProps, null);
          }
          var paragraphNode;
          if (hasParagraph) {
            var paragraphProps = _extends$1(_extends$1({
              prefixCls: "".concat(pre, "-paragraph")
            }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));
            paragraphNode = createVNode(Paragraph$2, paragraphProps, null);
          }
          contentNode = createVNode("div", {
            "class": "".concat(pre, "-content")
          }, [$title, paragraphNode]);
        }
        var cls = classNames(pre, (_classNames = {}, _defineProperty$U(_classNames, "".concat(pre, "-with-avatar"), hasAvatar), _defineProperty$U(_classNames, "".concat(pre, "-active"), active), _defineProperty$U(_classNames, "".concat(pre, "-rtl"), direction.value === "rtl"), _defineProperty$U(_classNames, "".concat(pre, "-round"), round2), _classNames));
        return createVNode("div", {
          "class": cls
        }, [avatarNode, contentNode]);
      }
      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
  }
});
var Skeleton$1 = Skeleton;
var statisticProps = {
  prefixCls: PropsTypes.string,
  decimalSeparator: PropsTypes.string,
  groupSeparator: PropsTypes.string,
  format: PropsTypes.string,
  value: {
    type: [String, Number, Object]
  },
  valueStyle: PropsTypes.style,
  valueRender: PropsTypes.any,
  formatter: PropsTypes.any,
  precision: PropsTypes.number,
  prefix: PropsTypes.VNodeChild,
  suffix: PropsTypes.VNodeChild,
  title: PropsTypes.VNodeChild,
  onFinish: PropsTypes.func,
  loading: PropsTypes.looseBool
};
var Statistic = defineComponent({
  name: "AStatistic",
  props: initDefaultProps$1(statisticProps, {
    decimalSeparator: ".",
    groupSeparator: ",",
    loading: false
  }),
  slots: ["title", "prefix", "suffix", "formatter"],
  setup: function setup111(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("statistic", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    return function() {
      var _a, _b, _c, _d, _e, _f, _g;
      var _props$value = props2.value, value26 = _props$value === void 0 ? 0 : _props$value, valueStyle = props2.valueStyle, valueRender = props2.valueRender;
      var pre = prefixCls2.value;
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var prefix = (_c = props2.prefix) !== null && _c !== void 0 ? _c : (_d = slots.prefix) === null || _d === void 0 ? void 0 : _d.call(slots);
      var suffix = (_e = props2.suffix) !== null && _e !== void 0 ? _e : (_f = slots.suffix) === null || _f === void 0 ? void 0 : _f.call(slots);
      var formatter = (_g = props2.formatter) !== null && _g !== void 0 ? _g : slots.formatter;
      var valueNode = createVNode(StatisticNumber$1, _objectSpread2$2({
        "data-for-update": Date.now()
      }, _extends$1(_extends$1({}, props2), {
        prefixCls: pre,
        value: value26,
        formatter
      })), null);
      if (valueRender) {
        valueNode = valueRender(valueNode);
      }
      return createVNode("div", {
        "class": [pre, _defineProperty$U({}, "".concat(pre, "-rtl"), direction.value === "rtl")]
      }, [title2 && createVNode("div", {
        "class": "".concat(pre, "-title")
      }, [title2]), createVNode(Skeleton$1, {
        "paragraph": false,
        "loading": props2.loading
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "style": valueStyle,
            "class": "".concat(pre, "-content")
          }, [prefix && createVNode("span", {
            "class": "".concat(pre, "-content-prefix")
          }, [prefix]), valueNode, suffix && createVNode("span", {
            "class": "".concat(pre, "-content-suffix")
          }, [suffix])])];
        }
      })]);
    };
  }
});
function padStart(string2, length, chars) {
  string2 = toString$2(string2);
  length = toInteger(length);
  var strLength = length ? stringSize(string2) : 0;
  return length && strLength < length ? createPadding(length - strLength, chars) + string2 : string2;
}
var timeUnits = [
  ["Y", 1e3 * 60 * 60 * 24 * 365],
  ["M", 1e3 * 60 * 60 * 24 * 30],
  ["D", 1e3 * 60 * 60 * 24],
  ["H", 1e3 * 60 * 60],
  ["m", 1e3 * 60],
  ["s", 1e3],
  ["S", 1]
];
function formatTimeStr(duration2, format3) {
  var leftDuration = duration2;
  var escapeRegex = /\[[^\]]*]/g;
  var keepList = (format3.match(escapeRegex) || []).map(function(str) {
    return str.slice(1, -1);
  });
  var templateText = format3.replace(escapeRegex, "[]");
  var replacedText = timeUnits.reduce(function(current2, _ref) {
    var _ref2 = _slicedToArray$2(_ref, 2), name2 = _ref2[0], unit = _ref2[1];
    if (current2.indexOf(name2) !== -1) {
      var value26 = Math.floor(leftDuration / unit);
      leftDuration -= value26 * unit;
      return current2.replace(new RegExp("".concat(name2, "+"), "g"), function(match5) {
        var len = match5.length;
        return padStart(value26.toString(), len, "0");
      });
    }
    return current2;
  }, templateText);
  var index2 = 0;
  return replacedText.replace(escapeRegex, function() {
    var match5 = keepList[index2];
    index2 += 1;
    return match5;
  });
}
function formatCountdown(value26, config2) {
  var _config$format = config2.format, format3 = _config$format === void 0 ? "" : _config$format;
  var target = new Date(value26).getTime();
  var current2 = Date.now();
  var diff2 = Math.max(target - current2, 0);
  return formatTimeStr(diff2, format3);
}
var REFRESH_INTERVAL = 1e3 / 30;
function getTime(value26) {
  return new Date(value26).getTime();
}
var Countdown = defineComponent({
  name: "AStatisticCountdown",
  props: initDefaultProps$1(statisticProps, {
    format: "HH:mm:ss"
  }),
  emits: ["finish", "change"],
  setup: function setup112(props2, _ref) {
    var emit = _ref.emit;
    var countdownId = ref();
    var statistic = ref();
    var syncTimer = function syncTimer2() {
      var value26 = props2.value;
      var timestamp = getTime(value26);
      if (timestamp >= Date.now()) {
        startTimer();
      } else {
        stopTimer();
      }
    };
    var startTimer = function startTimer2() {
      if (countdownId.value)
        return;
      var timestamp = getTime(props2.value);
      countdownId.value = window.setInterval(function() {
        statistic.value.$forceUpdate();
        if (timestamp > Date.now()) {
          emit("change", timestamp - Date.now());
        }
        syncTimer();
      }, REFRESH_INTERVAL);
    };
    var stopTimer = function stopTimer2() {
      var value26 = props2.value;
      if (countdownId.value) {
        clearInterval(countdownId.value);
        countdownId.value = void 0;
        var timestamp = getTime(value26);
        if (timestamp < Date.now()) {
          emit("finish");
        }
      }
    };
    var formatCountdown$1 = function formatCountdown$12(_ref2) {
      var value26 = _ref2.value, config2 = _ref2.config;
      var format3 = props2.format;
      return formatCountdown(value26, _extends$1(_extends$1({}, config2), {
        format: format3
      }));
    };
    var valueRenderHtml = function valueRenderHtml2(node) {
      return node;
    };
    onMounted(function() {
      syncTimer();
    });
    onUpdated(function() {
      syncTimer();
    });
    onBeforeUnmount(function() {
      stopTimer();
    });
    return function() {
      return createVNode(Statistic, _objectSpread2$2({
        "ref": statistic
      }, _extends$1(_extends$1({}, props2), {
        valueRender: valueRenderHtml,
        formatter: formatCountdown$1
      })), null);
    };
  }
});
Statistic.Countdown = Countdown;
Statistic.install = function(app) {
  app.component(Statistic.name, Statistic);
  app.component(Statistic.Countdown.name, Statistic.Countdown);
  return app;
};
var StatisticCountdown = Statistic.Countdown;
var notificationInstance = {};
var defaultDuration = 4.5;
var defaultTop = "24px";
var defaultBottom = "24px";
var defaultPlacement = "topRight";
var defaultGetContainer = function defaultGetContainer3() {
  return document.body;
};
var defaultCloseIcon = null;
function setNotificationConfig(options2) {
  var duration2 = options2.duration, placement2 = options2.placement, bottom = options2.bottom, top = options2.top, getContainer5 = options2.getContainer, closeIcon = options2.closeIcon;
  if (duration2 !== void 0) {
    defaultDuration = duration2;
  }
  if (placement2 !== void 0) {
    defaultPlacement = placement2;
  }
  if (bottom !== void 0) {
    defaultBottom = typeof bottom === "number" ? "".concat(bottom, "px") : bottom;
  }
  if (top !== void 0) {
    defaultTop = typeof top === "number" ? "".concat(top, "px") : top;
  }
  if (getContainer5 !== void 0) {
    defaultGetContainer = getContainer5;
  }
  if (closeIcon !== void 0) {
    defaultCloseIcon = closeIcon;
  }
}
function getPlacementStyle(placement2) {
  var top = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultTop;
  var bottom = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultBottom;
  var style3;
  switch (placement2) {
    case "topLeft":
      style3 = {
        left: "0px",
        top,
        bottom: "auto"
      };
      break;
    case "topRight":
      style3 = {
        right: "0px",
        top,
        bottom: "auto"
      };
      break;
    case "bottomLeft":
      style3 = {
        left: "0px",
        top: "auto",
        bottom
      };
      break;
    default:
      style3 = {
        right: "0px",
        top: "auto",
        bottom
      };
      break;
  }
  return style3;
}
function getNotificationInstance(_ref, callback) {
  var prefixCls2 = _ref.prefixCls, _ref$placement = _ref.placement, placement2 = _ref$placement === void 0 ? defaultPlacement : _ref$placement, _ref$getContainer = _ref.getContainer, getContainer5 = _ref$getContainer === void 0 ? defaultGetContainer : _ref$getContainer, top = _ref.top, bottom = _ref.bottom, _ref$closeIcon = _ref.closeIcon, _closeIcon = _ref$closeIcon === void 0 ? defaultCloseIcon : _ref$closeIcon;
  var cacheKey = "".concat(prefixCls2, "-").concat(placement2);
  if (notificationInstance[cacheKey]) {
    callback(notificationInstance[cacheKey]);
    return;
  }
  Notification$1.newInstance({
    prefixCls: prefixCls2,
    class: "".concat(prefixCls2, "-").concat(placement2),
    style: getPlacementStyle(placement2, top, bottom),
    getContainer: getContainer5,
    closeIcon: function closeIcon() {
      var closeIconToRender = createVNode("span", {
        "class": "".concat(prefixCls2, "-close-x")
      }, [_closeIcon || createVNode(CloseOutlined$1, {
        "class": "".concat(prefixCls2, "-close-icon")
      }, null)]);
      return closeIconToRender;
    }
  }, function(notification) {
    notificationInstance[cacheKey] = notification;
    callback(notification);
  });
}
var typeToIcon = {
  success: CheckCircleOutlined$1,
  info: InfoCircleOutlined$1,
  error: CloseCircleOutlined$1,
  warning: ExclamationCircleOutlined$1
};
function notice(args) {
  var icon = args.icon, type3 = args.type, description2 = args.description, message2 = args.message, btn = args.btn;
  var outerPrefixCls = args.prefixCls || "ant-notification";
  var prefixCls2 = "".concat(outerPrefixCls, "-notice");
  var duration2 = args.duration === void 0 ? defaultDuration : args.duration;
  var iconNode = null;
  if (icon) {
    iconNode = function iconNode2() {
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-icon")
      }, [icon]);
    };
  } else if (type3) {
    var Icon3 = typeToIcon[type3];
    iconNode = function iconNode2() {
      return createVNode(Icon3, {
        "class": "".concat(prefixCls2, "-icon ").concat(prefixCls2, "-icon-").concat(type3)
      }, null);
    };
  }
  var placement2 = args.placement, top = args.top, bottom = args.bottom, getContainer5 = args.getContainer, closeIcon = args.closeIcon;
  getNotificationInstance({
    prefixCls: outerPrefixCls,
    placement: placement2,
    top,
    bottom,
    getContainer: getContainer5,
    closeIcon
  }, function(notification) {
    notification.notice({
      content: function content() {
        return createVNode("div", {
          "class": iconNode ? "".concat(prefixCls2, "-with-icon") : ""
        }, [iconNode && iconNode(), createVNode("div", {
          "class": "".concat(prefixCls2, "-message")
        }, [!description2 && iconNode ? createVNode("span", {
          "class": "".concat(prefixCls2, "-message-single-line-auto-margin")
        }, null) : null, message2]), createVNode("div", {
          "class": "".concat(prefixCls2, "-description")
        }, [description2]), btn ? createVNode("span", {
          "class": "".concat(prefixCls2, "-btn")
        }, [btn]) : null]);
      },
      duration: duration2,
      closable: true,
      onClose: args.onClose,
      onClick: args.onClick,
      key: args.key,
      style: args.style || {},
      class: args.class
    });
  });
}
var apiBase = {
  open: notice,
  close: function close6(key2) {
    Object.keys(notificationInstance).forEach(function(cacheKey) {
      return notificationInstance[cacheKey].removeNotice(key2);
    });
  },
  config: setNotificationConfig,
  destroy: function destroy2() {
    Object.keys(notificationInstance).forEach(function(cacheKey) {
      notificationInstance[cacheKey].destroy();
      delete notificationInstance[cacheKey];
    });
  }
};
var api = apiBase;
var iconTypes = ["success", "info", "warning", "error"];
iconTypes.forEach(function(type3) {
  api[type3] = function(args) {
    return api.open(_extends$1(_extends$1({}, args), {
      type: type3
    }));
  };
});
api.warn = api.warning;
var api$1 = api;
var ArrowLeftOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 000 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z" } }] }, "name": "arrow-left", "theme": "outlined" };
var ArrowLeftOutlinedSvg = ArrowLeftOutlined$2;
function _objectSpread$j(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$k(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$k(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var ArrowLeftOutlined = function ArrowLeftOutlined2(props2, context2) {
  var p2 = _objectSpread$j({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": ArrowLeftOutlinedSvg
  }), null);
};
ArrowLeftOutlined.displayName = "ArrowLeftOutlined";
ArrowLeftOutlined.inheritAttrs = false;
var ArrowLeftOutlined$1 = ArrowLeftOutlined;
var ArrowRightOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M869 487.8L491.2 159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 5.2-2L869 536.2a32.07 32.07 0 000-48.4z" } }] }, "name": "arrow-right", "theme": "outlined" };
var ArrowRightOutlinedSvg = ArrowRightOutlined$2;
function _objectSpread$i(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$j(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$j(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var ArrowRightOutlined = function ArrowRightOutlined2(props2, context2) {
  var p2 = _objectSpread$i({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": ArrowRightOutlinedSvg
  }), null);
};
ArrowRightOutlined.displayName = "ArrowRightOutlined";
ArrowRightOutlined.inheritAttrs = false;
var ArrowRightOutlined$1 = ArrowRightOutlined;
var __rest$j = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var inlineStyle = {
  border: 0,
  background: "transparent",
  padding: 0,
  lineHeight: "inherit",
  display: "inline-block"
};
var TransButton = defineComponent({
  name: "TransButton",
  inheritAttrs: false,
  props: {
    noStyle: PropsTypes.looseBool,
    onClick: PropsTypes.func,
    disabled: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool
  },
  setup: function setup113(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit, attrs = _ref.attrs, expose = _ref.expose;
    var domRef = ref();
    var onKeyDown14 = function onKeyDown15(event) {
      var keyCode = event.keyCode;
      if (keyCode === KeyCode$2.ENTER) {
        event.preventDefault();
      }
    };
    var onKeyUp3 = function onKeyUp4(event) {
      var keyCode = event.keyCode;
      if (keyCode === KeyCode$2.ENTER) {
        emit("click", event);
      }
    };
    var onClick7 = function onClick8(e2) {
      emit("click", e2);
    };
    var focus27 = function focus28() {
      if (domRef.value) {
        domRef.value.focus();
      }
    };
    var blur24 = function blur25() {
      if (domRef.value) {
        domRef.value.blur();
      }
    };
    onMounted(function() {
      if (props2.autofocus) {
        focus27();
      }
    });
    expose({
      focus: focus27,
      blur: blur24
    });
    return function() {
      var _a;
      var noStyle = props2.noStyle, disabled = props2.disabled, restProps = __rest$j(props2, ["noStyle", "disabled"]);
      var mergedStyle = {};
      if (!noStyle) {
        mergedStyle = _extends$1({}, inlineStyle);
      }
      if (disabled) {
        mergedStyle.pointerEvents = "none";
      }
      return createVNode("div", _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({
        "role": "button",
        "tabindex": 0,
        "ref": domRef
      }, restProps), attrs), {}, {
        "onClick": onClick7,
        "onKeydown": onKeyDown14,
        "onKeyup": onKeyUp3,
        "style": _extends$1(_extends$1({}, mergedStyle), attrs.style || {})
      }), [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
    };
  }
});
var TransButton$1 = TransButton;
var pageHeaderProps = {
  backIcon: PropsTypes.VNodeChild,
  prefixCls: PropsTypes.string,
  title: PropsTypes.VNodeChild,
  subTitle: PropsTypes.VNodeChild,
  breadcrumb: PropsTypes.object,
  tags: PropsTypes.any,
  footer: PropsTypes.VNodeChild,
  extra: PropsTypes.VNodeChild,
  avatar: PropsTypes.object,
  ghost: PropsTypes.looseBool,
  onBack: PropsTypes.func
};
var PageHeader = defineComponent({
  name: "APageHeader",
  props: pageHeaderProps,
  emits: ["back"],
  slots: ["backIcon", "avatar", "breadcrumb", "title", "subTitle", "tags", "extra", "footer"],
  setup: function setup114(props2, _ref) {
    var emit = _ref.emit, slots = _ref.slots;
    var _useConfigInject = useConfigInject("page-header", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction, pageHeader = _useConfigInject.pageHeader;
    var compact = ref(false);
    var onResize = function onResize2(_ref2) {
      var width = _ref2.width;
      compact.value = width < 768;
    };
    var ghost = computed(function() {
      var _a, _b, _c;
      return (_c = (_a = props2.ghost) !== null && _a !== void 0 ? _a : (_b = pageHeader.value) === null || _b === void 0 ? void 0 : _b.ghost) !== null && _c !== void 0 ? _c : true;
    });
    var getBackIcon = function getBackIcon2() {
      var _a, _b, _c;
      return (_c = (_a = props2.backIcon) !== null && _a !== void 0 ? _a : (_b = slots.backIcon) === null || _b === void 0 ? void 0 : _b.call(slots)) !== null && _c !== void 0 ? _c : direction.value === "rtl" ? createVNode(ArrowRightOutlined$1, null, null) : createVNode(ArrowLeftOutlined$1, null, null);
    };
    var renderBack = function renderBack2(backIcon) {
      if (!backIcon || !props2.onBack) {
        return null;
      }
      return createVNode(LocaleReceiver, {
        "componentName": "PageHeader",
        "children": function children(_ref3) {
          var back = _ref3.back;
          return createVNode("div", {
            "class": "".concat(prefixCls2.value, "-back")
          }, [createVNode(TransButton$1, {
            "onClick": function onClick7(e2) {
              emit("back", e2);
            },
            "class": "".concat(prefixCls2.value, "-back-button"),
            "aria-label": back
          }, {
            default: function _default8() {
              return [backIcon];
            }
          })]);
        }
      }, null);
    };
    var renderBreadcrumb = function renderBreadcrumb2() {
      var _a;
      return props2.breadcrumb ? createVNode(Breadcrumb, props2.breadcrumb, null) : (_a = slots.breadcrumb) === null || _a === void 0 ? void 0 : _a.call(slots);
    };
    var renderTitle2 = function renderTitle3() {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      var avatar = props2.avatar;
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var subTitle = (_c = props2.subTitle) !== null && _c !== void 0 ? _c : (_d = slots.subTitle) === null || _d === void 0 ? void 0 : _d.call(slots);
      var tags = (_e = props2.tags) !== null && _e !== void 0 ? _e : (_f = slots.tags) === null || _f === void 0 ? void 0 : _f.call(slots);
      var extra = (_g = props2.extra) !== null && _g !== void 0 ? _g : (_h = slots.extra) === null || _h === void 0 ? void 0 : _h.call(slots);
      var headingPrefixCls = "".concat(prefixCls2.value, "-heading");
      var hasHeading = title2 || subTitle || tags || extra;
      if (!hasHeading) {
        return null;
      }
      var backIcon = getBackIcon();
      var backIconDom = renderBack(backIcon);
      var hasTitle = backIconDom || avatar || hasHeading;
      return createVNode("div", {
        "class": headingPrefixCls
      }, [hasTitle && createVNode("div", {
        "class": "".concat(headingPrefixCls, "-left")
      }, [backIconDom, avatar ? createVNode(Avatar$1, avatar, null) : (_j = slots.avatar) === null || _j === void 0 ? void 0 : _j.call(slots), title2 && createVNode("span", {
        "class": "".concat(headingPrefixCls, "-title"),
        "title": typeof title2 === "string" ? title2 : void 0
      }, [title2]), subTitle && createVNode("span", {
        "class": "".concat(headingPrefixCls, "-sub-title"),
        "title": typeof subTitle === "string" ? subTitle : void 0
      }, [subTitle]), tags && createVNode("span", {
        "class": "".concat(headingPrefixCls, "-tags")
      }, [tags])]), extra && createVNode("span", {
        "class": "".concat(headingPrefixCls, "-extra")
      }, [extra])]);
    };
    var renderFooter5 = function renderFooter6() {
      var _a, _b;
      var footer = (_a = props2.footer) !== null && _a !== void 0 ? _a : filterEmpty((_b = slots.footer) === null || _b === void 0 ? void 0 : _b.call(slots));
      return isEmptyContent(footer) ? null : createVNode("div", {
        "class": "".concat(prefixCls2.value, "-footer")
      }, [footer]);
    };
    var renderChildren4 = function renderChildren5(children) {
      return createVNode("div", {
        "class": "".concat(prefixCls2.value, "-content")
      }, [children]);
    };
    return function() {
      var _classNames;
      var _a, _b;
      var hasBreadcrumb = ((_a = props2.breadcrumb) === null || _a === void 0 ? void 0 : _a.routes) || slots.breadcrumb;
      var hasFooter = props2.footer || slots.footer;
      var children = flattenChildren((_b = slots.default) === null || _b === void 0 ? void 0 : _b.call(slots));
      var className = classNames(prefixCls2.value, (_classNames = {
        "has-breadcrumb": hasBreadcrumb,
        "has-footer": hasFooter
      }, _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-ghost"), ghost.value), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-compact"), compact.value), _classNames));
      return createVNode(ResizeObserver, {
        "onResize": onResize
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "class": className
          }, [renderBreadcrumb(), renderTitle2(), children.length ? renderChildren4(children) : null, renderFooter5()])];
        }
      });
    };
  }
});
var __unplugin_components_4 = withInstall(PageHeader);
var tooltipProps$1 = abstractTooltipProps();
var Popconfirm = defineComponent({
  name: "APopconfirm",
  mixins: [BaseMixin],
  props: _extends$1(_extends$1({}, tooltipProps$1), {
    prefixCls: PropsTypes.string,
    transitionName: PropsTypes.string.def("zoom-big"),
    content: PropsTypes.any,
    title: PropsTypes.any,
    trigger: tooltipProps$1.trigger.def("click"),
    okType: {
      type: String,
      default: "primary"
    },
    disabled: PropsTypes.looseBool.def(false),
    okText: PropsTypes.any,
    cancelText: PropsTypes.any,
    icon: PropsTypes.any,
    okButtonProps: PropsTypes.object,
    cancelButtonProps: PropsTypes.object,
    onConfirm: PropsTypes.func,
    onCancel: PropsTypes.func,
    onVisibleChange: PropsTypes.func
  }),
  emits: ["update:visible", "confirm", "cancel", "visibleChange"],
  setup: function setup115() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data57() {
    var props2 = getOptionProps(this);
    var state2 = {
      sVisible: false
    };
    if ("visible" in props2) {
      state2.sVisible = props2.visible;
    }
    if ("defaultVisible" in props2) {
      state2.sVisible = props2.defaultVisible;
    }
    return state2;
  },
  watch: {
    visible: function visible7(val) {
      this.sVisible = val;
    }
  },
  methods: {
    onConfirmHandle: function onConfirmHandle(e2) {
      this.setVisible(false, e2);
      this.$emit("confirm", e2);
    },
    onCancelHandle: function onCancelHandle(e2) {
      this.setVisible(false, e2);
      this.$emit("cancel", e2);
    },
    onVisibleChangeHandle: function onVisibleChangeHandle(sVisible) {
      var disabled = this.$props.disabled;
      if (disabled) {
        return;
      }
      this.setVisible(sVisible);
    },
    setVisible: function setVisible(sVisible, e2) {
      if (!hasProp(this, "visible")) {
        this.setState({
          sVisible
        });
      }
      this.$emit("update:visible", sVisible);
      this.$emit("visibleChange", sVisible, e2);
    },
    getPopupDomNode: function getPopupDomNode7() {
      return this.$refs.tooltip.getPopupDomNode();
    },
    renderOverlay: function renderOverlay2(prefixCls2, popconfirmLocale) {
      var _this = this;
      var okType = this.okType, okButtonProps = this.okButtonProps, cancelButtonProps = this.cancelButtonProps;
      var icon = getComponent(this, "icon") || createVNode(ExclamationCircleFilled$1, null, null);
      var cancelBtnProps = mergeProps(_extends$1({
        size: "small",
        onClick: this.onCancelHandle
      }, cancelButtonProps));
      var okBtnProps = mergeProps(_extends$1(_extends$1(_extends$1({}, convertLegacyProps(okType)), {
        size: "small",
        onClick: this.onConfirmHandle
      }), okButtonProps));
      return createVNode("div", {
        "class": "".concat(prefixCls2, "-inner-content")
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-message")
      }, [icon, createVNode("div", {
        "class": "".concat(prefixCls2, "-message-title")
      }, [getComponent(this, "title")])]), createVNode("div", {
        "class": "".concat(prefixCls2, "-buttons")
      }, [createVNode(Button, cancelBtnProps, {
        default: function _default8() {
          return [getComponent(_this, "cancelText") || popconfirmLocale.cancelText];
        }
      }), createVNode(Button, okBtnProps, {
        default: function _default8() {
          return [getComponent(_this, "okText") || popconfirmLocale.okText];
        }
      })])]);
    }
  },
  render: function render111() {
    var _this2 = this;
    var _a;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("popover", customizePrefixCls);
    var otherProps = omit$2(props2, ["title", "content", "cancelText", "okText", "onUpdate:visible"]);
    var overlay = createVNode(LocaleReceiver, {
      "componentName": "Popconfirm",
      "defaultLocale": defaultLocale.Popconfirm,
      "children": function children(popconfirmLocale) {
        return _this2.renderOverlay(prefixCls2, popconfirmLocale);
      }
    }, null);
    var tooltipProps2 = _extends$1(_extends$1({}, otherProps), {
      title: overlay,
      prefixCls: prefixCls2,
      visible: this.sVisible,
      ref: "tooltip",
      onVisibleChange: this.onVisibleChangeHandle
    });
    return createVNode(Tooltip, tooltipProps2, {
      default: function _default8() {
        return [(_a = _this2.$slots) === null || _a === void 0 ? void 0 : _a.default()];
      }
    });
  }
});
var index$q = withInstall(Popconfirm);
function validProgress(progress) {
  if (!progress || progress < 0) {
    return 0;
  }
  if (progress > 100) {
    return 100;
  }
  return progress;
}
var __rest$i = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var sortGradient = function sortGradient2(gradients) {
  var tempArr = [];
  for (var _i = 0, _Object$entries = Object.entries(gradients); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray$2(_Object$entries[_i], 2), key2 = _Object$entries$_i[0], value26 = _Object$entries$_i[1];
    var formatKey = parseFloat(key2.replace(/%/g, ""));
    if (isNaN(formatKey)) {
      return {};
    }
    tempArr.push({
      key: formatKey,
      value: value26
    });
  }
  tempArr = tempArr.sort(function(a2, b2) {
    return a2.key - b2.key;
  });
  return tempArr.map(function(_ref) {
    var key3 = _ref.key, value27 = _ref.value;
    return "".concat(value27, " ").concat(key3, "%");
  }).join(", ");
};
var handleGradient = function handleGradient2(strokeColor) {
  var _strokeColor$from = strokeColor.from, from2 = _strokeColor$from === void 0 ? "#1890ff" : _strokeColor$from, _strokeColor$to = strokeColor.to, to2 = _strokeColor$to === void 0 ? "#1890ff" : _strokeColor$to, _strokeColor$directio = strokeColor.direction, direction = _strokeColor$directio === void 0 ? "to right" : _strokeColor$directio, rest = __rest$i(strokeColor, ["from", "to", "direction"]);
  if (Object.keys(rest).length !== 0) {
    var sortedGradients = sortGradient(rest);
    return {
      backgroundImage: "linear-gradient(".concat(direction, ", ").concat(sortedGradients, ")")
    };
  }
  return {
    backgroundImage: "linear-gradient(".concat(direction, ", ").concat(from2, ", ").concat(to2, ")")
  };
};
var Line = function Line2(_2, _ref2) {
  var attrs = _ref2.attrs, slots = _ref2.slots;
  var prefixCls2 = attrs.prefixCls, percent = attrs.percent, successPercent = attrs.successPercent, strokeWidth = attrs.strokeWidth, size2 = attrs.size, strokeColor = attrs.strokeColor, strokeLinecap = attrs.strokeLinecap, trailColor = attrs.trailColor;
  var backgroundProps;
  if (strokeColor && typeof strokeColor !== "string") {
    backgroundProps = handleGradient(strokeColor);
  } else {
    backgroundProps = {
      background: strokeColor
    };
  }
  var trailStyle = trailColor ? {
    style: {
      backgroundColor: trailColor
    }
  } : void 0;
  var percentStyle = _extends$1({
    width: "".concat(validProgress(percent), "%"),
    height: "".concat(strokeWidth || (size2 === "small" ? 6 : 8), "px"),
    background: strokeColor,
    borderRadius: strokeLinecap === "square" ? 0 : "100px"
  }, backgroundProps);
  var successPercentStyle = {
    width: "".concat(validProgress(successPercent), "%"),
    height: "".concat(strokeWidth || (size2 === "small" ? 6 : 8), "px"),
    borderRadius: strokeLinecap === "square" ? 0 : ""
  };
  var successSegment = successPercent !== void 0 ? createVNode("div", {
    "class": "".concat(prefixCls2, "-success-bg"),
    "style": successPercentStyle
  }, null) : null;
  return createVNode("div", null, [createVNode("div", {
    "class": "".concat(prefixCls2, "-outer")
  }, [createVNode("div", _objectSpread2$2({
    "class": "".concat(prefixCls2, "-inner")
  }, trailStyle), [createVNode("div", {
    "class": "".concat(prefixCls2, "-bg"),
    "style": percentStyle
  }, null), successSegment])]), slots === null || slots === void 0 ? void 0 : slots.default()]);
};
var Line$1 = Line;
function enhancer(Component) {
  return _extends$1(_extends$1({}, Component), {
    updated: function updated28() {
      var _this = this;
      var now2 = Date.now();
      var updated29 = false;
      Object.keys(this.paths).forEach(function(key2) {
        var path2 = _this.paths[key2];
        if (!path2) {
          return;
        }
        updated29 = true;
        var pathStyle = path2.style;
        pathStyle.transitionDuration = ".3s, .3s, .3s, .06s";
        if (_this.prevTimeStamp && now2 - _this.prevTimeStamp < 100) {
          pathStyle.transitionDuration = "0s, 0s";
        }
      });
      if (updated29) {
        this.prevTimeStamp = Date.now();
      }
    }
  });
}
var defaultProps = {
  percent: 0,
  prefixCls: "rc-progress",
  strokeColor: "#2db7f5",
  strokeLinecap: "round",
  strokeWidth: 1,
  trailColor: "#D9D9D9",
  trailWidth: 1
};
var mixedType = PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]);
var propTypes = {
  percent: PropsTypes.oneOfType([mixedType, PropsTypes.arrayOf(mixedType)]),
  prefixCls: PropsTypes.string,
  strokeColor: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object])), PropsTypes.object]),
  strokeLinecap: PropsTypes.oneOf(["butt", "round", "square"]),
  strokeWidth: mixedType,
  trailColor: PropsTypes.string,
  trailWidth: mixedType
};
var __rest$h = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var circlePropTypes = _extends$1(_extends$1({}, propTypes), {
  gapPosition: PropsTypes.oneOf(["top", "bottom", "left", "right"]),
  gapDegree: withUndefined(PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string, PropsTypes.looseBool]))
});
var circleDefaultProps = _extends$1(_extends$1({}, defaultProps), {
  gapPosition: "top"
});
var gradientSeed = 0;
function stripPercentToNumber(percent) {
  return +percent.replace("%", "");
}
function toArray$1(symArray) {
  return Array.isArray(symArray) ? symArray : [symArray];
}
function getPathStyles(offset4, percent, strokeColor, strokeWidth) {
  var gapDegree = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
  var gapPosition = arguments.length > 5 ? arguments[5] : void 0;
  var radius = 50 - strokeWidth / 2;
  var beginPositionX = 0;
  var beginPositionY = -radius;
  var endPositionX = 0;
  var endPositionY = -2 * radius;
  switch (gapPosition) {
    case "left":
      beginPositionX = -radius;
      beginPositionY = 0;
      endPositionX = 2 * radius;
      endPositionY = 0;
      break;
    case "right":
      beginPositionX = radius;
      beginPositionY = 0;
      endPositionX = -2 * radius;
      endPositionY = 0;
      break;
    case "bottom":
      beginPositionY = radius;
      endPositionY = 2 * radius;
      break;
  }
  var pathString = "M 50,50 m ".concat(beginPositionX, ",").concat(beginPositionY, "\n   a ").concat(radius, ",").concat(radius, " 0 1 1 ").concat(endPositionX, ",").concat(-endPositionY, "\n   a ").concat(radius, ",").concat(radius, " 0 1 1 ").concat(-endPositionX, ",").concat(endPositionY);
  var len = Math.PI * 2 * radius;
  var pathStyle = {
    stroke: strokeColor,
    strokeDasharray: "".concat(percent / 100 * (len - gapDegree), "px ").concat(len, "px"),
    strokeDashoffset: "-".concat(gapDegree / 2 + offset4 / 100 * (len - gapDegree), "px"),
    transition: "stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s, opacity .3s ease 0s"
  };
  return {
    pathString,
    pathStyle
  };
}
var Circle$2 = defineComponent({
  name: "Circle",
  props: initDefaultProps$2(circlePropTypes, circleDefaultProps),
  created: function created15() {
    this.paths = {};
    this.gradientId = gradientSeed;
    gradientSeed += 1;
  },
  methods: {
    getStokeList: function getStokeList() {
      var _this = this;
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, percent = _this$$props.percent, strokeColor = _this$$props.strokeColor, strokeWidth = _this$$props.strokeWidth, strokeLinecap = _this$$props.strokeLinecap, gapDegree = _this$$props.gapDegree, gapPosition = _this$$props.gapPosition;
      var percentList = toArray$1(percent);
      var strokeColorList = toArray$1(strokeColor);
      var stackPtg = 0;
      return percentList.map(function(ptg, index2) {
        var color = strokeColorList[index2] || strokeColorList[strokeColorList.length - 1];
        var stroke = Object.prototype.toString.call(color) === "[object Object]" ? "url(#".concat(prefixCls2, "-gradient-").concat(_this.gradientId, ")") : "";
        var _getPathStyles = getPathStyles(stackPtg, ptg, color, strokeWidth, gapDegree, gapPosition), pathString = _getPathStyles.pathString, pathStyle = _getPathStyles.pathStyle;
        stackPtg += ptg;
        var pathProps = {
          key: index2,
          d: pathString,
          stroke,
          "stroke-linecap": strokeLinecap,
          "stroke-width": strokeWidth,
          opacity: ptg === 0 ? 0 : 1,
          "fill-opacity": "0",
          class: "".concat(prefixCls2, "-circle-path"),
          style: pathStyle
        };
        return createVNode("path", _objectSpread2$2({
          "ref": function ref2(c2) {
            return _this.paths[index2] = c2;
          }
        }, pathProps), null);
      });
    }
  },
  render: function render112() {
    var _a = this.$props, prefixCls2 = _a.prefixCls, strokeWidth = _a.strokeWidth, trailWidth = _a.trailWidth, gapDegree = _a.gapDegree, gapPosition = _a.gapPosition, trailColor = _a.trailColor, strokeLinecap = _a.strokeLinecap, strokeColor = _a.strokeColor, restProps = __rest$h(_a, ["prefixCls", "strokeWidth", "trailWidth", "gapDegree", "gapPosition", "trailColor", "strokeLinecap", "strokeColor"]);
    var _getPathStyles2 = getPathStyles(0, 100, trailColor, strokeWidth, gapDegree, gapPosition), pathString = _getPathStyles2.pathString, pathStyle = _getPathStyles2.pathStyle;
    delete restProps.percent;
    var strokeColorList = toArray$1(strokeColor);
    var gradient = strokeColorList.find(function(color) {
      return Object.prototype.toString.call(color) === "[object Object]";
    });
    var pathFirst = {
      d: pathString,
      stroke: trailColor,
      "stroke-linecap": strokeLinecap,
      "stroke-width": trailWidth || strokeWidth,
      "fill-opacity": "0",
      class: "".concat(prefixCls2, "-circle-trail"),
      style: pathStyle
    };
    return createVNode("svg", _objectSpread2$2({
      "class": "".concat(prefixCls2, "-circle"),
      "viewBox": "0 0 100 100"
    }, restProps), [gradient && createVNode("defs", null, [createVNode("linearGradient", {
      "id": "".concat(prefixCls2, "-gradient-").concat(this.gradientId),
      "x1": "100%",
      "y1": "0%",
      "x2": "0%",
      "y2": "0%"
    }, [Object.keys(gradient).sort(function(a2, b2) {
      return stripPercentToNumber(a2) - stripPercentToNumber(b2);
    }).map(function(key2, index2) {
      return createVNode("stop", {
        "key": index2,
        "offset": key2,
        "stop-color": gradient[key2]
      }, null);
    })])]), createVNode("path", pathFirst, null), this.getStokeList().reverse()]);
  }
});
var VCCircle = enhancer(Circle$2);
var ProgressStatuses = tuple("normal", "exception", "active", "success");
var ProgressType = PropsTypes.oneOf(tuple("line", "circle", "dashboard"));
var ProgressSize = PropsTypes.oneOf(tuple("default", "small"));
var ProgressProps = {
  prefixCls: PropsTypes.string,
  type: ProgressType,
  percent: PropsTypes.number,
  successPercent: PropsTypes.number,
  format: PropsTypes.func,
  status: PropsTypes.oneOf(ProgressStatuses),
  showInfo: PropsTypes.looseBool,
  strokeWidth: PropsTypes.number,
  strokeLinecap: PropsTypes.oneOf(["butt", "round", "square"]),
  strokeColor: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
  trailColor: PropsTypes.string,
  width: PropsTypes.number,
  gapDegree: PropsTypes.number,
  gapPosition: PropsTypes.oneOf(tuple("top", "bottom", "left", "right")),
  size: ProgressSize
};
var CircleProps = _extends$1(_extends$1({}, ProgressProps), {
  progressStatus: PropsTypes.string
});
var statusColorMap = {
  normal: "#108ee9",
  exception: "#ff5500",
  success: "#87d068"
};
function getPercentage(_ref) {
  var percent = _ref.percent, successPercent = _ref.successPercent;
  var ptg = validProgress(percent);
  if (!successPercent)
    return ptg;
  var successPtg = validProgress(successPercent);
  return [successPercent, validProgress(ptg - successPtg)];
}
function getStrokeColor(_ref2) {
  var progressStatus = _ref2.progressStatus, successPercent = _ref2.successPercent, strokeColor = _ref2.strokeColor;
  var color = strokeColor || statusColorMap[progressStatus];
  if (!successPercent)
    return color;
  return [statusColorMap.success, color];
}
var Circle = defineComponent({
  props: CircleProps,
  setup: function setup116(props2, _ref3) {
    var slots = _ref3.slots;
    return function() {
      var _wrapperClassName;
      var prefixCls2 = props2.prefixCls, width = props2.width, strokeWidth = props2.strokeWidth, trailColor = props2.trailColor, strokeLinecap = props2.strokeLinecap, gapPosition = props2.gapPosition, gapDegree = props2.gapDegree, type3 = props2.type;
      var circleSize = width || 120;
      var circleStyle = {
        width: typeof circleSize === "number" ? "".concat(circleSize, "px") : circleSize,
        height: typeof circleSize === "number" ? "".concat(circleSize, "px") : circleSize,
        fontSize: "".concat(circleSize * 0.15 + 6, "px")
      };
      var circleWidth = strokeWidth || 6;
      var gapPos = gapPosition || type3 === "dashboard" && "bottom" || "top";
      var gapDeg = gapDegree || type3 === "dashboard" && 75;
      var strokeColor = getStrokeColor(props2);
      var isGradient = Object.prototype.toString.call(strokeColor) === "[object Object]";
      var wrapperClassName = (_wrapperClassName = {}, _defineProperty$U(_wrapperClassName, "".concat(prefixCls2, "-inner"), true), _defineProperty$U(_wrapperClassName, "".concat(prefixCls2, "-circle-gradient"), isGradient), _wrapperClassName);
      return createVNode("div", {
        "class": wrapperClassName,
        "style": circleStyle
      }, [createVNode(VCCircle, {
        "percent": getPercentage(props2),
        "strokeWidth": circleWidth,
        "trailWidth": circleWidth,
        "strokeColor": strokeColor,
        "strokeLinecap": strokeLinecap,
        "trailColor": trailColor,
        "prefixCls": prefixCls2,
        "gapDegree": gapDeg,
        "gapPosition": gapPos
      }, null), slots === null || slots === void 0 ? void 0 : slots.default()]);
    };
  }
});
var Circle$1 = Circle;
var Progress$1 = defineComponent({
  name: "AProgress",
  props: initDefaultProps$1(ProgressProps, {
    type: "line",
    percent: 0,
    showInfo: true,
    trailColor: null,
    size: "default",
    gapDegree: 0,
    strokeLinecap: "round"
  }),
  setup: function setup117() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  methods: {
    getPercentNumber: function getPercentNumber() {
      var _this$$props = this.$props, successPercent = _this$$props.successPercent, _this$$props$percent = _this$$props.percent, percent = _this$$props$percent === void 0 ? 0 : _this$$props$percent;
      return parseInt(successPercent !== void 0 ? successPercent.toString() : percent.toString(), 10);
    },
    getProgressStatus: function getProgressStatus() {
      var status = this.$props.status;
      if (ProgressStatuses.indexOf(status) < 0 && this.getPercentNumber() >= 100) {
        return "success";
      }
      return status || "normal";
    },
    renderProcessInfo: function renderProcessInfo(prefixCls2, progressStatus) {
      var _this$$props2 = this.$props, showInfo = _this$$props2.showInfo, format3 = _this$$props2.format, type3 = _this$$props2.type, percent = _this$$props2.percent, successPercent = _this$$props2.successPercent;
      if (!showInfo)
        return null;
      var text;
      var textFormatter = format3 || this.$slots.format || function(percentNumber) {
        return "".concat(percentNumber, "%");
      };
      var isLineType = type3 === "line";
      if (format3 || this.$slots.format || progressStatus !== "exception" && progressStatus !== "success") {
        text = textFormatter(validProgress(percent), validProgress(successPercent));
      } else if (progressStatus === "exception") {
        text = isLineType ? createVNode(CloseCircleFilled$1, null, null) : createVNode(CloseOutlined$1, null, null);
      } else if (progressStatus === "success") {
        text = isLineType ? createVNode(CheckCircleFilled$1, null, null) : createVNode(CheckOutlined$1, null, null);
      }
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-text"),
        "title": typeof text === "string" ? text : void 0
      }, [text]);
    }
  },
  render: function render113() {
    var _classNames;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, size2 = props2.size, type3 = props2.type, showInfo = props2.showInfo;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("progress", customizePrefixCls);
    var progressStatus = this.getProgressStatus();
    var progressInfo = this.renderProcessInfo(prefixCls2, progressStatus);
    var progress;
    if (type3 === "line") {
      var lineProps = _extends$1(_extends$1({}, props2), {
        prefixCls: prefixCls2
      });
      progress = createVNode(Line$1, lineProps, {
        default: function _default8() {
          return [progressInfo];
        }
      });
    } else if (type3 === "circle" || type3 === "dashboard") {
      var circleProps = _extends$1(_extends$1({}, props2), {
        prefixCls: prefixCls2,
        progressStatus
      });
      progress = createVNode(Circle$1, circleProps, {
        default: function _default8() {
          return [progressInfo];
        }
      });
    }
    var classString = classNames(prefixCls2, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-").concat(type3 === "dashboard" && "circle" || type3), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-status-").concat(progressStatus), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-show-info"), showInfo), _defineProperty$U(_classNames, "".concat(prefixCls2, "-").concat(size2), size2), _classNames));
    var progressProps = {
      class: classString
    };
    return createVNode("div", progressProps, [progress]);
  }
});
var Progress = withInstall(Progress$1);
function getScroll$1(w2) {
  var ret = w2.pageXOffset;
  var method3 = "scrollLeft";
  if (typeof ret !== "number") {
    var d2 = w2.document;
    ret = d2.documentElement[method3];
    if (typeof ret !== "number") {
      ret = d2.body[method3];
    }
  }
  return ret;
}
function getClientPosition$1(elem) {
  var x2;
  var y2;
  var doc2 = elem.ownerDocument;
  var body = doc2.body;
  var docElem = doc2 && doc2.documentElement;
  var box = elem.getBoundingClientRect();
  x2 = box.left;
  y2 = box.top;
  x2 -= docElem.clientLeft || body.clientLeft || 0;
  y2 -= docElem.clientTop || body.clientTop || 0;
  return {
    left: x2,
    top: y2
  };
}
function getOffsetLeft(el) {
  var pos = getClientPosition$1(el);
  var doc2 = el.ownerDocument;
  var w2 = doc2.defaultView || doc2.parentWindow;
  pos.left += getScroll$1(w2);
  return pos.left;
}
var StarFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 00.6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0046.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3z" } }] }, "name": "star", "theme": "filled" };
var StarFilledSvg = StarFilled$2;
function _objectSpread$h(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$i(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$i(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var StarFilled = function StarFilled2(props2, context2) {
  var p2 = _objectSpread$h({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": StarFilledSvg
  }), null);
};
StarFilled.displayName = "StarFilled";
StarFilled.inheritAttrs = false;
var StarFilled$1 = StarFilled;
var starProps = {
  value: PropsTypes.number,
  index: PropsTypes.number,
  prefixCls: PropsTypes.string,
  allowHalf: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  character: PropsTypes.any,
  characterRender: PropsTypes.func,
  focused: PropsTypes.looseBool,
  count: PropsTypes.number,
  onClick: PropsTypes.func,
  onHover: PropsTypes.func
};
var Star = defineComponent({
  name: "Star",
  inheritAttrs: false,
  props: starProps,
  emits: ["hover", "click"],
  setup: function setup118(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var onHover = function onHover2(e2) {
      var index2 = props2.index;
      emit("hover", e2, index2);
    };
    var onClick7 = function onClick8(e2) {
      var index2 = props2.index;
      emit("click", e2, index2);
    };
    var onKeyDown14 = function onKeyDown15(e2) {
      var index2 = props2.index;
      if (e2.keyCode === 13) {
        emit("click", e2, index2);
      }
    };
    var cls = computed(function() {
      var prefixCls2 = props2.prefixCls, index2 = props2.index, value26 = props2.value, allowHalf = props2.allowHalf, focused = props2.focused;
      var starValue = index2 + 1;
      var className = prefixCls2;
      if (value26 === 0 && index2 === 0 && focused) {
        className += " ".concat(prefixCls2, "-focused");
      } else if (allowHalf && value26 + 0.5 >= starValue && value26 < starValue) {
        className += " ".concat(prefixCls2, "-half ").concat(prefixCls2, "-active");
        if (focused) {
          className += " ".concat(prefixCls2, "-focused");
        }
      } else {
        className += starValue <= value26 ? " ".concat(prefixCls2, "-full") : " ".concat(prefixCls2, "-zero");
        if (starValue === value26 && focused) {
          className += " ".concat(prefixCls2, "-focused");
        }
      }
      return className;
    });
    return function() {
      var disabled = props2.disabled, prefixCls2 = props2.prefixCls, characterRender = props2.characterRender, index2 = props2.index, count = props2.count, value26 = props2.value;
      var character = getPropsSlot(slots, props2, "character");
      var star = createVNode("li", {
        "class": cls.value
      }, [createVNode("div", {
        "onClick": disabled ? null : onClick7,
        "onKeydown": disabled ? null : onKeyDown14,
        "onMousemove": disabled ? null : onHover,
        "role": "radio",
        "aria-checked": value26 > index2 ? "true" : "false",
        "aria-posinset": index2 + 1,
        "aria-setsize": count,
        "tabindex": disabled ? -1 : 0
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-first")
      }, [character]), createVNode("div", {
        "class": "".concat(prefixCls2, "-second")
      }, [character])])]);
      if (characterRender) {
        star = characterRender(star, props2);
      }
      return star;
    };
  }
});
var useRef = function useRef2() {
  var refs = ref({});
  var setRef2 = function setRef3(el, key2) {
    refs.value[key2] = el;
  };
  onBeforeUpdate(function() {
    refs.value = {};
  });
  return [setRef2, refs];
};
var rateProps = {
  prefixCls: PropsTypes.string,
  count: PropsTypes.number,
  value: PropsTypes.number,
  allowHalf: PropsTypes.looseBool,
  allowClear: PropsTypes.looseBool,
  tooltips: PropsTypes.arrayOf(PropsTypes.string),
  disabled: PropsTypes.looseBool,
  character: PropsTypes.any,
  autofocus: PropsTypes.looseBool,
  tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
  direction: PropsTypes.string
};
var Rate = defineComponent({
  name: "ARate",
  inheritAttrs: false,
  props: initDefaultProps$2(rateProps, {
    value: 0,
    count: 5,
    allowHalf: false,
    allowClear: true,
    prefixCls: "ant-rate",
    tabindex: 0,
    direction: "ltr"
  }),
  emits: ["hoverChange", "update:value", "change", "focus", "blur", "keydown"],
  setup: function setup119(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit, expose = _ref.expose;
    var _useConfigInject = useConfigInject("rate", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var rateRef = ref();
    var _useRef = useRef(), _useRef2 = _slicedToArray$2(_useRef, 2), setRef2 = _useRef2[0], starRefs = _useRef2[1];
    var state2 = reactive({
      value: props2.value,
      focused: false,
      cleanedValue: null,
      hoverValue: void 0
    });
    watch(function() {
      return props2.value;
    }, function() {
      state2.value = props2.value;
    });
    var getStarDOM = function getStarDOM2(index2) {
      return findDOMNode(starRefs.value[index2]);
    };
    var getStarValue = function getStarValue2(index2, x2) {
      var reverse = direction.value === "rtl";
      var value26 = index2 + 1;
      if (props2.allowHalf) {
        var starEle = getStarDOM(index2);
        var leftDis = getOffsetLeft(starEle);
        var width = starEle.clientWidth;
        if (reverse && x2 - leftDis > width / 2) {
          value26 -= 0.5;
        } else if (!reverse && x2 - leftDis < width / 2) {
          value26 -= 0.5;
        }
      }
      return value26;
    };
    var changeValue = function changeValue2(value26) {
      if (props2.value === void 0) {
        state2.value = value26;
      }
      emit("update:value", value26);
      emit("change", value26);
    };
    var onHover = function onHover2(e2, index2) {
      var hoverValue2 = getStarValue(index2, e2.pageX);
      if (hoverValue2 !== state2.cleanedValue) {
        state2.hoverValue = hoverValue2;
        state2.cleanedValue = null;
      }
      emit("hoverChange", hoverValue2);
    };
    var onMouseLeave5 = function onMouseLeave6() {
      state2.hoverValue = void 0;
      state2.cleanedValue = null;
      emit("hoverChange", void 0);
    };
    var onClick7 = function onClick8(event, index2) {
      var allowClear = props2.allowClear;
      var newValue = getStarValue(index2, event.pageX);
      var isReset = false;
      if (allowClear) {
        isReset = newValue === state2.value;
      }
      onMouseLeave5();
      changeValue(isReset ? 0 : newValue);
      state2.cleanedValue = isReset ? newValue : null;
    };
    var onFocus6 = function onFocus7() {
      state2.focused = true;
      emit("focus");
    };
    var onBlur7 = function onBlur8() {
      state2.focused = false;
      emit("blur");
    };
    var onKeyDown14 = function onKeyDown15(event) {
      var keyCode = event.keyCode;
      var count = props2.count, allowHalf = props2.allowHalf;
      var reverse = direction.value === "rtl";
      if (keyCode === KeyCode$2.RIGHT && state2.value < count && !reverse) {
        if (allowHalf) {
          state2.value += 0.5;
        } else {
          state2.value += 1;
        }
        changeValue(state2.value);
        event.preventDefault();
      } else if (keyCode === KeyCode$2.LEFT && state2.value > 0 && !reverse) {
        if (allowHalf) {
          state2.value -= 0.5;
        } else {
          state2.value -= 1;
        }
        changeValue(state2.value);
        event.preventDefault();
      } else if (keyCode === KeyCode$2.RIGHT && state2.value > 0 && reverse) {
        if (allowHalf) {
          state2.value -= 0.5;
        } else {
          state2.value -= 1;
        }
        changeValue(state2.value);
        event.preventDefault();
      } else if (keyCode === KeyCode$2.LEFT && state2.value < count && reverse) {
        if (allowHalf) {
          state2.value += 0.5;
        } else {
          state2.value += 1;
        }
        changeValue(state2.value);
        event.preventDefault();
      }
      emit("keydown", event);
    };
    var focus27 = function focus28() {
      if (!props2.disabled) {
        rateRef.value.focus();
      }
    };
    var blur24 = function blur25() {
      if (!props2.disabled) {
        rateRef.value.blur();
      }
    };
    expose({
      focus: focus27,
      blur: blur24
    });
    onMounted(function() {
      var autofocus = props2.autofocus, disabled = props2.disabled;
      if (autofocus && !disabled) {
        focus27();
      }
    });
    var characterRender = function characterRender2(node, _ref2) {
      var index2 = _ref2.index;
      var tooltips = props2.tooltips;
      if (!tooltips)
        return node;
      return createVNode(Tooltip, {
        "title": tooltips[index2]
      }, {
        default: function _default8() {
          return [node];
        }
      });
    };
    var character = getPropsSlot(slots, props2, "character") || createVNode(StarFilled$1, null, null);
    return function() {
      var count = props2.count, allowHalf = props2.allowHalf, disabled = props2.disabled, tabindex = props2.tabindex;
      var className = attrs.class, style3 = attrs.style;
      var stars = [];
      var disabledClass = disabled ? "".concat(prefixCls2.value, "-disabled") : "";
      var _loop = function _loop2(index3) {
        stars.push(createVNode(Star, {
          "ref": function ref2(r2) {
            return setRef2(r2, index3);
          },
          "key": index3,
          "index": index3,
          "count": count,
          "disabled": disabled,
          "prefixCls": "".concat(prefixCls2.value, "-star"),
          "allowHalf": allowHalf,
          "value": state2.hoverValue === void 0 ? state2.value : state2.hoverValue,
          "onClick": onClick7,
          "onHover": onHover,
          "character": character,
          "characterRender": characterRender,
          "focused": state2.focused
        }, null));
      };
      for (var index2 = 0; index2 < count; index2++) {
        _loop(index2);
      }
      var rateClassName = classNames(prefixCls2.value, disabledClass, className, _defineProperty$U({}, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"));
      return createVNode("ul", _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
        "class": rateClassName,
        "style": style3,
        "onMouseleave": disabled ? null : onMouseLeave5,
        "tabindex": disabled ? -1 : tabindex,
        "onFocus": disabled ? null : onFocus6,
        "onBlur": disabled ? null : onBlur7,
        "onKeydown": disabled ? null : onKeyDown14,
        "ref": rateRef,
        "role": "radiogroup"
      }), [stars]);
    };
  }
});
var index$p = withInstall(Rate);
var WarningFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M955.7 856l-416-720c-6.2-10.7-16.9-16-27.7-16s-21.6 5.3-27.7 16l-416 720C56 877.4 71.4 904 96 904h832c24.6 0 40-26.6 27.7-48zM480 416c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v184c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V416zm32 352a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "warning", "theme": "filled" };
var WarningFilledSvg = WarningFilled$2;
function _objectSpread$g(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$h(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$h(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var WarningFilled = function WarningFilled2(props2, context2) {
  var p2 = _objectSpread$g({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": WarningFilledSvg
  }), null);
};
WarningFilled.displayName = "WarningFilled";
WarningFilled.inheritAttrs = false;
var WarningFilled$1 = WarningFilled;
var NoFound = function NoFound2() {
  return createVNode("svg", {
    "width": "252",
    "height": "294"
  }, [createVNode("defs", null, [createVNode("path", {
    "d": "M0 .387h251.772v251.772H0z"
  }, null)]), createVNode("g", {
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("g", {
    "transform": "translate(0 .012)"
  }, [createVNode("mask", {
    "fill": "#fff"
  }, null), createVNode("path", {
    "d": "M0 127.32v-2.095C0 56.279 55.892.387 124.838.387h2.096c68.946 0 124.838 55.892 124.838 124.838v2.096c0 68.946-55.892 124.838-124.838 124.838h-2.096C55.892 252.16 0 196.267 0 127.321",
    "fill": "#E4EBF7",
    "mask": "url(#b)"
  }, null)]), createVNode("path", {
    "d": "M39.755 130.84a8.276 8.276 0 1 1-16.468-1.66 8.276 8.276 0 0 1 16.468 1.66",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M36.975 134.297l10.482 5.943M48.373 146.508l-12.648 10.788",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M39.875 159.352a5.667 5.667 0 1 1-11.277-1.136 5.667 5.667 0 0 1 11.277 1.136M57.588 143.247a5.708 5.708 0 1 1-11.358-1.145 5.708 5.708 0 0 1 11.358 1.145M99.018 26.875l29.82-.014a4.587 4.587 0 1 0-.003-9.175l-29.82.013a4.587 4.587 0 1 0 .003 9.176M110.424 45.211l29.82-.013a4.588 4.588 0 0 0-.004-9.175l-29.82.013a4.587 4.587 0 1 0 .004 9.175",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M112.798 26.861v-.002l15.784-.006a4.588 4.588 0 1 0 .003 9.175l-15.783.007v-.002a4.586 4.586 0 0 0-.004-9.172M184.523 135.668c-.553 5.485-5.447 9.483-10.931 8.93-5.485-.553-9.483-5.448-8.93-10.932.552-5.485 5.447-9.483 10.932-8.93 5.485.553 9.483 5.447 8.93 10.932",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M179.26 141.75l12.64 7.167M193.006 156.477l-15.255 13.011",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M184.668 170.057a6.835 6.835 0 1 1-13.6-1.372 6.835 6.835 0 0 1 13.6 1.372M203.34 153.325a6.885 6.885 0 1 1-13.7-1.382 6.885 6.885 0 0 1 13.7 1.382",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M151.931 192.324a2.222 2.222 0 1 1-4.444 0 2.222 2.222 0 0 1 4.444 0zM225.27 116.056a2.222 2.222 0 1 1-4.445 0 2.222 2.222 0 0 1 4.444 0zM216.38 151.08a2.223 2.223 0 1 1-4.446-.001 2.223 2.223 0 0 1 4.446 0zM176.917 107.636a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM195.291 92.165a2.223 2.223 0 1 1-4.445 0 2.223 2.223 0 0 1 4.445 0zM202.058 180.711a2.223 2.223 0 1 1-4.446 0 2.223 2.223 0 0 1 4.446 0z",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "stroke": "#FFF",
    "stroke-width": "2",
    "d": "M214.404 153.302l-1.912 20.184-10.928 5.99M173.661 174.792l-6.356 9.814h-11.36l-4.508 6.484M174.941 125.168v-15.804M220.824 117.25l-12.84 7.901-15.31-7.902V94.39"
  }, null), createVNode("path", {
    "d": "M166.588 65.936h-3.951a4.756 4.756 0 0 1-4.743-4.742 4.756 4.756 0 0 1 4.743-4.743h3.951a4.756 4.756 0 0 1 4.743 4.743 4.756 4.756 0 0 1-4.743 4.742",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M174.823 30.03c0-16.281 13.198-29.48 29.48-29.48 16.28 0 29.48 13.199 29.48 29.48 0 16.28-13.2 29.48-29.48 29.48-16.282 0-29.48-13.2-29.48-29.48",
    "fill": "#1890FF"
  }, null), createVNode("path", {
    "d": "M205.952 38.387c.5.5.785 1.142.785 1.928s-.286 1.465-.785 1.964c-.572.5-1.214.75-2 .75-.785 0-1.429-.285-1.929-.785-.572-.5-.82-1.143-.82-1.929s.248-1.428.82-1.928c.5-.5 1.144-.75 1.93-.75.785 0 1.462.25 1.999.75m4.285-19.463c1.428 1.249 2.143 2.963 2.143 5.142 0 1.712-.427 3.13-1.219 4.25-.067.096-.137.18-.218.265-.416.429-1.41 1.346-2.956 2.699a5.07 5.07 0 0 0-1.428 1.75 5.207 5.207 0 0 0-.536 2.357v.5h-4.107v-.5c0-1.357.215-2.536.714-3.5.464-.964 1.857-2.464 4.178-4.536l.43-.5c.643-.785.964-1.643.964-2.535 0-1.18-.358-2.108-1-2.785-.678-.68-1.643-1.001-2.858-1.001-1.536 0-2.642.464-3.357 1.43-.37.5-.621 1.135-.76 1.904a1.999 1.999 0 0 1-1.971 1.63h-.004c-1.277 0-2.257-1.183-1.98-2.43.337-1.518 1.02-2.78 2.073-3.784 1.536-1.5 3.607-2.25 6.25-2.25 2.32 0 4.214.607 5.642 1.894",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M52.04 76.131s21.81 5.36 27.307 15.945c5.575 10.74-6.352 9.26-15.73 4.935-10.86-5.008-24.7-11.822-11.577-20.88",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M90.483 67.504l-.449 2.893c-.753.49-4.748-2.663-4.748-2.663l-1.645.748-1.346-5.684s6.815-4.589 8.917-5.018c2.452-.501 9.884.94 10.7 2.278 0 0 1.32.486-2.227.69-3.548.203-5.043.447-6.79 3.132-1.747 2.686-2.412 3.624-2.412 3.624",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M128.055 111.367c-2.627-7.724-6.15-13.18-8.917-15.478-3.5-2.906-9.34-2.225-11.366-4.187-1.27-1.231-3.215-1.197-3.215-1.197s-14.98-3.158-16.828-3.479c-2.37-.41-2.124-.714-6.054-1.405-1.57-1.907-2.917-1.122-2.917-1.122l-7.11-1.383c-.853-1.472-2.423-1.023-2.423-1.023l-2.468-.897c-1.645 9.976-7.74 13.796-7.74 13.796 1.795 1.122 15.703 8.3 15.703 8.3l5.107 37.11s-3.321 5.694 1.346 9.109c0 0 19.883-3.743 34.921-.329 0 0 3.047-2.546.972-8.806.523-3.01 1.394-8.263 1.736-11.622.385.772 2.019 1.918 3.14 3.477 0 0 9.407-7.365 11.052-14.012-.832-.723-1.598-1.585-2.267-2.453-.567-.736-.358-2.056-.765-2.717-.669-1.084-1.804-1.378-1.907-1.682",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M101.09 289.998s4.295 2.041 7.354 1.021c2.821-.94 4.53.668 7.08 1.178 2.55.51 6.874 1.1 11.686-1.26-.103-5.51-6.889-3.98-11.96-6.713-2.563-1.38-3.784-4.722-3.598-8.799h-9.402s-1.392 10.52-1.16 14.573",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M101.067 289.826s2.428 1.271 6.759.653c3.058-.437 3.712.481 7.423 1.031 3.712.55 10.724-.069 11.823-.894.413 1.1-.343 2.063-.343 2.063s-1.512.603-4.812.824c-2.03.136-5.8.291-7.607-.503-1.787-1.375-5.247-1.903-5.728-.241-3.918.95-7.355-.286-7.355-.286l-.16-2.647z",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M108.341 276.044h3.094s-.103 6.702 4.536 8.558c-4.64.618-8.558-2.303-7.63-8.558",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M57.542 272.401s-2.107 7.416-4.485 12.306c-1.798 3.695-4.225 7.492 5.465 7.492 6.648 0 8.953-.48 7.423-6.599-1.53-6.12.266-13.199.266-13.199h-8.669z",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M51.476 289.793s2.097 1.169 6.633 1.169c6.083 0 8.249-1.65 8.249-1.65s.602 1.114-.619 2.165c-.993.855-3.597 1.591-7.39 1.546-4.145-.048-5.832-.566-6.736-1.168-.825-.55-.687-1.58-.137-2.062",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M58.419 274.304s.033 1.519-.314 2.93c-.349 1.42-1.078 3.104-1.13 4.139-.058 1.151 4.537 1.58 5.155.034.62-1.547 1.294-6.427 1.913-7.252.619-.825-4.903-2.119-5.624.15",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M99.66 278.514l13.378.092s1.298-54.52 1.853-64.403c.554-9.882 3.776-43.364 1.002-63.128l-12.547-.644-22.849.78s-.434 3.966-1.195 9.976c-.063.496-.682.843-.749 1.365-.075.585.423 1.354.32 1.966-2.364 14.08-6.377 33.104-8.744 46.677-.116.666-1.234 1.009-1.458 2.691-.04.302.211 1.525.112 1.795-6.873 18.744-10.949 47.842-14.277 61.885l14.607-.014s2.197-8.57 4.03-16.97c2.811-12.886 23.111-85.01 23.111-85.01l3.016-.521 1.043 46.35s-.224 1.234.337 2.02c.56.785-.56 1.123-.392 2.244l.392 1.794s-.449 7.178-.898 11.89c-.448 4.71-.092 39.165-.092 39.165",
    "fill": "#7BB2F9"
  }, null), createVNode("path", {
    "d": "M76.085 221.626c1.153.094 4.038-2.019 6.955-4.935M106.36 225.142s2.774-1.11 6.103-3.883",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M107.275 222.1s2.773-1.11 6.102-3.884",
    "stroke": "#648BD8",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M74.74 224.767s2.622-.591 6.505-3.365M86.03 151.634c-.27 3.106.3 8.525-4.336 9.123M103.625 149.88s.11 14.012-1.293 15.065c-2.219 1.664-2.99 1.944-2.99 1.944M99.79 150.438s.035 12.88-1.196 24.377M93.673 175.911s7.212-1.664 9.431-1.664M74.31 205.861a212.013 212.013 0 0 1-.979 4.56s-1.458 1.832-1.009 3.776c.449 1.944-.947 2.045-4.985 15.355-1.696 5.59-4.49 18.591-6.348 27.597l-.231 1.12M75.689 197.807a320.934 320.934 0 0 1-.882 4.754M82.591 152.233L81.395 162.7s-1.097.15-.5 2.244c.113 1.346-2.674 15.775-5.18 30.43M56.12 274.418h13.31",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M116.241 148.22s-17.047-3.104-35.893.2c.158 2.514-.003 4.15-.003 4.15s14.687-2.818 35.67-.312c.252-2.355.226-4.038.226-4.038",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M106.322 151.165l.003-4.911a.81.81 0 0 0-.778-.815c-2.44-.091-5.066-.108-7.836-.014a.818.818 0 0 0-.789.815l-.003 4.906a.81.81 0 0 0 .831.813c2.385-.06 4.973-.064 7.73.017a.815.815 0 0 0 .842-.81",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M105.207 150.233l.002-3.076a.642.642 0 0 0-.619-.646 94.321 94.321 0 0 0-5.866-.01.65.65 0 0 0-.63.647v3.072a.64.64 0 0 0 .654.644 121.12 121.12 0 0 1 5.794.011c.362.01.665-.28.665-.642",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M100.263 275.415h12.338M101.436 270.53c.006 3.387.042 5.79.111 6.506M101.451 264.548a915.75 915.75 0 0 0-.015 4.337M100.986 174.965l.898 44.642s.673 1.57-.225 2.692c-.897 1.122 2.468.673.898 2.243-1.57 1.57.897 1.122 0 3.365-.596 1.489-.994 21.1-1.096 35.146",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M46.876 83.427s-.516 6.045 7.223 5.552c11.2-.712 9.218-9.345 31.54-21.655-.786-2.708-2.447-4.744-2.447-4.744s-11.068 3.11-22.584 8.046c-6.766 2.9-13.395 6.352-13.732 12.801M104.46 91.057l.941-5.372-8.884-11.43-5.037 5.372-1.74 7.834a.321.321 0 0 0 .108.32c.965.8 6.5 5.013 14.347 3.544a.332.332 0 0 0 .264-.268",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M93.942 79.387s-4.533-2.853-2.432-6.855c1.623-3.09 4.513 1.133 4.513 1.133s.52-3.642 3.121-3.642c.52-1.04 1.561-4.162 1.561-4.162s11.445 2.601 13.526 3.121c0 5.203-2.304 19.424-7.84 19.861-8.892.703-12.449-9.456-12.449-9.456",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M113.874 73.446c2.601-2.081 3.47-9.722 3.47-9.722s-2.479-.49-6.64-2.05c-4.683-2.081-12.798-4.747-17.48.976-9.668 3.223-2.05 19.823-2.05 19.823l2.713-3.021s-3.935-3.287-2.08-6.243c2.17-3.462 3.92 1.073 3.92 1.073s.637-2.387 3.581-3.342c.355-.71 1.036-2.674 1.432-3.85a1.073 1.073 0 0 1 1.263-.704c2.4.558 8.677 2.019 11.356 2.662.522.125.871.615.82 1.15l-.305 3.248z",
    "fill": "#520038"
  }, null), createVNode("path", {
    "d": "M104.977 76.064c-.103.61-.582 1.038-1.07.956-.489-.083-.801-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.644.698 1.254M112.132 77.694c-.103.61-.582 1.038-1.07.956-.488-.083-.8-.644-.698-1.254.103-.61.582-1.038 1.07-.956.488.082.8.643.698 1.254",
    "fill": "#552950"
  }, null), createVNode("path", {
    "stroke": "#DB836E",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "d": "M110.13 74.84l-.896 1.61-.298 4.357h-2.228"
  }, null), createVNode("path", {
    "d": "M110.846 74.481s1.79-.716 2.506.537",
    "stroke": "#5C2552",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M92.386 74.282s.477-1.114 1.113-.716c.637.398 1.274 1.433.558 1.99-.717.556.159 1.67.159 1.67",
    "stroke": "#DB836E",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M103.287 72.93s1.83 1.113 4.137.954",
    "stroke": "#5C2552",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M103.685 81.762s2.227 1.193 4.376 1.193M104.64 84.308s.954.398 1.511.318M94.693 81.205s2.308 7.4 10.424 7.639",
    "stroke": "#DB836E",
    "stroke-width": "1.118",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M81.45 89.384s.45 5.647-4.935 12.787M69 82.654s-.726 9.282-8.204 14.206",
    "stroke": "#E4EBF7",
    "stroke-width": "1.101",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M129.405 122.865s-5.272 7.403-9.422 10.768",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M119.306 107.329s.452 4.366-2.127 32.062",
    "stroke": "#E4EBF7",
    "stroke-width": "1.101",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M150.028 151.232h-49.837a1.01 1.01 0 0 1-1.01-1.01v-31.688c0-.557.452-1.01 1.01-1.01h49.837c.558 0 1.01.453 1.01 1.01v31.688a1.01 1.01 0 0 1-1.01 1.01",
    "fill": "#F2D7AD"
  }, null), createVNode("path", {
    "d": "M150.29 151.232h-19.863v-33.707h20.784v32.786a.92.92 0 0 1-.92.92",
    "fill": "#F4D19D"
  }, null), createVNode("path", {
    "d": "M123.554 127.896H92.917a.518.518 0 0 1-.425-.816l6.38-9.113c.193-.277.51-.442.85-.442h31.092l-7.26 10.371z",
    "fill": "#F2D7AD"
  }, null), createVNode("path", {
    "fill": "#CC9B6E",
    "d": "M123.689 128.447H99.25v-.519h24.169l7.183-10.26.424.298z"
  }, null), createVNode("path", {
    "d": "M158.298 127.896h-18.669a2.073 2.073 0 0 1-1.659-.83l-7.156-9.541h19.965c.49 0 .95.23 1.244.622l6.69 8.92a.519.519 0 0 1-.415.83",
    "fill": "#F4D19D"
  }, null), createVNode("path", {
    "fill": "#CC9B6E",
    "d": "M157.847 128.479h-19.384l-7.857-10.475.415-.31 7.7 10.266h19.126zM130.554 150.685l-.032-8.177.519-.002.032 8.177z"
  }, null), createVNode("path", {
    "fill": "#CC9B6E",
    "d": "M130.511 139.783l-.08-21.414.519-.002.08 21.414zM111.876 140.932l-.498-.143 1.479-5.167.498.143zM108.437 141.06l-2.679-2.935 2.665-3.434.41.318-2.397 3.089 2.384 2.612zM116.607 141.06l-.383-.35 2.383-2.612-2.397-3.089.41-.318 2.665 3.434z"
  }, null), createVNode("path", {
    "d": "M154.316 131.892l-3.114-1.96.038 3.514-1.043.092c-1.682.115-3.634.23-4.789.23-1.902 0-2.693 2.258 2.23 2.648l-2.645-.596s-2.168 1.317.504 2.3c0 0-1.58 1.217.561 2.58-.584 3.504 5.247 4.058 7.122 3.59 1.876-.47 4.233-2.359 4.487-5.16.28-3.085-.89-5.432-3.35-7.238",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M153.686 133.577s-6.522.47-8.36.372c-1.836-.098-1.904 2.19 2.359 2.264 3.739.15 5.451-.044 5.451-.044",
    "stroke": "#DB836E",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M145.16 135.877c-1.85 1.346.561 2.355.561 2.355s3.478.898 6.73.617",
    "stroke": "#DB836E",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M151.89 141.71s-6.28.111-6.73-2.132c-.223-1.346.45-1.402.45-1.402M146.114 140.868s-1.103 3.16 5.44 3.533M151.202 129.932v3.477M52.838 89.286c3.533-.337 8.423-1.248 13.582-7.754",
    "stroke": "#DB836E",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M168.567 248.318a6.647 6.647 0 0 1-6.647-6.647v-66.466a6.647 6.647 0 1 1 13.294 0v66.466a6.647 6.647 0 0 1-6.647 6.647",
    "fill": "#5BA02E"
  }, null), createVNode("path", {
    "d": "M176.543 247.653a6.647 6.647 0 0 1-6.646-6.647v-33.232a6.647 6.647 0 1 1 13.293 0v33.232a6.647 6.647 0 0 1-6.647 6.647",
    "fill": "#92C110"
  }, null), createVNode("path", {
    "d": "M186.443 293.613H158.92a3.187 3.187 0 0 1-3.187-3.187v-46.134a3.187 3.187 0 0 1 3.187-3.187h27.524a3.187 3.187 0 0 1 3.187 3.187v46.134a3.187 3.187 0 0 1-3.187 3.187",
    "fill": "#F2D7AD"
  }, null), createVNode("path", {
    "d": "M88.979 89.48s7.776 5.384 16.6 2.842",
    "stroke": "#E4EBF7",
    "stroke-width": "1.101",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null)])]);
};
var noFound = NoFound;
var ServerError = function ServerError2() {
  return createVNode("svg", {
    "width": "254",
    "height": "294"
  }, [createVNode("defs", null, [createVNode("path", {
    "d": "M0 .335h253.49v253.49H0z"
  }, null), createVNode("path", {
    "d": "M0 293.665h253.49V.401H0z"
  }, null)]), createVNode("g", {
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("g", {
    "transform": "translate(0 .067)"
  }, [createVNode("mask", {
    "fill": "#fff"
  }, null), createVNode("path", {
    "d": "M0 128.134v-2.11C0 56.608 56.273.334 125.69.334h2.11c69.416 0 125.69 56.274 125.69 125.69v2.11c0 69.417-56.274 125.69-125.69 125.69h-2.11C56.273 253.824 0 197.551 0 128.134",
    "fill": "#E4EBF7",
    "mask": "url(#b)"
  }, null)]), createVNode("path", {
    "d": "M39.989 132.108a8.332 8.332 0 1 1-16.581-1.671 8.332 8.332 0 0 1 16.58 1.671",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M37.19 135.59l10.553 5.983M48.665 147.884l-12.734 10.861",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M40.11 160.816a5.706 5.706 0 1 1-11.354-1.145 5.706 5.706 0 0 1 11.354 1.145M57.943 144.6a5.747 5.747 0 1 1-11.436-1.152 5.747 5.747 0 0 1 11.436 1.153M99.656 27.434l30.024-.013a4.619 4.619 0 1 0-.004-9.238l-30.024.013a4.62 4.62 0 0 0 .004 9.238M111.14 45.896l30.023-.013a4.62 4.62 0 1 0-.004-9.238l-30.024.013a4.619 4.619 0 1 0 .004 9.238",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M113.53 27.421v-.002l15.89-.007a4.619 4.619 0 1 0 .005 9.238l-15.892.007v-.002a4.618 4.618 0 0 0-.004-9.234M150.167 70.091h-3.979a4.789 4.789 0 0 1-4.774-4.775 4.788 4.788 0 0 1 4.774-4.774h3.979a4.789 4.789 0 0 1 4.775 4.774 4.789 4.789 0 0 1-4.775 4.775",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M171.687 30.234c0-16.392 13.289-29.68 29.681-29.68 16.392 0 29.68 13.288 29.68 29.68 0 16.393-13.288 29.681-29.68 29.681s-29.68-13.288-29.68-29.68",
    "fill": "#FF603B"
  }, null), createVNode("path", {
    "d": "M203.557 19.435l-.676 15.035a1.514 1.514 0 0 1-3.026 0l-.675-15.035a2.19 2.19 0 1 1 4.377 0m-.264 19.378c.513.477.77 1.1.77 1.87s-.257 1.393-.77 1.907c-.55.476-1.21.733-1.943.733a2.545 2.545 0 0 1-1.87-.77c-.55-.514-.806-1.136-.806-1.87 0-.77.256-1.393.806-1.87.513-.513 1.137-.733 1.87-.733.77 0 1.43.22 1.943.733",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M119.3 133.275c4.426-.598 3.612-1.204 4.079-4.778.675-5.18-3.108-16.935-8.262-25.118-1.088-10.72-12.598-11.24-12.598-11.24s4.312 4.895 4.196 16.199c1.398 5.243.804 14.45.804 14.45s5.255 11.369 11.78 10.487",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M100.944 91.61s1.463-.583 3.211.582c8.08 1.398 10.368 6.706 11.3 11.368 1.864 1.282 1.864 2.33 1.864 3.496.365.777 1.515 3.03 1.515 3.03s-7.225 1.748-10.954 6.758c-1.399-6.41-6.936-25.235-6.936-25.235",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M94.008 90.5l1.019-5.815-9.23-11.874-5.233 5.581-2.593 9.863s8.39 5.128 16.037 2.246",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M82.931 78.216s-4.557-2.868-2.445-6.892c1.632-3.107 4.537 1.139 4.537 1.139s.524-3.662 3.139-3.662c.523-1.046 1.569-4.184 1.569-4.184s11.507 2.615 13.6 3.138c-.001 5.23-2.317 19.529-7.884 19.969-8.94.706-12.516-9.508-12.516-9.508",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M102.971 72.243c2.616-2.093 3.489-9.775 3.489-9.775s-2.492-.492-6.676-2.062c-4.708-2.092-12.867-4.771-17.575.982-9.54 4.41-2.062 19.93-2.062 19.93l2.729-3.037s-3.956-3.304-2.092-6.277c2.183-3.48 3.943 1.08 3.943 1.08s.64-2.4 3.6-3.36c.356-.714 1.04-2.69 1.44-3.872a1.08 1.08 0 0 1 1.27-.707c2.41.56 8.723 2.03 11.417 2.676.524.126.876.619.825 1.156l-.308 3.266z",
    "fill": "#520038"
  }, null), createVNode("path", {
    "d": "M101.22 76.514c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.961.491.083.805.647.702 1.26M94.26 75.074c-.104.613-.585 1.044-1.076.96-.49-.082-.805-.646-.702-1.26.104-.613.585-1.044 1.076-.96.491.082.805.646.702 1.26",
    "fill": "#552950"
  }, null), createVNode("path", {
    "stroke": "#DB836E",
    "stroke-width": "1.063",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "d": "M99.206 73.644l-.9 1.62-.3 4.38h-2.24"
  }, null), createVNode("path", {
    "d": "M99.926 73.284s1.8-.72 2.52.54",
    "stroke": "#5C2552",
    "stroke-width": "1.117",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M81.367 73.084s.48-1.12 1.12-.72c.64.4 1.28 1.44.56 2s.16 1.68.16 1.68",
    "stroke": "#DB836E",
    "stroke-width": "1.117",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M92.326 71.724s1.84 1.12 4.16.96",
    "stroke": "#5C2552",
    "stroke-width": "1.117",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M92.726 80.604s2.24 1.2 4.4 1.2M93.686 83.164s.96.4 1.52.32M83.687 80.044s1.786 6.547 9.262 7.954",
    "stroke": "#DB836E",
    "stroke-width": "1.063",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M95.548 91.663s-1.068 2.821-8.298 2.105c-7.23-.717-10.29-5.044-10.29-5.044",
    "stroke": "#E4EBF7",
    "stroke-width": "1.136",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M78.126 87.478s6.526 4.972 16.47 2.486c0 0 9.577 1.02 11.536 5.322 5.36 11.77.543 36.835 0 39.962 3.496 4.055-.466 8.483-.466 8.483-15.624-3.548-35.81-.6-35.81-.6-4.849-3.546-1.223-9.044-1.223-9.044L62.38 110.32c-2.485-15.227.833-19.803 3.549-20.743 3.03-1.049 8.04-1.282 8.04-1.282.496-.058 1.08-.076 1.37-.233 2.36-1.282 2.787-.583 2.787-.583",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M65.828 89.81s-6.875.465-7.59 8.156c-.466 8.857 3.03 10.954 3.03 10.954s6.075 22.102 16.796 22.957c8.39-2.176 4.758-6.702 4.661-11.42-.233-11.304-7.108-16.897-7.108-16.897s-4.212-13.75-9.789-13.75",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M71.716 124.225s.855 11.264 9.828 6.486c4.765-2.536 7.581-13.828 9.789-22.568 1.456-5.768 2.58-12.197 2.58-12.197l-4.973-1.709s-2.408 5.516-7.769 12.275c-4.335 5.467-9.144 11.11-9.455 17.713",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M108.463 105.191s1.747 2.724-2.331 30.535c2.376 2.216 1.053 6.012-.233 7.51",
    "stroke": "#E4EBF7",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M123.262 131.527s-.427 2.732-11.77 1.981c-15.187-1.006-25.326-3.25-25.326-3.25l.933-5.8s.723.215 9.71-.068c11.887-.373 18.714-6.07 24.964-1.022 4.039 3.263 1.489 8.16 1.489 8.16",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M70.24 90.974s-5.593-4.739-11.054 2.68c-3.318 7.223.517 15.284 2.664 19.578-.31 3.729 2.33 4.311 2.33 4.311s.108.895 1.516 2.68c4.078-7.03 6.72-9.166 13.711-12.546-.328-.656-1.877-3.265-1.825-3.767.175-1.69-1.282-2.623-1.282-2.623s-.286-.156-1.165-2.738c-.788-2.313-2.036-5.177-4.895-7.575",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M90.232 288.027s4.855 2.308 8.313 1.155c3.188-1.063 5.12.755 8.002 1.331 2.881.577 7.769 1.243 13.207-1.424-.117-6.228-7.786-4.499-13.518-7.588-2.895-1.56-4.276-5.336-4.066-9.944H91.544s-1.573 11.89-1.312 16.47",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M90.207 287.833s2.745 1.437 7.639.738c3.456-.494 3.223.66 7.418 1.282 4.195.621 13.092-.194 14.334-1.126.466 1.242-.388 2.33-.388 2.33s-1.709.682-5.438.932c-2.295.154-8.098.276-10.14-.621-2.02-1.554-4.894-1.515-6.06-.234-4.427 1.075-7.184-.31-7.184-.31l-.181-2.991z",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M98.429 272.257h3.496s-.117 7.574 5.127 9.671c-5.244.7-9.672-2.602-8.623-9.671",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M44.425 272.046s-2.208 7.774-4.702 12.899c-1.884 3.874-4.428 7.854 5.729 7.854 6.97 0 9.385-.503 7.782-6.917-1.604-6.415.279-13.836.279-13.836h-9.088z",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M38.066 290.277s2.198 1.225 6.954 1.225c6.376 0 8.646-1.73 8.646-1.73s.63 1.168-.649 2.27c-1.04.897-3.77 1.668-7.745 1.621-4.347-.05-6.115-.593-7.062-1.224-.864-.577-.72-1.657-.144-2.162",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M45.344 274.041s.035 1.592-.329 3.07c-.365 1.49-1.13 3.255-1.184 4.34-.061 1.206 4.755 1.657 5.403.036.65-1.622 1.357-6.737 2.006-7.602.648-.865-5.14-2.222-5.896.156",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M89.476 277.57l13.899.095s1.349-56.643 1.925-66.909c.576-10.267 3.923-45.052 1.042-65.585l-13.037-.669-23.737.81s-.452 4.12-1.243 10.365c-.065.515-.708.874-.777 1.417-.078.608.439 1.407.332 2.044-2.455 14.627-5.797 32.736-8.256 46.837-.121.693-1.282 1.048-1.515 2.796-.042.314.22 1.584.116 1.865-7.14 19.473-12.202 52.601-15.66 67.19l15.176-.015s2.282-10.145 4.185-18.871c2.922-13.389 24.012-88.32 24.012-88.32l3.133-.954-.158 48.568s-.233 1.282.35 2.098c.583.815-.581 1.167-.408 2.331l.408 1.864s-.466 7.458-.932 12.352c-.467 4.895 1.145 40.69 1.145 40.69",
    "fill": "#7BB2F9"
  }, null), createVNode("path", {
    "d": "M64.57 218.881c1.197.099 4.195-2.097 7.225-5.127M96.024 222.534s2.881-1.152 6.34-4.034",
    "stroke": "#648BD8",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M96.973 219.373s2.882-1.153 6.34-4.034",
    "stroke": "#648BD8",
    "stroke-width": "1.032",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M63.172 222.144s2.724-.614 6.759-3.496M74.903 146.166c-.281 3.226.31 8.856-4.506 9.478M93.182 144.344s.115 14.557-1.344 15.65c-2.305 1.73-3.107 2.02-3.107 2.02M89.197 144.923s.269 13.144-1.01 25.088M83.525 170.71s6.81-1.051 9.116-1.051M46.026 270.045l-.892 4.538M46.937 263.289l-.815 4.157M62.725 202.503c-.33 1.618-.102 1.904-.449 3.438 0 0-2.756 1.903-2.29 3.923.466 2.02-.31 3.424-4.505 17.252-1.762 5.807-4.233 18.922-6.165 28.278-.03.144-.521 2.646-1.14 5.8M64.158 194.136c-.295 1.658-.6 3.31-.917 4.938M71.33 146.787l-1.244 10.877s-1.14.155-.519 2.33c.117 1.399-2.778 16.39-5.382 31.615M44.242 273.727H58.07",
    "stroke": "#648BD8",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M106.18 142.117c-3.028-.489-18.825-2.744-36.219.2a.625.625 0 0 0-.518.644c.063 1.307.044 2.343.015 2.995a.617.617 0 0 0 .716.636c3.303-.534 17.037-2.412 35.664-.266.347.04.66-.214.692-.56.124-1.347.16-2.425.17-3.029a.616.616 0 0 0-.52-.62",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M96.398 145.264l.003-5.102a.843.843 0 0 0-.809-.847 114.104 114.104 0 0 0-8.141-.014.85.85 0 0 0-.82.847l-.003 5.097c0 .476.388.857.864.845 2.478-.064 5.166-.067 8.03.017a.848.848 0 0 0 .876-.843",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M95.239 144.296l.002-3.195a.667.667 0 0 0-.643-.672c-1.9-.061-3.941-.073-6.094-.01a.675.675 0 0 0-.654.672l-.002 3.192c0 .376.305.677.68.669 1.859-.042 3.874-.043 6.02.012.376.01.69-.291.691-.668",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M90.102 273.522h12.819M91.216 269.761c.006 3.519-.072 5.55 0 6.292M90.923 263.474c-.009 1.599-.016 2.558-.016 4.505M90.44 170.404l.932 46.38s.7 1.631-.233 2.796c-.932 1.166 2.564.7.932 2.33-1.63 1.633.933 1.166 0 3.497-.618 1.546-1.031 21.921-1.138 36.513",
    "stroke": "#648BD8",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M73.736 98.665l2.214 4.312s2.098.816 1.865 2.68l.816 2.214M64.297 116.611c.233-.932 2.176-7.147 12.585-10.488M77.598 90.042s7.691 6.137 16.547 2.72",
    "stroke": "#E4EBF7",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M91.974 86.954s5.476-.816 7.574-4.545c1.297-.345.72 2.212-.33 3.671-.7.971-1.01 1.554-1.01 1.554s.194.31.155.816c-.053.697-.175.653-.272 1.048-.081.335.108.657 0 1.049-.046.17-.198.5-.382.878-.12.249-.072.687-.2.948-.231.469-1.562 1.87-2.622 2.855-3.826 3.554-5.018 1.644-6.001-.408-.894-1.865-.661-5.127-.874-6.875-.35-2.914-2.622-3.03-1.923-4.429.343-.685 2.87.69 3.263 1.748.757 2.04 2.952 1.807 2.622 1.69",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M99.8 82.429c-.465.077-.35.272-.97 1.243-.622.971-4.817 2.932-6.39 3.224-2.589.48-2.278-1.56-4.254-2.855-1.69-1.107-3.562-.638-1.398 1.398.99.932.932 1.107 1.398 3.205.335 1.506-.64 3.67.7 5.593",
    "stroke": "#DB836E",
    "stroke-width": ".774",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M79.543 108.673c-2.1 2.926-4.266 6.175-5.557 8.762",
    "stroke": "#E59788",
    "stroke-width": ".774",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M87.72 124.768s-2.098-1.942-5.127-2.719c-3.03-.777-3.574-.155-5.516.078-1.942.233-3.885-.932-3.652.7.233 1.63 5.05 1.01 5.206 2.097.155 1.087-6.37 2.796-8.313 2.175-.777.777.466 1.864 2.02 2.175.233 1.554 2.253 1.554 2.253 1.554s.699 1.01 2.641 1.088c2.486 1.32 8.934-.7 10.954-1.554 2.02-.855-.466-5.594-.466-5.594",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M73.425 122.826s.66 1.127 3.167 1.418c2.315.27 2.563.583 2.563.583s-2.545 2.894-9.07 2.272M72.416 129.274s3.826.097 4.933-.718M74.98 130.75s1.961.136 3.36-.505M77.232 131.916s1.748.019 2.914-.505M73.328 122.321s-.595-1.032 1.262-.427c1.671.544 2.833.055 5.128.155 1.389.061 3.067-.297 3.982.15 1.606.784 3.632 2.181 3.632 2.181s10.526 1.204 19.033-1.127M78.864 108.104s-8.39 2.758-13.168 12.12",
    "stroke": "#E59788",
    "stroke-width": ".774",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M109.278 112.533s3.38-3.613 7.575-4.662",
    "stroke": "#E4EBF7",
    "stroke-width": "1.085",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M107.375 123.006s9.697-2.745 11.445-.88",
    "stroke": "#E59788",
    "stroke-width": ".774",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M194.605 83.656l3.971-3.886M187.166 90.933l3.736-3.655M191.752 84.207l-4.462-4.56M198.453 91.057l-4.133-4.225M129.256 163.074l3.718-3.718M122.291 170.039l3.498-3.498M126.561 163.626l-4.27-4.27M132.975 170.039l-3.955-3.955",
    "stroke": "#BFCDDD",
    "stroke-width": "2",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M190.156 211.779h-1.604a4.023 4.023 0 0 1-4.011-4.011V175.68a4.023 4.023 0 0 1 4.01-4.01h1.605a4.023 4.023 0 0 1 4.011 4.01v32.088a4.023 4.023 0 0 1-4.01 4.01",
    "fill": "#A3B4C6"
  }, null), createVNode("path", {
    "d": "M237.824 212.977a4.813 4.813 0 0 1-4.813 4.813h-86.636a4.813 4.813 0 0 1 0-9.626h86.636a4.813 4.813 0 0 1 4.813 4.813",
    "fill": "#A3B4C6"
  }, null), createVNode("mask", {
    "fill": "#fff"
  }, null), createVNode("path", {
    "fill": "#A3B4C6",
    "mask": "url(#d)",
    "d": "M154.098 190.096h70.513v-84.617h-70.513z"
  }, null), createVNode("path", {
    "d": "M224.928 190.096H153.78a3.219 3.219 0 0 1-3.208-3.209V167.92a3.219 3.219 0 0 1 3.208-3.21h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.219 3.219 0 0 1-3.21 3.209M224.928 130.832H153.78a3.218 3.218 0 0 1-3.208-3.208v-18.968a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.21v18.967a3.218 3.218 0 0 1-3.21 3.208",
    "fill": "#BFCDDD",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M159.563 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 120.546a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 120.546h-22.461a.802.802 0 0 1-.802-.802v-3.208c0-.443.359-.803.802-.803h22.46c.444 0 .803.36.803.803v3.208c0 .443-.36.802-.802.802",
    "fill": "#FFF",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M224.928 160.464H153.78a3.218 3.218 0 0 1-3.208-3.209v-18.967a3.219 3.219 0 0 1 3.208-3.209h71.148a3.219 3.219 0 0 1 3.209 3.209v18.967a3.218 3.218 0 0 1-3.21 3.209",
    "fill": "#BFCDDD",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M173.455 130.832h49.301M164.984 130.832h6.089M155.952 130.832h6.75M173.837 160.613h49.3M165.365 160.613h6.089M155.57 160.613h6.751",
    "stroke": "#7C90A5",
    "stroke-width": "1.124",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M159.563 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M166.98 151.038a2.407 2.407 0 1 1 0-4.814 2.407 2.407 0 0 1 0 4.814M174.397 151.038a2.407 2.407 0 1 1 .001-4.814 2.407 2.407 0 0 1 0 4.814M222.539 151.038h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802M159.563 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M166.98 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M174.397 179.987a2.407 2.407 0 1 1 0-4.813 2.407 2.407 0 0 1 0 4.813M222.539 179.987h-22.461a.802.802 0 0 1-.802-.802v-3.209c0-.443.359-.802.802-.802h22.46c.444 0 .803.36.803.802v3.209c0 .443-.36.802-.802.802",
    "fill": "#FFF",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M203.04 221.108h-27.372a2.413 2.413 0 0 1-2.406-2.407v-11.448a2.414 2.414 0 0 1 2.406-2.407h27.372a2.414 2.414 0 0 1 2.407 2.407V218.7a2.413 2.413 0 0 1-2.407 2.407",
    "fill": "#BFCDDD",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M177.259 207.217v11.52M201.05 207.217v11.52",
    "stroke": "#A3B4C6",
    "stroke-width": "1.124",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M162.873 267.894a9.422 9.422 0 0 1-9.422-9.422v-14.82a9.423 9.423 0 0 1 18.845 0v14.82a9.423 9.423 0 0 1-9.423 9.422",
    "fill": "#5BA02E",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M171.22 267.83a9.422 9.422 0 0 1-9.422-9.423v-3.438a9.423 9.423 0 0 1 18.845 0v3.438a9.423 9.423 0 0 1-9.422 9.423",
    "fill": "#92C110",
    "mask": "url(#d)"
  }, null), createVNode("path", {
    "d": "M181.31 293.666h-27.712a3.209 3.209 0 0 1-3.209-3.21V269.79a3.209 3.209 0 0 1 3.209-3.21h27.711a3.209 3.209 0 0 1 3.209 3.21v20.668a3.209 3.209 0 0 1-3.209 3.209",
    "fill": "#F2D7AD",
    "mask": "url(#d)"
  }, null)])]);
};
var serverError = ServerError;
var Unauthorized = function Unauthorized2() {
  return createVNode("svg", {
    "width": "251",
    "height": "294"
  }, [createVNode("g", {
    "fill": "none",
    "fill-rule": "evenodd"
  }, [createVNode("path", {
    "d": "M0 129.023v-2.084C0 58.364 55.591 2.774 124.165 2.774h2.085c68.574 0 124.165 55.59 124.165 124.165v2.084c0 68.575-55.59 124.166-124.165 124.166h-2.085C55.591 253.189 0 197.598 0 129.023",
    "fill": "#E4EBF7"
  }, null), createVNode("path", {
    "d": "M41.417 132.92a8.231 8.231 0 1 1-16.38-1.65 8.231 8.231 0 0 1 16.38 1.65",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M38.652 136.36l10.425 5.91M49.989 148.505l-12.58 10.73",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M41.536 161.28a5.636 5.636 0 1 1-11.216-1.13 5.636 5.636 0 0 1 11.216 1.13M59.154 145.261a5.677 5.677 0 1 1-11.297-1.138 5.677 5.677 0 0 1 11.297 1.138M100.36 29.516l29.66-.013a4.562 4.562 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 0 0 .005 9.126M111.705 47.754l29.659-.013a4.563 4.563 0 1 0-.004-9.126l-29.66.013a4.563 4.563 0 1 0 .005 9.126",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M114.066 29.503V29.5l15.698-.007a4.563 4.563 0 1 0 .004 9.126l-15.698.007v-.002a4.562 4.562 0 0 0-.004-9.122M185.405 137.723c-.55 5.455-5.418 9.432-10.873 8.882-5.456-.55-9.432-5.418-8.882-10.873.55-5.455 5.418-9.432 10.873-8.882 5.455.55 9.432 5.418 8.882 10.873",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M180.17 143.772l12.572 7.129M193.841 158.42L178.67 171.36",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "d": "M185.55 171.926a6.798 6.798 0 1 1-13.528-1.363 6.798 6.798 0 0 1 13.527 1.363M204.12 155.285a6.848 6.848 0 1 1-13.627-1.375 6.848 6.848 0 0 1 13.626 1.375",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M152.988 194.074a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0zM225.931 118.217a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM217.09 153.051a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.42 0zM177.84 109.842a2.21 2.21 0 1 1-4.422 0 2.21 2.21 0 0 1 4.421 0zM196.114 94.454a2.21 2.21 0 1 1-4.421 0 2.21 2.21 0 0 1 4.421 0zM202.844 182.523a2.21 2.21 0 1 1-4.42 0 2.21 2.21 0 0 1 4.42 0z",
    "stroke": "#FFF",
    "stroke-width": "2"
  }, null), createVNode("path", {
    "stroke": "#FFF",
    "stroke-width": "2",
    "d": "M215.125 155.262l-1.902 20.075-10.87 5.958M174.601 176.636l-6.322 9.761H156.98l-4.484 6.449M175.874 127.28V111.56M221.51 119.404l-12.77 7.859-15.228-7.86V96.668"
  }, null), createVNode("path", {
    "d": "M180.68 29.32C180.68 13.128 193.806 0 210 0c16.193 0 29.32 13.127 29.32 29.32 0 16.194-13.127 29.322-29.32 29.322-16.193 0-29.32-13.128-29.32-29.321",
    "fill": "#A26EF4"
  }, null), createVNode("path", {
    "d": "M221.45 41.706l-21.563-.125a1.744 1.744 0 0 1-1.734-1.754l.071-12.23a1.744 1.744 0 0 1 1.754-1.734l21.562.125c.964.006 1.74.791 1.735 1.755l-.071 12.229a1.744 1.744 0 0 1-1.754 1.734",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M215.106 29.192c-.015 2.577-2.049 4.654-4.543 4.64-2.494-.014-4.504-2.115-4.489-4.693l.04-6.925c.016-2.577 2.05-4.654 4.543-4.64 2.494.015 4.504 2.116 4.49 4.693l-.04 6.925zm-4.53-14.074a6.877 6.877 0 0 0-6.916 6.837l-.043 7.368a6.877 6.877 0 0 0 13.754.08l.042-7.368a6.878 6.878 0 0 0-6.837-6.917zM167.566 68.367h-3.93a4.73 4.73 0 0 1-4.717-4.717 4.73 4.73 0 0 1 4.717-4.717h3.93a4.73 4.73 0 0 1 4.717 4.717 4.73 4.73 0 0 1-4.717 4.717",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M168.214 248.838a6.611 6.611 0 0 1-6.61-6.611v-66.108a6.611 6.611 0 0 1 13.221 0v66.108a6.611 6.611 0 0 1-6.61 6.61",
    "fill": "#5BA02E"
  }, null), createVNode("path", {
    "d": "M176.147 248.176a6.611 6.611 0 0 1-6.61-6.61v-33.054a6.611 6.611 0 1 1 13.221 0v33.053a6.611 6.611 0 0 1-6.61 6.611",
    "fill": "#92C110"
  }, null), createVNode("path", {
    "d": "M185.994 293.89h-27.376a3.17 3.17 0 0 1-3.17-3.17v-45.887a3.17 3.17 0 0 1 3.17-3.17h27.376a3.17 3.17 0 0 1 3.17 3.17v45.886a3.17 3.17 0 0 1-3.17 3.17",
    "fill": "#F2D7AD"
  }, null), createVNode("path", {
    "d": "M81.972 147.673s6.377-.927 17.566-1.28c11.729-.371 17.57 1.086 17.57 1.086s3.697-3.855.968-8.424c1.278-12.077 5.982-32.827.335-48.273-1.116-1.339-3.743-1.512-7.536-.62-1.337.315-7.147-.149-7.983-.1l-15.311-.347s-3.487-.17-8.035-.508c-1.512-.113-4.227-1.683-5.458-.338-.406.443-2.425 5.669-1.97 16.077l8.635 35.642s-3.141 3.61 1.219 7.085",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M75.768 73.325l-.9-6.397 11.982-6.52s7.302-.118 8.038 1.205c.737 1.324-5.616.993-5.616.993s-1.836 1.388-2.615 2.5c-1.654 2.363-.986 6.471-8.318 5.986-1.708.284-2.57 2.233-2.57 2.233",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M52.44 77.672s14.217 9.406 24.973 14.444c1.061.497-2.094 16.183-11.892 11.811-7.436-3.318-20.162-8.44-21.482-14.496-.71-3.258 2.543-7.643 8.401-11.76M141.862 80.113s-6.693 2.999-13.844 6.876c-3.894 2.11-10.137 4.704-12.33 7.988-6.224 9.314 3.536 11.22 12.947 7.503 6.71-2.651 28.999-12.127 13.227-22.367",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M76.166 66.36l3.06 3.881s-2.783 2.67-6.31 5.747c-7.103 6.195-12.803 14.296-15.995 16.44-3.966 2.662-9.754 3.314-12.177-.118-3.553-5.032.464-14.628 31.422-25.95",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M64.674 85.116s-2.34 8.413-8.912 14.447c.652.548 18.586 10.51 22.144 10.056 5.238-.669 6.417-18.968 1.145-20.531-.702-.208-5.901-1.286-8.853-2.167-.87-.26-1.611-1.71-3.545-.936l-1.98-.869zM128.362 85.826s5.318 1.956 7.325 13.734c-.546.274-17.55 12.35-21.829 7.805-6.534-6.94-.766-17.393 4.275-18.61 4.646-1.121 5.03-1.37 10.23-2.929",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M78.18 94.656s.911 7.41-4.914 13.078",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M87.397 94.68s3.124 2.572 10.263 2.572c7.14 0 9.074-3.437 9.074-3.437",
    "stroke": "#E4EBF7",
    "stroke-width": ".932",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M117.184 68.639l-6.781-6.177s-5.355-4.314-9.223-.893c-3.867 3.422 4.463 2.083 5.653 4.165 1.19 2.082.848 1.143-2.083.446-5.603-1.331-2.082.893 2.975 5.355 2.091 1.845 6.992.955 6.992.955l2.467-3.851z",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M105.282 91.315l-.297-10.937-15.918-.027-.53 10.45c-.026.403.17.788.515.999 2.049 1.251 9.387 5.093 15.799.424.287-.21.443-.554.431-.91",
    "fill": "#FFB594"
  }, null), createVNode("path", {
    "d": "M107.573 74.24c.817-1.147.982-9.118 1.015-11.928a1.046 1.046 0 0 0-.965-1.055l-4.62-.365c-7.71-1.044-17.071.624-18.253 6.346-5.482 5.813-.421 13.244-.421 13.244s1.963 3.566 4.305 6.791c.756 1.041.398-3.731 3.04-5.929 5.524-4.594 15.899-7.103 15.899-7.103",
    "fill": "#5C2552"
  }, null), createVNode("path", {
    "d": "M88.426 83.206s2.685 6.202 11.602 6.522c7.82.28 8.973-7.008 7.434-17.505l-.909-5.483c-6.118-2.897-15.478.54-15.478.54s-.576 2.044-.19 5.504c-2.276 2.066-1.824 5.618-1.824 5.618s-.905-1.922-1.98-2.321c-.86-.32-1.897.089-2.322 1.98-1.04 4.632 3.667 5.145 3.667 5.145",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "stroke": "#DB836E",
    "stroke-width": "1.145",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "d": "M100.843 77.099l1.701-.928-1.015-4.324.674-1.406"
  }, null), createVNode("path", {
    "d": "M105.546 74.092c-.022.713-.452 1.279-.96 1.263-.51-.016-.904-.607-.882-1.32.021-.713.452-1.278.96-1.263.51.016.904.607.882 1.32M97.592 74.349c-.022.713-.452 1.278-.961 1.263-.509-.016-.904-.607-.882-1.32.022-.713.452-1.279.961-1.263.51.016.904.606.882 1.32",
    "fill": "#552950"
  }, null), createVNode("path", {
    "d": "M91.132 86.786s5.269 4.957 12.679 2.327",
    "stroke": "#DB836E",
    "stroke-width": "1.145",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M99.776 81.903s-3.592.232-1.44-2.79c1.59-1.496 4.897-.46 4.897-.46s1.156 3.906-3.457 3.25",
    "fill": "#DB836E"
  }, null), createVNode("path", {
    "d": "M102.88 70.6s2.483.84 3.402.715M93.883 71.975s2.492-1.144 4.778-1.073",
    "stroke": "#5C2552",
    "stroke-width": "1.526",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M86.32 77.374s.961.879 1.458 2.106c-.377.48-1.033 1.152-.236 1.809M99.337 83.719s1.911.151 2.509-.254",
    "stroke": "#DB836E",
    "stroke-width": "1.145",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M87.782 115.821l15.73-3.012M100.165 115.821l10.04-2.008",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M66.508 86.763s-1.598 8.83-6.697 14.078",
    "stroke": "#E4EBF7",
    "stroke-width": "1.114",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M128.31 87.934s3.013 4.121 4.06 11.785",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M64.09 84.816s-6.03 9.912-13.607 9.903",
    "stroke": "#DB836E",
    "stroke-width": ".795",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M112.366 65.909l-.142 5.32s5.993 4.472 11.945 9.202c4.482 3.562 8.888 7.455 10.985 8.662 4.804 2.766 8.9 3.355 11.076 1.808 4.071-2.894 4.373-9.878-8.136-15.263-4.271-1.838-16.144-6.36-25.728-9.73",
    "fill": "#FFC6A0"
  }, null), createVNode("path", {
    "d": "M130.532 85.488s4.588 5.757 11.619 6.214",
    "stroke": "#DB836E",
    "stroke-width": ".75",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M121.708 105.73s-.393 8.564-1.34 13.612",
    "stroke": "#E4EBF7",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M115.784 161.512s-3.57-1.488-2.678-7.14",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M101.52 290.246s4.326 2.057 7.408 1.03c2.842-.948 4.564.673 7.132 1.186 2.57.514 6.925 1.108 11.772-1.269-.104-5.551-6.939-4.01-12.048-6.763-2.582-1.39-3.812-4.757-3.625-8.863h-9.471s-1.402 10.596-1.169 14.68",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M101.496 290.073s2.447 1.281 6.809.658c3.081-.44 3.74.485 7.479 1.039 3.739.554 10.802-.07 11.91-.9.415 1.108-.347 2.077-.347 2.077s-1.523.608-4.847.831c-2.045.137-5.843.293-7.663-.507-1.8-1.385-5.286-1.917-5.77-.243-3.947.958-7.41-.288-7.41-.288l-.16-2.667z",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M108.824 276.19h3.116s-.103 6.751 4.57 8.62c-4.673.624-8.62-2.32-7.686-8.62",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M57.65 272.52s-2.122 7.47-4.518 12.396c-1.811 3.724-4.255 7.548 5.505 7.548 6.698 0 9.02-.483 7.479-6.648-1.541-6.164.268-13.296.268-13.296H57.65z",
    "fill": "#CBD1D1"
  }, null), createVNode("path", {
    "d": "M51.54 290.04s2.111 1.178 6.682 1.178c6.128 0 8.31-1.662 8.31-1.662s.605 1.122-.624 2.18c-1 .862-3.624 1.603-7.444 1.559-4.177-.049-5.876-.57-6.786-1.177-.831-.554-.692-1.593-.138-2.078",
    "fill": "#2B0849"
  }, null), createVNode("path", {
    "d": "M58.533 274.438s.034 1.529-.315 2.95c-.352 1.431-1.087 3.127-1.139 4.17-.058 1.16 4.57 1.592 5.194.035.623-1.559 1.303-6.475 1.927-7.306.622-.831-4.94-2.135-5.667.15",
    "fill": "#A4AABA"
  }, null), createVNode("path", {
    "d": "M100.885 277.015l13.306.092s1.291-54.228 1.843-64.056c.552-9.828 3.756-43.13.997-62.788l-12.48-.64-22.725.776s-.433 3.944-1.19 9.921c-.062.493-.677.838-.744 1.358-.075.582.42 1.347.318 1.956-2.35 14.003-6.343 32.926-8.697 46.425-.116.663-1.227 1.004-1.45 2.677-.04.3.21 1.516.112 1.785-6.836 18.643-10.89 47.584-14.2 61.551l14.528-.014s2.185-8.524 4.008-16.878c2.796-12.817 22.987-84.553 22.987-84.553l3-.517 1.037 46.1s-.223 1.228.334 2.008c.558.782-.556 1.117-.39 2.233l.39 1.784s-.446 7.14-.892 11.826c-.446 4.685-.092 38.954-.092 38.954",
    "fill": "#7BB2F9"
  }, null), createVNode("path", {
    "d": "M77.438 220.434c1.146.094 4.016-2.008 6.916-4.91M107.55 223.931s2.758-1.103 6.069-3.862",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M108.459 220.905s2.759-1.104 6.07-3.863",
    "stroke": "#648BD8",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M76.099 223.557s2.608-.587 6.47-3.346M87.33 150.82c-.27 3.088.297 8.478-4.315 9.073M104.829 149.075s.11 13.936-1.286 14.983c-2.207 1.655-2.975 1.934-2.975 1.934M101.014 149.63s.035 12.81-1.19 24.245M94.93 174.965s7.174-1.655 9.38-1.655M75.671 204.754c-.316 1.55-.64 3.067-.973 4.535 0 0-1.45 1.822-1.003 3.756.446 1.934-.943 2.034-4.96 15.273-1.686 5.559-4.464 18.49-6.313 27.447-.078.38-4.018 18.06-4.093 18.423M77.043 196.743a313.269 313.269 0 0 1-.877 4.729M83.908 151.414l-1.19 10.413s-1.091.148-.496 2.23c.111 1.34-2.66 15.692-5.153 30.267M57.58 272.94h13.238",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null), createVNode("path", {
    "d": "M117.377 147.423s-16.955-3.087-35.7.199c.157 2.501-.002 4.128-.002 4.128s14.607-2.802 35.476-.31c.251-2.342.226-4.017.226-4.017",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M107.511 150.353l.004-4.885a.807.807 0 0 0-.774-.81c-2.428-.092-5.04-.108-7.795-.014a.814.814 0 0 0-.784.81l-.003 4.88c0 .456.371.82.827.808a140.76 140.76 0 0 1 7.688.017.81.81 0 0 0 .837-.806",
    "fill": "#FFF"
  }, null), createVNode("path", {
    "d": "M106.402 149.426l.002-3.06a.64.64 0 0 0-.616-.643 94.135 94.135 0 0 0-5.834-.009.647.647 0 0 0-.626.643l-.001 3.056c0 .36.291.648.651.64 1.78-.04 3.708-.041 5.762.012.36.009.662-.279.662-.64",
    "fill": "#192064"
  }, null), createVNode("path", {
    "d": "M101.485 273.933h12.272M102.652 269.075c.006 3.368.04 5.759.11 6.47M102.667 263.125c-.009 1.53-.015 2.98-.016 4.313M102.204 174.024l.893 44.402s.669 1.561-.224 2.677c-.892 1.116 2.455.67.893 2.231-1.562 1.562.893 1.116 0 3.347-.592 1.48-.988 20.987-1.09 34.956",
    "stroke": "#648BD8",
    "stroke-width": "1.051",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  }, null)])]);
};
var unauthorized = Unauthorized;
var IconMap = {
  success: CheckCircleFilled$1,
  error: CloseCircleFilled$1,
  info: ExclamationCircleFilled$1,
  warning: WarningFilled$1
};
var ExceptionMap = {
  "404": noFound,
  "500": serverError,
  "403": unauthorized
};
var ExceptionStatus = Object.keys(ExceptionMap);
var resultProps = {
  prefixCls: PropsTypes.string,
  icon: PropsTypes.any,
  status: PropsTypes.oneOf(tuple("success", "error", "info", "warning", "404", "403", "500")).def("info"),
  title: PropsTypes.any,
  subTitle: PropsTypes.any,
  extra: PropsTypes.any
};
var renderIcon = function renderIcon2(prefixCls2, _ref) {
  var status = _ref.status, icon = _ref.icon;
  if (ExceptionStatus.includes("".concat(status))) {
    var SVGComponent = ExceptionMap[status];
    return createVNode("div", {
      "class": "".concat(prefixCls2, "-icon ").concat(prefixCls2, "-image")
    }, [createVNode(SVGComponent, null, null)]);
  }
  var IconComponent = IconMap[status];
  var iconNode = icon || createVNode(IconComponent, null, null);
  return createVNode("div", {
    "class": "".concat(prefixCls2, "-icon")
  }, [iconNode]);
};
var renderExtra = function renderExtra2(prefixCls2, extra) {
  return extra && createVNode("div", {
    "class": "".concat(prefixCls2, "-extra")
  }, [extra]);
};
var Result = defineComponent({
  name: "AResult",
  props: resultProps,
  slots: ["title", "subTitle", "icon", "extra"],
  setup: function setup120(props2, _ref2) {
    var slots = _ref2.slots;
    var _useConfigInject = useConfigInject("result", props2), prefixCls2 = _useConfigInject.prefixCls, direction = _useConfigInject.direction;
    var className = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-").concat(props2.status), _defineProperty$U({}, "".concat(prefixCls2.value, "-rtl"), direction.value === "rtl"));
    });
    return function() {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      var title2 = (_a = props2.title) !== null && _a !== void 0 ? _a : (_b = slots.title) === null || _b === void 0 ? void 0 : _b.call(slots);
      var subTitle = (_c = props2.subTitle) !== null && _c !== void 0 ? _c : (_d = slots.subTitle) === null || _d === void 0 ? void 0 : _d.call(slots);
      var icon = (_e = props2.icon) !== null && _e !== void 0 ? _e : (_f = slots.icon) === null || _f === void 0 ? void 0 : _f.call(slots);
      var extra = (_g = props2.extra) !== null && _g !== void 0 ? _g : (_h = slots.extra) === null || _h === void 0 ? void 0 : _h.call(slots);
      var pre = prefixCls2.value;
      return createVNode("div", {
        "class": className.value
      }, [renderIcon(pre, {
        status: props2.status,
        icon
      }), createVNode("div", {
        "class": "".concat(pre, "-title")
      }, [title2]), subTitle && createVNode("div", {
        "class": "".concat(pre, "-subtitle")
      }, [subTitle]), renderExtra(pre, extra), slots.default && createVNode("div", {
        "class": "".concat(pre, "-content")
      }, [slots.default()])]);
    };
  }
});
Result.PRESENTED_IMAGE_403 = ExceptionMap[403];
Result.PRESENTED_IMAGE_404 = ExceptionMap[404];
Result.PRESENTED_IMAGE_500 = ExceptionMap[500];
Result.install = function(app) {
  app.component(Result.name, Result);
  return app;
};
var Result$1 = Result;
var SkeletonButton = defineComponent({
  name: "ASkeletonButton",
  props: _extends$1(_extends$1({}, skeletonElementProps()), {
    size: PropsTypes.oneOf(tuple("large", "small", "default"))
  }),
  setup: function setup121(props2) {
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls;
    var cls = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-element"), _defineProperty$U({}, "".concat(prefixCls2.value, "-active"), props2.active));
    });
    return function() {
      return createVNode("div", {
        "class": cls.value
      }, [createVNode(Element$2, _objectSpread2$2(_objectSpread2$2({}, props2), {}, {
        "prefixCls": "".concat(prefixCls2.value, "-button")
      }), null)]);
    };
  }
});
var SkeletonButton$1 = SkeletonButton;
var SkeletonInput = defineComponent({
  name: "ASkeletonInput",
  props: _extends$1(_extends$1({}, omit$2(skeletonElementProps(), "shape")), {
    size: PropsTypes.oneOf(tuple("large", "small", "default"))
  }),
  setup: function setup122(props2) {
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls;
    var cls = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-element"), _defineProperty$U({}, "".concat(prefixCls2.value, "-active"), props2.active));
    });
    return function() {
      return createVNode("div", {
        "class": cls.value
      }, [createVNode(Element$2, _objectSpread2$2(_objectSpread2$2({}, props2), {}, {
        "prefixCls": "".concat(prefixCls2.value, "-input")
      }), null)]);
    };
  }
});
var SkeletonInput$1 = SkeletonInput;
var path = "M365.714286 329.142857q0 45.714286-32.036571 77.677714t-77.677714 32.036571-77.677714-32.036571-32.036571-77.677714 32.036571-77.677714 77.677714-32.036571 77.677714 32.036571 32.036571 77.677714zM950.857143 548.571429l0 256-804.571429 0 0-109.714286 182.857143-182.857143 91.428571 91.428571 292.571429-292.571429zM1005.714286 146.285714l-914.285714 0q-7.460571 0-12.873143 5.412571t-5.412571 12.873143l0 694.857143q0 7.460571 5.412571 12.873143t12.873143 5.412571l914.285714 0q7.460571 0 12.873143-5.412571t5.412571-12.873143l0-694.857143q0-7.460571-5.412571-12.873143t-12.873143-5.412571zM1097.142857 164.571429l0 694.857143q0 37.741714-26.843429 64.585143t-64.585143 26.843429l-914.285714 0q-37.741714 0-64.585143-26.843429t-26.843429-64.585143l0-694.857143q0-37.741714 26.843429-64.585143t64.585143-26.843429l914.285714 0q37.741714 0 64.585143 26.843429t26.843429 64.585143z";
var SkeletonImage = defineComponent({
  name: "ASkeletonImage",
  props: skeletonElementProps(),
  setup: function setup123(props2) {
    var _useConfigInject = useConfigInject("skeleton", props2), prefixCls2 = _useConfigInject.prefixCls;
    var cls = computed(function() {
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-element"));
    });
    return function() {
      return createVNode("div", {
        "class": cls.value
      }, [createVNode("div", {
        "class": "".concat(prefixCls2.value, "-image")
      }, [createVNode("svg", {
        "viewBox": "0 0 1098 1024",
        "xmlns": "http://www.w3.org/2000/svg",
        "class": "".concat(prefixCls2.value, "-image-svg")
      }, [createVNode("path", {
        "d": path,
        "class": "".concat(prefixCls2.value, "-image-path")
      }, null)])])]);
    };
  }
});
var SkeletonImage$1 = SkeletonImage;
Skeleton$1.Button = SkeletonButton$1;
Skeleton$1.Avatar = SkeletonAvatar$1;
Skeleton$1.Input = SkeletonInput$1;
Skeleton$1.Image = SkeletonImage$1;
Skeleton$1.install = function(app) {
  app.component(Skeleton$1.name, Skeleton$1);
  app.component(Skeleton$1.Button.name, SkeletonButton$1);
  app.component(Skeleton$1.Avatar.name, SkeletonAvatar$1);
  app.component(Skeleton$1.Input.name, SkeletonInput$1);
  app.component(Skeleton$1.Image.name, SkeletonImage$1);
  return app;
};
var Track = function Track3(_2, _ref) {
  var _ref2, _ref3;
  var attrs = _ref.attrs;
  var included = attrs.included, vertical = attrs.vertical, offset4 = attrs.offset, length = attrs.length, reverse = attrs.reverse, style3 = attrs.style, className = attrs.class;
  var positonStyle = vertical ? (_ref2 = {}, _defineProperty$U(_ref2, reverse ? "top" : "bottom", "".concat(offset4, "%")), _defineProperty$U(_ref2, reverse ? "bottom" : "top", "auto"), _defineProperty$U(_ref2, "height", "".concat(length, "%")), _ref2) : (_ref3 = {}, _defineProperty$U(_ref3, reverse ? "right" : "left", "".concat(offset4, "%")), _defineProperty$U(_ref3, reverse ? "left" : "right", "auto"), _defineProperty$U(_ref3, "width", "".concat(length, "%")), _ref3);
  var elStyle = _extends$1(_extends$1({}, style3), positonStyle);
  return included ? createVNode("div", {
    "class": className,
    "style": elStyle
  }, null) : null;
};
Track.inheritAttrs = false;
var Track$1 = Track;
var calcPoints = function calcPoints2(vertical, marks, dots, step, min4, max4) {
  warning$4(dots ? step > 0 : true, "Slider", "`Slider[step]` should be a positive number in order to make Slider[dots] work.");
  var points = Object.keys(marks).map(parseFloat).sort(function(a2, b2) {
    return a2 - b2;
  });
  if (dots && step) {
    for (var i2 = min4; i2 <= max4; i2 += step) {
      if (points.indexOf(i2) === -1) {
        points.push(i2);
      }
    }
  }
  return points;
};
var Steps$3 = function Steps2(_2, _ref) {
  var attrs = _ref.attrs;
  var prefixCls2 = attrs.prefixCls, vertical = attrs.vertical, reverse = attrs.reverse, marks = attrs.marks, dots = attrs.dots, step = attrs.step, included = attrs.included, lowerBound = attrs.lowerBound, upperBound = attrs.upperBound, max4 = attrs.max, min4 = attrs.min, dotStyle = attrs.dotStyle, activeDotStyle = attrs.activeDotStyle;
  var range2 = max4 - min4;
  var elements = calcPoints(vertical, marks, dots, step, min4, max4).map(function(point) {
    var _classNames;
    var offset4 = "".concat(Math.abs(point - min4) / range2 * 100, "%");
    var isActived = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
    var style3 = vertical ? _extends$1(_extends$1({}, dotStyle), _defineProperty$U({}, reverse ? "top" : "bottom", offset4)) : _extends$1(_extends$1({}, dotStyle), _defineProperty$U({}, reverse ? "right" : "left", offset4));
    if (isActived) {
      style3 = _extends$1(_extends$1({}, style3), activeDotStyle);
    }
    var pointClassName = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-dot"), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-dot-active"), isActived), _defineProperty$U(_classNames, "".concat(prefixCls2, "-dot-reverse"), reverse), _classNames));
    return createVNode("span", {
      "class": pointClassName,
      "style": style3,
      "key": point
    }, null);
  });
  return createVNode("div", {
    "class": "".concat(prefixCls2, "-step")
  }, [elements]);
};
Steps$3.inheritAttrs = false;
var Steps$4 = Steps$3;
var Marks = function Marks2(_2, _ref) {
  var attrs = _ref.attrs;
  var className = attrs.class, vertical = attrs.vertical, reverse = attrs.reverse, marks = attrs.marks, included = attrs.included, upperBound = attrs.upperBound, lowerBound = attrs.lowerBound, max4 = attrs.max, min4 = attrs.min, onClickLabel = attrs.onClickLabel;
  var marksKeys = Object.keys(marks);
  var range2 = max4 - min4;
  var elements = marksKeys.map(parseFloat).sort(function(a2, b2) {
    return a2 - b2;
  }).map(function(point) {
    var _classNames;
    var markPoint = typeof marks[point] === "function" ? marks[point](h) : marks[point];
    var markPointIsObject = _typeof$2(markPoint) === "object" && !isValidElement(markPoint);
    var markLabel = markPointIsObject ? markPoint.label : markPoint;
    if (!markLabel && markLabel !== 0) {
      return null;
    }
    var isActive = !included && point === upperBound || included && point <= upperBound && point >= lowerBound;
    var markClassName = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(className, "-text"), true), _defineProperty$U(_classNames, "".concat(className, "-text-active"), isActive), _classNames));
    var bottomStyle = _defineProperty$U({
      marginBottom: "-50%"
    }, reverse ? "top" : "bottom", "".concat((point - min4) / range2 * 100, "%"));
    var leftStyle = _defineProperty$U({
      transform: "translateX(-50%)",
      msTransform: "translateX(-50%)"
    }, reverse ? "right" : "left", reverse ? "".concat((point - min4 / 4) / range2 * 100, "%") : "".concat((point - min4) / range2 * 100, "%"));
    var style3 = vertical ? bottomStyle : leftStyle;
    var markStyle = markPointIsObject ? _extends$1(_extends$1({}, style3), markPoint.style) : style3;
    var touchEvents = _defineProperty$U({}, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", function(e2) {
      return onClickLabel(e2, point);
    });
    return createVNode("span", _objectSpread2$2({
      "class": markClassName,
      "style": markStyle,
      "key": point,
      "onMousedown": function onMousedown2(e2) {
        return onClickLabel(e2, point);
      }
    }, touchEvents), [markLabel]);
  });
  return createVNode("div", {
    "class": className
  }, [elements]);
};
Marks.inheritAttrs = false;
var Marks$1 = Marks;
var VcHandle = defineComponent({
  name: "Handle",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    vertical: PropsTypes.looseBool,
    offset: PropsTypes.number,
    disabled: PropsTypes.looseBool,
    min: PropsTypes.number,
    max: PropsTypes.number,
    value: PropsTypes.number,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    reverse: PropsTypes.looseBool
  },
  data: function data58() {
    return {
      clickFocused: false
    };
  },
  mounted: function mounted31() {
    this.onMouseUpListener = addEventListenerWrap(document, "mouseup", this.handleMouseUp);
  },
  beforeUnmount: function beforeUnmount22() {
    if (this.onMouseUpListener) {
      this.onMouseUpListener.remove();
    }
  },
  methods: {
    setHandleRef: function setHandleRef(node) {
      this.handle = node;
    },
    setClickFocus: function setClickFocus(focused) {
      this.setState({
        clickFocused: focused
      });
    },
    handleMouseUp: function handleMouseUp() {
      if (document.activeElement === this.handle) {
        this.setClickFocus(true);
      }
    },
    handleBlur: function handleBlur3(e2) {
      this.setClickFocus(false);
      this.__emit("blur", e2);
    },
    handleKeyDown: function handleKeyDown6() {
      this.setClickFocus(false);
    },
    clickFocus: function clickFocus() {
      this.setClickFocus(true);
      this.focus();
    },
    focus: function focus20() {
      this.handle.focus();
    },
    blur: function blur17() {
      this.handle.blur();
    },
    handleMousedown: function handleMousedown(e2) {
      this.focus();
      this.__emit("mousedown", e2);
    }
  },
  render: function render114() {
    var _ref, _ref2;
    var _getOptionProps = getOptionProps(this), prefixCls2 = _getOptionProps.prefixCls, vertical = _getOptionProps.vertical, reverse = _getOptionProps.reverse, offset4 = _getOptionProps.offset, disabled = _getOptionProps.disabled, min4 = _getOptionProps.min, max4 = _getOptionProps.max, value26 = _getOptionProps.value, tabindex = _getOptionProps.tabindex;
    var className = classNames(this.$attrs.class, _defineProperty$U({}, "".concat(prefixCls2, "-handle-click-focused"), this.clickFocused));
    var positionStyle = vertical ? (_ref = {}, _defineProperty$U(_ref, reverse ? "top" : "bottom", "".concat(offset4, "%")), _defineProperty$U(_ref, reverse ? "bottom" : "top", "auto"), _defineProperty$U(_ref, "transform", "translateY(+50%)"), _ref) : (_ref2 = {}, _defineProperty$U(_ref2, reverse ? "right" : "left", "".concat(offset4, "%")), _defineProperty$U(_ref2, reverse ? "left" : "right", "auto"), _defineProperty$U(_ref2, "transform", "translateX(".concat(reverse ? "+" : "-", "50%)")), _ref2);
    var ariaProps = {
      "aria-valuemin": min4,
      "aria-valuemax": max4,
      "aria-valuenow": value26,
      "aria-disabled": !!disabled
    };
    var elStyle = _extends$1(_extends$1({}, this.$attrs.style), positionStyle);
    var _tabIndex = tabindex || 0;
    if (disabled || tabindex === null) {
      _tabIndex = null;
    }
    var handleProps = _extends$1(_extends$1(_extends$1(_extends$1({}, this.$attrs), {
      role: "slider",
      tabindex: _tabIndex
    }), ariaProps), {
      class: className,
      onBlur: this.handleBlur,
      onKeydown: this.handleKeyDown,
      onMousedown: this.handleMousedown,
      ref: this.setHandleRef,
      style: elStyle
    });
    return createVNode("div", handleProps, null);
  }
});
function isEventFromHandle(e2, handles) {
  try {
    return Object.keys(handles).some(function(key2) {
      return e2.target === findDOMNode(handles[key2]) || e2.target === handles[key2];
    });
  } catch (error3) {
    return false;
  }
}
function isValueOutOfRange(value26, _ref) {
  var min4 = _ref.min, max4 = _ref.max;
  return value26 < min4 || value26 > max4;
}
function isNotTouchEvent(e2) {
  return e2.touches.length > 1 || e2.type.toLowerCase() === "touchend" && e2.touches.length > 0;
}
function getClosestPoint(val, _ref2) {
  var marks = _ref2.marks, step = _ref2.step, min4 = _ref2.min, max4 = _ref2.max;
  var points = Object.keys(marks).map(parseFloat);
  if (step !== null) {
    var base = Math.pow(10, getPrecision(step));
    var maxSteps = Math.floor((max4 * base - min4 * base) / (step * base));
    var steps = Math.min((val - min4) / step, maxSteps);
    var closestStep = Math.round(steps) * step + min4;
    points.push(closestStep);
  }
  var diffs = points.map(function(point) {
    return Math.abs(val - point);
  });
  return points[diffs.indexOf(Math.min.apply(Math, _toConsumableArray(diffs)))];
}
function getPrecision(step) {
  var stepString = step.toString();
  var precision = 0;
  if (stepString.indexOf(".") >= 0) {
    precision = stepString.length - stepString.indexOf(".") - 1;
  }
  return precision;
}
function getMousePosition(vertical, e2) {
  var zoom = 1;
  if (window.visualViewport) {
    zoom = +(window.visualViewport.width / document.body.getBoundingClientRect().width).toFixed(2);
  }
  return (vertical ? e2.clientY : e2.pageX) / zoom;
}
function getTouchPosition(vertical, e2) {
  var zoom = 1;
  if (window.visualViewport) {
    zoom = +(window.visualViewport.width / document.body.getBoundingClientRect().width).toFixed(2);
  }
  return (vertical ? e2.touches[0].clientY : e2.touches[0].pageX) / zoom;
}
function getHandleCenterPosition(vertical, handle) {
  var coords = handle.getBoundingClientRect();
  return vertical ? coords.top + coords.height * 0.5 : window.pageXOffset + coords.left + coords.width * 0.5;
}
function ensureValueInRange(val, _ref3) {
  var max4 = _ref3.max, min4 = _ref3.min;
  if (val <= min4) {
    return min4;
  }
  if (val >= max4) {
    return max4;
  }
  return val;
}
function ensureValuePrecision(val, props2) {
  var step = props2.step;
  var closestPoint = isFinite(getClosestPoint(val, props2)) ? getClosestPoint(val, props2) : 0;
  return step === null ? closestPoint : parseFloat(closestPoint.toFixed(getPrecision(step)));
}
function pauseEvent(e2) {
  e2.stopPropagation();
  e2.preventDefault();
}
function calculateNextValue(func, value26, props2) {
  var operations = {
    increase: function increase(a2, b2) {
      return a2 + b2;
    },
    decrease: function decrease(a2, b2) {
      return a2 - b2;
    }
  };
  var indexToGet = operations[func](Object.keys(props2.marks).indexOf(JSON.stringify(value26)), 1);
  var keyToGet = Object.keys(props2.marks)[indexToGet];
  if (props2.step) {
    return operations[func](value26, props2.step);
  } else if (!!Object.keys(props2.marks).length && !!props2.marks[keyToGet]) {
    return props2.marks[keyToGet];
  }
  return value26;
}
function getKeyboardValueMutator(e2, vertical, reverse) {
  var increase = "increase";
  var decrease = "decrease";
  var method3 = increase;
  switch (e2.keyCode) {
    case KeyCode$2.UP:
      method3 = vertical && reverse ? decrease : increase;
      break;
    case KeyCode$2.RIGHT:
      method3 = !vertical && reverse ? decrease : increase;
      break;
    case KeyCode$2.DOWN:
      method3 = vertical && reverse ? increase : decrease;
      break;
    case KeyCode$2.LEFT:
      method3 = !vertical && reverse ? increase : decrease;
      break;
    case KeyCode$2.END:
      return function(value26, props2) {
        return props2.max;
      };
    case KeyCode$2.HOME:
      return function(value26, props2) {
        return props2.min;
      };
    case KeyCode$2.PAGE_UP:
      return function(value26, props2) {
        return value26 + props2.step * 2;
      };
    case KeyCode$2.PAGE_DOWN:
      return function(value26, props2) {
        return value26 - props2.step * 2;
      };
    default:
      return void 0;
  }
  return function(value26, props2) {
    return calculateNextValue(method3, value26, props2);
  };
}
var __rest$g = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$9() {
}
function createSlider(Component) {
  var propTypes2 = {
    min: PropsTypes.number,
    max: PropsTypes.number,
    step: PropsTypes.number,
    marks: PropsTypes.object,
    included: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    handle: PropsTypes.func,
    dots: PropsTypes.looseBool,
    vertical: PropsTypes.looseBool,
    reverse: PropsTypes.looseBool,
    minimumTrackStyle: PropsTypes.object,
    maximumTrackStyle: PropsTypes.object,
    handleStyle: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.arrayOf(PropsTypes.object)]),
    trackStyle: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.arrayOf(PropsTypes.object)]),
    railStyle: PropsTypes.object,
    dotStyle: PropsTypes.object,
    activeDotStyle: PropsTypes.object,
    autofocus: PropsTypes.looseBool
  };
  return defineComponent({
    name: "CreateSlider",
    mixins: [BaseMixin, Component],
    inheritAttrs: false,
    props: initDefaultProps$2(propTypes2, {
      prefixCls: "rc-slider",
      min: 0,
      max: 100,
      step: 1,
      marks: {},
      included: true,
      disabled: false,
      dots: false,
      vertical: false,
      reverse: false,
      trackStyle: [{}],
      handleStyle: [{}],
      railStyle: {},
      dotStyle: {},
      activeDotStyle: {}
    }),
    data: function data80() {
      var step = this.step, max4 = this.max, min4 = this.min;
      var isPointDiffEven = isFinite(max4 - min4) ? (max4 - min4) % step === 0 : true;
      warning$4(step && Math.floor(step) === step ? isPointDiffEven : true, "Slider", "Slider[max] - Slider[min] (%s) should be a multiple of Slider[step] (%s)", max4 - min4, step);
      this.handlesRefs = {};
      return {};
    },
    mounted: function mounted45() {
      var _this = this;
      this.$nextTick(function() {
        _this.document = _this.sliderRef && _this.sliderRef.ownerDocument;
        var autofocus = _this.autofocus, disabled = _this.disabled;
        if (autofocus && !disabled) {
          _this.focus();
        }
      });
    },
    beforeUnmount: function beforeUnmount32() {
      var _this2 = this;
      this.$nextTick(function() {
        _this2.removeDocumentEvents();
      });
    },
    methods: {
      defaultHandle: function defaultHandle(_a) {
        var index2 = _a.index;
        _a.directives;
        var className = _a.className, style3 = _a.style, restProps = __rest$g(_a, ["index", "directives", "className", "style"]);
        delete restProps.dragging;
        if (restProps.value === null) {
          return null;
        }
        var handleProps = _extends$1(_extends$1({}, restProps), {
          class: className,
          style: style3,
          key: index2
        });
        return createVNode(VcHandle, handleProps, null);
      },
      onMouseDown: function onMouseDown3(e2) {
        if (e2.button !== 0) {
          return;
        }
        var isVertical2 = this.vertical;
        var position = getMousePosition(isVertical2, e2);
        if (!isEventFromHandle(e2, this.handlesRefs)) {
          this.dragOffset = 0;
        } else {
          var handlePosition = getHandleCenterPosition(isVertical2, e2.target);
          this.dragOffset = position - handlePosition;
          position = handlePosition;
        }
        this.removeDocumentEvents();
        this.onStart(position);
        this.addDocumentMouseEvents();
        pauseEvent(e2);
      },
      onTouchStart: function onTouchStart2(e2) {
        if (isNotTouchEvent(e2))
          return;
        var isVertical2 = this.vertical;
        var position = getTouchPosition(isVertical2, e2);
        if (!isEventFromHandle(e2, this.handlesRefs)) {
          this.dragOffset = 0;
        } else {
          var handlePosition = getHandleCenterPosition(isVertical2, e2.target);
          this.dragOffset = position - handlePosition;
          position = handlePosition;
        }
        this.onStart(position);
        this.addDocumentTouchEvents();
        pauseEvent(e2);
      },
      onFocus: function onFocus6(e2) {
        var vertical = this.vertical;
        if (isEventFromHandle(e2, this.handlesRefs)) {
          var handlePosition = getHandleCenterPosition(vertical, e2.target);
          this.dragOffset = 0;
          this.onStart(handlePosition);
          pauseEvent(e2);
          this.__emit("focus", e2);
        }
      },
      onBlur: function onBlur7(e2) {
        this.onEnd();
        this.__emit("blur", e2);
      },
      onMouseUp: function onMouseUp3() {
        if (this.handlesRefs[this.prevMovedHandleIndex]) {
          this.handlesRefs[this.prevMovedHandleIndex].clickFocus();
        }
      },
      onMouseMove: function onMouseMove3(e2) {
        if (!this.sliderRef) {
          this.onEnd();
          return;
        }
        var position = getMousePosition(this.vertical, e2);
        this.onMove(e2, position - this.dragOffset);
      },
      onTouchMove: function onTouchMove2(e2) {
        if (isNotTouchEvent(e2) || !this.sliderRef) {
          this.onEnd();
          return;
        }
        var position = getTouchPosition(this.vertical, e2);
        this.onMove(e2, position - this.dragOffset);
      },
      onKeyDown: function onKeyDown14(e2) {
        if (this.sliderRef && isEventFromHandle(e2, this.handlesRefs)) {
          this.onKeyboard(e2);
        }
      },
      onClickMarkLabel: function onClickMarkLabel(e2, value26) {
        var _this3 = this;
        e2.stopPropagation();
        this.onChange({
          sValue: value26
        });
        this.setState({
          sValue: value26
        }, function() {
          return _this3.onEnd(true);
        });
      },
      getSliderStart: function getSliderStart() {
        var slider = this.sliderRef;
        var vertical = this.vertical, reverse = this.reverse;
        var rect = slider.getBoundingClientRect();
        if (vertical) {
          return reverse ? rect.bottom : rect.top;
        }
        return window.pageXOffset + (reverse ? rect.right : rect.left);
      },
      getSliderLength: function getSliderLength() {
        var slider = this.sliderRef;
        if (!slider) {
          return 0;
        }
        var coords = slider.getBoundingClientRect();
        return this.vertical ? coords.height : coords.width;
      },
      addDocumentTouchEvents: function addDocumentTouchEvents() {
        this.onTouchMoveListener = addEventListenerWrap(this.document, "touchmove", this.onTouchMove);
        this.onTouchUpListener = addEventListenerWrap(this.document, "touchend", this.onEnd);
      },
      addDocumentMouseEvents: function addDocumentMouseEvents() {
        this.onMouseMoveListener = addEventListenerWrap(this.document, "mousemove", this.onMouseMove);
        this.onMouseUpListener = addEventListenerWrap(this.document, "mouseup", this.onEnd);
      },
      removeDocumentEvents: function removeDocumentEvents() {
        this.onTouchMoveListener && this.onTouchMoveListener.remove();
        this.onTouchUpListener && this.onTouchUpListener.remove();
        this.onMouseMoveListener && this.onMouseMoveListener.remove();
        this.onMouseUpListener && this.onMouseUpListener.remove();
      },
      focus: function focus27() {
        if (!this.disabled) {
          this.handlesRefs[0].focus();
        }
      },
      blur: function blur24() {
        var _this4 = this;
        if (!this.disabled) {
          Object.keys(this.handlesRefs).forEach(function(key2) {
            if (_this4.handlesRefs[key2] && _this4.handlesRefs[key2].blur) {
              _this4.handlesRefs[key2].blur();
            }
          });
        }
      },
      calcValue: function calcValue(offset4) {
        var vertical = this.vertical, min4 = this.min, max4 = this.max;
        var ratio = Math.abs(Math.max(offset4, 0) / this.getSliderLength());
        var value26 = vertical ? (1 - ratio) * (max4 - min4) + min4 : ratio * (max4 - min4) + min4;
        return value26;
      },
      calcValueByPos: function calcValueByPos(position) {
        var sign2 = this.reverse ? -1 : 1;
        var pixelOffset = sign2 * (position - this.getSliderStart());
        var nextValue = this.trimAlignValue(this.calcValue(pixelOffset));
        return nextValue;
      },
      calcOffset: function calcOffset(value26) {
        var min4 = this.min, max4 = this.max;
        var ratio = (value26 - min4) / (max4 - min4);
        return ratio * 100;
      },
      saveSlider: function saveSlider2(slider) {
        this.sliderRef = slider;
      },
      saveHandle: function saveHandle(index2, handle) {
        this.handlesRefs[index2] = handle;
      }
    },
    render: function render166() {
      var _classNames;
      var prefixCls2 = this.prefixCls, marks = this.marks, dots = this.dots, step = this.step, included = this.included, disabled = this.disabled, vertical = this.vertical, reverse = this.reverse, min4 = this.min, max4 = this.max, maximumTrackStyle = this.maximumTrackStyle, railStyle = this.railStyle, dotStyle = this.dotStyle, activeDotStyle = this.activeDotStyle;
      var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style, id2 = _this$$attrs.id;
      var _this$renderSlider = this.renderSlider(), tracks = _this$renderSlider.tracks, handles = _this$renderSlider.handles;
      var sliderClassName = classNames(prefixCls2, className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-with-marks"), Object.keys(marks).length), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty$U(_classNames, "".concat(prefixCls2, "-vertical"), vertical), _classNames));
      var markProps = {
        vertical,
        marks,
        included,
        lowerBound: this.getLowerBound(),
        upperBound: this.getUpperBound(),
        max: max4,
        min: min4,
        reverse,
        class: "".concat(prefixCls2, "-mark"),
        onClickLabel: disabled ? noop$9 : this.onClickMarkLabel
      };
      var touchEvents = _defineProperty$U({}, supportsPassive$1 ? "onTouchstartPassive" : "onTouchstart", disabled ? noop$9 : this.onTouchStart);
      return createVNode("div", _objectSpread2$2(_objectSpread2$2({
        "id": id2,
        "ref": this.saveSlider,
        "tabindex": "-1",
        "class": sliderClassName
      }, touchEvents), {}, {
        "onMousedown": disabled ? noop$9 : this.onMouseDown,
        "onMouseup": disabled ? noop$9 : this.onMouseUp,
        "onKeydown": disabled ? noop$9 : this.onKeyDown,
        "onFocus": disabled ? noop$9 : this.onFocus,
        "onBlur": disabled ? noop$9 : this.onBlur,
        "style": style3
      }), [createVNode("div", {
        "class": "".concat(prefixCls2, "-rail"),
        "style": _extends$1(_extends$1({}, maximumTrackStyle), railStyle)
      }, null), tracks, createVNode(Steps$4, {
        "prefixCls": prefixCls2,
        "vertical": vertical,
        "reverse": reverse,
        "marks": marks,
        "dots": dots,
        "step": step,
        "included": included,
        "lowerBound": this.getLowerBound(),
        "upperBound": this.getUpperBound(),
        "max": max4,
        "min": min4,
        "dotStyle": dotStyle,
        "activeDotStyle": activeDotStyle
      }, null), handles, createVNode(Marks$1, markProps, null), getSlot(this)]);
    }
  });
}
var Slider$1 = defineComponent({
  name: "Slider",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    defaultValue: PropsTypes.number,
    value: PropsTypes.number,
    disabled: PropsTypes.looseBool,
    autofocus: PropsTypes.looseBool,
    tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string]),
    reverse: PropsTypes.looseBool,
    min: PropsTypes.number,
    max: PropsTypes.number
  },
  data: function data59() {
    var defaultValue = this.defaultValue !== void 0 ? this.defaultValue : this.min;
    var value26 = this.value !== void 0 ? this.value : defaultValue;
    return {
      sValue: this.trimAlignValue(value26),
      dragging: false
    };
  },
  watch: {
    value: {
      handler: function handler3(val) {
        this.setChangeValue(val);
      },
      deep: true
    },
    min: function min2() {
      var sValue = this.sValue;
      this.setChangeValue(sValue);
    },
    max: function max2() {
      var sValue = this.sValue;
      this.setChangeValue(sValue);
    }
  },
  methods: {
    setChangeValue: function setChangeValue(value26) {
      var newValue = value26 !== void 0 ? value26 : this.sValue;
      var nextValue = this.trimAlignValue(newValue, this.$props);
      if (nextValue === this.sValue)
        return;
      this.setState({
        sValue: nextValue
      });
      if (isValueOutOfRange(newValue, this.$props)) {
        this.__emit("change", nextValue);
      }
    },
    onChange: function onChange5(state2) {
      var isNotControlled = !hasProp(this, "value");
      var nextState = state2.sValue > this.max ? _extends$1(_extends$1({}, state2), {
        sValue: this.max
      }) : state2;
      if (isNotControlled) {
        this.setState(nextState);
      }
      var changedValue = nextState.sValue;
      this.__emit("change", changedValue);
    },
    onStart: function onStart(position) {
      this.setState({
        dragging: true
      });
      var sValue = this.sValue;
      this.__emit("beforeChange", sValue);
      var value26 = this.calcValueByPos(position);
      this.startValue = value26;
      this.startPosition = position;
      if (value26 === sValue)
        return;
      this.prevMovedHandleIndex = 0;
      this.onChange({
        sValue: value26
      });
    },
    onEnd: function onEnd(force) {
      var dragging = this.dragging;
      this.removeDocumentEvents();
      if (dragging || force) {
        this.__emit("afterChange", this.sValue);
      }
      this.setState({
        dragging: false
      });
    },
    onMove: function onMove(e2, position) {
      pauseEvent(e2);
      var sValue = this.sValue;
      var value26 = this.calcValueByPos(position);
      if (value26 === sValue)
        return;
      this.onChange({
        sValue: value26
      });
    },
    onKeyboard: function onKeyboard(e2) {
      var _this$$props = this.$props, reverse = _this$$props.reverse, vertical = _this$$props.vertical;
      var valueMutator = getKeyboardValueMutator(e2, vertical, reverse);
      if (valueMutator) {
        pauseEvent(e2);
        var sValue = this.sValue;
        var mutatedValue = valueMutator(sValue, this.$props);
        var value26 = this.trimAlignValue(mutatedValue);
        if (value26 === sValue)
          return;
        this.onChange({
          sValue: value26
        });
        this.__emit("afterChange", value26);
        this.onEnd();
      }
    },
    getLowerBound: function getLowerBound() {
      return this.min;
    },
    getUpperBound: function getUpperBound() {
      return this.sValue;
    },
    trimAlignValue: function trimAlignValue(v2) {
      var nextProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (v2 === null) {
        return null;
      }
      var mergedProps = _extends$1(_extends$1({}, this.$props), nextProps);
      var val = ensureValueInRange(v2, mergedProps);
      return ensureValuePrecision(val, mergedProps);
    },
    getTrack: function getTrack(_ref) {
      var prefixCls2 = _ref.prefixCls, reverse = _ref.reverse, vertical = _ref.vertical, included = _ref.included, offset4 = _ref.offset, minimumTrackStyle = _ref.minimumTrackStyle, _trackStyle = _ref._trackStyle;
      return createVNode(Track$1, {
        "class": "".concat(prefixCls2, "-track"),
        "vertical": vertical,
        "included": included,
        "offset": 0,
        "reverse": reverse,
        "length": offset4,
        "style": _extends$1(_extends$1({}, minimumTrackStyle), _trackStyle)
      }, null);
    },
    renderSlider: function renderSlider() {
      var _this = this;
      var prefixCls2 = this.prefixCls, vertical = this.vertical, included = this.included, disabled = this.disabled, minimumTrackStyle = this.minimumTrackStyle, trackStyle = this.trackStyle, handleStyle = this.handleStyle, tabindex = this.tabindex, min4 = this.min, max4 = this.max, reverse = this.reverse, handle = this.handle, defaultHandle = this.defaultHandle;
      var handleGenerator = handle || defaultHandle;
      var sValue = this.sValue, dragging = this.dragging;
      var offset4 = this.calcOffset(sValue);
      var handles = handleGenerator({
        class: "".concat(prefixCls2, "-handle"),
        prefixCls: prefixCls2,
        vertical,
        offset: offset4,
        value: sValue,
        dragging,
        disabled,
        min: min4,
        max: max4,
        reverse,
        index: 0,
        tabindex,
        style: handleStyle[0] || handleStyle,
        ref: function ref2(h2) {
          return _this.saveHandle(0, h2);
        },
        onFocus: this.onFocus,
        onBlur: this.onBlur
      });
      var _trackStyle = trackStyle[0] || trackStyle;
      return {
        tracks: this.getTrack({
          prefixCls: prefixCls2,
          reverse,
          vertical,
          included,
          offset: offset4,
          minimumTrackStyle,
          _trackStyle
        }),
        handles
      };
    }
  }
});
var VcSlider = createSlider(Slider$1);
var _trimAlignValue = function trimAlignValue2(_ref) {
  var value26 = _ref.value, handle = _ref.handle, bounds = _ref.bounds, props2 = _ref.props;
  var allowCross = props2.allowCross, pushable = props2.pushable;
  var thershold = Number(pushable);
  var valInRange = ensureValueInRange(value26, props2);
  var valNotConflict = valInRange;
  if (!allowCross && handle != null && bounds !== void 0) {
    if (handle > 0 && valInRange <= bounds[handle - 1] + thershold) {
      valNotConflict = bounds[handle - 1] + thershold;
    }
    if (handle < bounds.length - 1 && valInRange >= bounds[handle + 1] - thershold) {
      valNotConflict = bounds[handle + 1] - thershold;
    }
  }
  return ensureValuePrecision(valNotConflict, props2);
};
var rangeProps = {
  defaultValue: PropsTypes.arrayOf(PropsTypes.number),
  value: PropsTypes.arrayOf(PropsTypes.number),
  count: PropsTypes.number,
  pushable: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.number])),
  allowCross: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  reverse: PropsTypes.looseBool,
  tabindex: PropsTypes.arrayOf(PropsTypes.number),
  prefixCls: PropsTypes.string,
  min: PropsTypes.number,
  max: PropsTypes.number,
  autofocus: PropsTypes.looseBool
};
var Range = {
  name: "Range",
  inheritAttrs: false,
  displayName: "Range",
  mixins: [BaseMixin],
  props: initDefaultProps$2(rangeProps, {
    count: 1,
    allowCross: true,
    pushable: false,
    tabindex: []
  }),
  data: function data60() {
    var _this = this;
    var count = this.count, min4 = this.min, max4 = this.max;
    var initialValue = Array.apply(void 0, _toConsumableArray(Array(count + 1))).map(function() {
      return min4;
    });
    var defaultValue = hasProp(this, "defaultValue") ? this.defaultValue : initialValue;
    var value26 = this.value;
    if (value26 === void 0) {
      value26 = defaultValue;
    }
    var bounds = value26.map(function(v2, i2) {
      return _trimAlignValue({
        value: v2,
        handle: i2,
        props: _this.$props
      });
    });
    var recent = bounds[0] === max4 ? 0 : bounds.length - 1;
    return {
      sHandle: null,
      recent,
      bounds
    };
  },
  watch: {
    value: {
      handler: function handler4(val) {
        var bounds = this.bounds;
        this.setChangeValue(val || bounds);
      },
      deep: true
    },
    min: function min3() {
      var value26 = this.value;
      this.setChangeValue(value26 || this.bounds);
    },
    max: function max3() {
      var value26 = this.value;
      this.setChangeValue(value26 || this.bounds);
    }
  },
  methods: {
    setChangeValue: function setChangeValue2(value26) {
      var _this2 = this;
      var bounds = this.bounds;
      var nextBounds = value26.map(function(v2, i2) {
        return _trimAlignValue({
          value: v2,
          handle: i2,
          bounds,
          props: _this2.$props
        });
      });
      if (nextBounds.length === bounds.length && nextBounds.every(function(v2, i2) {
        return v2 === bounds[i2];
      }))
        return;
      this.setState({
        bounds: nextBounds
      });
      if (value26.some(function(v2) {
        return isValueOutOfRange(v2, _this2.$props);
      })) {
        var newValues = value26.map(function(v2) {
          return ensureValueInRange(v2, _this2.$props);
        });
        this.__emit("change", newValues);
      }
    },
    onChange: function onChange6(state2) {
      var isNotControlled = !hasProp(this, "value");
      if (isNotControlled) {
        this.setState(state2);
      } else {
        var controlledState = {};
        ["sHandle", "recent"].forEach(function(item) {
          if (state2[item] !== void 0) {
            controlledState[item] = state2[item];
          }
        });
        if (Object.keys(controlledState).length) {
          this.setState(controlledState);
        }
      }
      var data80 = _extends$1(_extends$1({}, this.$data), state2);
      var changedValue = data80.bounds;
      this.__emit("change", changedValue);
    },
    onStart: function onStart2(position) {
      var bounds = this.bounds;
      this.__emit("beforeChange", bounds);
      var value26 = this.calcValueByPos(position);
      this.startValue = value26;
      this.startPosition = position;
      var closestBound = this.getClosestBound(value26);
      this.prevMovedHandleIndex = this.getBoundNeedMoving(value26, closestBound);
      this.setState({
        sHandle: this.prevMovedHandleIndex,
        recent: this.prevMovedHandleIndex
      });
      var prevValue = bounds[this.prevMovedHandleIndex];
      if (value26 === prevValue)
        return;
      var nextBounds = _toConsumableArray(bounds);
      nextBounds[this.prevMovedHandleIndex] = value26;
      this.onChange({
        bounds: nextBounds
      });
    },
    onEnd: function onEnd2(force) {
      var sHandle = this.sHandle;
      this.removeDocumentEvents();
      if (sHandle !== null || force) {
        this.__emit("afterChange", this.bounds);
      }
      this.setState({
        sHandle: null
      });
    },
    onMove: function onMove2(e2, position) {
      pauseEvent(e2);
      var bounds = this.bounds, sHandle = this.sHandle;
      var value26 = this.calcValueByPos(position);
      var oldValue = bounds[sHandle];
      if (value26 === oldValue)
        return;
      this.moveTo(value26);
    },
    onKeyboard: function onKeyboard2(e2) {
      var _this$$props = this.$props, reverse = _this$$props.reverse, vertical = _this$$props.vertical;
      var valueMutator = getKeyboardValueMutator(e2, vertical, reverse);
      if (valueMutator) {
        pauseEvent(e2);
        var bounds = this.bounds, sHandle = this.sHandle;
        var oldValue = bounds[sHandle === null ? this.recent : sHandle];
        var mutatedValue = valueMutator(oldValue, this.$props);
        var value26 = _trimAlignValue({
          value: mutatedValue,
          handle: sHandle,
          bounds,
          props: this.$props
        });
        if (value26 === oldValue)
          return;
        var isFromKeyboardEvent = true;
        this.moveTo(value26, isFromKeyboardEvent);
      }
    },
    getClosestBound: function getClosestBound(value26) {
      var bounds = this.bounds;
      var closestBound = 0;
      for (var i2 = 1; i2 < bounds.length - 1; ++i2) {
        if (value26 > bounds[i2]) {
          closestBound = i2;
        }
      }
      if (Math.abs(bounds[closestBound + 1] - value26) < Math.abs(bounds[closestBound] - value26)) {
        closestBound += 1;
      }
      return closestBound;
    },
    getBoundNeedMoving: function getBoundNeedMoving(value26, closestBound) {
      var bounds = this.bounds, recent = this.recent;
      var boundNeedMoving = closestBound;
      var isAtTheSamePoint = bounds[closestBound + 1] === bounds[closestBound];
      if (isAtTheSamePoint && bounds[recent] === bounds[closestBound]) {
        boundNeedMoving = recent;
      }
      if (isAtTheSamePoint && value26 !== bounds[closestBound + 1]) {
        boundNeedMoving = value26 < bounds[closestBound + 1] ? closestBound : closestBound + 1;
      }
      return boundNeedMoving;
    },
    getLowerBound: function getLowerBound2() {
      return this.bounds[0];
    },
    getUpperBound: function getUpperBound2() {
      var bounds = this.bounds;
      return bounds[bounds.length - 1];
    },
    getPoints: function getPoints() {
      var marks = this.marks, step = this.step, min4 = this.min, max4 = this.max;
      var cache = this._getPointsCache;
      if (!cache || cache.marks !== marks || cache.step !== step) {
        var pointsObject = _extends$1({}, marks);
        if (step !== null) {
          for (var point = min4; point <= max4; point += step) {
            pointsObject[point] = point;
          }
        }
        var points = Object.keys(pointsObject).map(parseFloat);
        points.sort(function(a2, b2) {
          return a2 - b2;
        });
        this._getPointsCache = {
          marks,
          step,
          points
        };
      }
      return this._getPointsCache.points;
    },
    moveTo: function moveTo(value26, isFromKeyboardEvent) {
      var _this3 = this;
      var nextBounds = _toConsumableArray(this.bounds);
      var sHandle = this.sHandle, recent = this.recent;
      var handle = sHandle === null ? recent : sHandle;
      nextBounds[handle] = value26;
      var nextHandle = handle;
      if (this.$props.pushable !== false) {
        this.pushSurroundingHandles(nextBounds, nextHandle);
      } else if (this.$props.allowCross) {
        nextBounds.sort(function(a2, b2) {
          return a2 - b2;
        });
        nextHandle = nextBounds.indexOf(value26);
      }
      this.onChange({
        recent: nextHandle,
        sHandle: nextHandle,
        bounds: nextBounds
      });
      if (isFromKeyboardEvent) {
        this.__emit("afterChange", nextBounds);
        this.setState({}, function() {
          _this3.handlesRefs[nextHandle].focus();
        });
        this.onEnd();
      }
    },
    pushSurroundingHandles: function pushSurroundingHandles(bounds, handle) {
      var value26 = bounds[handle];
      var threshold = this.pushable;
      threshold = Number(threshold);
      var direction = 0;
      if (bounds[handle + 1] - value26 < threshold) {
        direction = 1;
      }
      if (value26 - bounds[handle - 1] < threshold) {
        direction = -1;
      }
      if (direction === 0) {
        return;
      }
      var nextHandle = handle + direction;
      var diffToNext = direction * (bounds[nextHandle] - value26);
      if (!this.pushHandle(bounds, nextHandle, direction, threshold - diffToNext)) {
        bounds[handle] = bounds[nextHandle] - direction * threshold;
      }
    },
    pushHandle: function pushHandle(bounds, handle, direction, amount) {
      var originalValue = bounds[handle];
      var currentValue = bounds[handle];
      while (direction * (currentValue - originalValue) < amount) {
        if (!this.pushHandleOnePoint(bounds, handle, direction)) {
          bounds[handle] = originalValue;
          return false;
        }
        currentValue = bounds[handle];
      }
      return true;
    },
    pushHandleOnePoint: function pushHandleOnePoint(bounds, handle, direction) {
      var points = this.getPoints();
      var pointIndex = points.indexOf(bounds[handle]);
      var nextPointIndex = pointIndex + direction;
      if (nextPointIndex >= points.length || nextPointIndex < 0) {
        return false;
      }
      var nextHandle = handle + direction;
      var nextValue = points[nextPointIndex];
      var threshold = this.pushable;
      var diffToNext = direction * (bounds[nextHandle] - nextValue);
      if (!this.pushHandle(bounds, nextHandle, direction, threshold - diffToNext)) {
        return false;
      }
      bounds[handle] = nextValue;
      return true;
    },
    trimAlignValue: function trimAlignValue3(value26) {
      var sHandle = this.sHandle, bounds = this.bounds;
      return _trimAlignValue({
        value: value26,
        handle: sHandle,
        bounds,
        props: this.$props
      });
    },
    ensureValueNotConflict: function ensureValueNotConflict(handle, val, _ref2) {
      var allowCross = _ref2.allowCross, thershold = _ref2.pushable;
      var state2 = this.$data || {};
      var bounds = state2.bounds;
      handle = handle === void 0 ? state2.sHandle : handle;
      thershold = Number(thershold);
      if (!allowCross && handle != null && bounds !== void 0) {
        if (handle > 0 && val <= bounds[handle - 1] + thershold) {
          return bounds[handle - 1] + thershold;
        }
        if (handle < bounds.length - 1 && val >= bounds[handle + 1] - thershold) {
          return bounds[handle + 1] - thershold;
        }
      }
      return val;
    },
    getTrack: function getTrack2(_ref3) {
      var bounds = _ref3.bounds, prefixCls2 = _ref3.prefixCls, reverse = _ref3.reverse, vertical = _ref3.vertical, included = _ref3.included, offsets = _ref3.offsets, trackStyle = _ref3.trackStyle;
      return bounds.slice(0, -1).map(function(_2, index2) {
        var _classNames;
        var i2 = index2 + 1;
        var trackClassName = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-track"), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-track-").concat(i2), true), _classNames));
        return createVNode(Track$1, {
          "class": trackClassName,
          "vertical": vertical,
          "reverse": reverse,
          "included": included,
          "offset": offsets[i2 - 1],
          "length": offsets[i2] - offsets[i2 - 1],
          "style": trackStyle[index2],
          "key": i2
        }, null);
      });
    },
    renderSlider: function renderSlider2() {
      var _this4 = this;
      var sHandle = this.sHandle, bounds = this.bounds, prefixCls2 = this.prefixCls, vertical = this.vertical, included = this.included, disabled = this.disabled, min4 = this.min, max4 = this.max, reverse = this.reverse, handle = this.handle, defaultHandle = this.defaultHandle, trackStyle = this.trackStyle, handleStyle = this.handleStyle, tabindex = this.tabindex;
      var handleGenerator = handle || defaultHandle;
      var offsets = bounds.map(function(v2) {
        return _this4.calcOffset(v2);
      });
      var handleClassName = "".concat(prefixCls2, "-handle");
      var handles = bounds.map(function(v2, i2) {
        var _classNames2;
        var _tabIndex = tabindex[i2] || 0;
        if (disabled || tabindex[i2] === null) {
          _tabIndex = null;
        }
        return handleGenerator({
          class: classNames((_classNames2 = {}, _defineProperty$U(_classNames2, handleClassName, true), _defineProperty$U(_classNames2, "".concat(handleClassName, "-").concat(i2 + 1), true), _classNames2)),
          prefixCls: prefixCls2,
          vertical,
          offset: offsets[i2],
          value: v2,
          dragging: sHandle === i2,
          index: i2,
          tabindex: _tabIndex,
          min: min4,
          max: max4,
          reverse,
          disabled,
          style: handleStyle[i2],
          ref: function ref2(h2) {
            return _this4.saveHandle(i2, h2);
          },
          onFocus: _this4.onFocus,
          onBlur: _this4.onBlur
        });
      });
      return {
        tracks: this.getTrack({
          bounds,
          prefixCls: prefixCls2,
          reverse,
          vertical,
          included,
          offsets,
          trackStyle
        }),
        handles
      };
    }
  }
};
var VcRange = createSlider(Range);
var __rest$f = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var tooltipProps = abstractTooltipProps();
var SliderProps = function SliderProps2() {
  return {
    prefixCls: PropsTypes.string,
    tooltipPrefixCls: PropsTypes.string,
    range: PropsTypes.looseBool,
    reverse: PropsTypes.looseBool,
    min: PropsTypes.number,
    max: PropsTypes.number,
    step: PropsTypes.any,
    marks: PropsTypes.object,
    dots: PropsTypes.looseBool,
    value: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.arrayOf(PropsTypes.number)]),
    defaultValue: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.arrayOf(PropsTypes.number)]),
    included: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    vertical: PropsTypes.looseBool,
    tipFormatter: PropsTypes.oneOfType([PropsTypes.func, PropsTypes.object]),
    tooltipVisible: PropsTypes.looseBool,
    tooltipPlacement: tooltipProps.placement,
    getTooltipPopupContainer: PropsTypes.func,
    onChange: PropsTypes.func,
    onAfterChange: PropsTypes.func
  };
};
var defaultTipFormatter = function defaultTipFormatter2(value26) {
  return value26.toString();
};
var Slider = defineComponent({
  name: "ASlider",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _extends$1({}, SliderProps()),
  emits: ["update:value", "change"],
  setup: function setup124() {
    return {
      vcSlider: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data61() {
    return {
      visibles: {}
    };
  },
  methods: {
    toggleTooltipVisible: function toggleTooltipVisible(index2, visible9) {
      this.setState(function(_ref) {
        var visibles = _ref.visibles;
        return {
          visibles: _extends$1(_extends$1({}, visibles), _defineProperty$U({}, index2, visible9))
        };
      });
    },
    handleWithTooltip: function handleWithTooltip(tooltipPrefixCls, prefixCls2, _a) {
      var _this = this;
      var value26 = _a.value, dragging = _a.dragging, index2 = _a.index, restProps = __rest$f(_a, ["value", "dragging", "index"]);
      var _this$$props = this.$props, _this$$props$tipForma = _this$$props.tipFormatter, tipFormatter = _this$$props$tipForma === void 0 ? defaultTipFormatter : _this$$props$tipForma, tooltipVisible = _this$$props.tooltipVisible, tooltipPlacement = _this$$props.tooltipPlacement, getTooltipPopupContainer = _this$$props.getTooltipPopupContainer;
      var visibles = this.visibles;
      var isTipFormatter = tipFormatter ? visibles[index2] || dragging : false;
      var visible9 = tooltipVisible || tooltipVisible === void 0 && isTipFormatter;
      var tooltipProps2 = {
        prefixCls: tooltipPrefixCls,
        title: tipFormatter ? tipFormatter(value26) : "",
        visible: visible9,
        placement: tooltipPlacement || "top",
        transitionName: "zoom-down",
        overlayClassName: "".concat(prefixCls2, "-tooltip"),
        getPopupContainer: getTooltipPopupContainer || function() {
          return document.body;
        },
        key: index2
      };
      var handleProps = _extends$1(_extends$1({
        value: value26
      }, restProps), {
        onMouseenter: function onMouseenter2() {
          return _this.toggleTooltipVisible(index2, true);
        },
        onMouseleave: function onMouseleave2() {
          return _this.toggleTooltipVisible(index2, false);
        }
      });
      return createVNode(Tooltip, tooltipProps2, {
        default: function _default8() {
          return [createVNode(VcHandle, handleProps, null)];
        }
      });
    },
    saveSlider: function saveSlider(node) {
      this.vcSlider = node;
    },
    focus: function focus21() {
      this.vcSlider.focus();
    },
    blur: function blur18() {
      this.vcSlider.blur();
    },
    handleChange: function handleChange17(val) {
      this.$emit("update:value", val);
      this.$emit("change", val);
    }
  },
  render: function render115() {
    var _this2 = this;
    var _a = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs), range2 = _a.range, customizePrefixCls = _a.prefixCls, customizeTooltipPrefixCls = _a.tooltipPrefixCls, restProps = __rest$f(_a, ["range", "prefixCls", "tooltipPrefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("slider", customizePrefixCls);
    var tooltipPrefixCls = getPrefixCls2("tooltip", customizeTooltipPrefixCls);
    if (range2) {
      var vcRangeProps = _extends$1(_extends$1({}, restProps), {
        prefixCls: prefixCls2,
        tooltipPrefixCls,
        handle: function handle(info3) {
          return _this2.handleWithTooltip(tooltipPrefixCls, prefixCls2, info3);
        },
        ref: this.saveSlider,
        onChange: this.handleChange
      });
      return createVNode(VcRange, vcRangeProps, null);
    }
    var vcSliderProps = _extends$1(_extends$1({}, restProps), {
      prefixCls: prefixCls2,
      tooltipPrefixCls,
      handle: function handle(info3) {
        return _this2.handleWithTooltip(tooltipPrefixCls, prefixCls2, info3);
      },
      ref: this.saveSlider,
      onChange: this.handleChange
    });
    return createVNode(VcSlider, vcSliderProps, null);
  }
});
var index$o = withInstall(Slider);
var spaceSize = {
  small: 8,
  middle: 16,
  large: 24
};
var spaceProps = {
  prefixCls: PropsTypes.string,
  size: {
    type: [String, Number, Array]
  },
  direction: PropsTypes.oneOf(tuple("horizontal", "vertical")).def("horizontal"),
  align: PropsTypes.oneOf(tuple("start", "end", "center", "baseline")),
  wrap: PropsTypes.looseBool
};
function getNumberSize(size2) {
  return typeof size2 === "string" ? spaceSize[size2] : size2 || 0;
}
var Space = defineComponent({
  name: "ASpace",
  props: spaceProps,
  slots: ["split"],
  setup: function setup125(props2, _ref) {
    var slots = _ref.slots;
    var _useConfigInject = useConfigInject("space", props2), prefixCls2 = _useConfigInject.prefixCls, space = _useConfigInject.space, directionConfig = _useConfigInject.direction;
    var supportFlexGap = useFlexGapSupport();
    var size2 = computed(function() {
      var _a;
      return props2.size || ((_a = space.value) === null || _a === void 0 ? void 0 : _a.size) || "small";
    });
    var horizontalSize = ref();
    var verticalSize = ref();
    watch(size2, function() {
      var _map = (Array.isArray(size2.value) ? size2.value : [size2.value, size2.value]).map(function(item) {
        return getNumberSize(item);
      });
      var _map2 = _slicedToArray$2(_map, 2);
      horizontalSize.value = _map2[0];
      verticalSize.value = _map2[1];
    }, {
      immediate: true
    });
    var mergedAlign = computed(function() {
      return props2.align === void 0 && props2.direction === "horizontal" ? "center" : props2.align;
    });
    var cn = computed(function() {
      var _classNames;
      return classNames(prefixCls2.value, "".concat(prefixCls2.value, "-").concat(props2.direction), (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-rtl"), directionConfig.value === "rtl"), _defineProperty$U(_classNames, "".concat(prefixCls2.value, "-align-").concat(mergedAlign.value), mergedAlign.value), _classNames));
    });
    var marginDirection = computed(function() {
      return directionConfig.value === "rtl" ? "marginLeft" : "marginRight";
    });
    var style3 = computed(function() {
      var gapStyle = {};
      if (supportFlexGap.value) {
        gapStyle.columnGap = "".concat(horizontalSize.value, "px");
        gapStyle.rowGap = "".concat(verticalSize.value, "px");
      }
      return _extends$1(_extends$1({}, gapStyle), props2.wrap && {
        flexWrap: "wrap",
        marginBottom: "".concat(-verticalSize.value, "px")
      });
    });
    return function() {
      var _a, _b;
      var wrap = props2.wrap, _props$direction = props2.direction, direction = _props$direction === void 0 ? "horizontal" : _props$direction;
      var items = filterEmpty((_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots));
      var len = items.length;
      if (len === 0) {
        return null;
      }
      var split = (_b = slots.split) === null || _b === void 0 ? void 0 : _b.call(slots);
      var itemClassName = "".concat(prefixCls2.value, "-item");
      var horizontalSizeVal = horizontalSize.value;
      var latestIndex = len - 1;
      return createVNode("div", {
        "class": cn.value,
        "style": style3.value
      }, [items.map(function(child, index2) {
        var itemStyle = {};
        if (!supportFlexGap.value) {
          if (direction === "vertical") {
            if (index2 < latestIndex) {
              itemStyle = {
                marginBottom: "".concat(horizontalSizeVal / (split ? 2 : 1), "px")
              };
            }
          } else {
            itemStyle = _extends$1(_extends$1({}, index2 < latestIndex && _defineProperty$U({}, marginDirection.value, "".concat(horizontalSizeVal / (split ? 2 : 1), "px"))), wrap && {
              paddingBottom: "".concat(verticalSize.value, "px")
            });
          }
        }
        return createVNode(Fragment, null, [createVNode("div", {
          "class": itemClassName,
          "style": itemStyle
        }, [child]), index2 < latestIndex && split && createVNode("span", {
          "class": "".concat(itemClassName, "-split"),
          "style": itemStyle
        }, [split])]);
      })]);
    };
  }
});
var index$n = withInstall(Space);
function isFlexSupported() {
  if (typeof window !== "undefined" && window.document && window.document.documentElement) {
    var documentElement = window.document.documentElement;
    return "flex" in documentElement.style || "webkitFlex" in documentElement.style || "Flex" in documentElement.style || "msFlex" in documentElement.style;
  }
  return false;
}
var Steps$2 = defineComponent({
  name: "Steps",
  mixins: [BaseMixin],
  props: {
    type: PropsTypes.string.def("default"),
    prefixCls: PropsTypes.string.def("rc-steps"),
    iconPrefix: PropsTypes.string.def("rc"),
    direction: PropsTypes.string.def("horizontal"),
    labelPlacement: PropsTypes.string.def("horizontal"),
    status: PropsTypes.string.def("process"),
    size: PropsTypes.string.def(""),
    progressDot: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func])),
    initial: PropsTypes.number.def(0),
    current: PropsTypes.number.def(0),
    icons: PropsTypes.shape({
      finish: PropsTypes.any,
      error: PropsTypes.any
    }).loose,
    canClick: PropsTypes.looseBool
  },
  data: function data62() {
    this.calcStepOffsetWidth = debounce$1(this.calcStepOffsetWidth, 150);
    return {
      flexSupported: true,
      lastStepOffsetWidth: 0
    };
  },
  mounted: function mounted32() {
    var _this = this;
    this.$nextTick(function() {
      _this.calcStepOffsetWidth();
      if (!isFlexSupported()) {
        _this.setState({
          flexSupported: false
        });
      }
    });
  },
  updated: function updated18() {
    var _this2 = this;
    this.$nextTick(function() {
      _this2.calcStepOffsetWidth();
    });
  },
  beforeUnmount: function beforeUnmount23() {
    if (this.calcTimeout) {
      clearTimeout(this.calcTimeout);
    }
    if (this.calcStepOffsetWidth && this.calcStepOffsetWidth.cancel) {
      this.calcStepOffsetWidth.cancel();
    }
  },
  methods: {
    onStepClick: function onStepClick(next3) {
      var current2 = this.$props.current;
      if (current2 !== next3) {
        this.__emit("change", next3);
      }
    },
    calcStepOffsetWidth: function calcStepOffsetWidth() {
      var _this3 = this;
      if (isFlexSupported()) {
        return;
      }
      var lastStepOffsetWidth = this.$data.lastStepOffsetWidth;
      var domNode = this.$refs.vcStepsRef;
      if (domNode.children.length > 0) {
        if (this.calcTimeout) {
          clearTimeout(this.calcTimeout);
        }
        this.calcTimeout = setTimeout(function() {
          var offsetWidth = (domNode.lastChild.offsetWidth || 0) + 1;
          if (lastStepOffsetWidth === offsetWidth || Math.abs(lastStepOffsetWidth - offsetWidth) <= 3) {
            return;
          }
          _this3.setState({
            lastStepOffsetWidth: offsetWidth
          });
        });
      }
    }
  },
  render: function render116() {
    var _classString, _this4 = this;
    var prefixCls2 = this.prefixCls, direction = this.direction, type3 = this.type, labelPlacement = this.labelPlacement, iconPrefix = this.iconPrefix, status = this.status, size2 = this.size, current2 = this.current, progressDot = this.progressDot, initial = this.initial, icons = this.icons, canClick = this.canClick;
    var isNav = type3 === "navigation";
    var lastStepOffsetWidth = this.lastStepOffsetWidth, flexSupported = this.flexSupported;
    var filteredChildren = getSlot(this);
    var lastIndex = filteredChildren.length - 1;
    var adjustedlabelPlacement = progressDot ? "vertical" : labelPlacement;
    var classString = (_classString = {}, _defineProperty$U(_classString, prefixCls2, true), _defineProperty$U(_classString, "".concat(prefixCls2, "-").concat(direction), true), _defineProperty$U(_classString, "".concat(prefixCls2, "-").concat(size2), size2), _defineProperty$U(_classString, "".concat(prefixCls2, "-label-").concat(adjustedlabelPlacement), direction === "horizontal"), _defineProperty$U(_classString, "".concat(prefixCls2, "-dot"), !!progressDot), _defineProperty$U(_classString, "".concat(prefixCls2, "-navigation"), isNav), _defineProperty$U(_classString, "".concat(prefixCls2, "-flex-not-supported"), !flexSupported), _classString);
    var stepsProps2 = {
      class: classString,
      ref: "vcStepsRef"
    };
    return createVNode("div", stepsProps2, [filteredChildren.map(function(child, index2) {
      var childProps = getPropsData(child);
      var stepNumber = initial + index2;
      var stepProps = _extends$1({
        stepNumber: "".concat(stepNumber + 1),
        stepIndex: stepNumber,
        prefixCls: prefixCls2,
        iconPrefix,
        progressDot,
        icons
      }, childProps);
      if (canClick) {
        stepProps.onStepClick = _this4.onStepClick;
      }
      if (!flexSupported && direction !== "vertical") {
        if (isNav) {
          stepProps.itemWidth = "".concat(100 / (lastIndex + 1), "%");
          stepProps.adjustMarginRight = 0;
        } else if (index2 !== lastIndex) {
          stepProps.itemWidth = "".concat(100 / lastIndex, "%");
          stepProps.adjustMarginRight = "".concat(-Math.round(lastStepOffsetWidth / lastIndex + 1), "px");
        }
      }
      if (status === "error" && index2 === current2 - 1) {
        stepProps.class = "".concat(prefixCls2, "-next-error");
      }
      if (!childProps.status) {
        if (stepNumber === current2) {
          stepProps.status = status;
        } else if (stepNumber < current2) {
          stepProps.status = "finish";
        } else {
          stepProps.status = "wait";
        }
      }
      stepProps.active = stepNumber === current2;
      return cloneElement(child, stepProps);
    })]);
  }
});
function isString$1(str) {
  return typeof str === "string";
}
function noop$8() {
}
var Step$1 = defineComponent({
  name: "Step",
  mixins: [BaseMixin],
  props: {
    prefixCls: PropsTypes.string,
    wrapperStyle: PropsTypes.object,
    itemWidth: PropsTypes.string,
    active: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    status: PropsTypes.string,
    iconPrefix: PropsTypes.string,
    icon: PropsTypes.any,
    adjustMarginRight: PropsTypes.string,
    stepNumber: PropsTypes.string,
    stepIndex: PropsTypes.number,
    description: PropsTypes.any,
    title: PropsTypes.any,
    subTitle: PropsTypes.any,
    progressDot: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func])),
    tailContent: PropsTypes.any,
    icons: PropsTypes.shape({
      finish: PropsTypes.any,
      error: PropsTypes.any
    }).loose,
    onClick: PropsTypes.func,
    onStepClick: PropsTypes.func
  },
  methods: {
    onItemClick: function onItemClick() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.__emit.apply(this, ["click"].concat(args));
      this.__emit("stepClick", this.stepIndex);
    },
    renderIconNode: function renderIconNode() {
      var _iconClassName;
      var _getOptionProps = getOptionProps(this), prefixCls2 = _getOptionProps.prefixCls, stepNumber = _getOptionProps.stepNumber, status = _getOptionProps.status, iconPrefix = _getOptionProps.iconPrefix, icons = _getOptionProps.icons, progressDot = _getOptionProps.progressDot;
      var icon = getComponent(this, "icon");
      var title2 = getComponent(this, "title");
      var description2 = getComponent(this, "description");
      var iconNode;
      var iconClassName = (_iconClassName = {}, _defineProperty$U(_iconClassName, "".concat(prefixCls2, "-icon"), true), _defineProperty$U(_iconClassName, "".concat(iconPrefix, "icon"), true), _defineProperty$U(_iconClassName, "".concat(iconPrefix, "icon-").concat(icon), icon && isString$1(icon)), _defineProperty$U(_iconClassName, "".concat(iconPrefix, "icon-check"), !icon && status === "finish" && icons && !icons.finish), _defineProperty$U(_iconClassName, "".concat(iconPrefix, "icon-close"), !icon && status === "error" && icons && !icons.error), _iconClassName);
      var iconDot = createVNode("span", {
        "class": "".concat(prefixCls2, "-icon-dot")
      }, null);
      if (progressDot) {
        if (typeof progressDot === "function") {
          iconNode = createVNode("span", {
            "class": "".concat(prefixCls2, "-icon")
          }, [progressDot({
            index: stepNumber - 1,
            status,
            title: title2,
            description: description2,
            prefixCls: prefixCls2
          })]);
        } else {
          iconNode = createVNode("span", {
            "class": "".concat(prefixCls2, "-icon")
          }, [iconDot]);
        }
      } else if (icon && !isString$1(icon)) {
        iconNode = createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, [icon]);
      } else if (icons && icons.finish && status === "finish") {
        iconNode = createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, [icons.finish]);
      } else if (icons && icons.error && status === "error") {
        iconNode = createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, [icons.error]);
      } else if (icon || status === "finish" || status === "error") {
        iconNode = createVNode("span", {
          "class": iconClassName
        }, null);
      } else {
        iconNode = createVNode("span", {
          "class": "".concat(prefixCls2, "-icon")
        }, [stepNumber]);
      }
      return iconNode;
    }
  },
  render: function render117() {
    var _classString;
    var _getOptionProps2 = getOptionProps(this), prefixCls2 = _getOptionProps2.prefixCls, itemWidth = _getOptionProps2.itemWidth, active = _getOptionProps2.active, _getOptionProps2$stat = _getOptionProps2.status, status = _getOptionProps2$stat === void 0 ? "wait" : _getOptionProps2$stat, tailContent = _getOptionProps2.tailContent, adjustMarginRight = _getOptionProps2.adjustMarginRight, disabled = _getOptionProps2.disabled, onClick7 = _getOptionProps2.onClick, onStepClick2 = _getOptionProps2.onStepClick;
    var title2 = getComponent(this, "title");
    var subTitle = getComponent(this, "subTitle");
    var description2 = getComponent(this, "description");
    var classString = (_classString = {}, _defineProperty$U(_classString, "".concat(prefixCls2, "-item"), true), _defineProperty$U(_classString, "".concat(prefixCls2, "-item-").concat(status), true), _defineProperty$U(_classString, "".concat(prefixCls2, "-item-custom"), getComponent(this, "icon")), _defineProperty$U(_classString, "".concat(prefixCls2, "-item-active"), active), _defineProperty$U(_classString, "".concat(prefixCls2, "-item-disabled"), disabled === true), _classString);
    var stepProps = {
      class: classString
    };
    var stepItemStyle = {};
    if (itemWidth) {
      stepItemStyle.width = itemWidth;
    }
    if (adjustMarginRight) {
      stepItemStyle.marginRight = adjustMarginRight;
    }
    var accessibilityProps = {
      onClick: onClick7 || noop$8
    };
    if (onStepClick2 && !disabled) {
      accessibilityProps.role = "button";
      accessibilityProps.tabindex = 0;
      accessibilityProps.onClick = this.onItemClick;
    }
    return createVNode("div", _objectSpread2$2(_objectSpread2$2({}, stepProps), {}, {
      "style": stepItemStyle
    }), [createVNode("div", _objectSpread2$2(_objectSpread2$2({}, accessibilityProps), {}, {
      "class": "".concat(prefixCls2, "-item-container")
    }), [createVNode("div", {
      "class": "".concat(prefixCls2, "-item-tail")
    }, [tailContent]), createVNode("div", {
      "class": "".concat(prefixCls2, "-item-icon")
    }, [this.renderIconNode()]), createVNode("div", {
      "class": "".concat(prefixCls2, "-item-content")
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-item-title")
    }, [title2, subTitle && createVNode("div", {
      "title": subTitle,
      "class": "".concat(prefixCls2, "-item-subtitle")
    }, [subTitle])]), description2 && createVNode("div", {
      "class": "".concat(prefixCls2, "-item-description")
    }, [description2])])])]);
  }
});
Steps$2.Step = Step$1;
var stepsProps = {
  prefixCls: PropsTypes.string,
  iconPrefix: PropsTypes.string,
  current: PropsTypes.number,
  initial: PropsTypes.number,
  labelPlacement: PropsTypes.oneOf(tuple("horizontal", "vertical")).def("horizontal"),
  status: PropsTypes.oneOf(tuple("wait", "process", "finish", "error")),
  size: PropsTypes.oneOf(tuple("default", "small")),
  direction: PropsTypes.oneOf(tuple("horizontal", "vertical")),
  progressDot: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func])),
  type: PropsTypes.oneOf(tuple("default", "navigation")),
  onChange: PropsTypes.func,
  "onUpdate:current": PropsTypes.func
};
var Steps = defineComponent({
  name: "ASteps",
  inheritAttrs: false,
  props: initDefaultProps$1(stepsProps, {
    current: 0
  }),
  emits: ["update:current", "change"],
  setup: function setup126() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  Step: _extends$1(_extends$1({}, Steps$2.Step), {
    name: "AStep"
  }),
  methods: {
    handleChange: function handleChange18(current2) {
      this.$emit("update:current", current2);
      this.$emit("change", current2);
    }
  },
  render: function render118() {
    var _this = this;
    var props2 = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs);
    var customizePrefixCls = props2.prefixCls, customizeIconPrefixCls = props2.iconPrefix;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("steps", customizePrefixCls);
    var iconPrefix = getPrefixCls2("", customizeIconPrefixCls);
    var progressDot = getComponent(this, "progressDot", this, false);
    var icons = {
      finish: createVNode(CheckOutlined$1, {
        "class": "".concat(prefixCls2, "-finish-icon")
      }, null),
      error: createVNode(CloseOutlined$1, {
        "class": "".concat(prefixCls2, "-error-icon")
      }, null)
    };
    var stepsProps2 = _extends$1(_extends$1({
      icons,
      iconPrefix,
      prefixCls: prefixCls2,
      progressDot
    }, props2), {
      canClick: !!(this.onChange || this["onUpdate:current"]),
      onChange: this.handleChange
    });
    return createVNode(Steps$2, stepsProps2, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
Steps.install = function(app) {
  app.component(Steps.name, Steps);
  app.component(Steps.Step.name, Steps.Step);
  return app;
};
var Step = Steps.Step;
var Steps$1 = Steps;
var SwitchSizes = tuple("small", "default");
var switchProps = {
  prefixCls: PropsTypes.string,
  size: PropsTypes.oneOf(SwitchSizes),
  disabled: PropsTypes.looseBool,
  checkedChildren: PropsTypes.VNodeChild,
  unCheckedChildren: PropsTypes.VNodeChild,
  tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  autofocus: PropsTypes.looseBool,
  loading: PropsTypes.looseBool,
  checked: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.looseBool]),
  checkedValue: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.looseBool]).def(true),
  unCheckedValue: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number, PropsTypes.looseBool]).def(false),
  onChange: {
    type: Function
  },
  onClick: {
    type: Function
  },
  onKeydown: {
    type: Function
  },
  onMouseup: {
    type: Function
  },
  "onUpdate:checked": {
    type: Function
  }
};
var Switch = defineComponent({
  name: "ASwitch",
  __ANT_SWITCH: true,
  inheritAttrs: false,
  props: switchProps,
  slots: ["checkedChildren", "unCheckedChildren"],
  emits: ["update:checked", "mouseup", "change", "click", "keydown"],
  setup: function setup127(props2, _ref) {
    var attrs = _ref.attrs, slots = _ref.slots, expose = _ref.expose, emit = _ref.emit;
    onBeforeMount(function() {
      warning$4(!("defaultChecked" in attrs), "Switch", "'defaultChecked' is deprecated, please use 'v-model:checked'");
      warning$4(!("value" in attrs), "Switch", "`value` is not validate prop, do you mean `checked`?");
    });
    var checked2 = ref(props2.checked !== void 0 ? props2.checked : attrs.defaultChecked);
    var checkedStatus = computed(function() {
      return checked2.value === props2.checkedValue;
    });
    watch(function() {
      return props2.checked;
    }, function() {
      checked2.value = props2.checked;
    });
    var _useConfigInject = useConfigInject("switch", props2), prefixCls2 = _useConfigInject.prefixCls;
    var refSwitchNode = ref();
    var focus27 = function focus28() {
      var _a;
      (_a = refSwitchNode.value) === null || _a === void 0 ? void 0 : _a.focus();
    };
    var blur24 = function blur25() {
      var _a;
      (_a = refSwitchNode.value) === null || _a === void 0 ? void 0 : _a.blur();
    };
    expose({
      focus: focus27,
      blur: blur24
    });
    onMounted(function() {
      nextTick(function() {
        if (props2.autofocus && !props2.disabled) {
          refSwitchNode.value.focus();
        }
      });
    });
    var setChecked = function setChecked2(check, e2) {
      if (props2.disabled) {
        return;
      }
      emit("update:checked", check);
      emit("change", check, e2);
    };
    var handleClick5 = function handleClick6(e2) {
      focus27();
      var newChecked = checkedStatus.value ? props2.unCheckedValue : props2.checkedValue;
      setChecked(newChecked, e2);
      emit("click", newChecked, e2);
    };
    var handleKeyDown7 = function handleKeyDown8(e2) {
      if (e2.keyCode === KeyCode$2.LEFT) {
        setChecked(props2.unCheckedValue, e2);
      } else if (e2.keyCode === KeyCode$2.RIGHT) {
        setChecked(props2.checkedValue, e2);
      }
      emit("keydown", e2);
    };
    var handleMouseUp2 = function handleMouseUp3(e2) {
      var _a;
      (_a = refSwitchNode.value) === null || _a === void 0 ? void 0 : _a.blur();
      emit("mouseup", e2);
    };
    var classNames2 = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-small"), props2.size === "small"), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-loading"), props2.loading), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-checked"), checkedStatus.value), _defineProperty$U(_ref2, "".concat(prefixCls2.value, "-disabled"), props2.disabled), _defineProperty$U(_ref2, prefixCls2.value, true), _ref2;
    });
    return function() {
      return createVNode(Wave, {
        "insertExtraNode": true
      }, {
        default: function _default8() {
          return [createVNode("button", _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, omit$2(props2, ["prefixCls", "checkedChildren", "unCheckedChildren", "checked", "autofocus", "defaultChecked", "checkedValue", "unCheckedValue"])), attrs), {}, {
            "onKeydown": handleKeyDown7,
            "onClick": handleClick5,
            "onMouseup": handleMouseUp2,
            "type": "button",
            "role": "switch",
            "aria-checked": checked2.value,
            "disabled": props2.disabled || props2.loading,
            "class": [attrs.class, classNames2.value],
            "ref": refSwitchNode
          }), [props2.loading ? createVNode(LoadingOutlined$1, {
            "class": "".concat(prefixCls2.value, "-loading-icon")
          }, null) : null, createVNode("span", {
            "class": "".concat(prefixCls2.value, "-inner")
          }, [checkedStatus.value ? getPropsSlot(slots, props2, "checkedChildren") : getPropsSlot(slots, props2, "unCheckedChildren")])])];
        }
      });
    };
  }
});
var index$m = withInstall(Switch);
var CaretUpFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z" } }] }, "name": "caret-up", "theme": "filled" };
var CaretUpFilledSvg = CaretUpFilled$2;
function _objectSpread$f(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$g(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$g(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CaretUpFilled = function CaretUpFilled2(props2, context2) {
  var p2 = _objectSpread$f({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CaretUpFilledSvg
  }), null);
};
CaretUpFilled.displayName = "CaretUpFilled";
CaretUpFilled.inheritAttrs = false;
var CaretUpFilled$1 = CaretUpFilled;
var CaretDownFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "filled" };
var CaretDownFilledSvg = CaretDownFilled$2;
function _objectSpread$e(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$f(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$f(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CaretDownFilled = function CaretDownFilled2(props2, context2) {
  var p2 = _objectSpread$e({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CaretDownFilledSvg
  }), null);
};
CaretDownFilled.displayName = "CaretDownFilled";
CaretDownFilled.inheritAttrs = false;
var CaretDownFilled$1 = CaretDownFilled;
function assignMergeValue(object3, key2, value26) {
  if (value26 !== void 0 && !eq(object3[key2], value26) || value26 === void 0 && !(key2 in object3)) {
    baseAssignValue(object3, key2, value26);
  }
}
function createBaseFor(fromRight) {
  return function(object3, iteratee, keysFunc) {
    var index2 = -1, iterable = Object(object3), props2 = keysFunc(object3), length = props2.length;
    while (length--) {
      var key2 = props2[fromRight ? length : ++index2];
      if (iteratee(iterable[key2], key2, iterable) === false) {
        break;
      }
    }
    return object3;
  };
}
var baseFor = createBaseFor();
var baseFor$1 = baseFor;
function safeGet(object3, key2) {
  if (key2 === "constructor" && typeof object3[key2] === "function") {
    return;
  }
  if (key2 == "__proto__") {
    return;
  }
  return object3[key2];
}
function toPlainObject(value26) {
  return copyObject(value26, keysIn(value26));
}
function baseMergeDeep(object3, source2, key2, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object3, key2), srcValue = safeGet(source2, key2), stacked = stack.get(srcValue);
  if (stacked) {
    assignMergeValue(object3, key2, stacked);
    return;
  }
  var newValue = customizer ? customizer(objValue, srcValue, key2 + "", object3, source2, stack) : void 0;
  var isCommon = newValue === void 0;
  if (isCommon) {
    var isArr = isArray$2(srcValue), isBuff = !isArr && isBuffer$2(srcValue), isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$2(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject$1(srcValue) || isArguments$1(srcValue)) {
      newValue = objValue;
      if (isArguments$1(objValue)) {
        newValue = toPlainObject(objValue);
      } else if (!isObject$2(objValue) || isFunction$1(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    } else {
      isCommon = false;
    }
  }
  if (isCommon) {
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack["delete"](srcValue);
  }
  assignMergeValue(object3, key2, newValue);
}
function baseMerge(object3, source2, srcIndex, customizer, stack) {
  if (object3 === source2) {
    return;
  }
  baseFor$1(source2, function(srcValue, key2) {
    stack || (stack = new Stack());
    if (isObject$2(srcValue)) {
      baseMergeDeep(object3, source2, key2, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet(object3, key2), srcValue, key2 + "", object3, source2, stack) : void 0;
      if (newValue === void 0) {
        newValue = srcValue;
      }
      assignMergeValue(object3, key2, newValue);
    }
  }, keysIn);
}
function isIterateeCall(value26, index2, object3) {
  if (!isObject$2(object3)) {
    return false;
  }
  var type3 = typeof index2;
  if (type3 == "number" ? isArrayLike(object3) && isIndex(index2, object3.length) : type3 == "string" && index2 in object3) {
    return eq(object3[index2], value26);
  }
  return false;
}
function createAssigner(assigner) {
  return baseRest(function(object3, sources) {
    var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
    customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? void 0 : customizer;
      length = 1;
    }
    object3 = Object(object3);
    while (++index2 < length) {
      var source2 = sources[index2];
      if (source2) {
        assigner(object3, source2, index2, customizer);
      }
    }
    return object3;
  });
}
var merge$1 = createAssigner(function(object3, source2, srcIndex) {
  baseMerge(object3, source2, srcIndex);
});
var merge$2 = merge$1;
var scrollbarVerticalSize;
var scrollbarHorizontalSize;
var scrollbarMeasure = {
  position: "absolute",
  top: "-9999px",
  width: "50px",
  height: "50px"
};
var INTERNAL_COL_DEFINE = "RC_TABLE_INTERNAL_COL_DEFINE";
function measureScrollbar(_ref) {
  var _ref$direction = _ref.direction, direction = _ref$direction === void 0 ? "vertical" : _ref$direction, prefixCls2 = _ref.prefixCls;
  if (typeof document === "undefined" || typeof window === "undefined") {
    return 0;
  }
  var isVertical2 = direction === "vertical";
  if (isVertical2 && scrollbarVerticalSize) {
    return scrollbarVerticalSize;
  }
  if (!isVertical2 && scrollbarHorizontalSize) {
    return scrollbarHorizontalSize;
  }
  var scrollDiv = document.createElement("div");
  Object.keys(scrollbarMeasure).forEach(function(scrollProp) {
    scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
  });
  scrollDiv.className = "".concat(prefixCls2, "-hide-scrollbar scroll-div-append-to-body");
  if (isVertical2) {
    scrollDiv.style.overflowY = "scroll";
  } else {
    scrollDiv.style.overflowX = "scroll";
  }
  document.body.appendChild(scrollDiv);
  var size2 = 0;
  if (isVertical2) {
    size2 = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    scrollbarVerticalSize = size2;
  } else {
    size2 = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    scrollbarHorizontalSize = size2;
  }
  document.body.removeChild(scrollDiv);
  return size2;
}
function debounce(func, wait, immediate) {
  var timeout;
  function debounceFunc() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var context2 = this;
    if (args[0] && args[0].persist) {
      args[0].persist();
    }
    var later = function later2() {
      timeout = null;
      if (!immediate) {
        func.apply(context2, args);
      }
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      func.apply(context2, args);
    }
  }
  debounceFunc.cancel = function cancel2() {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };
  return debounceFunc;
}
function remove(array3, item) {
  var index2 = array3.indexOf(item);
  var front = array3.slice(0, index2);
  var last2 = array3.slice(index2 + 1, array3.length);
  return front.concat(last2);
}
function getDataAndAriaProps(props2) {
  return Object.keys(props2).reduce(function(memo, key2) {
    if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-") {
      memo[key2] = props2[key2];
    }
    return memo;
  }, {});
}
function getColumnsKey(columns2) {
  var columnKeys = [];
  columns2.forEach(function(column) {
    var _ref2 = column || {}, key2 = _ref2.key, dataIndex = _ref2.dataIndex;
    columnKeys.push(key2 !== void 0 ? key2 : dataIndex);
  });
  return columnKeys;
}
function validateValue(val) {
  return val !== null && val !== void 0;
}
var ColGroup = {
  name: "ColGroup",
  inheritAttrs: false,
  props: {
    fixed: PropsTypes.string,
    columns: PropsTypes.array
  },
  setup: function setup128() {
    return {
      table: inject("table", {}),
      store: inject("table-store", function() {
        return {};
      })
    };
  },
  render: function render119() {
    var fixed = this.fixed, table = this.table;
    var prefixCls2 = table.prefixCls, expandIconAsCell = table.expandIconAsCell, onColumnResize = table.onColumnResize;
    var cols = [];
    if (expandIconAsCell && fixed !== "right") {
      cols.push(createVNode("col", {
        "class": "".concat(prefixCls2, "-expand-icon-col"),
        "key": "rc-table-expand-icon-col"
      }, null));
    }
    var leafColumns;
    var columnManager = this.store.columnManager;
    if (fixed === "left") {
      leafColumns = columnManager.leftLeafColumns;
    } else if (fixed === "right") {
      leafColumns = columnManager.rightLeafColumns;
    } else {
      leafColumns = columnManager.leafColumns;
    }
    cols = cols.concat(leafColumns.map(function(_ref) {
      var key2 = _ref.key, dataIndex = _ref.dataIndex, width = _ref.width, additionalProps = _ref[INTERNAL_COL_DEFINE];
      var mergedKey = key2 !== void 0 ? key2 : dataIndex;
      var w2 = typeof width === "number" ? "".concat(width, "px") : width;
      return createVNode(ResizeObserver, {
        "onResize": function onResize(_ref2) {
          var offsetWidth = _ref2.offsetWidth;
          onColumnResize(mergedKey, offsetWidth);
        }
      }, {
        default: function _default8() {
          return [createVNode("col", _objectSpread2$2({
            "data-key": mergedKey,
            "key": mergedKey,
            "style": {
              width: w2,
              minWidth: w2
            }
          }, additionalProps), null)];
        }
      });
    }));
    return createVNode("colgroup", null, [cols]);
  }
};
function getCellFixedInfo(colStart, colEnd, columns2, stickyOffsets, direction) {
  var startColumn = columns2[colStart] || {};
  var endColumn = columns2[colEnd] || {};
  var fixLeft;
  var fixRight;
  if (startColumn.fixed === "left") {
    fixLeft = stickyOffsets.left[colStart];
  } else if (endColumn.fixed === "right") {
    fixRight = stickyOffsets.right[colEnd];
  }
  var lastFixLeft = false;
  var firstFixRight = false;
  var lastFixRight = false;
  var firstFixLeft = false;
  var nextColumn = columns2[colEnd + 1];
  var prevColumn = columns2[colStart - 1];
  if (direction === "rtl") {
    if (fixLeft !== void 0) {
      var prevFixLeft = prevColumn && prevColumn.fixed === "left";
      firstFixLeft = !prevFixLeft;
    } else if (fixRight !== void 0) {
      var nextFixRight = nextColumn && nextColumn.fixed === "right";
      lastFixRight = !nextFixRight;
    }
  } else if (fixLeft !== void 0) {
    var nextFixLeft = nextColumn && nextColumn.fixed === "left";
    lastFixLeft = !nextFixLeft;
  } else if (fixRight !== void 0) {
    var prevFixRight = prevColumn && prevColumn.fixed === "right";
    firstFixRight = !prevFixRight;
  }
  return {
    fixLeft,
    fixRight,
    lastFixLeft,
    firstFixRight,
    lastFixRight,
    firstFixLeft,
    isSticky: stickyOffsets.isSticky
  };
}
var __rest$e = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var TableHeaderRow = {
  name: "TableHeaderRow",
  inheritAttrs: false,
  props: {
    index: PropsTypes.number,
    fixed: PropsTypes.string,
    columns: PropsTypes.array,
    rows: PropsTypes.array,
    row: PropsTypes.array,
    components: PropsTypes.object,
    customHeaderRow: PropsTypes.func,
    prefixCls: PropsTypes.prefixCls
  },
  setup: function setup129(props2) {
    var store = inject("table-store", function() {
      return {};
    });
    return {
      height: computed(function() {
        var fixedColumnsHeadRowsHeight = store.fixedColumnsHeadRowsHeight;
        var columns2 = props2.columns, rows = props2.rows, fixed = props2.fixed;
        var headerHeight = fixedColumnsHeadRowsHeight[0];
        if (!fixed) {
          return null;
        }
        if (headerHeight && columns2) {
          if (headerHeight === "auto") {
            return "auto";
          }
          return "".concat(headerHeight / rows.length, "px");
        }
        return null;
      }),
      store
    };
  },
  render: function render120() {
    var row = this.row, index2 = this.index, height = this.height, components3 = this.components, customHeaderRow2 = this.customHeaderRow, prefixCls2 = this.prefixCls;
    var HeaderRow = components3.header.row;
    var HeaderCell = components3.header.cell;
    var rowProps2 = customHeaderRow2(row.map(function(cell) {
      return cell.column;
    }), index2);
    var customStyle = rowProps2 ? rowProps2.style : {};
    var style3 = _extends$1({
      height
    }, customStyle);
    if (style3.height === null) {
      delete style3.height;
    }
    var _this$store = this.store, stickyOffsets = _this$store.stickyOffsets, columnManager = _this$store.columnManager;
    return createVNode(HeaderRow, _objectSpread2$2(_objectSpread2$2({}, rowProps2), {}, {
      "style": style3
    }), {
      default: function _default8() {
        return [row.map(function(cell, i2) {
          var _classNames;
          var column = cell.column, isLast = cell.isLast, children = cell.children;
          cell.className;
          var cellProps = __rest$e(cell, ["column", "isLast", "children", "className"]);
          var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, columnManager.leafColumns, stickyOffsets);
          var customProps = column.customHeaderCell ? column.customHeaderCell(column) : {};
          var headerCellProps = _extends$1(_extends$1(_extends$1({}, cellProps), customProps), {
            key: column.key || column.dataIndex || i2
          });
          if (headerCellProps.colSpan === 0) {
            return null;
          }
          if (column.align) {
            headerCellProps.style = _extends$1(_extends$1({}, customProps.style), {
              textAlign: column.align
            });
          }
          var fixLeft = fixedInfo.fixLeft, fixRight = fixedInfo.fixRight, firstFixLeft = fixedInfo.firstFixLeft, lastFixLeft = fixedInfo.lastFixLeft, firstFixRight = fixedInfo.firstFixRight, lastFixRight = fixedInfo.lastFixRight;
          var fixedStyle = {};
          var isFixLeft = typeof fixLeft === "number";
          var isFixRight = typeof fixRight === "number";
          if (isFixLeft) {
            fixedStyle.position = "sticky";
            fixedStyle.left = "".concat(fixLeft, "px");
          }
          if (isFixRight) {
            fixedStyle.position = "sticky";
            fixedStyle.right = "".concat(fixRight, "px");
          }
          headerCellProps.class = classNames(customProps.class, customProps.className, column.class, column.className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-align-").concat(column.align), !!column.align), _defineProperty$U(_classNames, "".concat(prefixCls2, "-row-cell-ellipsis"), !!column.ellipsis), _defineProperty$U(_classNames, "".concat(prefixCls2, "-row-cell-break-word"), !!column.width), _defineProperty$U(_classNames, "".concat(prefixCls2, "-row-cell-last"), isLast), _defineProperty$U(_classNames, "".concat(prefixCls2, "-cell-fix-left"), isFixLeft), _defineProperty$U(_classNames, "".concat(prefixCls2, "-cell-fix-left-first"), firstFixLeft), _defineProperty$U(_classNames, "".concat(prefixCls2, "-cell-fix-left-last"), lastFixLeft), _defineProperty$U(_classNames, "".concat(prefixCls2, "-cell-fix-right"), isFixRight), _defineProperty$U(_classNames, "".concat(prefixCls2, "-cell-fix-right-first"), firstFixRight), _defineProperty$U(_classNames, "".concat(prefixCls2, "-cell-fix-right-last"), lastFixRight), _classNames));
          headerCellProps.style = _extends$1(_extends$1({}, headerCellProps.style || {}), fixedStyle);
          if (typeof HeaderCell === "function") {
            return HeaderCell(headerCellProps, children);
          }
          return createVNode(HeaderCell, headerCellProps, {
            default: function _default9() {
              return [children];
            }
          });
        })];
      }
    });
  }
};
var TableHeaderRow$1 = TableHeaderRow;
function parseHeaderRows(rootColumns) {
  var rows = [];
  function fillRowCells(columns2, colIndex) {
    var rowIndex2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    rows[rowIndex2] = rows[rowIndex2] || [];
    var currentColIndex = colIndex;
    var colSpans = columns2.filter(Boolean).map(function(column) {
      var cell = {
        key: column.key,
        className: column.className || column.class || "",
        children: column.title,
        column,
        colStart: currentColIndex
      };
      var colSpan = 1;
      var subColumns = column.children;
      if (subColumns && subColumns.length > 0) {
        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex2 + 1).reduce(function(total2, count) {
          return total2 + count;
        }, 0);
        cell.hasSubColumns = true;
      }
      if ("colSpan" in column) {
        colSpan = column.colSpan;
      }
      if ("rowSpan" in column) {
        cell.rowSpan = column.rowSpan;
      }
      cell.colSpan = colSpan;
      cell.colEnd = cell.colStart + colSpan - 1;
      rows[rowIndex2].push(cell);
      currentColIndex += colSpan;
      return colSpan;
    });
    return colSpans;
  }
  fillRowCells(rootColumns, 0);
  var rowCount = rows.length;
  var _loop = function _loop2(rowIndex2) {
    rows[rowIndex2].forEach(function(cell) {
      if (!("rowSpan" in cell) && !cell.hasSubColumns) {
        cell.rowSpan = rowCount - rowIndex2;
      }
    });
  };
  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
    _loop(rowIndex);
  }
  return rows;
}
var TableHeader = {
  name: "TableHeader",
  inheritAttrs: false,
  props: {
    fixed: PropsTypes.string,
    columns: PropsTypes.array.isRequired,
    expander: PropsTypes.object.isRequired
  },
  setup: function setup130() {
    return {
      table: inject("table", {})
    };
  },
  render: function render121() {
    var _this$table = this.table, components3 = _this$table.sComponents, prefixCls2 = _this$table.prefixCls, showHeader = _this$table.showHeader, customHeaderRow2 = _this$table.customHeaderRow;
    var expander = this.expander, columns2 = this.columns, fixed = this.fixed;
    if (!showHeader) {
      return null;
    }
    var rows = parseHeaderRows(this.columns);
    expander.renderExpandIndentCell(rows, fixed);
    var HeaderWrapper = components3.header.wrapper;
    return createVNode(HeaderWrapper, {
      "class": "".concat(prefixCls2, "-thead")
    }, {
      default: function _default8() {
        return [rows.map(function(row, index2) {
          return createVNode(TableHeaderRow$1, {
            "prefixCls": prefixCls2,
            "key": index2,
            "index": index2,
            "fixed": fixed,
            "columns": columns2,
            "rows": rows,
            "row": row,
            "components": components3,
            "customHeaderRow": customHeaderRow2
          }, null);
        })];
      }
    });
  }
};
function isInvalidRenderCellText(text) {
  return text && !isValidElement(text) && Object.prototype.toString.call(text) === "[object Object]";
}
var TableCell = {
  name: "TableCell",
  inheritAttrs: false,
  props: {
    record: PropsTypes.object,
    prefixCls: PropsTypes.string,
    index: PropsTypes.number,
    indent: PropsTypes.number,
    indentSize: PropsTypes.number,
    column: PropsTypes.object,
    expandIcon: PropsTypes.any,
    component: PropsTypes.any,
    colIndex: PropsTypes.number
  },
  setup: function setup131() {
    return {
      table: inject("table", {}),
      store: inject("table-store", {})
    };
  },
  methods: {
    handleClick: function handleClick3(e2) {
      var record = this.record, onCellClick = this.column.onCellClick;
      if (onCellClick) {
        onCellClick(record, e2);
      }
    }
  },
  render: function render122() {
    var _classNames;
    var record = this.record, indentSize = this.indentSize, prefixCls2 = this.prefixCls, indent = this.indent, index2 = this.index, expandIcon = this.expandIcon, column = this.column, BodyCell = this.component;
    var fixedInfoList = this.store.fixedInfoList || [];
    var fixedInfo = fixedInfoList[this.colIndex] || {};
    var fixLeft = fixedInfo.fixLeft, fixRight = fixedInfo.fixRight, firstFixLeft = fixedInfo.firstFixLeft, lastFixLeft = fixedInfo.lastFixLeft, firstFixRight = fixedInfo.firstFixRight, lastFixRight = fixedInfo.lastFixRight;
    var fixedStyle = {};
    var isFixLeft = typeof fixLeft === "number";
    var isFixRight = typeof fixRight === "number";
    if (isFixLeft) {
      fixedStyle.position = "sticky";
      fixedStyle.left = "".concat(fixLeft, "px");
    }
    if (isFixRight) {
      fixedStyle.position = "sticky";
      fixedStyle.right = "".concat(fixRight, "px");
    }
    var dataIndex = column.dataIndex, customRender = column.customRender, _column$className = column.className, className = _column$className === void 0 ? "" : _column$className;
    var _this$table = this.table, transformCellText = _this$table.transformCellText, rootPrefixCls = _this$table.prefixCls;
    var text;
    if (typeof dataIndex === "number") {
      text = get(record, dataIndex);
    } else if (!dataIndex || dataIndex.length === 0) {
      text = record;
    } else {
      text = get(record, dataIndex);
    }
    var tdProps = {
      onClick: this.handleClick
    };
    var colSpan;
    var rowSpan;
    if (customRender) {
      text = customRender({
        text,
        record,
        index: index2,
        column
      });
      if (isInvalidRenderCellText(text)) {
        tdProps = text.props || text.attrs || tdProps;
        var _tdProps = tdProps;
        colSpan = _tdProps.colSpan;
        rowSpan = _tdProps.rowSpan;
        text = text.children;
      }
    }
    if (column.customCell) {
      tdProps = _extends$1(_extends$1({}, tdProps), column.customCell(record, index2));
    }
    if (isInvalidRenderCellText(text)) {
      text = null;
    }
    if (transformCellText) {
      text = transformCellText({
        text,
        column,
        record,
        index: index2
      });
    }
    var indentText = expandIcon ? createVNode("span", {
      "style": {
        paddingLeft: "".concat(indentSize * indent, "px")
      },
      "class": "".concat(prefixCls2, "-indent indent-level-").concat(indent)
    }, null) : null;
    if (rowSpan === 0 || colSpan === 0) {
      return null;
    }
    if (column.align) {
      tdProps.style = _extends$1({
        textAlign: column.align
      }, tdProps.style);
    }
    var cellClassName = classNames(className, column.class, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-cell-ellipsis"), !!column.ellipsis), _defineProperty$U(_classNames, "".concat(prefixCls2, "-cell-break-word"), !!column.width), _defineProperty$U(_classNames, "".concat(rootPrefixCls, "-cell-fix-left"), isFixLeft), _defineProperty$U(_classNames, "".concat(rootPrefixCls, "-cell-fix-left-first"), firstFixLeft), _defineProperty$U(_classNames, "".concat(rootPrefixCls, "-cell-fix-left-last"), lastFixLeft), _defineProperty$U(_classNames, "".concat(rootPrefixCls, "-cell-fix-right"), isFixRight), _defineProperty$U(_classNames, "".concat(rootPrefixCls, "-cell-fix-right-first"), firstFixRight), _defineProperty$U(_classNames, "".concat(rootPrefixCls, "-cell-fix-right-last"), lastFixRight), _classNames));
    if (column.ellipsis) {
      if (typeof text === "string") {
        tdProps.title = text;
      }
    }
    return createVNode(BodyCell, _objectSpread2$2(_objectSpread2$2({
      "class": cellClassName
    }, tdProps), {}, {
      style: _extends$1(_extends$1({}, tdProps.style || {}), fixedStyle)
    }), {
      default: function _default8() {
        return [indentText, expandIcon, toRaw(text)];
      }
    });
  }
};
var __rest$d = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$7() {
}
var TableRow = {
  name: "TableRow",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: initDefaultProps$2({
    customRow: PropsTypes.func,
    record: PropsTypes.object,
    prefixCls: PropsTypes.string,
    columns: PropsTypes.array,
    index: PropsTypes.number,
    rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]).isRequired,
    className: PropsTypes.string,
    indent: PropsTypes.number,
    indentSize: PropsTypes.number,
    hasExpandIcon: PropsTypes.func,
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.looseBool])),
    renderExpandIcon: PropsTypes.func,
    renderExpandIconCell: PropsTypes.func,
    components: PropsTypes.any,
    expandedRow: PropsTypes.looseBool,
    isAnyColumnsFixed: PropsTypes.looseBool,
    ancestorKeys: PropsTypes.array.isRequired,
    expandIconColumnIndex: PropsTypes.number,
    expandRowByClick: PropsTypes.looseBool
  }, {
    hasExpandIcon: function hasExpandIcon() {
    },
    renderExpandIcon: function renderExpandIcon2() {
    },
    renderExpandIconCell: function renderExpandIconCell() {
    }
  }),
  setup: function setup132(props2) {
    var store = inject("table-store", function() {
      return {};
    });
    var visible9 = computed(function() {
      var expandedRowKeys2 = store.expandedRowKeys;
      var ancestorKeys = props2.ancestorKeys;
      return !!(ancestorKeys.length === 0 || ancestorKeys.every(function(k2) {
        return expandedRowKeys2.includes(k2);
      }));
    });
    var height = computed(function() {
      var expandedRowsHeight = store.expandedRowsHeight, fixedColumnsBodyRowsHeight = store.fixedColumnsBodyRowsHeight;
      var fixed = props2.fixed, rowKey = props2.rowKey;
      if (!fixed) {
        return null;
      }
      if (expandedRowsHeight[rowKey]) {
        return expandedRowsHeight[rowKey];
      }
      if (fixedColumnsBodyRowsHeight[rowKey]) {
        return fixedColumnsBodyRowsHeight[rowKey];
      }
      return null;
    });
    var hovered = computed(function() {
      var currentHoverKey = store.currentHoverKey;
      var rowKey = props2.rowKey;
      return currentHoverKey === rowKey;
    });
    return {
      store,
      visible: visible9,
      hovered,
      height
    };
  },
  data: function data63() {
    this.rowRef = null;
    return {
      shouldRender: this.visible
    };
  },
  mounted: function mounted33() {
    var _this = this;
    if (this.shouldRender) {
      this.$nextTick(function() {
        _this.saveRowRef();
      });
    }
  },
  watch: {
    visible: function visible8(val) {
      if (val) {
        this.shouldRender = true;
      }
    }
  },
  updated: function updated19() {
    var _this2 = this;
    if (this.shouldRender && !this.rowRef) {
      this.$nextTick(function() {
        _this2.saveRowRef();
      });
    }
  },
  methods: {
    onRowClick: function onRowClick(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$7;
      var record = this.record, index2 = this.index;
      this.__emit("rowClick", record, index2, event);
      rowPropFunc(event);
    },
    onRowDoubleClick: function onRowDoubleClick(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$7;
      var record = this.record, index2 = this.index;
      this.__emit("rowDoubleClick", record, index2, event);
      rowPropFunc(event);
    },
    onContextMenu: function onContextMenu(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$7;
      var record = this.record, index2 = this.index;
      this.__emit("rowContextmenu", record, index2, event);
      rowPropFunc(event);
    },
    onMouseEnter: function onMouseEnter2(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$7;
      var record = this.record, index2 = this.index, rowKey = this.rowKey;
      this.__emit("hover", true, rowKey);
      this.__emit("rowMouseenter", record, index2, event);
      rowPropFunc(event);
    },
    onMouseLeave: function onMouseLeave3(event) {
      var rowPropFunc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop$7;
      var record = this.record, index2 = this.index, rowKey = this.rowKey;
      this.__emit("hover", false, rowKey);
      this.__emit("rowMouseleave", record, index2, event);
      rowPropFunc(event);
    },
    setExpandedRowHeight: function setExpandedRowHeight() {
      var store = this.store, rowKey = this.rowKey;
      var expandedRowsHeight = store.expandedRowsHeight;
      var height = this.rowRef.getBoundingClientRect().height;
      expandedRowsHeight = _extends$1(_extends$1({}, expandedRowsHeight), _defineProperty$U({}, rowKey, height));
      store.expandedRowsHeight = expandedRowsHeight;
    },
    setRowHeight: function setRowHeight() {
      var store = this.store, rowKey = this.rowKey;
      var fixedColumnsBodyRowsHeight = store.fixedColumnsBodyRowsHeight;
      var height = this.rowRef.getBoundingClientRect().height;
      store.fixedColumnsBodyRowsHeight = _extends$1(_extends$1({}, fixedColumnsBodyRowsHeight), _defineProperty$U({}, rowKey, height));
    },
    getStyle: function getStyle2() {
      var height = this.height, visible9 = this.visible;
      var style3 = this.$attrs.style || {};
      if (height) {
        style3 = _extends$1(_extends$1({}, style3), {
          height
        });
      }
      if (!visible9 && !style3.display) {
        style3 = _extends$1(_extends$1({}, style3), {
          display: "none"
        });
      }
      return style3;
    },
    saveRowRef: function saveRowRef() {
      this.rowRef = findDOMNode(this);
      var isAnyColumnsFixed = this.isAnyColumnsFixed, fixed = this.fixed, expandedRow = this.expandedRow, ancestorKeys = this.ancestorKeys;
      if (!isAnyColumnsFixed) {
        return;
      }
      if (!fixed && expandedRow) {
        this.setExpandedRowHeight();
      }
      if (!fixed && ancestorKeys.length >= 0) {
        this.setRowHeight();
      }
    }
  },
  render: function render123() {
    var _this3 = this;
    if (!this.shouldRender) {
      return null;
    }
    var prefixCls2 = this.prefixCls, columns2 = this.columns, record = this.record, rowKey = this.rowKey, index2 = this.index, _this$customRow = this.customRow, customRow = _this$customRow === void 0 ? noop$7 : _this$customRow, indent = this.indent, indentSize = this.indentSize, hovered = this.hovered, height = this.height, visible9 = this.visible, components3 = this.components, hasExpandIcon3 = this.hasExpandIcon, renderExpandIcon5 = this.renderExpandIcon, renderExpandIconCell3 = this.renderExpandIconCell;
    var BodyRow = components3.body.row;
    var BodyCell = components3.body.cell;
    var className = this.$attrs.class || "";
    if (hovered) {
      className += " ".concat(prefixCls2, "-hover");
    }
    var cells = [];
    renderExpandIconCell3(cells);
    for (var i2 = 0; i2 < columns2.length; i2 += 1) {
      var column = columns2[i2];
      warning$4(column.onCellClick === void 0, "column[onCellClick] is deprecated, please use column[customCell] instead.");
      cells.push(createVNode(TableCell, {
        "prefixCls": prefixCls2,
        "record": record,
        "indentSize": indentSize,
        "indent": indent,
        "index": index2,
        "colIndex": i2,
        "column": column,
        "key": column.key || column.dataIndex,
        "expandIcon": hasExpandIcon3(i2) && renderExpandIcon5(),
        "component": BodyCell
      }, null));
    }
    var _a = customRow(record, index2) || {}, customClass = _a.class, customClassName = _a.className, customStyle = _a.style, rowProps2 = __rest$d(_a, ["class", "className", "style"]);
    var style3 = {
      height: typeof height === "number" ? "".concat(height, "px") : height
    };
    if (!visible9) {
      style3.display = "none";
    }
    style3 = _extends$1(_extends$1({}, style3), customStyle);
    var rowClassName2 = classNames(prefixCls2, className, "".concat(prefixCls2, "-level-").concat(indent), customClassName, customClass);
    var bodyRowProps = _extends$1(_extends$1({}, rowProps2), {
      style: style3,
      onClick: function onClick7(e2) {
        _this3.onRowClick(e2, rowProps2.onClick);
      },
      onDblclick: function onDblclick(e2) {
        _this3.onRowDoubleClick(e2, rowProps2.onDblclick);
      },
      onMouseenter: function onMouseenter2(e2) {
        _this3.onMouseEnter(e2, rowProps2.onMouseenter);
      },
      onMouseleave: function onMouseleave2(e2) {
        _this3.onMouseLeave(e2, rowProps2.onMouseleave);
      },
      onContextmenu: function onContextmenu2(e2) {
        _this3.onContextMenu(e2, rowProps2.onContextmenu);
      },
      class: rowClassName2,
      "data-row-key": rowKey
    });
    return createVNode(BodyRow, bodyRowProps, {
      default: function _default8() {
        return [cells];
      }
    });
  }
};
var TableRow$1 = TableRow;
var ExpandIcon = {
  name: "ExpandIcon",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    record: PropsTypes.object,
    prefixCls: PropsTypes.string,
    expandable: PropsTypes.any,
    expanded: PropsTypes.looseBool,
    needIndentSpaced: PropsTypes.looseBool
  },
  methods: {
    onExpand: function onExpand(e2) {
      this.__emit("expand", this.record, e2);
    }
  },
  render: function render124() {
    var expandable = this.expandable, prefixCls2 = this.prefixCls, onExpand3 = this.onExpand, needIndentSpaced = this.needIndentSpaced, expanded = this.expanded;
    if (expandable) {
      var expandClassName = expanded ? "expanded" : "collapsed";
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-expand-icon ").concat(prefixCls2, "-").concat(expandClassName),
        "onClick": onExpand3
      }, null);
    }
    if (needIndentSpaced) {
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-expand-icon ").concat(prefixCls2, "-spaced")
      }, null);
    }
    return null;
  }
};
var ExpandableRow = {
  mixins: [BaseMixin],
  name: "ExpandableRow",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string.isRequired,
    rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]).isRequired,
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.looseBool])),
    record: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.array]).isRequired,
    indentSize: PropsTypes.number,
    needIndentSpaced: PropsTypes.looseBool.isRequired,
    expandRowByClick: PropsTypes.looseBool,
    expandIconAsCell: PropsTypes.looseBool,
    expandIconColumnIndex: PropsTypes.number,
    childrenColumnName: PropsTypes.string,
    expandedRowRender: PropsTypes.func,
    expandIcon: PropsTypes.func
  },
  setup: function setup133(props2) {
    var store = inject("table-store", function() {
      return {};
    });
    return {
      expanded: computed(function() {
        return store.expandedRowKeys.includes(props2.rowKey);
      })
    };
  },
  beforeUnmount: function beforeUnmount24() {
    this.handleDestroy();
  },
  methods: {
    hasExpandIcon: function hasExpandIcon2(columnIndex) {
      var _this$$props = this.$props, expandRowByClick = _this$$props.expandRowByClick, expandIcon = _this$$props.expandIcon;
      if (this.tempExpandIconAsCell || columnIndex !== this.tempExpandIconColumnIndex) {
        return false;
      }
      return !!expandIcon || !expandRowByClick;
    },
    handleExpandChange: function handleExpandChange(record, event) {
      var expanded = this.expanded, rowKey = this.rowKey;
      this.__emit("expandedChange", !expanded, record, event, rowKey);
    },
    handleDestroy: function handleDestroy() {
      var rowKey = this.rowKey, record = this.record;
      this.__emit("expandedChange", false, record, null, rowKey, true);
    },
    handleRowClick: function handleRowClick(record, index2, event) {
      var expandRowByClick = this.expandRowByClick;
      if (expandRowByClick) {
        this.handleExpandChange(record, event);
      }
      this.__emit("rowClick", record, index2, event);
    },
    renderExpandIcon: function renderExpandIcon3() {
      var prefixCls2 = this.prefixCls, expanded = this.expanded, record = this.record, needIndentSpaced = this.needIndentSpaced, expandIcon = this.expandIcon;
      if (expandIcon) {
        return expandIcon({
          prefixCls: prefixCls2,
          expanded,
          record,
          needIndentSpaced,
          expandable: this.expandable,
          onExpand: this.handleExpandChange
        });
      }
      return createVNode(ExpandIcon, {
        "expandable": this.expandable,
        "prefixCls": prefixCls2,
        "onExpand": this.handleExpandChange,
        "needIndentSpaced": needIndentSpaced,
        "expanded": expanded,
        "record": record
      }, null);
    },
    renderExpandIconCell: function renderExpandIconCell2(cells) {
      if (!this.tempExpandIconAsCell) {
        return;
      }
      var prefixCls2 = this.prefixCls;
      cells.push(createVNode("td", {
        "class": "".concat(prefixCls2, "-expand-icon-cell"),
        "key": "rc-table-expand-icon-cell"
      }, [this.renderExpandIcon()]));
    }
  },
  render: function render125() {
    var childrenColumnName = this.childrenColumnName, expandedRowRender = this.expandedRowRender, indentSize = this.indentSize, record = this.record, fixed = this.fixed, expanded = this.expanded;
    this.tempExpandIconAsCell = fixed !== "right" ? this.expandIconAsCell : false;
    this.tempExpandIconColumnIndex = fixed !== "right" ? this.expandIconColumnIndex : -1;
    var childrenData = record[childrenColumnName];
    this.expandable = !!(childrenData || expandedRowRender);
    var expandableRowProps = {
      indentSize,
      expanded,
      hasExpandIcon: this.hasExpandIcon,
      renderExpandIcon: this.renderExpandIcon,
      renderExpandIconCell: this.renderExpandIconCell,
      onRowClick: this.handleRowClick
    };
    return getSlot(this, "default", expandableRowProps);
  }
};
var ExpandableRow$1 = ExpandableRow;
function noop$6() {
}
var BaseTable = {
  name: "BaseTable",
  inheritAttrs: false,
  props: {
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.looseBool])),
    columns: PropsTypes.array.isRequired,
    tableClassName: PropsTypes.string.isRequired,
    hasHead: PropsTypes.looseBool.isRequired,
    hasBody: PropsTypes.looseBool.isRequired,
    expander: PropsTypes.object.isRequired,
    getRowKey: PropsTypes.func,
    isAnyColumnsFixed: PropsTypes.looseBool
  },
  setup: function setup134() {
    return {
      table: inject("table", function() {
        return {};
      }),
      store: inject("table-store", function() {
        return {};
      })
    };
  },
  methods: {
    getColumns: function getColumns2(cols) {
      var _this$$props$columns = this.$props.columns, columns2 = _this$$props$columns === void 0 ? [] : _this$$props$columns;
      return (cols || columns2).map(function(column) {
        return _extends$1(_extends$1({}, column), {
          className: classNames(column.className, column.class)
        });
      });
    },
    handleRowHover: function handleRowHover(isHover, key2) {
      this.store.currentHoverKey = isHover ? key2 : null;
    },
    renderRows: function renderRows(renderData, indent) {
      var _this = this;
      var ancestorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      var _Object$assign = _extends$1(_extends$1(_extends$1({}, this.table.$attrs), this.table.$props), this.table.$data), components3 = _Object$assign.sComponents, prefixCls2 = _Object$assign.prefixCls, childrenColumnName = _Object$assign.childrenColumnName, rowClassName2 = _Object$assign.rowClassName, _Object$assign$custom = _Object$assign.customRow, customRow = _Object$assign$custom === void 0 ? noop$6 : _Object$assign$custom, _Object$assign$onRowC = _Object$assign.onRowClick, onRowClick2 = _Object$assign$onRowC === void 0 ? noop$6 : _Object$assign$onRowC, _Object$assign$onRowD = _Object$assign.onRowDoubleClick, onRowDoubleClick2 = _Object$assign$onRowD === void 0 ? noop$6 : _Object$assign$onRowD, _Object$assign$onRowC2 = _Object$assign.onRowContextMenu, onRowContextMenu = _Object$assign$onRowC2 === void 0 ? noop$6 : _Object$assign$onRowC2, _Object$assign$onRowM = _Object$assign.onRowMouseEnter, onRowMouseEnter = _Object$assign$onRowM === void 0 ? noop$6 : _Object$assign$onRowM, _Object$assign$onRowM2 = _Object$assign.onRowMouseLeave, onRowMouseLeave = _Object$assign$onRowM2 === void 0 ? noop$6 : _Object$assign$onRowM2, rowRef2 = _Object$assign.rowRef;
      var columnManager = this.store.columnManager;
      var getRowKey2 = this.getRowKey, fixed = this.fixed, expander = this.expander, isAnyColumnsFixed = this.isAnyColumnsFixed;
      var rows = [];
      var _loop = function _loop2(i3) {
        var record = renderData[i3];
        var key2 = getRowKey2(record, i3);
        var className = typeof rowClassName2 === "string" ? rowClassName2 : rowClassName2(record, i3, indent);
        var onHoverProps = {};
        if (columnManager.isAnyColumnsFixed) {
          onHoverProps.onHover = _this.handleRowHover;
        }
        var leafColumns = void 0;
        if (fixed === "left") {
          leafColumns = columnManager.leftLeafColumns;
        } else if (fixed === "right") {
          leafColumns = columnManager.rightLeafColumns;
        } else {
          leafColumns = _this.getColumns(columnManager.leafColumns);
        }
        var rowPrefixCls = "".concat(prefixCls2, "-row");
        var expandableRowProps = _extends$1(_extends$1({}, expander.props), {
          fixed,
          index: i3,
          prefixCls: rowPrefixCls,
          record,
          rowKey: key2,
          needIndentSpaced: expander.needIndentSpaced,
          key: key2,
          onRowClick: onRowClick2,
          onExpandedChange: expander.handleExpandChange
        });
        var row = createVNode(ExpandableRow$1, expandableRowProps, {
          default: function _default8(expandableRow) {
            var tableRowProps = _extends$1(_extends$1(_extends$1({
              fixed,
              indent,
              record,
              index: i3,
              prefixCls: rowPrefixCls,
              childrenColumnName,
              columns: leafColumns,
              rowKey: key2,
              ancestorKeys,
              components: components3,
              isAnyColumnsFixed,
              customRow,
              onRowDoubleClick: onRowDoubleClick2,
              onRowContextMenu,
              onRowMouseEnter,
              onRowMouseLeave
            }, onHoverProps), {
              class: className,
              ref: rowRef2(record, i3, indent)
            }), expandableRow);
            return createVNode(TableRow$1, tableRowProps, null);
          }
        });
        rows.push(row);
        expander.renderRows(_this.renderRows, rows, record, i3, indent, fixed, key2, ancestorKeys);
      };
      for (var i2 = 0; i2 < renderData.length; i2 += 1) {
        _loop(i2);
      }
      return rows;
    }
  },
  render: function render126() {
    var _this2 = this;
    var _this$table = this.table, components3 = _this$table.sComponents, prefixCls2 = _this$table.prefixCls, scroll = _this$table.scroll, data80 = _this$table.data;
    var _this$$props = this.$props, expander = _this$$props.expander, tableClassName = _this$$props.tableClassName, hasHead = _this$$props.hasHead, hasBody = _this$$props.hasBody, fixed = _this$$props.fixed;
    var columns2 = this.getColumns();
    var tableStyle = {};
    if (!fixed && scroll.x) {
      tableStyle.width = scroll.x === true ? "auto" : scroll.x;
      tableStyle.width = typeof tableStyle.width === "number" ? "".concat(tableStyle.width, "px") : tableStyle.width;
    }
    if (fixed) {
      var width = columns2.reduce(function(sum, _ref) {
        var w2 = _ref.width;
        return sum + parseFloat(w2, 10);
      }, 0);
      if (width > 0) {
        tableStyle.width = width + "px";
      }
    }
    var Table2 = hasBody ? components3.table : "table";
    var BodyWrapper = components3.body.wrapper;
    var body;
    if (hasBody) {
      body = createVNode(BodyWrapper, {
        "class": "".concat(prefixCls2, "-tbody")
      }, {
        default: function _default8() {
          return [_this2.renderRows(data80, 0)];
        }
      });
    }
    return createVNode(Table2, {
      "class": tableClassName,
      "style": tableStyle,
      "key": "table"
    }, {
      default: function _default8() {
        return [createVNode(ColGroup, {
          "columns": columns2,
          "fixed": fixed
        }, null), hasHead && createVNode(TableHeader, {
          "expander": expander,
          "columns": columns2,
          "fixed": fixed
        }, null), body];
      }
    });
  }
};
var BaseTable$1 = BaseTable;
var HeadTable = {
  name: "HeadTable",
  inheritAttrs: false,
  props: {
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.looseBool])),
    columns: PropsTypes.array.isRequired,
    tableClassName: PropsTypes.string.isRequired,
    handleBodyScrollLeft: PropsTypes.func.isRequired,
    expander: PropsTypes.object.isRequired
  },
  setup: function setup135() {
    return {
      table: inject("table", {})
    };
  },
  render: function render127() {
    var columns2 = this.columns, fixed = this.fixed, tableClassName = this.tableClassName, handleBodyScrollLeft2 = this.handleBodyScrollLeft, expander = this.expander, table = this.table;
    var prefixCls2 = table.prefixCls, scroll = table.scroll, showHeader = table.showHeader, saveRef4 = table.saveRef;
    var useFixedHeader = table.useFixedHeader;
    var headStyle = {};
    var scrollbarWidth = measureScrollbar({
      direction: "vertical"
    });
    if (scroll.y) {
      useFixedHeader = true;
      var scrollbarWidthOfHeader = measureScrollbar({
        direction: "horizontal",
        prefixCls: prefixCls2
      });
      if (scrollbarWidthOfHeader > 0 && !fixed) {
        headStyle.marginBottom = "-".concat(scrollbarWidthOfHeader, "px");
        headStyle.paddingBottom = "0px";
        headStyle.minWidth = "".concat(scrollbarWidth, "px");
        headStyle.overflowX = "scroll";
        headStyle.overflowY = scrollbarWidth === 0 ? "hidden" : "scroll";
      }
    }
    if (!useFixedHeader || !showHeader) {
      return null;
    }
    return createVNode("div", {
      "key": "headTable",
      "ref": fixed ? function() {
      } : saveRef4("headTable"),
      "class": classNames("".concat(prefixCls2, "-header"), _defineProperty$U({}, "".concat(prefixCls2, "-hide-scrollbar"), scrollbarWidth > 0)),
      "style": headStyle,
      "onScroll": handleBodyScrollLeft2
    }, [createVNode(BaseTable$1, {
      "tableClassName": tableClassName,
      "hasHead": true,
      "hasBody": false,
      "fixed": fixed,
      "columns": columns2,
      "expander": expander
    }, null)]);
  }
};
var BodyTable = {
  name: "BodyTable",
  inheritAttrs: false,
  props: {
    columns: PropsTypes.array.isRequired,
    tableClassName: PropsTypes.string.isRequired,
    handleBodyScroll: PropsTypes.func.isRequired,
    handleWheel: PropsTypes.func.isRequired,
    getRowKey: PropsTypes.func.isRequired,
    expander: PropsTypes.object.isRequired,
    isAnyColumnsFixed: PropsTypes.looseBool
  },
  setup: function setup136() {
    return {
      table: inject("table", {})
    };
  },
  render: function render128() {
    var _this$table = this.table, prefixCls2 = _this$table.prefixCls, scroll = _this$table.scroll;
    var columns2 = this.columns, tableClassName = this.tableClassName, getRowKey2 = this.getRowKey, handleBodyScroll2 = this.handleBodyScroll, handleWheel2 = this.handleWheel, expander = this.expander, isAnyColumnsFixed = this.isAnyColumnsFixed;
    var _this$table2 = this.table, useFixedHeader = _this$table2.useFixedHeader, saveRef4 = _this$table2.saveRef;
    var bodyStyle = _extends$1({}, this.table.bodyStyle);
    if (scroll.y) {
      var maxHeight = bodyStyle.maxHeight || scroll.y;
      maxHeight = typeof maxHeight === "number" ? "".concat(maxHeight, "px") : maxHeight;
      bodyStyle.maxHeight = maxHeight;
      bodyStyle.overflowY = bodyStyle.overflowY || "scroll";
      useFixedHeader = true;
    }
    if (scroll.x) {
      bodyStyle.overflowX = bodyStyle.overflowX || "auto";
      bodyStyle.WebkitTransform = "translate3d (0, 0, 0)";
      if (!scroll.y) {
        bodyStyle.overflowY = "hidden";
      }
    }
    var baseTable = createVNode(BaseTable$1, {
      "tableClassName": tableClassName,
      "hasHead": !useFixedHeader,
      "hasBody": true,
      "columns": columns2,
      "expander": expander,
      "getRowKey": getRowKey2,
      "isAnyColumnsFixed": isAnyColumnsFixed
    }, null);
    var useTabIndex = scroll && (scroll.x || scroll.y);
    return createVNode("div", {
      "tabindex": useTabIndex ? -1 : void 0,
      "key": "bodyTable",
      "class": "".concat(prefixCls2, "-body"),
      "style": bodyStyle,
      "ref": saveRef4("bodyTable"),
      "onWheel": handleWheel2,
      "onScroll": handleBodyScroll2
    }, [baseTable]);
  }
};
var ExpandableTableProps = function ExpandableTableProps2() {
  return {
    expandIconAsCell: PropsTypes.looseBool,
    expandRowByClick: PropsTypes.looseBool,
    expandedRowKeys: PropsTypes.array,
    expandedRowClassName: PropsTypes.func,
    defaultExpandAllRows: PropsTypes.looseBool,
    defaultExpandedRowKeys: PropsTypes.array,
    expandIconColumnIndex: PropsTypes.number,
    expandedRowRender: PropsTypes.func,
    expandIcon: PropsTypes.func,
    childrenColumnName: PropsTypes.string,
    indentSize: PropsTypes.number,
    columnManager: PropsTypes.object.isRequired,
    prefixCls: PropsTypes.string.isRequired,
    data: PropsTypes.array,
    getRowKey: PropsTypes.func
  };
};
var ExpandableTable = {
  name: "ExpandableTable",
  inheritAttrs: false,
  mixins: [BaseMixin],
  props: initDefaultProps$2(ExpandableTableProps(), {
    expandIconAsCell: false,
    expandedRowClassName: function expandedRowClassName() {
      return "";
    },
    expandIconColumnIndex: 0,
    defaultExpandAllRows: false,
    defaultExpandedRowKeys: [],
    childrenColumnName: "children",
    indentSize: 15
  }),
  setup: function setup137(props2) {
    var store = inject("table-store", function() {
      return {};
    });
    var data80 = props2.data, childrenColumnName = props2.childrenColumnName, defaultExpandAllRows = props2.defaultExpandAllRows, expandedRowKeys2 = props2.expandedRowKeys, defaultExpandedRowKeys = props2.defaultExpandedRowKeys, getRowKey2 = props2.getRowKey;
    var finalExpandedRowKeys = [];
    var rows = _toConsumableArray(data80);
    if (defaultExpandAllRows) {
      for (var i2 = 0; i2 < rows.length; i2 += 1) {
        var row = rows[i2];
        finalExpandedRowKeys.push(getRowKey2(row, i2));
        rows = rows.concat(row[childrenColumnName] || []);
      }
    } else {
      finalExpandedRowKeys = expandedRowKeys2 || defaultExpandedRowKeys;
    }
    _extends$1(store, {
      expandedRowsHeight: {},
      expandedRowKeys: finalExpandedRowKeys
    });
    return {
      store
    };
  },
  mounted: function mounted34() {
    this.handleUpdated();
  },
  updated: function updated20() {
    this.handleUpdated();
  },
  watch: {
    expandedRowKeys: function expandedRowKeys(val) {
      var _this = this;
      this.$nextTick(function() {
        _this.store.expandedRowKeys = val;
      });
    }
  },
  methods: {
    handleUpdated: function handleUpdated() {
      this.latestExpandedRows = null;
    },
    handleExpandChange: function handleExpandChange2(expanded, record, event, rowKey) {
      var destroy3 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      var expandedRowKeys2 = this.store.expandedRowKeys;
      if (expanded) {
        expandedRowKeys2 = [].concat(_toConsumableArray(expandedRowKeys2), [rowKey]);
      } else {
        var expandedRowIndex = expandedRowKeys2.indexOf(rowKey);
        if (expandedRowIndex !== -1) {
          expandedRowKeys2 = remove(expandedRowKeys2, rowKey);
        }
      }
      if (!this.expandedRowKeys) {
        this.store.expandedRowKeys = expandedRowKeys2;
      }
      if (!this.latestExpandedRows || !shallowEqual$1(this.latestExpandedRows, expandedRowKeys2)) {
        this.latestExpandedRows = expandedRowKeys2;
        this.__emit("expandedRowsChange", expandedRowKeys2);
      }
      if (!destroy3) {
        this.__emit("expand", expanded, record);
      }
    },
    renderExpandIndentCell: function renderExpandIndentCell(rows, fixed) {
      var prefixCls2 = this.prefixCls, expandIconAsCell = this.expandIconAsCell;
      if (!expandIconAsCell || fixed === "right" || !rows.length) {
        return;
      }
      var iconColumn = {
        key: "rc-table-expand-icon-cell",
        className: "".concat(prefixCls2, "-expand-icon-th"),
        title: "",
        rowSpan: rows.length
      };
      rows[0].unshift(_extends$1(_extends$1({}, iconColumn), {
        column: iconColumn
      }));
    },
    renderExpandedRow: function renderExpandedRow(record, index2, expandedRowRender, className, ancestorKeys, indent, fixed) {
      var _this2 = this;
      var prefixCls2 = this.prefixCls, expandIconAsCell = this.expandIconAsCell, indentSize = this.indentSize;
      var parentKey = ancestorKeys[ancestorKeys.length - 1];
      var rowKey = "".concat(parentKey, "-extra-row");
      var components3 = {
        body: {
          row: "tr",
          cell: "td"
        }
      };
      var colCount;
      if (fixed === "left") {
        colCount = this.columnManager.leftLeafColumns.value.length;
      } else if (fixed === "right") {
        colCount = this.columnManager.rightLeafColumns.value.length;
      } else {
        colCount = this.columnManager.leafColumns.value.length;
      }
      var columns2 = [{
        key: "extra-row",
        customRender: function customRender() {
          var expandedRowKeys2 = _this2.store.expandedRowKeys;
          var expanded = expandedRowKeys2.includes(parentKey);
          return {
            props: {
              colSpan: colCount
            },
            children: fixed !== "right" ? expandedRowRender({
              record,
              index: index2,
              indent,
              expanded
            }) : "&nbsp;"
          };
        }
      }];
      if (expandIconAsCell && fixed !== "right") {
        columns2.unshift({
          key: "expand-icon-placeholder",
          customRender: function customRender() {
            return null;
          }
        });
      }
      return createVNode(TableRow$1, {
        "key": rowKey,
        "columns": columns2,
        "class": className,
        "rowKey": rowKey,
        "ancestorKeys": ancestorKeys,
        "prefixCls": "".concat(prefixCls2, "-expanded-row"),
        "indentSize": indentSize,
        "indent": indent,
        "fixed": fixed,
        "components": components3,
        "expandedRow": true,
        "hasExpandIcon": function hasExpandIcon3() {
        }
      }, null);
    },
    renderRows: function renderRows2(_renderRows, rows, record, index2, indent, fixed, parentKey, ancestorKeys) {
      var expandedRowClassName2 = this.expandedRowClassName, expandedRowRender = this.expandedRowRender, childrenColumnName = this.childrenColumnName;
      var childrenData = record[childrenColumnName];
      var nextAncestorKeys = [].concat(_toConsumableArray(ancestorKeys), [parentKey]);
      var nextIndent = indent + 1;
      if (expandedRowRender) {
        rows.push(this.renderExpandedRow(record, index2, expandedRowRender, expandedRowClassName2(record, index2, indent), nextAncestorKeys, nextIndent, fixed));
      }
      if (childrenData) {
        rows.push.apply(rows, _toConsumableArray(_renderRows(childrenData, nextIndent, nextAncestorKeys)));
      }
    }
  },
  render: function render129() {
    var data80 = this.data, childrenColumnName = this.childrenColumnName;
    var props2 = getOptionProps(this);
    var needIndentSpaced = data80.some(function(record) {
      return record[childrenColumnName];
    });
    return getSlot(this, "default", {
      props: _extends$1(_extends$1({}, props2), this.$attrs),
      needIndentSpaced,
      renderRows: this.renderRows,
      handleExpandChange: this.handleExpandChange,
      renderExpandIndentCell: this.renderExpandIndentCell
    });
  }
};
var ExpandableTable$1 = ExpandableTable;
function useLayoutState(defaultState) {
  var stateRef = ref(defaultState);
  var tempState = stateRef.value;
  var updateBatchRef = [];
  var rafRef = ref();
  function setFrameState(updater) {
    wrapperRaf.cancel(rafRef.value);
    updateBatchRef.push(updater);
    rafRef.value = wrapperRaf(function() {
      var prevBatch = updateBatchRef;
      updateBatchRef = [];
      prevBatch.forEach(function(batchUpdater) {
        tempState = batchUpdater(tempState);
      });
      stateRef.value = tempState;
    });
  }
  onBeforeUnmount(function() {
    wrapperRaf.cancel(rafRef.value);
  });
  return [stateRef, setFrameState];
}
function useColumnManager(columns2) {
  var _leafColumns = function _leafColumns2(cls) {
    var fixed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var leafColumns2 = [];
    cls.forEach(function(column) {
      column.fixed = fixed || column.fixed;
      if (!column.children) {
        leafColumns2.push(column);
      } else {
        leafColumns2.push.apply(leafColumns2, _toConsumableArray(_leafColumns2(column.children, column.fixed)));
      }
    });
    return leafColumns2;
  };
  var groupedColumns = computed(function() {
    var _groupColumns = function _groupColumns2(cls) {
      var currentRow = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var parentColumn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var rows = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
      var fixed = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      rows[currentRow] = rows[currentRow] || [];
      var grouped = [];
      var setRowSpan = function setRowSpan2(column) {
        var rowSpan = rows.length - currentRow;
        if (column && !column.children && rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {
          column.rowSpan = rowSpan;
        }
      };
      cls.forEach(function(column, index2) {
        var newColumn = _extends$1({}, column);
        newColumn.fixed = fixed || column.fixed;
        rows[currentRow].push(newColumn);
        parentColumn.colSpan = parentColumn.colSpan || 0;
        if (newColumn.children && newColumn.children.length > 0) {
          newColumn.children = _groupColumns2(newColumn.children, currentRow + 1, newColumn, rows, newColumn.fixed);
          parentColumn.colSpan += newColumn.colSpan;
        } else {
          parentColumn.colSpan += 1;
        }
        for (var i2 = 0; i2 < rows[currentRow].length - 1; i2 += 1) {
          setRowSpan(rows[currentRow][i2]);
        }
        if (index2 + 1 === cls.length) {
          setRowSpan(newColumn);
        }
        grouped.push(newColumn);
      });
      return grouped;
    };
    return _groupColumns(columns2.value);
  });
  var isAnyColumnsFixed = computed(function() {
    return columns2.value.some(function(column) {
      return !!column.fixed;
    });
  });
  var isAnyColumnsLeftFixed = computed(function() {
    return columns2.value.some(function(column) {
      return column.fixed === "left" || column.fixed === true;
    });
  });
  var isAnyColumnsRightFixed = computed(function() {
    return columns2.value.some(function(column) {
      return column.fixed === "right";
    });
  });
  var leftColumns = computed(function() {
    return groupedColumns.value.filter(function(column) {
      return column.fixed === "left" || column.fixed === true;
    });
  });
  var rightColumns = computed(function() {
    return groupedColumns.value.filter(function(column) {
      return column.fixed === "right";
    });
  });
  var leafColumns = computed(function() {
    return _leafColumns(columns2.value);
  });
  var leftLeafColumns = computed(function() {
    return _leafColumns(leftColumns.value);
  });
  var rightLeafColumns = computed(function() {
    return _leafColumns(rightColumns.value);
  });
  return {
    groupedColumns,
    isAnyColumnsFixed,
    isAnyColumnsLeftFixed,
    isAnyColumnsRightFixed,
    leftColumns,
    rightColumns,
    leafColumns,
    leftLeafColumns,
    rightLeafColumns
  };
}
function useStickyOffsets(colWidths, columns2) {
  var stickyOffsets = ref({
    left: [],
    right: []
  });
  var columnCount = ref();
  watch(columns2, function() {
    columnCount.value = columns2.value.length;
  }, {
    immediate: true
  });
  watch([colWidths, columnCount], function() {
    var leftOffsets = [];
    var rightOffsets = [];
    var left = 0;
    var right = 0;
    for (var start = 0; start < columnCount.value; start += 1) {
      leftOffsets[start] = left;
      left += colWidths.value[start] || 0;
      var end = columnCount.value - start - 1;
      rightOffsets[end] = right;
      right += colWidths.value[end] || 0;
    }
    stickyOffsets.value = {
      left: leftOffsets,
      right: rightOffsets
    };
  });
  return stickyOffsets;
}
var Table$1 = defineComponent({
  name: "Table",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2({
    data: PropsTypes.array,
    useFixedHeader: PropsTypes.looseBool,
    columns: PropsTypes.array,
    prefixCls: PropsTypes.string,
    bodyStyle: PropsTypes.object,
    rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
    rowClassName: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
    customRow: PropsTypes.func,
    customHeaderRow: PropsTypes.func,
    showHeader: PropsTypes.looseBool,
    title: PropsTypes.func,
    id: PropsTypes.string,
    footer: PropsTypes.func,
    emptyText: PropsTypes.any,
    scroll: PropsTypes.object,
    rowRef: PropsTypes.func,
    components: PropsTypes.shape({
      table: PropsTypes.any,
      header: PropsTypes.shape({
        wrapper: PropsTypes.any,
        row: PropsTypes.any,
        cell: PropsTypes.any
      }).loose,
      body: PropsTypes.shape({
        wrapper: PropsTypes.any,
        row: PropsTypes.any,
        cell: PropsTypes.any
      }).loose
    }).loose,
    expandIconAsCell: PropsTypes.looseBool,
    expandedRowKeys: PropsTypes.array,
    expandedRowClassName: PropsTypes.func,
    defaultExpandAllRows: PropsTypes.looseBool,
    defaultExpandedRowKeys: PropsTypes.array,
    expandIconColumnIndex: PropsTypes.number,
    expandedRowRender: PropsTypes.func,
    childrenColumnName: PropsTypes.string,
    indentSize: PropsTypes.number,
    expandRowByClick: PropsTypes.looseBool,
    expandIcon: PropsTypes.func,
    tableLayout: PropsTypes.string,
    transformCellText: PropsTypes.func
  }, {
    data: [],
    useFixedHeader: false,
    rowKey: "key",
    rowClassName: function rowClassName() {
      return "";
    },
    prefixCls: "rc-table",
    bodyStyle: {},
    showHeader: true,
    scroll: {},
    rowRef: function rowRef() {
      return null;
    },
    emptyText: function emptyText() {
      return "No Data";
    },
    customHeaderRow: function customHeaderRow() {
    }
  }),
  setup: function setup138(props2) {
    var columnManager = useColumnManager(toRef(props2, "columns"));
    var colsKeys = computed(function() {
      return getColumnsKey(columnManager.leafColumns.value);
    });
    var _useLayoutState = useLayoutState(new Map()), _useLayoutState2 = _slicedToArray$2(_useLayoutState, 2), colsWidths = _useLayoutState2[0], updateColsWidths = _useLayoutState2[1];
    var pureColWidths = computed(function() {
      return colsKeys.value.map(function(columnKey) {
        return colsWidths.value.get(columnKey);
      });
    });
    var stickyOffsets = useStickyOffsets(pureColWidths, columnManager.leafColumns);
    var onColumnResize = function onColumnResize2(columnKey, width) {
      updateColsWidths(function(widths) {
        if (widths.get(columnKey) !== width) {
          var newWidths = new Map(widths);
          newWidths.set(columnKey, width);
          return newWidths;
        }
        return widths;
      });
    };
    var fixedInfoList = computed(function() {
      return columnManager.leafColumns.value.map(function(_2, colIndex) {
        return getCellFixedInfo(colIndex, colIndex, columnManager.leafColumns.value, stickyOffsets.value);
      });
    });
    var store = reactive({
      currentHoverKey: null,
      fixedColumnsHeadRowsHeight: [],
      fixedColumnsBodyRowsHeight: {},
      expandedRowsHeight: {},
      expandedRowKeys: [],
      columnManager,
      fixedInfoList,
      stickyOffsets
    });
    provide("table-store", store);
    var bodyRef = ref();
    var pingedLeft = ref(false);
    var pingedRight = ref(false);
    var horizonScroll = computed(function() {
      return props2.scroll && validateValue(props2.scroll.x);
    });
    var onScroll2 = function onScroll3(currentTarget) {
      var scrollWidth = currentTarget.scrollWidth, clientWidth = currentTarget.clientWidth, scrollLeft2 = currentTarget.scrollLeft;
      pingedLeft.value = scrollLeft2 > 0;
      pingedRight.value = scrollLeft2 < scrollWidth - clientWidth;
    };
    onUpdated(function() {
      nextTick(function() {
        horizonScroll.value && onScroll2(bodyRef.value.$el);
      });
    });
    onMounted(function() {
      nextTick(function() {
        horizonScroll.value && onScroll2(bodyRef.value.$el);
      });
    });
    var onFullTableResize = function onFullTableResize2() {
      horizonScroll.value && onScroll2(bodyRef.value.$el);
    };
    return {
      bodyRef,
      store,
      onColumnResize,
      columnManager,
      onScroll: onScroll2,
      pingedLeft,
      pingedRight,
      onFullTableResize
    };
  },
  data: function data64() {
    this.preData = _toConsumableArray(this.data);
    return {
      sComponents: markRaw(merge$2({
        table: "table",
        header: {
          wrapper: "thead",
          row: "tr",
          cell: "th"
        },
        body: {
          wrapper: "tbody",
          row: "tr",
          cell: "td"
        }
      }, this.components))
    };
  },
  computed: {
    dataLen: function dataLen() {
      return this.$props.data.length;
    }
  },
  watch: {
    components: function components2() {
      this._components = merge$2({
        table: "table",
        header: {
          wrapper: "thead",
          row: "tr",
          cell: "th"
        },
        body: {
          wrapper: "tbody",
          row: "tr",
          cell: "td"
        }
      }, this.components);
    },
    dataLen: function dataLen2(val, preVal) {
      var _this = this;
      if ((val === 0 || preVal === 0) && this.hasScrollX()) {
        nextTick(function() {
          _this.resetScrollX();
        });
      }
    }
  },
  created: function created16() {
    provide("table", this);
    this.setScrollPosition("left");
    this.debouncedWindowResize = debounce(this.handleWindowResize, 150);
  },
  mounted: function mounted35() {
    var _this2 = this;
    this.$nextTick(function() {
      if (_this2.columnManager.isAnyColumnsFixed.value) {
        _this2.handleWindowResize();
        _this2.resizeEvent = addEventListenerWrap(window, "resize", _this2.debouncedWindowResize);
      }
      if (_this2.ref_headTable) {
        _this2.ref_headTable.scrollLeft = 0;
      }
      if (_this2.ref_bodyTable) {
        _this2.ref_bodyTable.scrollLeft = 0;
      }
    });
  },
  updated: function updated21() {
    var _this3 = this;
    this.$nextTick(function() {
      if (_this3.columnManager.isAnyColumnsFixed.value) {
        _this3.handleWindowResize();
        if (!_this3.resizeEvent) {
          _this3.resizeEvent = addEventListenerWrap(window, "resize", _this3.debouncedWindowResize);
        }
      }
    });
  },
  beforeUnmount: function beforeUnmount25() {
    if (this.resizeEvent) {
      this.resizeEvent.remove();
    }
    if (this.debouncedWindowResize) {
      this.debouncedWindowResize.cancel();
    }
  },
  methods: {
    getRowKey: function getRowKey(record, index2) {
      var rowKey = this.rowKey;
      var key2 = typeof rowKey === "function" ? rowKey(record, index2) : record[rowKey];
      warning$4(key2 !== void 0, "Each record in table should have a unique `key` prop,or set `rowKey` to an unique primary key.");
      return key2 === void 0 ? index2 : key2;
    },
    setScrollPosition: function setScrollPosition(position) {
      this.scrollPosition = position;
      if (this.tableNode) {
        var prefixCls2 = this.prefixCls;
        if (position === "both") {
          classes(this.tableNode).remove(new RegExp("^".concat(prefixCls2, "-scroll-position-.+$"))).add("".concat(prefixCls2, "-scroll-position-left")).add("".concat(prefixCls2, "-scroll-position-right"));
        } else {
          classes(this.tableNode).remove(new RegExp("^".concat(prefixCls2, "-scroll-position-.+$"))).add("".concat(prefixCls2, "-scroll-position-").concat(position));
        }
      }
    },
    setScrollPositionClassName: function setScrollPositionClassName() {
      var node = this.ref_bodyTable;
      var scrollToLeft = node.scrollLeft === 0;
      var scrollToRight = node.scrollLeft + 1 >= node.children[0].getBoundingClientRect().width - node.getBoundingClientRect().width;
      if (scrollToLeft && scrollToRight) {
        this.setScrollPosition("both");
      } else if (scrollToLeft) {
        this.setScrollPosition("left");
      } else if (scrollToRight) {
        this.setScrollPosition("right");
      } else if (this.scrollPosition !== "middle") {
        this.setScrollPosition("middle");
      }
    },
    isTableLayoutFixed: function isTableLayoutFixed() {
      var _this$$props = this.$props, tableLayout = _this$$props.tableLayout, _this$$props$columns = _this$$props.columns, columns2 = _this$$props$columns === void 0 ? [] : _this$$props$columns, useFixedHeader = _this$$props.useFixedHeader, _this$$props$scroll = _this$$props.scroll, scroll = _this$$props$scroll === void 0 ? {} : _this$$props$scroll;
      if (typeof tableLayout !== "undefined") {
        return tableLayout === "fixed";
      }
      if (columns2.some(function(_ref) {
        var ellipsis = _ref.ellipsis;
        return !!ellipsis;
      })) {
        return true;
      }
      if (useFixedHeader || scroll.y) {
        return true;
      }
      if (scroll.x && scroll.x !== true && scroll.x !== "max-content") {
        return true;
      }
      return false;
    },
    handleWindowResize: function handleWindowResize() {
      this.syncFixedTableRowHeight();
      this.setScrollPositionClassName();
    },
    syncFixedTableRowHeight: function syncFixedTableRowHeight() {
      var tableRect = this.tableNode.getBoundingClientRect();
      if (tableRect.height !== void 0 && tableRect.height <= 0) {
        return;
      }
      var prefixCls2 = this.prefixCls;
      var headRows = this.ref_headTable ? this.ref_headTable.querySelectorAll("thead") : this.ref_bodyTable.querySelectorAll("thead");
      var bodyRows = this.ref_bodyTable.querySelectorAll(".".concat(prefixCls2, "-row")) || [];
      var fixedColumnsHeadRowsHeight = [].map.call(headRows, function(row) {
        return row.getBoundingClientRect().height ? row.getBoundingClientRect().height - 0.5 : "auto";
      });
      var state2 = this.store;
      var fixedColumnsBodyRowsHeight = [].reduce.call(bodyRows, function(acc, row) {
        var rowKey = row.getAttribute("data-row-key");
        var height = row.getBoundingClientRect().height || state2.fixedColumnsBodyRowsHeight[rowKey] || "auto";
        acc[rowKey] = height;
        return acc;
      }, {});
      if (shallowEqual$1(state2.fixedColumnsHeadRowsHeight, fixedColumnsHeadRowsHeight) && shallowEqual$1(state2.fixedColumnsBodyRowsHeight, fixedColumnsBodyRowsHeight)) {
        return;
      }
      this.store.fixedColumnsHeadRowsHeight = fixedColumnsHeadRowsHeight;
      this.store.fixedColumnsBodyRowsHeight = fixedColumnsBodyRowsHeight;
    },
    resetScrollX: function resetScrollX() {
      if (this.ref_headTable) {
        this.ref_headTable.scrollLeft = 0;
      }
      if (this.ref_bodyTable) {
        this.ref_bodyTable.scrollLeft = 0;
      }
    },
    hasScrollX: function hasScrollX() {
      var _this$scroll = this.scroll, scroll = _this$scroll === void 0 ? {} : _this$scroll;
      return "x" in scroll;
    },
    handleBodyScrollLeft: function handleBodyScrollLeft(e2) {
      var target = e2.target;
      var _this$scroll2 = this.scroll, scroll = _this$scroll2 === void 0 ? {} : _this$scroll2;
      var ref_headTable = this.ref_headTable, ref_bodyTable = this.ref_bodyTable;
      if (target.scrollLeft !== this.lastScrollLeft && scroll.x) {
        if (target === ref_bodyTable && ref_headTable) {
          ref_headTable.scrollLeft = target.scrollLeft;
        } else if (target === ref_headTable && ref_bodyTable) {
          ref_bodyTable.scrollLeft = target.scrollLeft;
        }
        this.setScrollPositionClassName();
      }
      this.lastScrollLeft = target.scrollLeft;
    },
    handleBodyScrollTop: function handleBodyScrollTop(e2) {
      var target = e2.target;
      if (e2.currentTarget !== target) {
        return;
      }
      var _this$scroll3 = this.scroll, scroll = _this$scroll3 === void 0 ? {} : _this$scroll3;
      var ref_headTable = this.ref_headTable, ref_bodyTable = this.ref_bodyTable, ref_fixedColumnsBodyLeft = this.ref_fixedColumnsBodyLeft, ref_fixedColumnsBodyRight = this.ref_fixedColumnsBodyRight;
      if (target.scrollTop !== this.lastScrollTop && scroll.y && target !== ref_headTable) {
        var scrollTop2 = target.scrollTop;
        if (ref_fixedColumnsBodyLeft && target !== ref_fixedColumnsBodyLeft) {
          ref_fixedColumnsBodyLeft.scrollTop = scrollTop2;
        }
        if (ref_fixedColumnsBodyRight && target !== ref_fixedColumnsBodyRight) {
          ref_fixedColumnsBodyRight.scrollTop = scrollTop2;
        }
        if (ref_bodyTable && target !== ref_bodyTable) {
          ref_bodyTable.scrollTop = scrollTop2;
        }
      }
      this.lastScrollTop = target.scrollTop;
    },
    handleBodyScroll: function handleBodyScroll(e2) {
      this.onScroll(e2.target);
      this.handleBodyScrollLeft(e2);
      this.handleBodyScrollTop(e2);
    },
    handleWheel: function handleWheel(event) {
      var _this$$props$scroll2 = this.$props.scroll, scroll = _this$$props$scroll2 === void 0 ? {} : _this$$props$scroll2;
      if (window.navigator.userAgent.match(/Trident\/7\./) && scroll.y) {
        event.preventDefault();
        var wd = event.deltaY;
        var target = event.target;
        var bodyTable = this.ref_bodyTable, fixedColumnsBodyLeft = this.ref_fixedColumnsBodyLeft, fixedColumnsBodyRight = this.ref_fixedColumnsBodyRight;
        var scrollTop2 = 0;
        if (this.lastScrollTop) {
          scrollTop2 = this.lastScrollTop + wd;
        } else {
          scrollTop2 = wd;
        }
        if (fixedColumnsBodyLeft && target !== fixedColumnsBodyLeft) {
          fixedColumnsBodyLeft.scrollTop = scrollTop2;
        }
        if (fixedColumnsBodyRight && target !== fixedColumnsBodyRight) {
          fixedColumnsBodyRight.scrollTop = scrollTop2;
        }
        if (bodyTable && target !== bodyTable) {
          bodyTable.scrollTop = scrollTop2;
        }
      }
    },
    saveRef: function saveRef3(name2) {
      var _this4 = this;
      return function(node) {
        _this4["ref_".concat(name2)] = node;
      };
    },
    saveTableNodeRef: function saveTableNodeRef(node) {
      this.tableNode = node;
    },
    renderMainTable: function renderMainTable() {
      var scroll = this.scroll, prefixCls2 = this.prefixCls;
      var isAnyColumnsFixed = this.columnManager.isAnyColumnsFixed.value;
      var scrollable = isAnyColumnsFixed || scroll.x || scroll.y;
      var table = [this.renderTable({
        columns: this.columnManager.groupedColumns.value,
        isAnyColumnsFixed
      }), this.renderEmptyText(), this.renderFooter()];
      return scrollable ? createVNode(ResizeObserver, {
        "onResize": this.onFullTableResize
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "class": "".concat(prefixCls2, "-scroll")
          }, [table])];
        }
      }) : table;
    },
    renderTable: function renderTable(options2) {
      var columns2 = options2.columns, isAnyColumnsFixed = options2.isAnyColumnsFixed;
      var prefixCls2 = this.prefixCls, _this$scroll4 = this.scroll, scroll = _this$scroll4 === void 0 ? {} : _this$scroll4;
      var tableClassName = scroll.x ? "".concat(prefixCls2, "-fixed") : "";
      var headTable = createVNode(HeadTable, {
        "key": "head",
        "columns": columns2,
        "tableClassName": tableClassName,
        "handleBodyScrollLeft": this.handleBodyScrollLeft,
        "expander": this.expander
      }, null);
      var bodyTable = createVNode(BodyTable, {
        "key": "body",
        "columns": columns2,
        "tableClassName": tableClassName,
        "getRowKey": this.getRowKey,
        "handleWheel": this.handleWheel,
        "handleBodyScroll": this.handleBodyScroll,
        "expander": this.expander,
        "isAnyColumnsFixed": isAnyColumnsFixed,
        "ref": "bodyRef"
      }, null);
      return [headTable, bodyTable];
    },
    renderTitle: function renderTitle() {
      var title2 = this.title, prefixCls2 = this.prefixCls, data80 = this.data;
      return title2 ? createVNode("div", {
        "class": "".concat(prefixCls2, "-title"),
        "key": "title"
      }, [title2(data80)]) : null;
    },
    renderFooter: function renderFooter4() {
      var footer = this.footer, prefixCls2 = this.prefixCls, data80 = this.data;
      return footer ? createVNode("div", {
        "class": "".concat(prefixCls2, "-footer"),
        "key": "footer"
      }, [footer(data80)]) : null;
    },
    renderEmptyText: function renderEmptyText() {
      var emptyText2 = this.emptyText, prefixCls2 = this.prefixCls, data80 = this.data;
      if (data80.length) {
        return null;
      }
      var emptyClassName = "".concat(prefixCls2, "-placeholder");
      return createVNode("div", {
        "class": emptyClassName,
        "key": "emptyText"
      }, [typeof emptyText2 === "function" ? emptyText2() : emptyText2]);
    }
  },
  render: function render130() {
    var _classNames, _this5 = this;
    var props2 = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs);
    var columnManager = this.columnManager, getRowKey2 = this.getRowKey;
    var prefixCls2 = props2.prefixCls;
    var tableClassName = classNames(props2.prefixCls, props2.class, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-fixed-header"), props2.useFixedHeader || props2.scroll && props2.scroll.y), _defineProperty$U(_classNames, "".concat(prefixCls2, "-scroll-position-left ").concat(prefixCls2, "-scroll-position-right"), this.scrollPosition === "both"), _defineProperty$U(_classNames, "".concat(prefixCls2, "-scroll-position-").concat(this.scrollPosition), this.scrollPosition !== "both"), _defineProperty$U(_classNames, "".concat(prefixCls2, "-layout-fixed"), this.isTableLayoutFixed()), _defineProperty$U(_classNames, "".concat(prefixCls2, "-ping-left"), this.pingedLeft), _defineProperty$U(_classNames, "".concat(prefixCls2, "-ping-right"), this.pingedRight), _classNames));
    var dataAndAriaProps = getDataAndAriaProps(props2);
    var expandableTableProps = _extends$1(_extends$1({}, props2), {
      columnManager,
      getRowKey: getRowKey2
    });
    return createVNode(ExpandableTable$1, expandableTableProps, {
      default: function _default8(expander) {
        _this5.expander = expander;
        return createVNode("div", _objectSpread2$2({
          "ref": _this5.saveTableNodeRef,
          "class": tableClassName,
          "style": props2.style,
          "id": props2.id
        }, dataAndAriaProps), [_this5.renderTitle(), createVNode("div", {
          "class": "".concat(prefixCls2, "-content")
        }, [_this5.renderMainTable()])]);
      }
    });
  }
});
var FilterFilled$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M349 838c0 17.7 14.2 32 31.8 32h262.4c17.6 0 31.8-14.3 31.8-32V642H349v196zm531.1-684H143.9c-24.5 0-39.8 26.7-27.5 48l221.3 376h348.8l221.3-376c12.1-21.3-3.2-48-27.7-48z" } }] }, "name": "filter", "theme": "filled" };
var FilterFilledSvg = FilterFilled$2;
function _objectSpread$d(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$e(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$e(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var FilterFilled = function FilterFilled2(props2, context2) {
  var p2 = _objectSpread$d({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": FilterFilledSvg
  }), null);
};
FilterFilled.displayName = "FilterFilled";
FilterFilled.inheritAttrs = false;
var FilterFilled$1 = FilterFilled;
var FilterDropdownMenuWrapper = function FilterDropdownMenuWrapper2(props2, _ref) {
  var slots = _ref.slots;
  var _a;
  return createVNode("div", {
    "class": props2.class,
    "onClick": function onClick7(e2) {
      return e2.stopPropagation();
    }
  }, [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)]);
};
FilterDropdownMenuWrapper.inheritAttrs = false;
var FilterDropdownMenuWrapper$1 = FilterDropdownMenuWrapper;
paginationProps$1();
var ColumnFilterItem = PropsTypes.shape({
  text: PropsTypes.string,
  value: PropsTypes.string,
  children: PropsTypes.array
}).loose;
var columnProps = {
  title: PropsTypes.VNodeChild,
  key: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  dataIndex: PropsTypes.string,
  customRender: PropsTypes.func,
  customCell: PropsTypes.func,
  customHeaderCell: PropsTypes.func,
  align: PropsTypes.oneOf(tuple("left", "right", "center")),
  ellipsis: PropsTypes.looseBool,
  filters: PropsTypes.arrayOf(ColumnFilterItem),
  onFilter: {
    type: Function
  },
  filterMultiple: PropsTypes.looseBool,
  filterDropdown: PropsTypes.any,
  filterDropdownVisible: PropsTypes.looseBool,
  onFilterDropdownVisibleChange: {
    type: Function
  },
  sorter: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.func]),
  defaultSortOrder: PropsTypes.oneOf(tuple("ascend", "descend")),
  colSpan: PropsTypes.number,
  width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  className: PropsTypes.string,
  fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.oneOf(tuple("left", "right"))])),
  filterIcon: PropsTypes.any,
  filteredValue: PropsTypes.array,
  filtered: PropsTypes.looseBool,
  defaultFilteredValue: PropsTypes.array,
  sortOrder: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.oneOf(tuple("ascend", "descend"))])),
  sortDirections: PropsTypes.array
};
var TableLocale = PropsTypes.shape({
  filterTitle: PropsTypes.string,
  filterConfirm: PropsTypes.any,
  filterReset: PropsTypes.any,
  emptyText: PropsTypes.any,
  selectAll: PropsTypes.any,
  selectInvert: PropsTypes.any,
  sortTitle: PropsTypes.string,
  expand: PropsTypes.string,
  collapse: PropsTypes.string
}).loose;
var RowSelectionType = PropsTypes.oneOf(tuple("checkbox", "radio"));
var tableRowSelection = {
  type: RowSelectionType,
  selectedRowKeys: PropsTypes.array,
  getCheckboxProps: PropsTypes.func,
  selections: withUndefined(PropsTypes.oneOfType([PropsTypes.array, PropsTypes.looseBool])),
  hideDefaultSelections: PropsTypes.looseBool,
  fixed: PropsTypes.looseBool,
  columnWidth: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  selectWay: PropsTypes.oneOf(tuple("onSelect", "onSelectMultiple", "onSelectAll", "onSelectInvert")),
  columnTitle: PropsTypes.any
};
var paginationProps = paginationConfig();
var tableProps = {
  prefixCls: PropsTypes.string,
  dropdownPrefixCls: PropsTypes.string,
  rowSelection: PropsTypes.oneOfType([PropsTypes.shape(tableRowSelection).loose, Object]),
  pagination: withUndefined(PropsTypes.oneOfType([PropsTypes.shape(paginationProps).loose, PropsTypes.looseBool])),
  size: PropsTypes.oneOf(tuple("default", "middle", "small", "large")),
  dataSource: PropsTypes.array,
  components: PropsTypes.object,
  columns: {
    type: Array
  },
  rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
  rowClassName: PropsTypes.func,
  expandedRowRender: PropsTypes.any,
  defaultExpandAllRows: PropsTypes.looseBool,
  defaultExpandedRowKeys: PropsTypes.array,
  expandedRowKeys: PropsTypes.array,
  expandIconAsCell: PropsTypes.looseBool,
  expandIconColumnIndex: PropsTypes.number,
  expandRowByClick: PropsTypes.looseBool,
  loading: PropsTypes.oneOfType([PropsTypes.shape(getSpinProps()).loose, PropsTypes.looseBool]),
  locale: TableLocale,
  indentSize: PropsTypes.number,
  customRow: PropsTypes.func,
  customHeaderRow: PropsTypes.func,
  useFixedHeader: PropsTypes.looseBool,
  bordered: PropsTypes.looseBool,
  showHeader: PropsTypes.looseBool,
  footer: PropsTypes.func,
  title: PropsTypes.func,
  scroll: {
    type: Object
  },
  childrenColumnName: PropsTypes.oneOfType([PropsTypes.array, PropsTypes.string]),
  bodyStyle: PropsTypes.style,
  sortDirections: {
    type: Array
  },
  tableLayout: PropsTypes.string,
  getPopupContainer: PropsTypes.func,
  expandIcon: PropsTypes.func,
  transformCellText: PropsTypes.func,
  onExpandedRowsChange: PropsTypes.func,
  onExpand: PropsTypes.func,
  onChange: PropsTypes.func,
  onRowClick: PropsTypes.func
};
var SelectionCheckboxAllProps = {
  propsSymbol: PropsTypes.any,
  store: PropsTypes.any,
  locale: PropsTypes.any,
  disabled: PropsTypes.looseBool,
  getCheckboxPropsByItem: PropsTypes.func,
  getRecordKey: PropsTypes.func,
  data: PropsTypes.array,
  prefixCls: PropsTypes.string,
  hideDefaultSelections: PropsTypes.looseBool,
  selections: PropsTypes.oneOfType([PropsTypes.array, PropsTypes.looseBool]),
  getPopupContainer: PropsTypes.func,
  onSelect: PropsTypes.func
};
var SelectionBoxProps = {
  store: PropsTypes.any,
  type: RowSelectionType,
  defaultSelection: PropsTypes.array,
  rowIndex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  name: PropsTypes.string,
  disabled: PropsTypes.looseBool,
  id: PropsTypes.string
};
var FilterMenuProps = {
  locale: TableLocale,
  selectedKeys: PropsTypes.array,
  column: PropsTypes.object,
  confirmFilter: PropsTypes.func,
  prefixCls: PropsTypes.string,
  dropdownPrefixCls: PropsTypes.string,
  getPopupContainer: PropsTypes.func,
  handleFilter: PropsTypes.func
};
var BaseMixin2 = {
  methods: {
    setState: function setState2() {
      var state2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : void 0;
      var newState = typeof state2 === "function" ? state2(this, this.$props) : state2;
      if (this.getDerivedStateFromProps) {
        var s2 = this.getDerivedStateFromProps(getOptionProps(this), _extends$1(_extends$1({}, this), newState));
        if (s2 === null) {
          return;
        } else {
          newState = _extends$1(_extends$1({}, newState), s2 || {});
        }
      }
      _extends$1(this, newState);
      if (this._.isMounted) {
        this.$forceUpdate();
      }
      nextTick(function() {
        callback && callback();
      });
    },
    __emit: function __emit2() {
      var args = [].slice.call(arguments, 0);
      var eventName = args[0];
      eventName = "on".concat(eventName[0].toUpperCase()).concat(eventName.substring(1));
      var event = this.$props[eventName] || this.$attrs[eventName];
      if (args.length && event) {
        if (Array.isArray(event)) {
          for (var i2 = 0, l2 = event.length; i2 < l2; i2++) {
            event[i2].apply(event, _toConsumableArray(args.slice(1)));
          }
        } else {
          event.apply(void 0, _toConsumableArray(args.slice(1)));
        }
      }
    }
  }
};
function flatArray() {
  var data80 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var childrenName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "children";
  var result = [];
  var loop = function loop2(array3) {
    array3.forEach(function(item) {
      if (item[childrenName]) {
        var newItem = _extends$1({}, item);
        delete newItem[childrenName];
        result.push(newItem);
        if (item[childrenName].length > 0) {
          loop2(item[childrenName]);
        }
      } else {
        result.push(item);
      }
    });
  };
  loop(data80);
  return result;
}
function treeMap(tree, mapper) {
  var childrenName = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  return tree.map(function(node, index2) {
    var extra = {};
    if (node[childrenName]) {
      extra[childrenName] = treeMap(node[childrenName], mapper, childrenName);
    }
    return _extends$1(_extends$1({}, mapper(node, index2)), extra);
  });
}
function flatFilter(tree, callback) {
  return tree.reduce(function(acc, node) {
    if (callback(node)) {
      acc.push(node);
    }
    if (node.children) {
      var children = flatFilter(node.children, callback);
      acc.push.apply(acc, _toConsumableArray(children));
    }
    return acc;
  }, []);
}
function generateValueMaps(items) {
  var maps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  (items || []).forEach(function(_ref) {
    var value26 = _ref.value, children = _ref.children;
    maps[value26.toString()] = value26;
    generateValueMaps(children, maps);
  });
  return maps;
}
function stopPropagation$1(e2) {
  e2.stopPropagation();
}
var FilterDropdown = defineComponent({
  name: "FilterMenu",
  mixins: [BaseMixin2],
  inheritAttrs: false,
  props: initDefaultProps$1(FilterMenuProps, {
    column: {}
  }),
  setup: function setup139(props2) {
    var sSelectedKeys = computed(function() {
      return props2.selectedKeys;
    });
    var sVisible = computed(function() {
      return "filterDropdownVisible" in props2.column ? props2.column.filterDropdownVisible : false;
    });
    var sValueKeys = computed(function() {
      return generateValueMaps(props2.column.filters);
    });
    var state2 = reactive({
      neverShown: false,
      sSelectedKeys: sSelectedKeys.value,
      sKeyPathOfSelectedItem: {},
      sVisible: sVisible.value,
      sValueKeys: sValueKeys.value
    });
    watch(sSelectedKeys, function() {
      state2.sSelectedKeys = sSelectedKeys.value;
    });
    watch(sVisible, function() {
      state2.sVisible = sVisible.value;
    });
    watch(sValueKeys, function() {
      state2.sValueKeys = sValueKeys.value;
    });
    return state2;
  },
  methods: {
    getDropdownVisible: function getDropdownVisible() {
      return !!this.sVisible;
    },
    setSelectedKeys: function setSelectedKeys(_ref) {
      var selectedKeys3 = _ref.selectedKeys;
      this.setState({
        sSelectedKeys: selectedKeys3
      });
    },
    setVisible: function setVisible2(visible9) {
      var column = this.column;
      if (!("filterDropdownVisible" in column)) {
        this.setState({
          sVisible: visible9
        });
      }
      if (column.onFilterDropdownVisibleChange) {
        column.onFilterDropdownVisibleChange(visible9);
      }
    },
    handleClearFilters: function handleClearFilters() {
      this.setState({
        sSelectedKeys: []
      }, this.handleConfirm);
    },
    handleConfirm: function handleConfirm() {
      this.setVisible(false);
      this.$forceUpdate();
      nextTick(this.confirmFilter2);
    },
    onVisibleChange: function onVisibleChange5(visible9) {
      this.setVisible(visible9);
      var column = this.$props.column;
      if (!visible9 && !(column.filterDropdown instanceof Function)) {
        this.confirmFilter2();
      }
    },
    handleMenuItemClick: function handleMenuItemClick(info3) {
      var selectedKeys3 = this.sSelectedKeys;
      if (!info3.keyPath || info3.keyPath.length <= 1) {
        return;
      }
      var keyPathOfSelectedItem = this.sKeyPathOfSelectedItem;
      if (selectedKeys3 && selectedKeys3.indexOf(info3.key) >= 0) {
        delete keyPathOfSelectedItem[info3.key];
      } else {
        keyPathOfSelectedItem[info3.key] = info3.keyPath;
      }
      this.setState({
        sKeyPathOfSelectedItem: keyPathOfSelectedItem
      });
    },
    hasSubMenu: function hasSubMenu() {
      var _this$column$filters = this.column.filters, filters = _this$column$filters === void 0 ? [] : _this$column$filters;
      return filters.some(function(item) {
        return !!(item.children && item.children.length > 0);
      });
    },
    confirmFilter2: function confirmFilter2() {
      var _this$$props = this.$props, column = _this$$props.column, propSelectedKeys = _this$$props.selectedKeys, confirmFilter = _this$$props.confirmFilter;
      var selectedKeys3 = this.sSelectedKeys, valueKeys = this.sValueKeys;
      var filterDropdown = column.filterDropdown;
      if (!shallowEqual$1(selectedKeys3, propSelectedKeys)) {
        confirmFilter(column, filterDropdown ? selectedKeys3 : selectedKeys3.map(function(key2) {
          return valueKeys[key2];
        }).filter(function(key2) {
          return key2 !== void 0;
        }));
      }
    },
    renderMenus: function renderMenus(items) {
      var _this = this;
      var _this$$props2 = this.$props, dropdownPrefixCls = _this$$props2.dropdownPrefixCls, prefixCls2 = _this$$props2.prefixCls;
      return items.map(function(item) {
        if (item.children && item.children.length > 0) {
          var sKeyPathOfSelectedItem = _this.sKeyPathOfSelectedItem;
          var containSelected = Object.keys(sKeyPathOfSelectedItem).some(function(key2) {
            return sKeyPathOfSelectedItem[key2].indexOf(item.value) >= 0;
          });
          var subMenuCls = classNames("".concat(prefixCls2, "-dropdown-submenu"), _defineProperty$U({}, "".concat(dropdownPrefixCls, "-submenu-contain-selected"), containSelected));
          return createVNode(SubMenu, {
            "title": item.text,
            "popupClassName": subMenuCls,
            "key": item.value
          }, {
            default: function _default8() {
              return [_this.renderMenus(item.children)];
            }
          });
        }
        return _this.renderMenuItem(item);
      });
    },
    renderFilterIcon: function renderFilterIcon() {
      var _classNames2;
      var _a, _b;
      var column = this.column, locale2 = this.locale, prefixCls2 = this.prefixCls, selectedKeys3 = this.selectedKeys;
      var filtered = selectedKeys3 && selectedKeys3.length > 0;
      var filterIcon = column.filterIcon;
      if (typeof filterIcon === "function") {
        filterIcon = filterIcon({
          filtered,
          column
        });
      }
      var dropdownIconClass = classNames((_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(prefixCls2, "-selected"), "filtered" in column ? column.filtered : filtered), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-open"), this.getDropdownVisible()), _classNames2));
      if (!filterIcon) {
        return createVNode(FilterFilled$1, {
          "title": locale2.filterTitle,
          "class": dropdownIconClass,
          "onClick": stopPropagation$1
        }, null);
      }
      if (filterIcon.length === 1 && isValidElement(filterIcon[0])) {
        return cloneElement(filterIcon[0], {
          title: ((_a = filterIcon.props) === null || _a === void 0 ? void 0 : _a.title) || locale2.filterTitle,
          onClick: stopPropagation$1,
          class: classNames("".concat(prefixCls2, "-icon"), dropdownIconClass, (_b = filterIcon.props) === null || _b === void 0 ? void 0 : _b.class)
        });
      }
      return createVNode("span", {
        "class": classNames("".concat(prefixCls2, "-icon"), dropdownIconClass),
        "onClick": stopPropagation$1
      }, [filterIcon]);
    },
    renderMenuItem: function renderMenuItem(item) {
      var column = this.column;
      var selectedKeys3 = this.sSelectedKeys;
      var multiple = "filterMultiple" in column ? column.filterMultiple : true;
      var input = multiple ? createVNode(Checkbox, {
        "checked": selectedKeys3 && selectedKeys3.indexOf(item.value) >= 0
      }, null) : createVNode(Radio, {
        "checked": selectedKeys3 && selectedKeys3.indexOf(item.value) >= 0
      }, null);
      return createVNode(MenuItem, {
        "key": item.value
      }, {
        default: function _default8() {
          return [input, createVNode("span", null, [item.text])];
        }
      });
    }
  },
  render: function render131() {
    var _this2 = this;
    var originSelectedKeys = this.sSelectedKeys;
    var column = this.column, locale2 = this.locale, prefixCls2 = this.prefixCls, dropdownPrefixCls = this.dropdownPrefixCls, getPopupContainer = this.getPopupContainer;
    var multiple = "filterMultiple" in column ? column.filterMultiple : true;
    var dropdownMenuClass = classNames(_defineProperty$U({}, "".concat(dropdownPrefixCls, "-menu-without-submenu"), !this.hasSubMenu()));
    var filterDropdown = column.filterDropdown;
    if (filterDropdown instanceof Function) {
      filterDropdown = filterDropdown({
        prefixCls: "".concat(dropdownPrefixCls, "-custom"),
        setSelectedKeys: function setSelectedKeys2(selectedKeys3) {
          return _this2.setSelectedKeys({
            selectedKeys: selectedKeys3
          });
        },
        selectedKeys: originSelectedKeys,
        confirm: this.handleConfirm,
        clearFilters: this.handleClearFilters,
        filters: column.filters,
        visible: this.getDropdownVisible(),
        column
      });
    }
    var menus = filterDropdown ? createVNode(FilterDropdownMenuWrapper$1, {
      "class": "".concat(prefixCls2, "-dropdown")
    }, {
      default: function _default8() {
        return [filterDropdown];
      }
    }) : createVNode(FilterDropdownMenuWrapper$1, {
      "class": "".concat(prefixCls2, "-dropdown")
    }, {
      default: function _default8() {
        return [createVNode(Menu, {
          "multiple": multiple,
          "onClick": _this2.handleMenuItemClick,
          "prefixCls": "".concat(dropdownPrefixCls, "-menu"),
          "class": dropdownMenuClass,
          "onSelect": _this2.setSelectedKeys,
          "onDeselect": _this2.setSelectedKeys,
          "selectedKeys": originSelectedKeys,
          "getPopupContainer": getPopupContainer
        }, {
          default: function _default9() {
            return [_this2.renderMenus(column.filters)];
          }
        }), createVNode("div", {
          "class": "".concat(prefixCls2, "-dropdown-btns")
        }, [createVNode("a", {
          "class": "".concat(prefixCls2, "-dropdown-link confirm"),
          "onClick": _this2.handleConfirm
        }, [locale2.filterConfirm]), createVNode("a", {
          "class": "".concat(prefixCls2, "-dropdown-link clear"),
          "onClick": _this2.handleClearFilters
        }, [locale2.filterReset])])];
      }
    });
    return createVNode(Dropdown$1, {
      "trigger": ["click"],
      "placement": "bottomRight",
      "visible": this.getDropdownVisible(),
      "onVisibleChange": this.onVisibleChange,
      "getPopupContainer": getPopupContainer,
      "forceRender": true,
      "overlay": menus
    }, {
      default: function _default8() {
        return [_this2.renderFilterIcon()];
      }
    });
  }
});
var __rest$c = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var SelectionBox = defineComponent({
  name: "SelectionBox",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: SelectionBoxProps,
  setup: function setup140(props2) {
    return {
      checked: computed(function() {
        var store = props2.store, defaultSelection = props2.defaultSelection, rowIndex = props2.rowIndex;
        var checked2 = false;
        if (store.selectionDirty) {
          checked2 = store.selectedRowKeys.indexOf(rowIndex) >= 0;
        } else {
          checked2 = store.selectedRowKeys.indexOf(rowIndex) >= 0 || defaultSelection.indexOf(rowIndex) >= 0;
        }
        return checked2;
      })
    };
  },
  render: function render132() {
    var _a = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs), type3 = _a.type, rowIndex = _a.rowIndex, rest = __rest$c(_a, ["type", "rowIndex"]);
    var checked2 = this.checked;
    var checkboxProps = _extends$1({
      checked: checked2
    }, rest);
    if (type3 === "radio") {
      checkboxProps.value = rowIndex;
      return createVNode(Radio, checkboxProps, null);
    }
    return createVNode(Checkbox, checkboxProps, null);
  }
});
function checkSelection(_ref) {
  var store = _ref.store, getCheckboxPropsByItem2 = _ref.getCheckboxPropsByItem, getRecordKey2 = _ref.getRecordKey, data80 = _ref.data, type3 = _ref.type, byDefaultChecked = _ref.byDefaultChecked;
  return byDefaultChecked ? data80[type3](function(item, i2) {
    return getCheckboxPropsByItem2(item, i2).defaultChecked;
  }) : data80[type3](function(item, i2) {
    return store.selectedRowKeys.indexOf(getRecordKey2(item, i2)) >= 0;
  });
}
function getIndeterminateState(props2) {
  var store = props2.store, data80 = props2.data;
  if (!data80.length) {
    return false;
  }
  var someCheckedNotByDefaultChecked = checkSelection(_extends$1(_extends$1({}, props2), {
    data: data80,
    type: "some",
    byDefaultChecked: false
  })) && !checkSelection(_extends$1(_extends$1({}, props2), {
    data: data80,
    type: "every",
    byDefaultChecked: false
  }));
  var someCheckedByDefaultChecked = checkSelection(_extends$1(_extends$1({}, props2), {
    data: data80,
    type: "some",
    byDefaultChecked: true
  })) && !checkSelection(_extends$1(_extends$1({}, props2), {
    data: data80,
    type: "every",
    byDefaultChecked: true
  }));
  if (store.selectionDirty) {
    return someCheckedNotByDefaultChecked;
  }
  return someCheckedNotByDefaultChecked || someCheckedByDefaultChecked;
}
function getCheckState(props2) {
  var store = props2.store, data80 = props2.data;
  if (!data80.length) {
    return false;
  }
  if (store.selectionDirty) {
    return checkSelection(_extends$1(_extends$1({}, props2), {
      data: data80,
      type: "every",
      byDefaultChecked: false
    }));
  }
  return checkSelection(_extends$1(_extends$1({}, props2), {
    data: data80,
    type: "every",
    byDefaultChecked: false
  })) || checkSelection(_extends$1(_extends$1({}, props2), {
    data: data80,
    type: "every",
    byDefaultChecked: true
  }));
}
var SelectionCheckboxAll = defineComponent({
  name: "SelectionCheckboxAll",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: SelectionCheckboxAllProps,
  setup: function setup141(props2) {
    return {
      defaultSelections: [],
      checked: computed(function() {
        return getCheckState(props2);
      }),
      indeterminate: computed(function() {
        return getIndeterminateState(props2);
      })
    };
  },
  created: function created17() {
    var props2 = this.$props;
    this.defaultSelections = props2.hideDefaultSelections ? [] : [{
      key: "all",
      text: props2.locale.selectAll
    }, {
      key: "invert",
      text: props2.locale.selectInvert
    }];
  },
  methods: {
    handleSelectAllChange: function handleSelectAllChange(e2) {
      var checked2 = e2.target.checked;
      this.$emit("select", checked2 ? "all" : "removeAll", 0, null);
    },
    renderMenus: function renderMenus2(selections) {
      var _this = this;
      return selections.map(function(selection, index2) {
        return createVNode(Menu.Item, {
          "key": selection.key || index2
        }, {
          default: function _default8() {
            return [createVNode("div", {
              "onClick": function onClick7() {
                _this.$emit("select", selection.key, index2, selection.onSelect);
              }
            }, [selection.text])];
          }
        });
      });
    }
  },
  render: function render133() {
    var _this2 = this;
    var disabled = this.disabled, prefixCls2 = this.prefixCls, selections = this.selections, getPopupContainer = this.getPopupContainer, checked2 = this.checked, indeterminate = this.indeterminate;
    var selectionPrefixCls = "".concat(prefixCls2, "-selection");
    var customSelections = null;
    if (selections) {
      var newSelections = Array.isArray(selections) ? this.defaultSelections.concat(selections) : this.defaultSelections;
      var menu = createVNode(Menu, {
        "class": "".concat(selectionPrefixCls, "-menu"),
        "selectedKeys": []
      }, {
        default: function _default8() {
          return [_this2.renderMenus(newSelections)];
        }
      });
      customSelections = newSelections.length > 0 ? createVNode(Dropdown$1, {
        "getPopupContainer": getPopupContainer,
        "overlay": menu
      }, {
        default: function _default8() {
          return [createVNode("div", {
            "class": "".concat(selectionPrefixCls, "-down")
          }, [createVNode(DownOutlined$1, null, null)])];
        }
      }) : null;
    }
    return createVNode("div", {
      "class": selectionPrefixCls
    }, [createVNode(Checkbox, {
      "class": classNames(_defineProperty$U({}, "".concat(selectionPrefixCls, "-select-all-custom"), customSelections)),
      "checked": checked2,
      "indeterminate": indeterminate,
      "disabled": disabled,
      "onChange": this.handleSelectAllChange
    }, null), customSelections]);
  }
});
var Column = defineComponent({
  name: "ATableColumn",
  props: columnProps,
  render: function render134() {
    return null;
  }
});
var ColumnGroup = defineComponent({
  name: "ATableColumnGroup",
  props: {
    fixed: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.oneOf(tuple("left", "right"))])),
    title: PropsTypes.any
  },
  __ANT_TABLE_COLUMN_GROUP: true,
  render: function render135() {
    return null;
  }
});
var BodyRowProps = {
  store: PropsTypes.object,
  rowKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  prefixCls: PropsTypes.string
};
function createBodyRow() {
  var Component = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "tr";
  var BodyRow = defineComponent({
    name: "BodyRow",
    inheritAttrs: false,
    props: BodyRowProps,
    setup: function setup161(props2) {
      return {
        selected: computed(function() {
          var _a;
          return ((_a = props2.store) === null || _a === void 0 ? void 0 : _a.selectedRowKeys.indexOf(props2.rowKey)) >= 0;
        })
      };
    },
    render: function render166() {
      var _className, _this = this;
      var rowProps2 = omit$2(_extends$1(_extends$1({}, this.$props), this.$attrs), ["prefixCls", "rowKey", "store", "class"]);
      var className = (_className = {}, _defineProperty$U(_className, "".concat(this.prefixCls, "-row-selected"), this.selected), _defineProperty$U(_className, this.$attrs.class, !!this.$attrs.class), _className);
      return createVNode(Component, _objectSpread2$2({
        "class": className
      }, rowProps2), {
        default: function _default8() {
          return [getSlot(_this)];
        }
      });
    }
  });
  return BodyRow;
}
var __rest$b = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function noop$5() {
}
function stopPropagation(e2) {
  e2.stopPropagation();
}
function getRowSelection(props2) {
  return props2.rowSelection || {};
}
function getColumnKey(column, index2) {
  return column.key || column.dataIndex || index2;
}
function isSameColumn(a2, b2) {
  if (a2 && b2 && a2.key && a2.key === b2.key) {
    return true;
  }
  return a2 === b2 || shallowEqual$1(a2, b2, function(value26, other) {
    if (typeof value26 === "function" && typeof other === "function") {
      return value26 === other || value26.toString() === other.toString();
    }
    if (Array.isArray(value26) && Array.isArray(other)) {
      return value26 === other || shallowEqual$1(value26, other);
    }
  });
}
var defaultPagination = {
  onChange: noop$5,
  onShowSizeChange: noop$5
};
var emptyObject = {};
var createComponents = function createComponents2() {
  var components3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var bodyRow = components3 && components3.body && components3.body.row;
  return _extends$1(_extends$1({}, components3), {
    body: _extends$1(_extends$1({}, components3.body), {
      row: createBodyRow(bodyRow)
    })
  });
};
function isTheSameComponents() {
  var components1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var components22 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return components1 === components22 || ["table", "header", "body"].every(function(key2) {
    return shallowEqual$1(components1[key2], components22[key2]);
  });
}
function getFilteredValueColumns(state2, columns2) {
  return flatFilter(columns2 || (state2 || {}).columns || [], function(column) {
    return typeof column.filteredValue !== "undefined";
  });
}
function getFiltersFromColumns(state2, columns2) {
  var filters = {};
  getFilteredValueColumns(state2, columns2).forEach(function(col) {
    var colKey = getColumnKey(col);
    filters[colKey] = col.filteredValue;
  });
  return filters;
}
function isFiltersChanged(state2, filters) {
  if (Object.keys(filters).length !== Object.keys(state2.filters).length) {
    return true;
  }
  return Object.keys(filters).some(function(columnKey) {
    return filters[columnKey] !== state2.filters[columnKey];
  });
}
var defaultTableProps = initDefaultProps$1(tableProps, {
  dataSource: [],
  useFixedHeader: false,
  size: "default",
  loading: false,
  bordered: false,
  indentSize: 20,
  locale: {},
  rowKey: "key",
  showHeader: true,
  sortDirections: ["ascend", "descend"],
  childrenColumnName: "children"
});
var T$1 = defineComponent({
  name: "Table",
  mixins: [BaseMixin],
  inheritAttrs: false,
  Column,
  ColumnGroup,
  props: defaultTableProps,
  setup: function setup142(props2) {
    var store = reactive({
      selectedRowKeys: getRowSelection(props2).selectedRowKeys || [],
      selectionDirty: false
    });
    return {
      vcTable: null,
      checkboxPropsCache: {},
      store,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data65() {
    var props2 = getOptionProps(this);
    warning$4(!props2.expandedRowRender || !("scroll" in props2), "`expandedRowRender` and `scroll` are not compatible. Please use one of them at one time.");
    var getDefaultSortOrder2 = this.getDefaultSortOrder, getDefaultFilters2 = this.getDefaultFilters, getDefaultPagination2 = this.getDefaultPagination;
    return _extends$1(_extends$1({}, getDefaultSortOrder2(props2.columns || [])), {
      sFilters: getDefaultFilters2(props2.columns),
      sPagination: getDefaultPagination2(this.$props),
      pivot: void 0,
      sComponents: markRaw(createComponents(this.components)),
      filterDataCnt: 0
    });
  },
  watch: {
    pagination: {
      handler: function handler5(val) {
        this.setState(function(previousState) {
          var newPagination = _extends$1(_extends$1(_extends$1({}, defaultPagination), previousState.sPagination), val);
          newPagination.current = newPagination.current || 1;
          newPagination.pageSize = newPagination.pageSize || 10;
          return {
            sPagination: val !== false ? newPagination : emptyObject
          };
        });
      },
      deep: true
    },
    rowSelection: {
      handler: function handler6(val, oldVal) {
        if (val && "selectedRowKeys" in val) {
          this.store.selectedRowKeys = val.selectedRowKeys || [];
          var rowSelection = this.rowSelection;
          if (rowSelection && val.getCheckboxProps !== rowSelection.getCheckboxProps) {
            this.checkboxPropsCache = {};
          }
        } else if (oldVal && !val) {
          this.store.selectedRowKeys = [];
        }
      },
      deep: true
    },
    dataSource: function dataSource() {
      this.store.selectionDirty = false;
      this.checkboxPropsCache = {};
    },
    columns: function columns(val) {
      var filteredValueColumns = getFilteredValueColumns({
        columns: val
      }, val);
      if (filteredValueColumns.length > 0) {
        var filtersFromColumns = getFiltersFromColumns({
          columns: val
        }, val);
        var newFilters = _extends$1({}, this.sFilters);
        Object.keys(filtersFromColumns).forEach(function(key2) {
          newFilters[key2] = filtersFromColumns[key2];
        });
        if (isFiltersChanged({
          filters: this.sFilters
        }, newFilters)) {
          this.setState({
            sFilters: newFilters
          });
        }
      }
    },
    components: {
      handler: function handler7(val, oldVal) {
        if (!isTheSameComponents(val, oldVal)) {
          var components3 = createComponents(val);
          this.setState({
            sComponents: components3
          });
        }
      },
      deep: true
    }
  },
  updated: function updated22() {
    var columns2 = this.columns, sortColumn = this.sSortColumn, sortOrder = this.sSortOrder;
    if (this.getSortOrderColumns(columns2).length > 0) {
      var sortState = this.getSortStateFromColumns(columns2);
      if (!isSameColumn(sortState.sSortColumn, sortColumn) || sortState.sSortOrder !== sortOrder) {
        this.setState(sortState);
      }
    }
  },
  methods: {
    setTableRef: function setTableRef(table) {
      this.vcTable = table;
    },
    getCheckboxPropsByItem: function getCheckboxPropsByItem(item, index2) {
      var rowSelection = getRowSelection(this.$props);
      if (!rowSelection.getCheckboxProps) {
        return {};
      }
      var key2 = this.getRecordKey(item, index2);
      if (!this.checkboxPropsCache[key2]) {
        this.checkboxPropsCache[key2] = rowSelection.getCheckboxProps(item) || {};
      }
      return this.checkboxPropsCache[key2];
    },
    getDefaultSelection: function getDefaultSelection() {
      var _this = this;
      var rowSelection = getRowSelection(this.$props);
      if (!rowSelection.getCheckboxProps) {
        return [];
      }
      return this.getFlatData().filter(function(item, rowIndex) {
        return _this.getCheckboxPropsByItem(item, rowIndex).defaultChecked;
      }).map(function(record, rowIndex) {
        return _this.getRecordKey(record, rowIndex);
      });
    },
    getDefaultPagination: function getDefaultPagination(props2) {
      var pagination = _typeof$2(props2.pagination) === "object" ? props2.pagination : {};
      var current2;
      if ("current" in pagination) {
        current2 = pagination.current;
      } else if ("defaultCurrent" in pagination) {
        current2 = pagination.defaultCurrent;
      }
      var pageSize2;
      if ("pageSize" in pagination) {
        pageSize2 = pagination.pageSize;
      } else if ("defaultPageSize" in pagination) {
        pageSize2 = pagination.defaultPageSize;
      }
      return this.hasPagination(props2) ? _extends$1(_extends$1(_extends$1({}, defaultPagination), pagination), {
        current: current2 || 1,
        pageSize: pageSize2 || 10
      }) : {};
    },
    getSortOrderColumns: function getSortOrderColumns(columns2) {
      return flatFilter(columns2 || this.columns || [], function(column) {
        return "sortOrder" in column;
      });
    },
    getDefaultFilters: function getDefaultFilters(columns2) {
      var definedFilters = getFiltersFromColumns({
        columns: this.columns
      }, columns2);
      var defaultFilteredValueColumns = flatFilter(columns2 || [], function(column) {
        return typeof column.defaultFilteredValue !== "undefined";
      });
      var defaultFilters = defaultFilteredValueColumns.reduce(function(soFar, col) {
        var colKey = getColumnKey(col);
        soFar[colKey] = col.defaultFilteredValue;
        return soFar;
      }, {});
      return _extends$1(_extends$1({}, defaultFilters), definedFilters);
    },
    getDefaultSortOrder: function getDefaultSortOrder(columns2) {
      var definedSortState = this.getSortStateFromColumns(columns2);
      var defaultSortedColumn = flatFilter(columns2 || [], function(column) {
        return column.defaultSortOrder != null;
      })[0];
      if (defaultSortedColumn && !definedSortState.sortColumn) {
        return {
          sSortColumn: defaultSortedColumn,
          sSortOrder: defaultSortedColumn.defaultSortOrder
        };
      }
      return definedSortState;
    },
    getSortStateFromColumns: function getSortStateFromColumns(columns2) {
      var sortedColumn = this.getSortOrderColumns(columns2).filter(function(col) {
        return col.sortOrder;
      })[0];
      if (sortedColumn) {
        return {
          sSortColumn: sortedColumn,
          sSortOrder: sortedColumn.sortOrder
        };
      }
      return {
        sSortColumn: null,
        sSortOrder: null
      };
    },
    getMaxCurrent: function getMaxCurrent(total2) {
      var _this$sPagination = this.sPagination, current2 = _this$sPagination.current, pageSize2 = _this$sPagination.pageSize;
      if ((current2 - 1) * pageSize2 >= total2) {
        return Math.floor((total2 - 1) / pageSize2) + 1;
      }
      return current2;
    },
    getRecordKey: function getRecordKey(record, index2) {
      var rowKey = this.rowKey;
      var recordKey = typeof rowKey === "function" ? rowKey(record, index2) : record[rowKey];
      warning$4(recordKey !== void 0, "Table", "Each record in dataSource of table should have a unique `key` prop, or set `rowKey` of Table to an unique primary key, ");
      return recordKey === void 0 ? index2 : recordKey;
    },
    getSorterFn: function getSorterFn(state2) {
      var _ref = state2 || this.$data, sortOrder = _ref.sSortOrder, sortColumn = _ref.sSortColumn;
      if (!sortOrder || !sortColumn || typeof sortColumn.sorter !== "function") {
        return;
      }
      return function(a2, b2) {
        var result = sortColumn.sorter(a2, b2, sortOrder);
        if (result !== 0) {
          return sortOrder === "descend" ? -result : result;
        }
        return 0;
      };
    },
    getCurrentPageData: function getCurrentPageData() {
      var data80 = this.getLocalData();
      this.filterDataCnt = data80.length;
      var current2;
      var pageSize2;
      var sPagination = this.sPagination;
      if (!this.hasPagination()) {
        pageSize2 = Number.MAX_VALUE;
        current2 = 1;
      } else {
        pageSize2 = sPagination.pageSize;
        current2 = this.getMaxCurrent(sPagination.total || data80.length);
      }
      if (data80.length > pageSize2 || pageSize2 === Number.MAX_VALUE) {
        data80 = data80.slice((current2 - 1) * pageSize2, current2 * pageSize2);
      }
      return data80;
    },
    getFlatData: function getFlatData() {
      var childrenColumnName = this.$props.childrenColumnName;
      return flatArray(this.getLocalData(null, false), childrenColumnName);
    },
    getFlatCurrentPageData: function getFlatCurrentPageData() {
      var childrenColumnName = this.$props.childrenColumnName;
      return flatArray(this.getCurrentPageData(), childrenColumnName);
    },
    getLocalData: function getLocalData(state2) {
      var _this2 = this;
      var filter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var currentState = state2 || this.$data;
      var filters = currentState.sFilters;
      var dataSource3 = this.$props.dataSource;
      var data80 = dataSource3 || [];
      data80 = data80.slice(0);
      var sorterFn = this.getSorterFn(currentState);
      if (sorterFn) {
        data80 = this.recursiveSort(_toConsumableArray(data80), sorterFn);
      }
      if (filter && filters) {
        Object.keys(filters).forEach(function(columnKey) {
          var col = _this2.findColumn(columnKey);
          if (!col) {
            return;
          }
          var values = filters[columnKey] || [];
          if (values.length === 0) {
            return;
          }
          var onFilter = col.onFilter;
          data80 = onFilter ? data80.filter(function(record) {
            return values.some(function(v2) {
              return onFilter(v2, record);
            });
          }) : data80;
        });
      }
      return data80;
    },
    onRow: function onRow(prefixCls2, record, index2) {
      var customRow = this.customRow;
      var custom = customRow ? customRow(record, index2) : {};
      return _extends$1(_extends$1({}, custom), {
        prefixCls: prefixCls2,
        store: this.store,
        rowKey: this.getRecordKey(record, index2)
      });
    },
    setSelectedRowKeys: function setSelectedRowKeys(selectedRowKeys, selectionInfo) {
      var _this3 = this;
      var selectWay = selectionInfo.selectWay, record = selectionInfo.record, checked2 = selectionInfo.checked, changeRowKeys = selectionInfo.changeRowKeys, nativeEvent = selectionInfo.nativeEvent;
      var rowSelection = getRowSelection(this.$props);
      if (rowSelection && !("selectedRowKeys" in rowSelection)) {
        this.store.selectedRowKeys = selectedRowKeys;
      }
      var data80 = this.getFlatData();
      if (!rowSelection.onChange && !rowSelection[selectWay]) {
        return;
      }
      var selectedRows = data80.filter(function(row, i2) {
        return selectedRowKeys.indexOf(_this3.getRecordKey(row, i2)) >= 0;
      });
      if (rowSelection.onChange) {
        rowSelection.onChange(selectedRowKeys, selectedRows);
      }
      if (selectWay === "onSelect" && rowSelection.onSelect) {
        rowSelection.onSelect(record, checked2, selectedRows, nativeEvent);
      } else if (selectWay === "onSelectMultiple" && rowSelection.onSelectMultiple) {
        var changeRows = data80.filter(function(row, i2) {
          return changeRowKeys.indexOf(_this3.getRecordKey(row, i2)) >= 0;
        });
        rowSelection.onSelectMultiple(checked2, selectedRows, changeRows);
      } else if (selectWay === "onSelectAll" && rowSelection.onSelectAll) {
        var _changeRows = data80.filter(function(row, i2) {
          return changeRowKeys.indexOf(_this3.getRecordKey(row, i2)) >= 0;
        });
        rowSelection.onSelectAll(checked2, selectedRows, _changeRows);
      } else if (selectWay === "onSelectInvert" && rowSelection.onSelectInvert) {
        rowSelection.onSelectInvert(selectedRowKeys);
      }
    },
    generatePopupContainerFunc: function generatePopupContainerFunc(getPopupContainer) {
      var scroll = this.$props.scroll;
      var table = this.vcTable;
      if (getPopupContainer) {
        return getPopupContainer;
      }
      return scroll && table ? function() {
        return table.tableNode;
      } : void 0;
    },
    scrollToFirstRow: function scrollToFirstRow() {
      var _this4 = this;
      var scroll = this.$props.scroll;
      if (scroll && scroll.scrollToFirstRowOnChange !== false) {
        scrollTo$1(0, {
          getContainer: function getContainer5() {
            return _this4.vcTable.ref_bodyTable;
          }
        });
      }
    },
    isSameColumn: function isSameColumn2(a2, b2) {
      if (a2 && b2 && a2.key && a2.key === b2.key) {
        return true;
      }
      return a2 === b2 || shallowEqual$1(a2, b2, function(value26, other) {
        if (typeof value26 === "function" && typeof other === "function") {
          return value26 === other || value26.toString() === other.toString();
        }
      });
    },
    handleFilter: function handleFilter(column, nextFilters) {
      var _this5 = this;
      var props2 = this.$props;
      var pagination = _extends$1({}, this.sPagination);
      var filters = _extends$1(_extends$1({}, this.sFilters), _defineProperty$U({}, getColumnKey(column), nextFilters));
      var currentColumnKeys = [];
      treeMap(this.columns, function(c2) {
        if (!c2.children) {
          currentColumnKeys.push(getColumnKey(c2));
        }
      });
      Object.keys(filters).forEach(function(columnKey) {
        if (currentColumnKeys.indexOf(columnKey) < 0) {
          delete filters[columnKey];
        }
      });
      if (props2.pagination) {
        pagination.current = 1;
        pagination.onChange(pagination.current);
      }
      var newState = {
        sPagination: pagination,
        sFilters: {}
      };
      var filtersToSetState = _extends$1({}, filters);
      getFilteredValueColumns({
        columns: props2.columns
      }).forEach(function(col) {
        var columnKey = getColumnKey(col);
        if (columnKey) {
          delete filtersToSetState[columnKey];
        }
      });
      if (Object.keys(filtersToSetState).length > 0) {
        newState.sFilters = filtersToSetState;
      }
      if (_typeof$2(props2.pagination) === "object" && "current" in props2.pagination) {
        newState.sPagination = _extends$1(_extends$1({}, pagination), {
          current: this.sPagination.current
        });
      }
      this.setState(newState, function() {
        _this5.scrollToFirstRow();
        _this5.store.selectionDirty = false;
        _this5.$emit.apply(_this5, ["change"].concat(_toConsumableArray(_this5.prepareParamsArguments(_extends$1(_extends$1({}, _this5.$data), {
          sSelectionDirty: false,
          sFilters: filters,
          sPagination: pagination
        })))));
      });
    },
    handleSelect: function handleSelect2(record, rowIndex, e2) {
      var _this6 = this;
      var checked2 = e2.target.checked;
      var nativeEvent = e2.nativeEvent;
      var defaultSelection = this.store.selectionDirty ? [] : this.getDefaultSelection();
      var selectedRowKeys = this.store.selectedRowKeys.concat(defaultSelection);
      var key2 = this.getRecordKey(record, rowIndex);
      var pivot = this.$data.pivot;
      var rows = this.getFlatCurrentPageData();
      var realIndex = rowIndex;
      if (this.$props.expandedRowRender) {
        realIndex = rows.findIndex(function(row) {
          return _this6.getRecordKey(row, rowIndex) === key2;
        });
      }
      if (nativeEvent.shiftKey && pivot !== void 0 && realIndex !== pivot) {
        var changeRowKeys = [];
        var direction = Math.sign(pivot - realIndex);
        var dist = Math.abs(pivot - realIndex);
        var step = 0;
        var _loop = function _loop2() {
          var i2 = realIndex + step * direction;
          step += 1;
          var row = rows[i2];
          var rowKey = _this6.getRecordKey(row, i2);
          var checkboxProps = _this6.getCheckboxPropsByItem(row, i2);
          if (!checkboxProps.disabled) {
            if (selectedRowKeys.includes(rowKey)) {
              if (!checked2) {
                selectedRowKeys = selectedRowKeys.filter(function(j2) {
                  return rowKey !== j2;
                });
                changeRowKeys.push(rowKey);
              }
            } else if (checked2) {
              selectedRowKeys.push(rowKey);
              changeRowKeys.push(rowKey);
            }
          }
        };
        while (step <= dist) {
          _loop();
        }
        this.setState({
          pivot: realIndex
        });
        this.store.selectionDirty = true;
        this.setSelectedRowKeys(selectedRowKeys, {
          selectWay: "onSelectMultiple",
          record,
          checked: checked2,
          changeRowKeys,
          nativeEvent
        });
      } else {
        if (checked2) {
          selectedRowKeys.push(this.getRecordKey(record, realIndex));
        } else {
          selectedRowKeys = selectedRowKeys.filter(function(i2) {
            return key2 !== i2;
          });
        }
        this.setState({
          pivot: realIndex
        });
        this.store.selectionDirty = true;
        this.setSelectedRowKeys(selectedRowKeys, {
          selectWay: "onSelect",
          record,
          checked: checked2,
          changeRowKeys: void 0,
          nativeEvent
        });
      }
    },
    handleRadioSelect: function handleRadioSelect(record, rowIndex, e2) {
      var checked2 = e2.target.checked;
      var nativeEvent = e2.nativeEvent;
      var key2 = this.getRecordKey(record, rowIndex);
      var selectedRowKeys = [key2];
      this.store.selectionDirty = true;
      this.setSelectedRowKeys(selectedRowKeys, {
        selectWay: "onSelect",
        record,
        checked: checked2,
        changeRowKeys: void 0,
        nativeEvent
      });
    },
    handleSelectRow: function handleSelectRow(selectionKey, index2, onSelectFunc) {
      var _this7 = this;
      var data80 = this.getFlatCurrentPageData();
      var defaultSelection = this.store.selectionDirty ? [] : this.getDefaultSelection();
      var selectedRowKeys = this.store.selectedRowKeys.concat(defaultSelection);
      var changeableRowKeys = data80.filter(function(item, i2) {
        return !_this7.getCheckboxPropsByItem(item, i2).disabled;
      }).map(function(item, i2) {
        return _this7.getRecordKey(item, i2);
      });
      var changeRowKeys = [];
      var selectWay = "onSelectAll";
      var checked2;
      switch (selectionKey) {
        case "all":
          changeableRowKeys.forEach(function(key2) {
            if (selectedRowKeys.indexOf(key2) < 0) {
              selectedRowKeys.push(key2);
              changeRowKeys.push(key2);
            }
          });
          selectWay = "onSelectAll";
          checked2 = true;
          break;
        case "removeAll":
          changeableRowKeys.forEach(function(key2) {
            if (selectedRowKeys.indexOf(key2) >= 0) {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key2), 1);
              changeRowKeys.push(key2);
            }
          });
          selectWay = "onSelectAll";
          checked2 = false;
          break;
        case "invert":
          changeableRowKeys.forEach(function(key2) {
            if (selectedRowKeys.indexOf(key2) < 0) {
              selectedRowKeys.push(key2);
            } else {
              selectedRowKeys.splice(selectedRowKeys.indexOf(key2), 1);
            }
            changeRowKeys.push(key2);
            selectWay = "onSelectInvert";
          });
          break;
      }
      this.store.selectionDirty = true;
      var rowSelection = this.rowSelection;
      var customSelectionStartIndex = 2;
      if (rowSelection && rowSelection.hideDefaultSelections) {
        customSelectionStartIndex = 0;
      }
      if (index2 >= customSelectionStartIndex && typeof onSelectFunc === "function") {
        return onSelectFunc(changeableRowKeys);
      }
      this.setSelectedRowKeys(selectedRowKeys, {
        selectWay,
        checked: checked2,
        changeRowKeys
      });
    },
    handlePageChange: function handlePageChange(current2) {
      var props2 = this.$props;
      var pagination = _extends$1({}, this.sPagination);
      if (current2) {
        pagination.current = current2;
      } else {
        pagination.current = pagination.current || 1;
      }
      for (var _len = arguments.length, otherArguments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        otherArguments[_key - 1] = arguments[_key];
      }
      pagination.onChange.apply(pagination, [pagination.current].concat(otherArguments));
      var newState = {
        sPagination: pagination
      };
      if (props2.pagination && _typeof$2(props2.pagination) === "object" && "current" in props2.pagination) {
        newState.sPagination = _extends$1(_extends$1({}, pagination), {
          current: this.sPagination.current
        });
      }
      this.setState(newState, this.scrollToFirstRow);
      this.store.selectionDirty = false;
      this.$emit.apply(this, ["change"].concat(_toConsumableArray(this.prepareParamsArguments(_extends$1(_extends$1({}, this.$data), {
        sSelectionDirty: false,
        sPagination: pagination
      })))));
    },
    handleShowSizeChange: function handleShowSizeChange(current2, pageSize2) {
      var pagination = this.sPagination;
      pagination.onShowSizeChange(current2, pageSize2);
      var nextPagination = _extends$1(_extends$1({}, pagination), {
        pageSize: pageSize2,
        current: current2
      });
      this.setState({
        sPagination: nextPagination
      }, this.scrollToFirstRow);
      this.$emit.apply(this, ["change"].concat(_toConsumableArray(this.prepareParamsArguments(_extends$1(_extends$1({}, this.$data), {
        sPagination: nextPagination
      })))));
    },
    toggleSortOrder: function toggleSortOrder(column) {
      var sortDirections = column.sortDirections || this.sortDirections;
      var sortOrder = this.sSortOrder, sortColumn = this.sSortColumn;
      var newSortOrder;
      if (isSameColumn(sortColumn, column) && sortOrder !== void 0) {
        var methodIndex = sortDirections.indexOf(sortOrder) + 1;
        newSortOrder = methodIndex === sortDirections.length ? void 0 : sortDirections[methodIndex];
      } else {
        newSortOrder = sortDirections[0];
      }
      var newState = {
        sSortOrder: newSortOrder,
        sSortColumn: newSortOrder ? column : null
      };
      if (this.getSortOrderColumns().length === 0) {
        this.setState(newState, this.scrollToFirstRow);
      }
      this.$emit.apply(this, ["change"].concat(_toConsumableArray(this.prepareParamsArguments(_extends$1(_extends$1({}, this.$data), newState), column))));
    },
    hasPagination: function hasPagination(props2) {
      return (props2 || this.$props).pagination !== false;
    },
    isSortColumn: function isSortColumn(column) {
      var sortColumn = this.sSortColumn;
      if (!column || !sortColumn) {
        return false;
      }
      return getColumnKey(sortColumn) === getColumnKey(column);
    },
    prepareParamsArguments: function prepareParamsArguments(state2, column) {
      var pagination = _extends$1({}, state2.sPagination);
      delete pagination.onChange;
      delete pagination.onShowSizeChange;
      var filters = state2.sFilters;
      var sorter = {};
      var currentColumn = column;
      if (state2.sSortColumn && state2.sSortOrder) {
        currentColumn = state2.sSortColumn;
        sorter.column = state2.sSortColumn;
        sorter.order = state2.sSortOrder;
      }
      if (currentColumn) {
        sorter.field = currentColumn.dataIndex;
        sorter.columnKey = getColumnKey(currentColumn);
      }
      var extra = {
        currentDataSource: this.getLocalData(state2)
      };
      return [pagination, filters, sorter, extra];
    },
    findColumn: function findColumn(myKey) {
      var column;
      treeMap(this.columns, function(c2) {
        if (getColumnKey(c2) === myKey) {
          column = c2;
        }
      });
      return column;
    },
    recursiveSort: function recursiveSort(data80, sorterFn) {
      var _this8 = this;
      var _this$childrenColumnN = this.childrenColumnName, childrenColumnName = _this$childrenColumnN === void 0 ? "children" : _this$childrenColumnN;
      return data80.sort(sorterFn).map(function(item) {
        return item[childrenColumnName] ? _extends$1(_extends$1({}, item), _defineProperty$U({}, childrenColumnName, _this8.recursiveSort(_toConsumableArray(item[childrenColumnName]), sorterFn))) : item;
      });
    },
    renderExpandIcon: function renderExpandIcon4(prefixCls2) {
      if (this.expandIcon) {
        return this.expandIcon;
      }
      return function(_ref2) {
        var expandable = _ref2.expandable, expanded = _ref2.expanded, needIndentSpaced = _ref2.needIndentSpaced, record = _ref2.record, onExpand3 = _ref2.onExpand;
        if (expandable) {
          return createVNode(LocaleReceiver, {
            "componentName": "Table",
            "defaultLocale": defaultLocale.Table,
            "children": function children(locale2) {
              var _classNames;
              return createVNode(TransButton$1, {
                "class": classNames("".concat(prefixCls2, "-row-expand-icon"), (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-row-collapsed"), !expanded), _defineProperty$U(_classNames, "".concat(prefixCls2, "-row-expanded"), expanded), _classNames)),
                "onClick": function onClick7(event) {
                  onExpand3(record, event);
                },
                "aria-label": expanded ? locale2.collapse : locale2.expand,
                "noStyle": true
              }, null);
            }
          }, null);
        }
        if (needIndentSpaced) {
          return createVNode("span", {
            "class": "".concat(prefixCls2, "-row-expand-icon ").concat(prefixCls2, "-row-spaced")
          }, null);
        }
        return null;
      };
    },
    renderPagination: function renderPagination2(prefixCls2, paginationPosition) {
      if (!this.hasPagination()) {
        return null;
      }
      var size2 = "default";
      var pagination = this.sPagination;
      if (pagination.size) {
        size2 = pagination.size;
      } else if (this.size === "middle" || this.size === "small") {
        size2 = "small";
      }
      var position = pagination.position || "bottom";
      var total2 = pagination.total || this.filterDataCnt;
      var cls = pagination.class, style3 = pagination.style;
      pagination.onChange;
      pagination.onShowSizeChange;
      var restProps = __rest$b(pagination, ["class", "style", "onChange", "onShowSizeChange"]);
      var paginationProps3 = _extends$1(_extends$1({
        key: "pagination-".concat(paginationPosition),
        class: classNames(cls, "".concat(prefixCls2, "-pagination"))
      }, restProps), {
        total: total2,
        size: size2,
        current: this.getMaxCurrent(total2),
        style: style3,
        onChange: this.handlePageChange,
        onShowSizeChange: this.handleShowSizeChange
      });
      return total2 > 0 && (position === paginationPosition || position === "both") ? createVNode(Pagination, paginationProps3, null) : null;
    },
    renderSelectionBox: function renderSelectionBox(type3) {
      var _this9 = this;
      return function(_ref3) {
        var record = _ref3.record, index2 = _ref3.index;
        var rowKey = _this9.getRecordKey(record, index2);
        var props2 = _this9.getCheckboxPropsByItem(record, index2);
        var handleChange22 = function handleChange23(e2) {
          type3 === "radio" ? _this9.handleRadioSelect(record, index2, e2) : _this9.handleSelect(record, index2, e2);
        };
        var selectionBoxProps = _extends$1({
          type: type3,
          store: _this9.store,
          rowIndex: rowKey,
          defaultSelection: _this9.getDefaultSelection(),
          onChange: handleChange22
        }, props2);
        return createVNode("span", {
          "onClick": stopPropagation
        }, [createVNode(SelectionBox, selectionBoxProps, null)]);
      };
    },
    renderRowSelection: function renderRowSelection(_ref4) {
      var _this10 = this;
      var prefixCls2 = _ref4.prefixCls, locale2 = _ref4.locale, getPopupContainer = _ref4.getPopupContainer;
      var rowSelection = this.rowSelection;
      var columns2 = this.columns.concat();
      if (rowSelection) {
        var data80 = this.getFlatCurrentPageData().filter(function(item, index2) {
          if (rowSelection.getCheckboxProps) {
            return !_this10.getCheckboxPropsByItem(item, index2).disabled;
          }
          return true;
        });
        var selectionColumnClass = classNames("".concat(prefixCls2, "-selection-column"), _defineProperty$U({}, "".concat(prefixCls2, "-selection-column-custom"), rowSelection.selections));
        var selectionColumn = _defineProperty$U({
          key: "selection-column",
          customRender: this.renderSelectionBox(rowSelection.type),
          className: selectionColumnClass,
          fixed: rowSelection.fixed,
          width: rowSelection.columnWidth,
          title: rowSelection.columnTitle
        }, INTERNAL_COL_DEFINE, {
          class: "".concat(prefixCls2, "-selection-col")
        });
        if (rowSelection.type !== "radio") {
          var checkboxAllDisabled = data80.every(function(item, index2) {
            return _this10.getCheckboxPropsByItem(item, index2).disabled;
          });
          selectionColumn.title = selectionColumn.title || createVNode(SelectionCheckboxAll, {
            "store": this.store,
            "locale": locale2,
            "data": data80,
            "getCheckboxPropsByItem": this.getCheckboxPropsByItem,
            "getRecordKey": this.getRecordKey,
            "disabled": checkboxAllDisabled,
            "prefixCls": prefixCls2,
            "onSelect": this.handleSelectRow,
            "selections": rowSelection.selections,
            "hideDefaultSelections": rowSelection.hideDefaultSelections,
            "getPopupContainer": this.generatePopupContainerFunc(getPopupContainer),
            "propsSymbol": Symbol()
          }, null);
        }
        if ("fixed" in rowSelection) {
          selectionColumn.fixed = rowSelection.fixed;
        } else if (columns2.some(function(column) {
          return column.fixed === "left" || column.fixed === true;
        })) {
          selectionColumn.fixed = "left";
        }
        if (columns2[0] && columns2[0].key === "selection-column") {
          columns2[0] = selectionColumn;
        } else {
          columns2.unshift(selectionColumn);
        }
      }
      return columns2;
    },
    renderColumnsDropdown: function renderColumnsDropdown(_ref5) {
      var _this11 = this;
      var prefixCls2 = _ref5.prefixCls, dropdownPrefixCls = _ref5.dropdownPrefixCls, columns2 = _ref5.columns, locale2 = _ref5.locale, getPopupContainer = _ref5.getPopupContainer;
      var sortOrder = this.sSortOrder, filters = this.sFilters;
      return treeMap(columns2, function(column, i2) {
        var _classNames3;
        var key2 = getColumnKey(column, i2);
        var filterDropdown;
        var sortButton;
        var customHeaderCell = column.customHeaderCell;
        var isSortColumn2 = _this11.isSortColumn(column);
        if (column.filters && column.filters.length > 0 || column.filterDropdown) {
          var colFilters = key2 in filters ? filters[key2] : [];
          filterDropdown = createVNode(FilterDropdown, {
            "locale": locale2,
            "column": column,
            "selectedKeys": colFilters,
            "confirmFilter": _this11.handleFilter,
            "prefixCls": "".concat(prefixCls2, "-filter"),
            "dropdownPrefixCls": dropdownPrefixCls || "ant-dropdown",
            "getPopupContainer": _this11.generatePopupContainerFunc(getPopupContainer),
            "key": "filter-dropdown"
          }, null);
        }
        if (column.sorter) {
          var sortDirections = column.sortDirections || _this11.sortDirections;
          var isAscend = isSortColumn2 && sortOrder === "ascend";
          var isDescend = isSortColumn2 && sortOrder === "descend";
          var ascend = sortDirections.indexOf("ascend") !== -1 && createVNode(CaretUpFilled$1, {
            "class": "".concat(prefixCls2, "-column-sorter-up ").concat(isAscend ? "on" : "off"),
            "key": "caret-up"
          }, null);
          var descend = sortDirections.indexOf("descend") !== -1 && createVNode(CaretDownFilled$1, {
            "class": "".concat(prefixCls2, "-column-sorter-down ").concat(isDescend ? "on" : "off"),
            "key": "caret-down"
          }, null);
          sortButton = createVNode("div", {
            "title": locale2.sortTitle,
            "class": classNames("".concat(prefixCls2, "-column-sorter-inner"), ascend && descend && "".concat(prefixCls2, "-column-sorter-inner-full")),
            "key": "sorter"
          }, [ascend, descend]);
          customHeaderCell = function customHeaderCell2(col) {
            var colProps2 = {};
            if (column.customHeaderCell) {
              colProps2 = _extends$1({}, column.customHeaderCell(col));
            }
            var onHeaderCellClick = colProps2.onClick;
            colProps2.onClick = function() {
              _this11.toggleSortOrder(column);
              if (onHeaderCellClick) {
                onHeaderCellClick.apply(void 0, arguments);
              }
            };
            return colProps2;
          };
        }
        return _extends$1(_extends$1({}, column), {
          className: classNames(column.className, (_classNames3 = {}, _defineProperty$U(_classNames3, "".concat(prefixCls2, "-column-has-actions"), sortButton || filterDropdown), _defineProperty$U(_classNames3, "".concat(prefixCls2, "-column-has-filters"), filterDropdown), _defineProperty$U(_classNames3, "".concat(prefixCls2, "-column-has-sorters"), sortButton), _defineProperty$U(_classNames3, "".concat(prefixCls2, "-column-sort"), isSortColumn2 && sortOrder), _classNames3)),
          title: [createVNode("span", {
            "key": "title",
            "class": "".concat(prefixCls2, "-header-column")
          }, [createVNode("div", {
            "class": sortButton ? "".concat(prefixCls2, "-column-sorters") : void 0
          }, [createVNode("span", {
            "class": "".concat(prefixCls2, "-column-title")
          }, [_this11.renderColumnTitle(column.title)]), createVNode("span", {
            "class": "".concat(prefixCls2, "-column-sorter")
          }, [sortButton])])]), filterDropdown],
          customHeaderCell
        });
      });
    },
    renderColumnTitle: function renderColumnTitle(title2) {
      var _this$$data = this.$data, filters = _this$$data.sFilters, sortOrder = _this$$data.sSortOrder, sortColumn = _this$$data.sSortColumn;
      if (title2 instanceof Function) {
        return title2({
          filters,
          sortOrder,
          sortColumn
        });
      }
      return title2;
    },
    renderTable: function renderTable2(_ref6) {
      var _classNames4, _this12 = this;
      var prefixCls2 = _ref6.prefixCls, renderEmpty2 = _ref6.renderEmpty, dropdownPrefixCls = _ref6.dropdownPrefixCls, contextLocale = _ref6.contextLocale, contextGetPopupContainer = _ref6.getPopupContainer, transformCellText = _ref6.transformCellText;
      var _a = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs), showHeader = _a.showHeader, locale2 = _a.locale, getPopupContainer = _a.getPopupContainer;
      _a.style;
      var restProps = __rest$b(_a, ["showHeader", "locale", "getPopupContainer", "style"]);
      var data80 = this.getCurrentPageData();
      var expandIconAsCell = this.expandedRowRender && this.expandIconAsCell !== false;
      var realGetPopupContainer = getPopupContainer || contextGetPopupContainer;
      var mergedLocale = _extends$1(_extends$1({}, contextLocale), locale2);
      if (!locale2 || !locale2.emptyText) {
        mergedLocale.emptyText = renderEmpty2("Table");
      }
      var classString = classNames((_classNames4 = {}, _defineProperty$U(_classNames4, "".concat(prefixCls2, "-").concat(this.size), true), _defineProperty$U(_classNames4, "".concat(prefixCls2, "-bordered"), this.bordered), _defineProperty$U(_classNames4, "".concat(prefixCls2, "-empty"), !data80.length), _defineProperty$U(_classNames4, "".concat(prefixCls2, "-without-column-header"), !showHeader), _classNames4));
      var columnsWithRowSelection = this.renderRowSelection({
        prefixCls: prefixCls2,
        locale: mergedLocale,
        getPopupContainer: realGetPopupContainer
      });
      var columns2 = this.renderColumnsDropdown({
        columns: columnsWithRowSelection,
        prefixCls: prefixCls2,
        dropdownPrefixCls,
        locale: mergedLocale,
        getPopupContainer: realGetPopupContainer
      }).map(function(column, i2) {
        var newColumn = _extends$1({}, column);
        newColumn.key = getColumnKey(newColumn, i2);
        return newColumn;
      });
      var expandIconColumnIndex = columns2[0] && columns2[0].key === "selection-column" ? 1 : 0;
      if ("expandIconColumnIndex" in restProps) {
        expandIconColumnIndex = restProps.expandIconColumnIndex;
      }
      var vcTableProps = _extends$1(_extends$1({
        key: "table",
        expandIcon: this.renderExpandIcon(prefixCls2)
      }, restProps), {
        customRow: function customRow(record, index2) {
          return _this12.onRow(prefixCls2, record, index2);
        },
        components: this.sComponents,
        prefixCls: prefixCls2,
        data: data80,
        columns: columns2,
        showHeader,
        expandIconColumnIndex,
        expandIconAsCell,
        emptyText: mergedLocale.emptyText,
        transformCellText,
        class: classString,
        ref: this.setTableRef
      });
      return createVNode(Table$1, vcTableProps, null);
    }
  },
  render: function render136() {
    var _this13 = this;
    var customizePrefixCls = this.prefixCls, customizeDropdownPrefixCls = this.dropdownPrefixCls, customizeTransformCellText = this.transformCellText;
    var data80 = this.getCurrentPageData();
    var _this$configProvider = this.configProvider, getContextPopupContainer = _this$configProvider.getPopupContainer, tct = _this$configProvider.transformCellText;
    var getPopupContainer = this.getPopupContainer || getContextPopupContainer;
    var transformCellText = customizeTransformCellText || tct;
    var loading = this.loading;
    if (typeof loading === "boolean") {
      loading = {
        spinning: loading
      };
    }
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var renderEmpty2 = this.configProvider.renderEmpty;
    var prefixCls2 = getPrefixCls2("table", customizePrefixCls);
    var dropdownPrefixCls = getPrefixCls2("dropdown", customizeDropdownPrefixCls);
    var table = createVNode(LocaleReceiver, {
      "componentName": "Table",
      "defaultLocale": defaultLocale.Table,
      "children": function children(locale2) {
        return _this13.renderTable({
          prefixCls: prefixCls2,
          renderEmpty: renderEmpty2,
          dropdownPrefixCls,
          contextLocale: locale2,
          getPopupContainer,
          transformCellText
        });
      }
    }, null);
    var paginationPatchClass = this.hasPagination() && data80 && data80.length !== 0 ? "".concat(prefixCls2, "-with-pagination") : "".concat(prefixCls2, "-without-pagination");
    var spinProps = _extends$1(_extends$1({}, loading), {
      class: loading && loading.spinning ? "".concat(paginationPatchClass, " ").concat(prefixCls2, "-spin-holder") : ""
    });
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    return createVNode("div", {
      "class": classNames("".concat(prefixCls2, "-wrapper"), className),
      "style": style3
    }, [createVNode(Spin, spinProps, {
      default: function _default8() {
        return [_this13.renderPagination(prefixCls2, "top"), table, _this13.renderPagination(prefixCls2, "bottom")];
      }
    })]);
  }
});
var __rest$a = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Table = defineComponent({
  name: "ATable",
  Column: T$1.Column,
  ColumnGroup: T$1.ColumnGroup,
  inheritAttrs: false,
  props: defaultTableProps,
  methods: {
    normalize: function normalize() {
      var _this = this;
      var elements = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var flattenElements = flattenChildren(elements);
      var columns2 = [];
      flattenElements.forEach(function(element) {
        var _a, _b, _c, _d;
        if (!element) {
          return;
        }
        var key2 = getKey$2(element);
        var style3 = ((_a = element.props) === null || _a === void 0 ? void 0 : _a.style) || {};
        var cls = ((_b = element.props) === null || _b === void 0 ? void 0 : _b.class) || "";
        var props2 = getPropsData(element);
        var _e = element.children || {}, children = _e.default, restSlots = __rest$a(_e, ["default"]);
        var column = _extends$1(_extends$1(_extends$1({}, restSlots), props2), {
          style: style3,
          class: cls
        });
        if (key2) {
          column.key = key2;
        }
        if ((_c = element.type) === null || _c === void 0 ? void 0 : _c.__ANT_TABLE_COLUMN_GROUP) {
          column.children = _this.normalize(typeof children === "function" ? children() : children);
        } else {
          var customRender = (_d = element.children) === null || _d === void 0 ? void 0 : _d.default;
          column.customRender = column.customRender || customRender;
        }
        columns2.push(column);
      });
      return columns2;
    },
    updateColumns: function updateColumns() {
      var _this2 = this;
      var cols = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var columns2 = [];
      var $slots = this.$slots;
      cols.forEach(function(col) {
        var _col$slots = col.slots, slots = _col$slots === void 0 ? {} : _col$slots, restProps = __rest$a(col, ["slots"]);
        var column = _extends$1({}, restProps);
        Object.keys(slots).forEach(function(key2) {
          var name2 = slots[key2];
          if (column[key2] === void 0 && $slots[name2]) {
            column[key2] = $slots[name2];
          }
        });
        if (col.children) {
          column.children = _this2.updateColumns(column.children);
        }
        columns2.push(column);
      });
      return columns2;
    }
  },
  render: function render137() {
    var normalize2 = this.normalize, $slots = this.$slots;
    var props2 = _extends$1(_extends$1({}, getOptionProps(this)), this.$attrs);
    var columns2 = props2.columns ? this.updateColumns(props2.columns) : normalize2(getSlot(this));
    var title2 = props2.title, footer = props2.footer;
    var slotTitle = $slots.title, slotFooter = $slots.footer, _$slots$expandedRowRe = $slots.expandedRowRender, expandedRowRender = _$slots$expandedRowRe === void 0 ? props2.expandedRowRender : _$slots$expandedRowRe, expandIcon = $slots.expandIcon;
    title2 = title2 || slotTitle;
    footer = footer || slotFooter;
    var tProps = _extends$1(_extends$1({}, props2), {
      columns: columns2,
      title: title2,
      footer,
      expandedRowRender,
      expandIcon: this.$props.expandIcon || expandIcon
    });
    return createVNode(T$1, _objectSpread2$2(_objectSpread2$2({}, tProps), {}, {
      "ref": "table"
    }), null);
  }
});
Table.install = function(app) {
  app.component(Table.name, Table);
  app.component(Table.Column.name, Table.Column);
  app.component(Table.ColumnGroup.name, Table.ColumnGroup);
  return app;
};
var TableColumn = Table.Column;
var TableColumnGroup = Table.ColumnGroup;
var __unplugin_components_3 = Table;
var TransferSearchProps = {
  prefixCls: PropsTypes.string,
  placeholder: PropsTypes.string,
  value: PropsTypes.any,
  handleClear: PropsTypes.func,
  disabled: PropsTypes.looseBool,
  onChange: PropsTypes.func
};
var Search = defineComponent({
  name: "Search",
  inheritAttrs: false,
  props: initDefaultProps$1(TransferSearchProps, {
    placeholder: ""
  }),
  methods: {
    handleChange: function handleChange19(e2) {
      this.$emit("change", e2);
    },
    handleClear2: function handleClear2(e2) {
      e2.preventDefault();
      var _this$$props = this.$props, handleClear3 = _this$$props.handleClear, disabled = _this$$props.disabled;
      if (!disabled && handleClear3) {
        handleClear3(e2);
      }
    }
  },
  render: function render138() {
    var _getOptionProps = getOptionProps(this), placeholder = _getOptionProps.placeholder, value26 = _getOptionProps.value, prefixCls2 = _getOptionProps.prefixCls, disabled = _getOptionProps.disabled;
    var icon = value26 && value26.length > 0 ? createVNode("a", {
      "href": "#",
      "class": "".concat(prefixCls2, "-action"),
      "onClick": this.handleClear2
    }, [createVNode(CloseCircleFilled$1, null, null)]) : createVNode("span", {
      "class": "".concat(prefixCls2, "-action")
    }, [createVNode(SearchOutlined$1, null, null)]);
    return createVNode(Fragment, null, [createVNode(Input, {
      "placeholder": placeholder,
      "class": prefixCls2,
      "value": value26,
      "onChange": this.handleChange,
      "disabled": disabled
    }, null), icon]);
  }
});
var FUNC_ERROR_TEXT = "Expected a function";
function throttle(func, wait, options2) {
  var leading = true, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject$2(options2)) {
    leading = "leading" in options2 ? !!options2.leading : leading;
    trailing = "trailing" in options2 ? !!options2.trailing : trailing;
  }
  return debounce$1(func, wait, {
    "leading": leading,
    "maxWait": wait,
    "trailing": trailing
  });
}
var style = function style2(element, prop) {
  var styleVal = "";
  if (typeof getComputedStyle !== "undefined") {
    styleVal = window.getComputedStyle(element, null).getPropertyValue(prop);
  } else {
    styleVal = element.style[prop];
  }
  return styleVal;
};
var overflow = function overflow2(element) {
  return style(element, "overflow") + style(element, "overflow-y") + style(element, "overflow-x");
};
var scrollParent = function scrollParent2(element) {
  if (!(element instanceof window.HTMLElement)) {
    return window;
  }
  var parent2 = element;
  while (parent2) {
    if (parent2 === document.body || parent2 === document.documentElement) {
      break;
    }
    if (!parent2.parentNode) {
      break;
    }
    if (/(scroll|auto)/.test(overflow(parent2))) {
      return parent2;
    }
    parent2 = parent2.parentNode;
  }
  return window;
};
var parentScroll = scrollParent;
function getElementPosition$1(element) {
  var rect = element.getBoundingClientRect();
  return {
    top: rect.top + window.pageYOffset,
    left: rect.left + window.pageXOffset
  };
}
var isHidden = function isHidden2(element) {
  return element.offsetParent === null;
};
function inViewport(element, container, customOffset) {
  if (isHidden(element)) {
    return false;
  }
  var top;
  var bottom;
  var left;
  var right;
  if (typeof container === "undefined" || container === window) {
    top = window.pageYOffset;
    left = window.pageXOffset;
    bottom = top + window.innerHeight;
    right = left + window.innerWidth;
  } else {
    var containerPosition = getElementPosition$1(container);
    top = containerPosition.top;
    left = containerPosition.left;
    bottom = top + container.offsetHeight;
    right = left + container.offsetWidth;
  }
  var elementPosition = getElementPosition$1(element);
  return top <= elementPosition.top + element.offsetHeight + customOffset.top && bottom >= elementPosition.top - customOffset.bottom && left <= elementPosition.left + element.offsetWidth + customOffset.left && right >= elementPosition.left - customOffset.right;
}
var lazyLoadProps = {
  debounce: PropsTypes.looseBool,
  elementType: PropsTypes.string,
  height: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
  offset: PropsTypes.number,
  offsetBottom: PropsTypes.number,
  offsetHorizontal: PropsTypes.number,
  offsetLeft: PropsTypes.number,
  offsetRight: PropsTypes.number,
  offsetTop: PropsTypes.number,
  offsetVertical: PropsTypes.number,
  threshold: PropsTypes.number,
  throttle: PropsTypes.number,
  width: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])
};
var LazyLoad = defineComponent({
  name: "LazyLoad",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(lazyLoadProps, {
    elementType: "div",
    debounce: true,
    offset: 0,
    offsetBottom: 0,
    offsetHorizontal: 0,
    offsetLeft: 0,
    offsetRight: 0,
    offsetTop: 0,
    offsetVertical: 0,
    throttle: 250
  }),
  data: function data66() {
    if (this.throttle > 0) {
      if (this.debounce) {
        this.lazyLoadHandler = debounce$1(this.lazyLoadHandler, this.throttle);
      } else {
        this.lazyLoadHandler = throttle(this.lazyLoadHandler, this.throttle);
      }
    }
    return {
      visible: false
    };
  },
  mounted: function mounted36() {
    var _this = this;
    this.$nextTick(function() {
      watchEffect(function() {
        if (!_this.visible) {
          _this.lazyLoadHandler(_this.$props);
        }
      });
      var eventNode = _this.getEventNode();
      if (_this.lazyLoadHandler.flush) {
        _this.lazyLoadHandler.flush();
      }
      _this.resizeHander = addEventListenerWrap(window, "resize", _this.lazyLoadHandler);
      _this.scrollHander = addEventListenerWrap(eventNode, "scroll", _this.lazyLoadHandler);
    });
  },
  beforeUnmount: function beforeUnmount26() {
    if (this.lazyLoadHandler.cancel) {
      this.lazyLoadHandler.cancel();
    }
    this.detachListeners();
  },
  methods: {
    getEventNode: function getEventNode() {
      return parentScroll(findDOMNode(this));
    },
    getOffset: function getOffset2() {
      var _this$$props = this.$props, offset4 = _this$$props.offset, offsetVertical = _this$$props.offsetVertical, offsetHorizontal = _this$$props.offsetHorizontal, offsetTop = _this$$props.offsetTop, offsetBottom = _this$$props.offsetBottom, offsetLeft = _this$$props.offsetLeft, offsetRight = _this$$props.offsetRight, threshold = _this$$props.threshold;
      var _offsetAll = threshold || offset4;
      var _offsetVertical = offsetVertical || _offsetAll;
      var _offsetHorizontal = offsetHorizontal || _offsetAll;
      return {
        top: offsetTop || _offsetVertical,
        bottom: offsetBottom || _offsetVertical,
        left: offsetLeft || _offsetHorizontal,
        right: offsetRight || _offsetHorizontal
      };
    },
    lazyLoadHandler: function lazyLoadHandler() {
      var _this2 = this;
      if (!this._.isMounted) {
        return;
      }
      var offset4 = this.getOffset();
      var node = findDOMNode(this);
      var eventNode = this.getEventNode();
      if (inViewport(node, eventNode, offset4)) {
        this.setState({
          visible: true
        }, function() {
          _this2.__emit("contentVisible");
        });
        this.detachListeners();
      }
    },
    detachListeners: function detachListeners() {
      this.resizeHander && this.resizeHander.remove();
      this.scrollHander && this.scrollHander.remove();
    }
  },
  render: function render139() {
    var children = getSlot(this);
    if (children.length !== 1) {
      warning$4(false, "lazyLoad\u7EC4\u4EF6\u53EA\u80FD\u5305\u542B\u4E00\u4E2A\u5B50\u5143\u7D20");
      return null;
    }
    var _this$$props2 = this.$props, height = _this$$props2.height, width = _this$$props2.width, ElementType = _this$$props2.elementType;
    var visible9 = this.visible;
    var className = this.$attrs.class;
    var elStyles = {
      height: typeof height === "number" ? height + "px" : height,
      width: typeof width === "number" ? width + "px" : width
    };
    var elClasses = _defineProperty$U({
      LazyLoad: true,
      "is-visible": visible9
    }, className, className);
    return createVNode(ElementType, {
      "class": elClasses,
      "style": elStyles
    }, {
      default: function _default8() {
        return [visible9 ? children[0] : null];
      }
    });
  }
});
function noop$4() {
}
var ListItem = defineComponent({
  name: "ListItem",
  inheritAttrs: false,
  props: {
    renderedText: PropsTypes.any,
    renderedEl: PropsTypes.any,
    item: PropsTypes.any,
    lazy: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    checked: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    onClick: PropsTypes.func
  },
  render: function render140() {
    var _classNames, _this = this;
    var _this$$props = this.$props, renderedText = _this$$props.renderedText, renderedEl = _this$$props.renderedEl, item = _this$$props.item, lazy = _this$$props.lazy, checked2 = _this$$props.checked, disabled = _this$$props.disabled, prefixCls2 = _this$$props.prefixCls;
    var className = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-content-item"), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-content-item-disabled"), disabled || item.disabled), _classNames));
    var title2;
    if (typeof renderedText === "string" || typeof renderedText === "number") {
      title2 = String(renderedText);
    }
    var listItem = createVNode("li", {
      "class": className,
      "title": title2,
      "onClick": disabled || item.disabled ? noop$4 : function() {
        _this.$emit("click", item);
      }
    }, [createVNode(Checkbox, {
      "checked": checked2,
      "disabled": disabled || item.disabled
    }, null), createVNode("span", {
      "class": "".concat(prefixCls2, "-content-item-text")
    }, [renderedEl])]);
    var children = null;
    if (lazy) {
      var lazyProps = _extends$1({
        height: 32,
        offset: 500,
        throttle: 0,
        debounce: false
      }, lazy);
      children = createVNode(LazyLoad, lazyProps, {
        default: function _default8() {
          return [listItem];
        }
      });
    } else {
      children = listItem;
    }
    return children;
  }
});
var ListBody = defineComponent({
  name: "ListBody",
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    filteredRenderItems: PropsTypes.array.def([]),
    lazy: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    selectedKeys: PropsTypes.array,
    disabled: PropsTypes.looseBool,
    onItemSelect: PropsTypes.func,
    onItemSelectAll: PropsTypes.func,
    onScroll: PropsTypes.func
  },
  setup: function setup143() {
    return {
      mountId: null,
      lazyId: null
    };
  },
  data: function data67() {
    return {
      mounted: false
    };
  },
  computed: {
    itemsLength: function itemsLength() {
      return this.filteredRenderItems ? this.filteredRenderItems.length : 0;
    }
  },
  watch: {
    itemsLength: function itemsLength2() {
      var _this = this;
      nextTick(function() {
        var lazy = _this.$props.lazy;
        if (lazy !== false) {
          var container = findDOMNode(_this);
          wrapperRaf.cancel(_this.lazyId);
          _this.lazyId = wrapperRaf(function() {
            if (container) {
              var scrollEvent = new Event("scroll", {
                bubbles: true
              });
              container.dispatchEvent(scrollEvent);
            }
          });
        }
      });
    }
  },
  mounted: function mounted37() {
    var _this2 = this;
    this.mountId = wrapperRaf(function() {
      _this2.mounted = true;
    });
  },
  beforeUnmount: function beforeUnmount27() {
    wrapperRaf.cancel(this.mountId);
    wrapperRaf.cancel(this.lazyId);
  },
  methods: {
    handleItemSelect: function handleItemSelect(item) {
      var selectedKeys3 = this.$props.selectedKeys;
      var checked2 = selectedKeys3.indexOf(item.key) >= 0;
      this.$emit("itemSelect", item.key, !checked2);
    },
    handleScroll: function handleScroll(e2) {
      this.$emit("scroll", e2);
    }
  },
  render: function render141() {
    var _this3 = this;
    var mounted45 = this.$data.mounted;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, filteredRenderItems = _this$$props.filteredRenderItems, lazy = _this$$props.lazy, selectedKeys3 = _this$$props.selectedKeys, globalDisabled = _this$$props.disabled;
    var items = filteredRenderItems.map(function(_ref) {
      var renderedEl = _ref.renderedEl, renderedText = _ref.renderedText, item = _ref.item;
      var disabled = item.disabled;
      var checked2 = selectedKeys3.indexOf(item.key) >= 0;
      return createVNode(ListItem, {
        "disabled": globalDisabled || disabled,
        "key": item.key,
        "item": item,
        "lazy": lazy,
        "renderedText": renderedText,
        "renderedEl": renderedEl,
        "checked": checked2,
        "prefixCls": prefixCls2,
        "onClick": _this3.handleItemSelect
      }, null);
    });
    var transitionProps = getTransitionGroupProps(mounted45 ? "".concat(prefixCls2, "-content-item-highlight") : "", {
      tag: "ul",
      class: "".concat(prefixCls2, "-content"),
      onScroll: this.handleScroll
    });
    return createVNode(TransitionGroup, transitionProps, {
      default: function _default8() {
        return [items];
      }
    });
  }
});
var defaultRenderList = function(props2) {
  return createVNode(ListBody, props2, null);
};
function triggerEvent(el, type3) {
  if ("createEvent" in document) {
    var e2 = document.createEvent("HTMLEvents");
    e2.initEvent(type3, false, true);
    el.dispatchEvent(e2);
  }
}
var defaultRender = function defaultRender2() {
  return null;
};
var TransferItem$1 = {
  key: PropsTypes.string,
  title: PropsTypes.string,
  description: PropsTypes.string,
  disabled: PropsTypes.looseBool
};
function isRenderResultPlainObject(result) {
  return result && !isValidElement(result) && Object.prototype.toString.call(result) === "[object Object]";
}
var TransferListProps = {
  prefixCls: PropsTypes.string,
  titleText: PropsTypes.string,
  dataSource: PropsTypes.arrayOf(PropsTypes.shape(TransferItem$1).loose),
  filter: PropsTypes.string,
  filterOption: PropsTypes.func,
  checkedKeys: PropsTypes.arrayOf(PropsTypes.string),
  handleFilter: PropsTypes.func,
  handleSelect: PropsTypes.func,
  handleSelectAll: PropsTypes.func,
  handleClear: PropsTypes.func,
  renderItem: PropsTypes.func,
  showSearch: PropsTypes.looseBool,
  searchPlaceholder: PropsTypes.string,
  notFoundContent: PropsTypes.any,
  itemUnit: PropsTypes.string,
  itemsUnit: PropsTypes.string,
  body: PropsTypes.any,
  renderList: PropsTypes.any,
  footer: PropsTypes.any,
  lazy: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
  disabled: PropsTypes.looseBool,
  direction: PropsTypes.string,
  showSelectAll: PropsTypes.looseBool,
  onItemSelect: PropsTypes.func,
  onItemSelectAll: PropsTypes.func,
  onScroll: PropsTypes.func
};
function renderListNode(renderList, props2) {
  var bodyContent = renderList ? renderList(props2) : null;
  var customize = !!bodyContent && filterEmpty(bodyContent).length > 0;
  if (!customize) {
    bodyContent = defaultRenderList(props2);
  }
  return {
    customize,
    bodyContent
  };
}
var List = defineComponent({
  name: "TransferList",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(TransferListProps, {
    dataSource: [],
    titleText: "",
    showSearch: false,
    lazy: {}
  }),
  setup: function setup144() {
    return {
      timer: null,
      triggerScrollTimer: null,
      scrollEvent: null
    };
  },
  data: function data68() {
    return {
      filterValue: ""
    };
  },
  beforeUnmount: function beforeUnmount28() {
    clearTimeout(this.triggerScrollTimer);
  },
  updated: function updated23() {
    var _this = this;
    nextTick(function() {
      if (_this.scrollEvent) {
        _this.scrollEvent.remove();
      }
    });
  },
  methods: {
    handleScroll: function handleScroll2(e2) {
      this.$emit("scroll", e2);
    },
    getCheckStatus: function getCheckStatus(filteredItems) {
      var checkedKeys = this.$props.checkedKeys;
      if (checkedKeys.length === 0) {
        return "none";
      }
      if (filteredItems.every(function(item) {
        return checkedKeys.indexOf(item.key) >= 0 || !!item.disabled;
      })) {
        return "all";
      }
      return "part";
    },
    getFilteredItems: function getFilteredItems(dataSource3, filterValue) {
      var _this2 = this;
      var filteredItems = [];
      var filteredRenderItems = [];
      dataSource3.forEach(function(item) {
        var renderedItem = _this2.renderItemHtml(item);
        var renderedText = renderedItem.renderedText;
        if (filterValue && filterValue.trim() && !_this2.matchFilter(renderedText, item)) {
          return null;
        }
        filteredItems.push(item);
        filteredRenderItems.push(renderedItem);
      });
      return {
        filteredItems,
        filteredRenderItems
      };
    },
    getListBody: function getListBody(prefixCls2, searchPlaceholder, filterValue, filteredItems, notFoundContent, bodyDom, filteredRenderItems, checkedKeys, renderList, showSearch, disabled) {
      var search = showSearch ? createVNode("div", {
        "class": "".concat(prefixCls2, "-body-search-wrapper")
      }, [createVNode(Search, {
        "prefixCls": "".concat(prefixCls2, "-search"),
        "onChange": this._handleFilter,
        "handleClear": this._handleClear,
        "placeholder": searchPlaceholder,
        "value": filterValue,
        "disabled": disabled
      }, null)]) : null;
      var listBody = bodyDom;
      if (!listBody) {
        var bodyNode;
        var _splitAttrs = splitAttrs(this.$attrs), onEvents = _splitAttrs.onEvents;
        var _renderListNode = renderListNode(renderList, _extends$1(_extends$1(_extends$1({}, this.$props), {
          filteredItems,
          filteredRenderItems,
          selectedKeys: checkedKeys
        }), onEvents)), bodyContent = _renderListNode.bodyContent, customize = _renderListNode.customize;
        if (customize) {
          bodyNode = createVNode("div", {
            "class": "".concat(prefixCls2, "-body-customize-wrapper")
          }, [bodyContent]);
        } else {
          bodyNode = filteredItems.length ? bodyContent : createVNode("div", {
            "class": "".concat(prefixCls2, "-body-not-found")
          }, [notFoundContent]);
        }
        listBody = createVNode("div", {
          "class": classNames(showSearch ? "".concat(prefixCls2, "-body ").concat(prefixCls2, "-body-with-search") : "".concat(prefixCls2, "-body"))
        }, [search, bodyNode]);
      }
      return listBody;
    },
    getCheckBox: function getCheckBox(filteredItems, showSelectAll, disabled) {
      var _this3 = this;
      var checkStatus = this.getCheckStatus(filteredItems);
      var checkedAll = checkStatus === "all";
      var checkAllCheckbox = showSelectAll !== false && createVNode(Checkbox, {
        "disabled": disabled,
        "checked": checkedAll,
        "indeterminate": checkStatus === "part",
        "onChange": function onChange9() {
          _this3.$emit("itemSelectAll", filteredItems.filter(function(item) {
            return !item.disabled;
          }).map(function(_ref) {
            var key2 = _ref.key;
            return key2;
          }), !checkedAll);
        }
      }, null);
      return checkAllCheckbox;
    },
    _handleSelect: function _handleSelect(selectedItem) {
      var checkedKeys = this.$props.checkedKeys;
      var result = checkedKeys.some(function(key2) {
        return key2 === selectedItem.key;
      });
      this.handleSelect(selectedItem, !result);
    },
    _handleFilter: function _handleFilter(e2) {
      var _this4 = this;
      var handleFilter3 = this.$props.handleFilter;
      var filterValue = e2.target.value;
      this.setState({
        filterValue
      });
      handleFilter3(e2);
      if (!filterValue) {
        return;
      }
      this.triggerScrollTimer = setTimeout(function() {
        var transferNode = findDOMNode(_this4);
        var listNode = transferNode.querySelectorAll(".ant-transfer-list-content")[0];
        if (listNode) {
          triggerEvent(listNode, "scroll");
        }
      }, 0);
    },
    _handleClear: function _handleClear(e2) {
      this.setState({
        filterValue: ""
      });
      this.handleClear(e2);
    },
    matchFilter: function matchFilter(text, item) {
      var filterValue = this.$data.filterValue;
      var filterOption2 = this.$props.filterOption;
      if (filterOption2) {
        return filterOption2(filterValue, item);
      }
      return text.indexOf(filterValue) >= 0;
    },
    renderItemHtml: function renderItemHtml(item) {
      var _this$$props$renderIt = this.$props.renderItem, renderItem = _this$$props$renderIt === void 0 ? defaultRender : _this$$props$renderIt;
      var renderResult = renderItem(item);
      var isRenderResultPlain = isRenderResultPlainObject(renderResult);
      return {
        renderedText: isRenderResultPlain ? renderResult.value : renderResult,
        renderedEl: isRenderResultPlain ? renderResult.label : renderResult,
        item
      };
    },
    filterNull: function filterNull(arr) {
      return arr.filter(function(item) {
        return item !== null;
      });
    }
  },
  render: function render142() {
    var filterValue = this.$data.filterValue;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, dataSource3 = _this$$props.dataSource, titleText = _this$$props.titleText, checkedKeys = _this$$props.checkedKeys, disabled = _this$$props.disabled, body = _this$$props.body, footer = _this$$props.footer, showSearch = _this$$props.showSearch, searchPlaceholder = _this$$props.searchPlaceholder, notFoundContent = _this$$props.notFoundContent, itemUnit = _this$$props.itemUnit, itemsUnit = _this$$props.itemsUnit, renderList = _this$$props.renderList, showSelectAll = _this$$props.showSelectAll;
    var footerDom = footer && footer(_extends$1({}, this.$props));
    var bodyDom = body && body(_extends$1({}, this.$props));
    var listCls = classNames(prefixCls2, _defineProperty$U({}, "".concat(prefixCls2, "-with-footer"), !!footerDom));
    var _this$getFilteredItem = this.getFilteredItems(dataSource3, filterValue), filteredItems = _this$getFilteredItem.filteredItems, filteredRenderItems = _this$getFilteredItem.filteredRenderItems;
    var unit = dataSource3.length > 1 ? itemsUnit : itemUnit;
    var listBody = this.getListBody(prefixCls2, searchPlaceholder, filterValue, filteredItems, notFoundContent, bodyDom, filteredRenderItems, checkedKeys, renderList, showSearch, disabled);
    var listFooter = footerDom ? createVNode("div", {
      "class": "".concat(prefixCls2, "-footer")
    }, [footerDom]) : null;
    var checkAllCheckbox = this.getCheckBox(filteredItems, showSelectAll, disabled);
    return createVNode("div", {
      "class": listCls,
      "style": this.$attrs.style
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-header")
    }, [checkAllCheckbox, createVNode("span", {
      "class": "".concat(prefixCls2, "-header-selected")
    }, [createVNode("span", null, [(checkedKeys.length > 0 ? "".concat(checkedKeys.length, "/") : "") + filteredItems.length, " ", unit]), createVNode("span", {
      "class": "".concat(prefixCls2, "-header-title")
    }, [titleText])])]), listBody, listFooter]);
  }
});
function noop$3() {
}
var Operation = function Operation2(props2) {
  var disabled = props2.disabled, _props$moveToLeft = props2.moveToLeft, moveToLeft2 = _props$moveToLeft === void 0 ? noop$3 : _props$moveToLeft, _props$moveToRight = props2.moveToRight, moveToRight2 = _props$moveToRight === void 0 ? noop$3 : _props$moveToRight, _props$leftArrowText = props2.leftArrowText, leftArrowText = _props$leftArrowText === void 0 ? "" : _props$leftArrowText, _props$rightArrowText = props2.rightArrowText, rightArrowText = _props$rightArrowText === void 0 ? "" : _props$rightArrowText, leftActive = props2.leftActive, rightActive = props2.rightActive, className = props2.class, style3 = props2.style;
  return createVNode("div", {
    "class": className,
    "style": style3
  }, [createVNode(Button, {
    "type": "primary",
    "size": "small",
    "disabled": disabled || !rightActive,
    "onClick": moveToRight2,
    "icon": createVNode(RightOutlined$1, null, null)
  }, {
    default: function _default8() {
      return [rightArrowText];
    }
  }), createVNode(Button, {
    "type": "primary",
    "size": "small",
    "disabled": disabled || !leftActive,
    "onClick": moveToLeft2,
    "icon": createVNode(LeftOutlined$1, null, null)
  }, {
    default: function _default8() {
      return [leftArrowText];
    }
  })]);
};
Operation.inheritAttrs = false;
var Operation$1 = Operation;
var TransferItem = {
  key: PropsTypes.string,
  title: PropsTypes.string,
  description: PropsTypes.string,
  disabled: PropsTypes.looseBool
};
var TransferProps = {
  prefixCls: PropsTypes.string,
  dataSource: PropsTypes.arrayOf(PropsTypes.shape(TransferItem).loose),
  disabled: PropsTypes.looseBool,
  targetKeys: PropsTypes.arrayOf(PropsTypes.string),
  selectedKeys: PropsTypes.arrayOf(PropsTypes.string),
  render: PropsTypes.func,
  listStyle: PropsTypes.oneOfType([PropsTypes.func, PropsTypes.object]),
  operationStyle: PropsTypes.object,
  titles: PropsTypes.arrayOf(PropsTypes.string),
  operations: PropsTypes.arrayOf(PropsTypes.string),
  showSearch: PropsTypes.looseBool,
  filterOption: PropsTypes.func,
  searchPlaceholder: PropsTypes.string,
  notFoundContent: PropsTypes.any,
  locale: PropsTypes.object,
  rowKey: PropsTypes.func,
  lazy: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.looseBool]),
  showSelectAll: PropsTypes.looseBool,
  children: PropsTypes.any,
  onChange: PropsTypes.func,
  onSelectChange: PropsTypes.func,
  onSearchChange: PropsTypes.func,
  onSearch: PropsTypes.func,
  onScroll: PropsTypes.func
};
var Transfer = defineComponent({
  name: "ATransfer",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(TransferProps, {
    dataSource: [],
    locale: {},
    showSearch: false,
    listStyle: function listStyle() {
    }
  }),
  setup: function setup145() {
    return {
      separatedDataSource: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data69() {
    var _this$selectedKeys = this.selectedKeys, selectedKeys3 = _this$selectedKeys === void 0 ? [] : _this$selectedKeys, _this$targetKeys = this.targetKeys, targetKeys2 = _this$targetKeys === void 0 ? [] : _this$targetKeys;
    return {
      leftFilter: "",
      rightFilter: "",
      sourceSelectedKeys: selectedKeys3.filter(function(key2) {
        return targetKeys2.indexOf(key2) === -1;
      }),
      targetSelectedKeys: selectedKeys3.filter(function(key2) {
        return targetKeys2.indexOf(key2) > -1;
      })
    };
  },
  watch: {
    targetKeys: function targetKeys() {
      this.updateState();
      if (this.selectedKeys) {
        var targetKeys2 = this.targetKeys || [];
        this.setState({
          sourceSelectedKeys: this.selectedKeys.filter(function(key2) {
            return !targetKeys2.includes(key2);
          }),
          targetSelectedKeys: this.selectedKeys.filter(function(key2) {
            return targetKeys2.includes(key2);
          })
        });
      }
    },
    dataSource: function dataSource2() {
      this.updateState();
    },
    selectedKeys: function selectedKeys() {
      if (this.selectedKeys) {
        var targetKeys2 = this.targetKeys || [];
        this.setState({
          sourceSelectedKeys: this.selectedKeys.filter(function(key2) {
            return !targetKeys2.includes(key2);
          }),
          targetSelectedKeys: this.selectedKeys.filter(function(key2) {
            return targetKeys2.includes(key2);
          })
        });
      }
    }
  },
  mounted: function mounted38() {
  },
  methods: {
    getSelectedKeysName: function getSelectedKeysName(direction) {
      return direction === "left" ? "sourceSelectedKeys" : "targetSelectedKeys";
    },
    getTitles: function getTitles(transferLocale) {
      if (this.titles) {
        return this.titles;
      }
      return transferLocale.titles || ["", ""];
    },
    getLocale: function getLocale2(transferLocale, renderEmpty2) {
      var oldLocale = {
        notFoundContent: renderEmpty2("Transfer")
      };
      var notFoundContent = getComponent(this, "notFoundContent");
      if (notFoundContent) {
        oldLocale.notFoundContent = notFoundContent;
      }
      if (hasProp(this, "searchPlaceholder")) {
        oldLocale.searchPlaceholder = this.$props.searchPlaceholder;
      }
      return _extends$1(_extends$1(_extends$1({}, transferLocale), oldLocale), this.$props.locale);
    },
    updateState: function updateState2() {
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys;
      this.separatedDataSource = null;
      if (!this.selectedKeys) {
        var dataSource3 = this.dataSource, _this$targetKeys2 = this.targetKeys, targetKeys2 = _this$targetKeys2 === void 0 ? [] : _this$targetKeys2;
        var newSourceSelectedKeys = [];
        var newTargetSelectedKeys = [];
        dataSource3.forEach(function(_ref) {
          var key2 = _ref.key;
          if (sourceSelectedKeys.includes(key2) && !targetKeys2.includes(key2)) {
            newSourceSelectedKeys.push(key2);
          }
          if (targetSelectedKeys.includes(key2) && targetKeys2.includes(key2)) {
            newTargetSelectedKeys.push(key2);
          }
        });
        this.setState({
          sourceSelectedKeys: newSourceSelectedKeys,
          targetSelectedKeys: newTargetSelectedKeys
        });
      }
    },
    moveTo: function moveTo2(direction) {
      var _this$$props = this.$props, _this$$props$targetKe = _this$$props.targetKeys, targetKeys2 = _this$$props$targetKe === void 0 ? [] : _this$$props$targetKe, _this$$props$dataSour = _this$$props.dataSource, dataSource3 = _this$$props$dataSour === void 0 ? [] : _this$$props$dataSour;
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys;
      var moveKeys = direction === "right" ? sourceSelectedKeys : targetSelectedKeys;
      var newMoveKeys = moveKeys.filter(function(key2) {
        return !dataSource3.some(function(data80) {
          return !!(key2 === data80.key && data80.disabled);
        });
      });
      var newTargetKeys = direction === "right" ? newMoveKeys.concat(targetKeys2) : targetKeys2.filter(function(targetKey) {
        return newMoveKeys.indexOf(targetKey) === -1;
      });
      var oppositeDirection = direction === "right" ? "left" : "right";
      this.setState(_defineProperty$U({}, this.getSelectedKeysName(oppositeDirection), []));
      this.handleSelectChange(oppositeDirection, []);
      this.$emit("change", newTargetKeys, direction, newMoveKeys);
    },
    moveToLeft: function moveToLeft() {
      this.moveTo("left");
    },
    moveToRight: function moveToRight() {
      this.moveTo("right");
    },
    onItemSelectAll: function onItemSelectAll(direction, selectedKeys3, checkAll) {
      var originalSelectedKeys = this.$data[this.getSelectedKeysName(direction)] || [];
      var mergedCheckedKeys = [];
      if (checkAll) {
        mergedCheckedKeys = Array.from(new Set([].concat(_toConsumableArray(originalSelectedKeys), _toConsumableArray(selectedKeys3))));
      } else {
        mergedCheckedKeys = originalSelectedKeys.filter(function(key2) {
          return selectedKeys3.indexOf(key2) === -1;
        });
      }
      this.handleSelectChange(direction, mergedCheckedKeys);
      if (!this.$props.selectedKeys) {
        this.setState(_defineProperty$U({}, this.getSelectedKeysName(direction), mergedCheckedKeys));
      }
    },
    handleSelectAll: function handleSelectAll(direction, filteredDataSource, checkAll) {
      this.onItemSelectAll(direction, filteredDataSource.map(function(_ref2) {
        var key2 = _ref2.key;
        return key2;
      }), !checkAll);
    },
    handleLeftSelectAll: function handleLeftSelectAll(filteredDataSource, checkAll) {
      return this.handleSelectAll("left", filteredDataSource, !checkAll);
    },
    handleRightSelectAll: function handleRightSelectAll(filteredDataSource, checkAll) {
      return this.handleSelectAll("right", filteredDataSource, !checkAll);
    },
    onLeftItemSelectAll: function onLeftItemSelectAll(selectedKeys3, checkAll) {
      return this.onItemSelectAll("left", selectedKeys3, checkAll);
    },
    onRightItemSelectAll: function onRightItemSelectAll(selectedKeys3, checkAll) {
      return this.onItemSelectAll("right", selectedKeys3, checkAll);
    },
    handleFilter: function handleFilter2(direction, e2) {
      var value26 = e2.target.value;
      this.$emit("search", direction, value26);
    },
    handleLeftFilter: function handleLeftFilter(e2) {
      this.handleFilter("left", e2);
    },
    handleRightFilter: function handleRightFilter(e2) {
      this.handleFilter("right", e2);
    },
    handleClear: function handleClear(direction) {
      this.$emit("search", direction, "");
    },
    handleLeftClear: function handleLeftClear() {
      this.handleClear("left");
    },
    handleRightClear: function handleRightClear() {
      this.handleClear("right");
    },
    onItemSelect: function onItemSelect(direction, selectedKey, checked2) {
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys;
      var holder = direction === "left" ? _toConsumableArray(sourceSelectedKeys) : _toConsumableArray(targetSelectedKeys);
      var index2 = holder.indexOf(selectedKey);
      if (index2 > -1) {
        holder.splice(index2, 1);
      }
      if (checked2) {
        holder.push(selectedKey);
      }
      this.handleSelectChange(direction, holder);
      if (!this.selectedKeys) {
        this.setState(_defineProperty$U({}, this.getSelectedKeysName(direction), holder));
      }
    },
    onLeftItemSelect: function onLeftItemSelect(selectedKey, checked2) {
      return this.onItemSelect("left", selectedKey, checked2);
    },
    onRightItemSelect: function onRightItemSelect(selectedKey, checked2) {
      return this.onItemSelect("right", selectedKey, checked2);
    },
    handleScroll: function handleScroll3(direction, e2) {
      this.$emit("scroll", direction, e2);
    },
    handleLeftScroll: function handleLeftScroll(e2) {
      this.handleScroll("left", e2);
    },
    handleRightScroll: function handleRightScroll(e2) {
      this.handleScroll("right", e2);
    },
    handleSelectChange: function handleSelectChange(direction, holder) {
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys;
      if (direction === "left") {
        this.$emit("selectChange", holder, targetSelectedKeys);
      } else {
        this.$emit("selectChange", sourceSelectedKeys, holder);
      }
    },
    handleListStyle: function handleListStyle(listStyle2, direction) {
      if (typeof listStyle2 === "function") {
        return listStyle2({
          direction
        });
      }
      return listStyle2;
    },
    separateDataSource: function separateDataSource() {
      var _this$$props2 = this.$props, dataSource3 = _this$$props2.dataSource, rowKey = _this$$props2.rowKey, _this$$props2$targetK = _this$$props2.targetKeys, targetKeys2 = _this$$props2$targetK === void 0 ? [] : _this$$props2$targetK;
      var leftDataSource = [];
      var rightDataSource = new Array(targetKeys2.length);
      dataSource3.forEach(function(record) {
        if (rowKey) {
          record.key = rowKey(record);
        }
        var indexOfKey = targetKeys2.indexOf(record.key);
        if (indexOfKey !== -1) {
          rightDataSource[indexOfKey] = record;
        } else {
          leftDataSource.push(record);
        }
      });
      return {
        leftDataSource,
        rightDataSource
      };
    },
    renderTransfer: function renderTransfer(transferLocale) {
      var _classNames;
      var props2 = getOptionProps(this);
      var customizePrefixCls = props2.prefixCls, disabled = props2.disabled, _props$operations = props2.operations, operations = _props$operations === void 0 ? [] : _props$operations, showSearch = props2.showSearch, listStyle2 = props2.listStyle, operationStyle = props2.operationStyle, filterOption2 = props2.filterOption, lazy = props2.lazy, showSelectAll = props2.showSelectAll;
      var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
      var children = getComponent(this, "children", {}, false);
      var getPrefixCls2 = this.configProvider.getPrefixCls;
      var prefixCls2 = getPrefixCls2("transfer", customizePrefixCls);
      var renderEmpty2 = this.configProvider.renderEmpty;
      var locale2 = this.getLocale(transferLocale, renderEmpty2);
      var sourceSelectedKeys = this.sourceSelectedKeys, targetSelectedKeys = this.targetSelectedKeys, $slots = this.$slots;
      var body = $slots.body, footer = $slots.footer;
      var renderItem = props2.render || this.$slots.render;
      var _this$separateDataSou = this.separateDataSource(), leftDataSource = _this$separateDataSou.leftDataSource, rightDataSource = _this$separateDataSou.rightDataSource;
      var leftActive = targetSelectedKeys.length > 0;
      var rightActive = sourceSelectedKeys.length > 0;
      var cls = classNames(prefixCls2, className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty$U(_classNames, "".concat(prefixCls2, "-customize-list"), !!children), _classNames));
      var titles = this.getTitles(locale2);
      return createVNode("div", {
        "class": cls,
        "style": style3
      }, [createVNode(List, {
        "key": "leftList",
        "prefixCls": "".concat(prefixCls2, "-list"),
        "titleText": titles[0],
        "dataSource": leftDataSource,
        "filterOption": filterOption2,
        "style": this.handleListStyle(listStyle2, "left"),
        "checkedKeys": sourceSelectedKeys,
        "handleFilter": this.handleLeftFilter,
        "handleClear": this.handleLeftClear,
        "handleSelectAll": this.handleLeftSelectAll,
        "onItemSelect": this.onLeftItemSelect,
        "onItemSelectAll": this.onLeftItemSelectAll,
        "renderItem": renderItem,
        "showSearch": showSearch,
        "body": body,
        "renderList": children,
        "footer": footer,
        "lazy": lazy,
        "onScroll": this.handleLeftScroll,
        "disabled": disabled,
        "direction": "left",
        "showSelectAll": showSelectAll,
        "itemUnit": locale2.itemUnit,
        "itemsUnit": locale2.itemsUnit,
        "notFoundContent": locale2.notFoundContent,
        "searchPlaceholder": locale2.searchPlaceholder
      }, null), createVNode(Operation$1, {
        "key": "operation",
        "class": "".concat(prefixCls2, "-operation"),
        "rightActive": rightActive,
        "rightArrowText": operations[0],
        "moveToRight": this.moveToRight,
        "leftActive": leftActive,
        "leftArrowText": operations[1],
        "moveToLeft": this.moveToLeft,
        "style": operationStyle,
        "disabled": disabled
      }, null), createVNode(List, {
        "key": "rightList",
        "prefixCls": "".concat(prefixCls2, "-list"),
        "titleText": titles[1],
        "dataSource": rightDataSource,
        "filterOption": filterOption2,
        "style": this.handleListStyle(listStyle2, "right"),
        "checkedKeys": targetSelectedKeys,
        "handleFilter": this.handleRightFilter,
        "handleClear": this.handleRightClear,
        "handleSelectAll": this.handleRightSelectAll,
        "onItemSelect": this.onRightItemSelect,
        "onItemSelectAll": this.onRightItemSelectAll,
        "renderItem": renderItem,
        "showSearch": showSearch,
        "body": body,
        "renderList": children,
        "footer": footer,
        "lazy": lazy,
        "onScroll": this.handleRightScroll,
        "disabled": disabled,
        "direction": "right",
        "showSelectAll": showSelectAll,
        "itemUnit": locale2.itemUnit,
        "itemsUnit": locale2.itemsUnit,
        "notFoundContent": locale2.notFoundContent,
        "searchPlaceholder": locale2.searchPlaceholder
      }, null)]);
    }
  },
  render: function render143() {
    return createVNode(LocaleReceiver, {
      "componentName": "Transfer",
      "defaultLocale": defaultLocale.Transfer,
      "children": this.renderTransfer
    }, null);
  }
});
var index$l = withInstall(Transfer);
var FileOutlined$1 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494z" } }] }, "name": "file", "theme": "outlined" };
var FileOutlinedSvg = FileOutlined$1;
function _objectSpread$c(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$d(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$d(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var FileOutlined = function FileOutlined2(props2, context2) {
  var p2 = _objectSpread$c({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": FileOutlinedSvg
  }), null);
};
FileOutlined.displayName = "FileOutlined";
FileOutlined.inheritAttrs = false;
var FileTwoTone = FileOutlined;
var MinusSquareOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M328 544h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }, { "tag": "path", "attrs": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z" } }] }, "name": "minus-square", "theme": "outlined" };
var MinusSquareOutlinedSvg = MinusSquareOutlined$2;
function _objectSpread$b(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$c(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$c(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var MinusSquareOutlined = function MinusSquareOutlined2(props2, context2) {
  var p2 = _objectSpread$b({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": MinusSquareOutlinedSvg
  }), null);
};
MinusSquareOutlined.displayName = "MinusSquareOutlined";
MinusSquareOutlined.inheritAttrs = false;
var MinusSquareOutlined$1 = MinusSquareOutlined;
var PlusSquareOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M328 544h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }, { "tag": "path", "attrs": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z" } }] }, "name": "plus-square", "theme": "outlined" };
var PlusSquareOutlinedSvg = PlusSquareOutlined$2;
function _objectSpread$a(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$b(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$b(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var PlusSquareOutlined = function PlusSquareOutlined2(props2, context2) {
  var p2 = _objectSpread$a({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": PlusSquareOutlinedSvg
  }), null);
};
PlusSquareOutlined.displayName = "PlusSquareOutlined";
PlusSquareOutlined.inheritAttrs = false;
var PlusSquareOutlined$1 = PlusSquareOutlined;
function _createForOfIteratorHelper(o2, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (!it) {
    if (Array.isArray(o2) || (it = _unsupportedIterableToArray$2(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it)
        o2 = it;
      var i2 = 0;
      var F2 = function F3() {
      };
      return {
        s: F2,
        n: function n2() {
          if (i2 >= o2.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o2[i2++]
          };
        },
        e: function e2(_e) {
          throw _e;
        },
        f: F2
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function s2() {
      it = it.call(o2);
    },
    n: function n2() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e2(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f2() {
      try {
        if (!normalCompletion && it["return"] != null)
          it["return"]();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
function noop$2() {
}
var ICON_OPEN = "open";
var ICON_CLOSE = "close";
var defaultTitle = "---";
var TreeNode$4 = defineComponent({
  name: "TreeNode",
  mixins: [BaseMixin],
  inheritAttrs: false,
  __ANT_TREE_NODE: true,
  props: initDefaultProps$2({
    eventKey: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    prefixCls: PropsTypes.string,
    root: PropsTypes.object,
    expanded: PropsTypes.looseBool,
    selected: PropsTypes.looseBool,
    checked: PropsTypes.looseBool,
    loaded: PropsTypes.looseBool,
    loading: PropsTypes.looseBool,
    halfChecked: PropsTypes.looseBool,
    title: PropsTypes.any,
    pos: PropsTypes.string,
    dragOver: PropsTypes.looseBool,
    dragOverGapTop: PropsTypes.looseBool,
    dragOverGapBottom: PropsTypes.looseBool,
    isLeaf: PropsTypes.looseBool,
    checkable: PropsTypes.looseBool,
    selectable: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    disableCheckbox: PropsTypes.looseBool,
    icon: PropsTypes.any,
    dataRef: PropsTypes.object,
    switcherIcon: PropsTypes.any,
    label: PropsTypes.any,
    value: PropsTypes.any
  }, {}),
  setup: function setup146() {
    return {
      vcTree: inject("vcTree", {}),
      vcTreeNode: inject("vcTreeNode", {})
    };
  },
  data: function data70() {
    this.children = null;
    return {
      dragNodeHighlight: false
    };
  },
  created: function created18() {
    provide("vcTreeNode", this);
  },
  mounted: function mounted39() {
    var eventKey = this.eventKey, registerTreeNode2 = this.vcTree.registerTreeNode;
    this.syncLoadData(this.$props);
    registerTreeNode2 && registerTreeNode2(eventKey, this);
  },
  updated: function updated24() {
    this.syncLoadData(this.$props);
  },
  beforeUnmount: function beforeUnmount29() {
    var eventKey = this.eventKey, registerTreeNode2 = this.vcTree.registerTreeNode;
    registerTreeNode2 && registerTreeNode2(eventKey, null);
  },
  methods: {
    onSelectorClick: function onSelectorClick(e2) {
      var onNodeClick2 = this.vcTree.onNodeClick;
      onNodeClick2(e2, this);
      if (this.isSelectable()) {
        this.onSelect(e2);
      } else {
        this.onCheck(e2);
      }
    },
    onSelectorDoubleClick: function onSelectorDoubleClick(e2) {
      var onNodeDoubleClick2 = this.vcTree.onNodeDoubleClick;
      onNodeDoubleClick2(e2, this);
    },
    onSelect: function onSelect5(e2) {
      if (this.isDisabled())
        return;
      var onNodeSelect2 = this.vcTree.onNodeSelect;
      e2.preventDefault();
      onNodeSelect2(e2, this);
    },
    onCheck: function onCheck(e2) {
      if (this.isDisabled())
        return;
      var disableCheckbox = this.disableCheckbox, checked2 = this.checked;
      var onNodeCheck2 = this.vcTree.onNodeCheck;
      if (!this.isCheckable() || disableCheckbox)
        return;
      e2.preventDefault();
      var targetChecked = !checked2;
      onNodeCheck2(e2, this, targetChecked);
    },
    onMouseEnter: function onMouseEnter3(e2) {
      var onNodeMouseEnter2 = this.vcTree.onNodeMouseEnter;
      onNodeMouseEnter2(e2, this);
    },
    onMouseLeave: function onMouseLeave4(e2) {
      var onNodeMouseLeave2 = this.vcTree.onNodeMouseLeave;
      onNodeMouseLeave2(e2, this);
    },
    onContextMenu: function onContextMenu2(e2) {
      var onNodeContextMenu2 = this.vcTree.onNodeContextMenu;
      onNodeContextMenu2(e2, this);
    },
    onDragStart: function onDragStart(e2) {
      var onNodeDragStart2 = this.vcTree.onNodeDragStart;
      e2.stopPropagation();
      this.setState({
        dragNodeHighlight: true
      });
      onNodeDragStart2(e2, this);
      try {
        e2.dataTransfer.setData("text/plain", "");
      } catch (error3) {
      }
    },
    onDragEnter: function onDragEnter(e2) {
      var onNodeDragEnter2 = this.vcTree.onNodeDragEnter;
      e2.preventDefault();
      e2.stopPropagation();
      onNodeDragEnter2(e2, this);
    },
    onDragOver: function onDragOver(e2) {
      var onNodeDragOver2 = this.vcTree.onNodeDragOver;
      e2.preventDefault();
      e2.stopPropagation();
      onNodeDragOver2(e2, this);
    },
    onDragLeave: function onDragLeave(e2) {
      var onNodeDragLeave2 = this.vcTree.onNodeDragLeave;
      e2.stopPropagation();
      onNodeDragLeave2(e2, this);
    },
    onDragEnd: function onDragEnd(e2) {
      var onNodeDragEnd2 = this.vcTree.onNodeDragEnd;
      e2.stopPropagation();
      this.setState({
        dragNodeHighlight: false
      });
      onNodeDragEnd2(e2, this);
    },
    onDrop: function onDrop(e2) {
      var onNodeDrop2 = this.vcTree.onNodeDrop;
      e2.preventDefault();
      e2.stopPropagation();
      this.setState({
        dragNodeHighlight: false
      });
      onNodeDrop2(e2, this);
    },
    onExpand: function onExpand2(e2) {
      var onNodeExpand2 = this.vcTree.onNodeExpand;
      onNodeExpand2(e2, this);
    },
    setSelectHandle: function setSelectHandle(node) {
      this.selectHandle = node;
    },
    getNodeChildren: function getNodeChildren$1() {
      var originList = this.children;
      var targetList = getNodeChildren(originList);
      if (originList.length !== targetList.length)
        ;
      return targetList;
    },
    getNodeState: function getNodeState() {
      var expanded = this.expanded;
      if (this.isLeaf2()) {
        return null;
      }
      return expanded ? ICON_OPEN : ICON_CLOSE;
    },
    isLeaf2: function isLeaf2() {
      var isLeaf = this.isLeaf, loaded = this.loaded;
      var loadData = this.vcTree.loadData;
      var hasChildren = this.getNodeChildren().length !== 0;
      if (isLeaf === false) {
        return false;
      }
      return isLeaf || !loadData && !hasChildren || loadData && loaded && !hasChildren;
    },
    isDisabled: function isDisabled() {
      var disabled = this.disabled;
      var treeDisabled = this.vcTree.disabled;
      if (disabled === false) {
        return false;
      }
      return !!(treeDisabled || disabled);
    },
    isCheckable: function isCheckable() {
      var checkable = this.$props.checkable;
      var treeCheckable = this.vcTree.checkable;
      if (!treeCheckable || checkable === false)
        return false;
      return treeCheckable;
    },
    syncLoadData: function syncLoadData(props2) {
      var expanded = props2.expanded, loading = props2.loading, loaded = props2.loaded;
      var _this$vcTree = this.vcTree, loadData = _this$vcTree.loadData, onNodeLoad2 = _this$vcTree.onNodeLoad;
      if (loading)
        return;
      if (loadData && expanded && !this.isLeaf2()) {
        var hasChildren = this.getNodeChildren().length !== 0;
        if (!hasChildren && !loaded) {
          onNodeLoad2(this);
        }
      }
    },
    isSelectable: function isSelectable() {
      var selectable = this.selectable;
      var treeSelectable = this.vcTree.selectable;
      if (typeof selectable === "boolean") {
        return selectable;
      }
      return treeSelectable;
    },
    renderSwitcher: function renderSwitcher() {
      var expanded = this.expanded;
      var prefixCls2 = this.vcTree.prefixCls;
      var switcherIcon = getComponent(this, "switcherIcon", {}, false) || getComponent(this.vcTree, "switcherIcon", {}, false);
      if (this.isLeaf2()) {
        return createVNode("span", {
          "key": "switcher",
          "class": classNames("".concat(prefixCls2, "-switcher"), "".concat(prefixCls2, "-switcher-noop"))
        }, [typeof switcherIcon === "function" ? switcherIcon(_extends$1(_extends$1(_extends$1({}, this.$props), this.$props.dataRef), {
          isLeaf: true
        })) : switcherIcon]);
      }
      var switcherCls = classNames("".concat(prefixCls2, "-switcher"), "".concat(prefixCls2, "-switcher_").concat(expanded ? ICON_OPEN : ICON_CLOSE));
      return createVNode("span", {
        "key": "switcher",
        "onClick": this.onExpand,
        "class": switcherCls
      }, [typeof switcherIcon === "function" ? switcherIcon(_extends$1(_extends$1(_extends$1({}, this.$props), this.$props.dataRef), {
        isLeaf: false
      })) : switcherIcon]);
    },
    renderCheckbox: function renderCheckbox() {
      var checked2 = this.checked, halfChecked = this.halfChecked, disableCheckbox = this.disableCheckbox;
      var prefixCls2 = this.vcTree.prefixCls;
      var disabled = this.isDisabled();
      var checkable = this.isCheckable();
      if (!checkable)
        return null;
      var $custom = typeof checkable !== "boolean" ? checkable : null;
      return createVNode("span", {
        "key": "checkbox",
        "class": classNames("".concat(prefixCls2, "-checkbox"), checked2 && "".concat(prefixCls2, "-checkbox-checked"), !checked2 && halfChecked && "".concat(prefixCls2, "-checkbox-indeterminate"), (disabled || disableCheckbox) && "".concat(prefixCls2, "-checkbox-disabled")),
        "onClick": this.onCheck
      }, [$custom]);
    },
    renderIcon: function renderIcon3() {
      var loading = this.loading;
      var prefixCls2 = this.vcTree.prefixCls;
      return createVNode("span", {
        "key": "icon",
        "class": classNames("".concat(prefixCls2, "-iconEle"), "".concat(prefixCls2, "-icon__").concat(this.getNodeState() || "docu"), loading && "".concat(prefixCls2, "-icon_loading"))
      }, null);
    },
    renderSelector: function renderSelector() {
      var selected = this.selected, loading = this.loading, dragNodeHighlight = this.dragNodeHighlight;
      var icon = getComponent(this, "icon", {}, false);
      var _this$vcTree2 = this.vcTree, prefixCls2 = _this$vcTree2.prefixCls, showIcon = _this$vcTree2.showIcon, treeIcon = _this$vcTree2.icon, draggable = _this$vcTree2.draggable, loadData = _this$vcTree2.loadData;
      var disabled = this.isDisabled();
      var title2 = getComponent(this, "title", {}, false);
      var wrapClass = "".concat(prefixCls2, "-node-content-wrapper");
      var $icon;
      if (showIcon) {
        var currentIcon = icon || treeIcon;
        $icon = currentIcon ? createVNode("span", {
          "class": classNames("".concat(prefixCls2, "-iconEle"), "".concat(prefixCls2, "-icon__customize"))
        }, [typeof currentIcon === "function" ? currentIcon(_extends$1(_extends$1({}, this.$props), this.$props.dataRef)) : currentIcon]) : this.renderIcon();
      } else if (loadData && loading) {
        $icon = this.renderIcon();
      }
      var currentTitle = title2;
      var $title = currentTitle ? createVNode("span", {
        "class": "".concat(prefixCls2, "-title")
      }, [typeof currentTitle === "function" ? currentTitle(_extends$1(_extends$1({}, this.$props), this.$props.dataRef)) : currentTitle]) : createVNode("span", {
        "class": "".concat(prefixCls2, "-title")
      }, [defaultTitle]);
      return createVNode("span", {
        "key": "selector",
        "ref": this.setSelectHandle,
        "title": typeof title2 === "string" ? title2 : "",
        "class": classNames("".concat(wrapClass), "".concat(wrapClass, "-").concat(this.getNodeState() || "normal"), !disabled && (selected || dragNodeHighlight) && "".concat(prefixCls2, "-node-selected"), !disabled && draggable && "draggable"),
        "draggable": !disabled && draggable || void 0,
        "aria-grabbed": !disabled && draggable || void 0,
        "onMouseenter": this.onMouseEnter,
        "onMouseleave": this.onMouseLeave,
        "onContextmenu": this.onContextMenu,
        "onClick": this.onSelectorClick,
        "onDblclick": this.onSelectorDoubleClick,
        "onDragstart": draggable ? this.onDragStart : noop$2
      }, [$icon, $title]);
    },
    renderChildren: function renderChildren3() {
      var expanded = this.expanded, pos = this.pos;
      var _this$vcTree3 = this.vcTree, prefixCls2 = _this$vcTree3.prefixCls, openTransitionName = _this$vcTree3.openTransitionName, openAnimation2 = _this$vcTree3.openAnimation, renderTreeNode2 = _this$vcTree3.renderTreeNode;
      var animProps = {};
      if (openTransitionName) {
        animProps = getTransitionProps(openTransitionName);
      } else if (_typeof$2(openAnimation2) === "object") {
        animProps = _extends$1(_extends$1(_extends$1({}, openAnimation2), {
          css: false
        }), animProps);
      }
      var nodeList = this.getNodeChildren();
      if (nodeList.length === 0) {
        return null;
      }
      var $children;
      if (expanded) {
        $children = createVNode("ul", {
          "class": classNames("".concat(prefixCls2, "-child-tree"), expanded && "".concat(prefixCls2, "-child-tree-open")),
          "data-expanded": expanded,
          "role": "group"
        }, [mapChildren(nodeList, function(node, index2) {
          return renderTreeNode2(node, index2, pos);
        })]);
      }
      return createVNode(Transition, animProps, {
        default: function _default8() {
          return [$children];
        }
      });
    }
  },
  render: function render144() {
    var _ref;
    this.children = getSlot(this);
    var _this$$props = this.$props, dragOver = _this$$props.dragOver, dragOverGapTop = _this$$props.dragOverGapTop, dragOverGapBottom = _this$$props.dragOverGapBottom, isLeaf = _this$$props.isLeaf, expanded = _this$$props.expanded, selected = _this$$props.selected, checked2 = _this$$props.checked, halfChecked = _this$$props.halfChecked, loading = _this$$props.loading;
    var _this$vcTree4 = this.vcTree, prefixCls2 = _this$vcTree4.prefixCls, filterTreeNode2 = _this$vcTree4.filterTreeNode, draggable = _this$vcTree4.draggable;
    var disabled = this.isDisabled();
    var dataOrAriaAttributeProps = getDataAndAria(_extends$1(_extends$1({}, this.$props), this.$attrs));
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    return createVNode("li", _objectSpread2$2({
      "class": (_ref = {}, _defineProperty$U(_ref, className, className), _defineProperty$U(_ref, "".concat(prefixCls2, "-treenode-disabled"), disabled), _defineProperty$U(_ref, "".concat(prefixCls2, "-treenode-switcher-").concat(expanded ? "open" : "close"), !isLeaf), _defineProperty$U(_ref, "".concat(prefixCls2, "-treenode-checkbox-checked"), checked2), _defineProperty$U(_ref, "".concat(prefixCls2, "-treenode-checkbox-indeterminate"), halfChecked), _defineProperty$U(_ref, "".concat(prefixCls2, "-treenode-selected"), selected), _defineProperty$U(_ref, "".concat(prefixCls2, "-treenode-loading"), loading), _defineProperty$U(_ref, "drag-over", !disabled && dragOver), _defineProperty$U(_ref, "drag-over-gap-top", !disabled && dragOverGapTop), _defineProperty$U(_ref, "drag-over-gap-bottom", !disabled && dragOverGapBottom), _defineProperty$U(_ref, "filter-node", filterTreeNode2 && filterTreeNode2(this)), _ref),
      "style": style3,
      "role": "treeitem",
      "onDragenter": draggable ? this.onDragEnter : noop$2,
      "onDragover": draggable ? this.onDragOver : noop$2,
      "onDragleave": draggable ? this.onDragLeave : noop$2,
      "onDrop": draggable ? this.onDrop : noop$2,
      "onDragend": draggable ? this.onDragEnd : noop$2
    }, dataOrAriaAttributeProps), [this.renderSwitcher(), this.renderCheckbox(), this.renderSelector(), this.renderChildren()]);
  }
});
TreeNode$4.isTreeNode = 1;
var TreeNode$5 = TreeNode$4;
var __rest$9 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var DRAG_SIDE_RANGE = 0.25;
var DRAG_MIN_GAP = 2;
function arrDel(list, value26) {
  var clone4 = list.slice();
  var index2 = clone4.indexOf(value26);
  if (index2 >= 0) {
    clone4.splice(index2, 1);
  }
  return clone4;
}
function arrAdd(list, value26) {
  var clone4 = list.slice();
  if (clone4.indexOf(value26) === -1) {
    clone4.push(value26);
  }
  return clone4;
}
function posToArr(pos) {
  return pos.split("-");
}
function getPosition(level2, index2) {
  return "".concat(level2, "-").concat(index2);
}
function isTreeNode(node) {
  return node.type && node.type.isTreeNode;
}
function getNodeChildren() {
  var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return children.filter(isTreeNode);
}
function isCheckDisabled(node) {
  var _ref = getOptionProps(node) || {}, disabled = _ref.disabled, disableCheckbox = _ref.disableCheckbox, checkable = _ref.checkable;
  return !!(disabled || disableCheckbox) || checkable === false;
}
function traverseTreeNodes(treeNodes, callback) {
  function processNode(node, index2, parent2) {
    var children = node ? getSlot(node) : treeNodes;
    var pos = node ? getPosition(parent2.pos, index2) : 0;
    var childList = getNodeChildren(children);
    if (node) {
      var key2 = node.key;
      if (!key2 && (key2 === void 0 || key2 === null)) {
        key2 = pos;
      }
      var data80 = {
        node,
        index: index2,
        pos,
        key: key2,
        parentPos: parent2.node ? parent2.pos : null
      };
      callback(data80);
    }
    childList.forEach(function(subNode, subIndex) {
      processNode(subNode, subIndex, {
        node,
        pos
      });
    });
  }
  processNode(null);
}
function mapChildren() {
  var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var func = arguments.length > 1 ? arguments[1] : void 0;
  var list = children.map(func);
  if (list.length === 1) {
    return list[0];
  }
  return list;
}
function getDragNodesKeys(treeNodes, node) {
  var _getOptionProps = getOptionProps(node), eventKey = _getOptionProps.eventKey, pos = _getOptionProps.pos;
  var dragNodesKeys = [];
  traverseTreeNodes(treeNodes, function(_ref2) {
    var key2 = _ref2.key;
    dragNodesKeys.push(key2);
  });
  dragNodesKeys.push(eventKey || pos);
  return dragNodesKeys;
}
function calcDropPosition(event, treeNode) {
  var clientY = event.clientY;
  var _treeNode$selectHandl = treeNode.selectHandle.getBoundingClientRect(), top = _treeNode$selectHandl.top, bottom = _treeNode$selectHandl.bottom, height = _treeNode$selectHandl.height;
  var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);
  if (clientY <= top + des) {
    return -1;
  }
  if (clientY >= bottom - des) {
    return 1;
  }
  return 0;
}
function calcSelectedKeys(selectedKeys3, props2) {
  if (!selectedKeys3) {
    return void 0;
  }
  var multiple = props2.multiple;
  if (multiple) {
    return selectedKeys3.slice();
  }
  if (selectedKeys3.length) {
    return [selectedKeys3[0]];
  }
  return selectedKeys3;
}
var internalProcessProps = function internalProcessProps2() {
  var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return _extends$1(_extends$1({}, props2), {
    class: props2.class || props2.className,
    style: props2.style,
    key: props2.key
  });
};
function convertDataToTree$1(treeData, processor) {
  if (!treeData)
    return [];
  var _ref3 = processor || {}, _ref3$processProps = _ref3.processProps, processProps2 = _ref3$processProps === void 0 ? internalProcessProps : _ref3$processProps;
  var list = Array.isArray(treeData) ? treeData : [treeData];
  return list.map(function(_a) {
    var children = _a.children, props2 = __rest$9(_a, ["children"]);
    var childrenNodes = convertDataToTree$1(children, processor);
    return createVNode(TreeNode$5, processProps2(props2), {
      default: function _default8() {
        return [childrenNodes];
      }
    });
  });
}
function convertTreeToEntities$1(treeNodes) {
  var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, initWrapper2 = _ref4.initWrapper, processEntity2 = _ref4.processEntity, onProcessFinished = _ref4.onProcessFinished;
  var posEntities = new Map();
  var keyEntities = new Map();
  var wrapper = {
    posEntities,
    keyEntities
  };
  if (initWrapper2) {
    wrapper = initWrapper2(wrapper) || wrapper;
  }
  traverseTreeNodes(treeNodes, function(item) {
    var node = item.node, index2 = item.index, pos = item.pos, key2 = item.key, parentPos = item.parentPos;
    var entity = {
      node,
      index: index2,
      key: key2,
      pos
    };
    posEntities.set(pos, entity);
    keyEntities.set(key2, entity);
    entity.parent = posEntities.get(parentPos);
    if (entity.parent) {
      entity.parent.children = entity.parent.children || [];
      entity.parent.children.push(entity);
    }
    if (processEntity2) {
      processEntity2(entity, wrapper);
    }
  });
  if (onProcessFinished) {
    onProcessFinished(wrapper);
  }
  return wrapper;
}
function parseCheckedKeys(keys2) {
  if (!keys2) {
    return null;
  }
  var keyProps;
  if (Array.isArray(keys2)) {
    keyProps = {
      checkedKeys: keys2,
      halfCheckedKeys: void 0
    };
  } else if (_typeof$2(keys2) === "object") {
    keyProps = {
      checkedKeys: keys2.checked || void 0,
      halfCheckedKeys: keys2.halfChecked || void 0
    };
  } else {
    return null;
  }
  return keyProps;
}
function conductCheck$1(keyList, isCheck, keyEntities) {
  var checkStatus = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var checkedKeys = new Map();
  var halfCheckedKeys = new Map();
  (checkStatus.checkedKeys || []).forEach(function(key3) {
    checkedKeys.set(key3, true);
  });
  (checkStatus.halfCheckedKeys || []).forEach(function(key3) {
    halfCheckedKeys.set(key3, true);
  });
  function conductUp(key3) {
    if (checkedKeys.get(key3) === isCheck)
      return;
    var entity = keyEntities.get(key3);
    if (!entity)
      return;
    var children = entity.children, parent2 = entity.parent, node = entity.node;
    if (isCheckDisabled(node))
      return;
    var everyChildChecked = true;
    var someChildChecked = false;
    (children || []).filter(function(child) {
      return !isCheckDisabled(child.node);
    }).forEach(function(_ref5) {
      var childKey = _ref5.key;
      var childChecked = checkedKeys.get(childKey);
      var childHalfChecked = halfCheckedKeys.get(childKey);
      if (childChecked || childHalfChecked)
        someChildChecked = true;
      if (!childChecked)
        everyChildChecked = false;
    });
    if (isCheck) {
      checkedKeys.set(key3, everyChildChecked);
    } else {
      checkedKeys.set(key3, false);
    }
    halfCheckedKeys.set(key3, someChildChecked);
    if (parent2) {
      conductUp(parent2.key);
    }
  }
  function conductDown(key3) {
    if (checkedKeys.get(key3) === isCheck)
      return;
    var entity = keyEntities.get(key3);
    if (!entity)
      return;
    var children = entity.children, node = entity.node;
    if (isCheckDisabled(node))
      return;
    checkedKeys.set(key3, isCheck);
    (children || []).forEach(function(child) {
      conductDown(child.key);
    });
  }
  function conduct(key3) {
    var entity = keyEntities.get(key3);
    if (!entity) {
      return;
    }
    var children = entity.children, parent2 = entity.parent, node = entity.node;
    checkedKeys.set(key3, isCheck);
    if (isCheckDisabled(node))
      return;
    (children || []).filter(function(child) {
      return !isCheckDisabled(child.node);
    }).forEach(function(child) {
      conductDown(child.key);
    });
    if (parent2) {
      conductUp(parent2.key);
    }
  }
  (keyList || []).forEach(function(key3) {
    conduct(key3);
  });
  var checkedKeyList = [];
  var halfCheckedKeyList = [];
  var _iterator = _createForOfIteratorHelper(checkedKeys), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _step$value = _slicedToArray$2(_step.value, 2), key2 = _step$value[0], value26 = _step$value[1];
      if (value26) {
        checkedKeyList.push(key2);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var _iterator2 = _createForOfIteratorHelper(halfCheckedKeys), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var _step2$value = _slicedToArray$2(_step2.value, 2), _key = _step2$value[0], _value = _step2$value[1];
      if (!checkedKeys.get(_key) && _value) {
        halfCheckedKeyList.push(_key);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return {
    checkedKeys: checkedKeyList,
    halfCheckedKeys: halfCheckedKeyList
  };
}
function conductExpandParent(keyList, keyEntities) {
  var expandedKeys2 = new Map();
  function conductUp(key2) {
    if (expandedKeys2.get(key2))
      return;
    var entity = keyEntities.get(key2);
    if (!entity)
      return;
    expandedKeys2.set(key2, true);
    var parent2 = entity.parent, node = entity.node;
    var props2 = getOptionProps(node);
    if (props2 && props2.disabled)
      return;
    if (parent2) {
      conductUp(parent2.key);
    }
  }
  (keyList || []).forEach(function(key2) {
    conductUp(key2);
  });
  return _toConsumableArray(expandedKeys2.keys());
}
function getDataAndAria(props2) {
  return Object.keys(props2).reduce(function(prev3, key2) {
    if (key2.substr(0, 5) === "data-" || key2.substr(0, 5) === "aria-") {
      prev3[key2] = props2[key2];
    }
    return prev3;
  }, {});
}
function getWatch$1() {
  var keys2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var watch2 = {};
  keys2.forEach(function(k2) {
    watch2[k2] = {
      handler: function handler8() {
        this.needSyncKeys[k2] = true;
      },
      flush: "sync"
    };
  });
  return watch2;
}
var Tree$1 = defineComponent({
  name: "Tree",
  mixins: [BaseMixin],
  provide: function provide2() {
    return {
      vcTree: this
    };
  },
  inheritAttrs: false,
  props: initDefaultProps$2({
    prefixCls: PropsTypes.string,
    tabindex: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    children: PropsTypes.any,
    treeData: PropsTypes.array,
    showLine: PropsTypes.looseBool,
    showIcon: PropsTypes.looseBool,
    icon: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
    focusable: PropsTypes.looseBool,
    selectable: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    multiple: PropsTypes.looseBool,
    checkable: withUndefined(PropsTypes.oneOfType([PropsTypes.object, PropsTypes.looseBool])),
    checkStrictly: PropsTypes.looseBool,
    draggable: PropsTypes.looseBool,
    defaultExpandParent: PropsTypes.looseBool,
    autoExpandParent: PropsTypes.looseBool,
    defaultExpandAll: PropsTypes.looseBool,
    defaultExpandedKeys: PropsTypes.array,
    expandedKeys: PropsTypes.array,
    defaultCheckedKeys: PropsTypes.array,
    checkedKeys: PropsTypes.oneOfType([PropsTypes.array, PropsTypes.object]),
    defaultSelectedKeys: PropsTypes.array,
    selectedKeys: PropsTypes.array,
    loadData: PropsTypes.func,
    loadedKeys: PropsTypes.array,
    filterTreeNode: PropsTypes.func,
    openTransitionName: PropsTypes.string,
    openAnimation: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object]),
    switcherIcon: PropsTypes.any,
    __propsSymbol__: PropsTypes.any
  }, {
    prefixCls: "rc-tree",
    showLine: false,
    showIcon: true,
    selectable: true,
    multiple: false,
    checkable: false,
    disabled: false,
    checkStrictly: false,
    draggable: false,
    defaultExpandParent: true,
    autoExpandParent: false,
    defaultExpandAll: false,
    defaultExpandedKeys: [],
    defaultCheckedKeys: [],
    defaultSelectedKeys: []
  }),
  data: function data71() {
    warning_1(this.$props.__propsSymbol__);
    warning_1(this.$props.children);
    this.needSyncKeys = {};
    this.domTreeNodes = {};
    var state2 = {
      _posEntities: new Map(),
      _keyEntities: new Map(),
      _expandedKeys: [],
      _selectedKeys: [],
      _checkedKeys: [],
      _halfCheckedKeys: [],
      _loadedKeys: [],
      _loadingKeys: [],
      _treeNode: [],
      _prevProps: null,
      _dragOverNodeKey: "",
      _dropPosition: null,
      _dragNodesKeys: []
    };
    return _extends$1(_extends$1({}, state2), this.getDerivedState(getOptionProps(this), state2));
  },
  watch: _extends$1(_extends$1({}, getWatch$1(["treeData", "children", "expandedKeys", "autoExpandParent", "selectedKeys", "checkedKeys", "loadedKeys"])), {
    __propsSymbol__: function __propsSymbol__2() {
      this.setState(this.getDerivedState(getOptionProps(this), this.$data));
      this.needSyncKeys = {};
    }
  }),
  methods: {
    getDerivedState: function getDerivedState2(props2, prevState) {
      var _prevProps = prevState._prevProps;
      var newState = {
        _prevProps: _extends$1({}, props2)
      };
      var self2 = this;
      function needSync(name2) {
        return !_prevProps && name2 in props2 || _prevProps && self2.needSyncKeys[name2];
      }
      var treeNode = null;
      if (needSync("treeData")) {
        treeNode = convertDataToTree$1(props2.treeData);
      } else if (needSync("children")) {
        treeNode = props2.children;
      }
      if (treeNode) {
        newState._treeNode = treeNode;
        var entitiesMap = convertTreeToEntities$1(treeNode);
        newState._keyEntities = entitiesMap.keyEntities;
      }
      var keyEntities = newState._keyEntities || prevState._keyEntities;
      if (needSync("expandedKeys") || _prevProps && needSync("autoExpandParent")) {
        newState._expandedKeys = props2.autoExpandParent || !_prevProps && props2.defaultExpandParent ? conductExpandParent(props2.expandedKeys, keyEntities) : props2.expandedKeys;
      } else if (!_prevProps && props2.defaultExpandAll) {
        newState._expandedKeys = _toConsumableArray(keyEntities.keys());
      } else if (!_prevProps && props2.defaultExpandedKeys) {
        newState._expandedKeys = props2.autoExpandParent || props2.defaultExpandParent ? conductExpandParent(props2.defaultExpandedKeys, keyEntities) : props2.defaultExpandedKeys;
      }
      if (props2.selectable) {
        if (needSync("selectedKeys")) {
          newState._selectedKeys = calcSelectedKeys(props2.selectedKeys, props2);
        } else if (!_prevProps && props2.defaultSelectedKeys) {
          newState._selectedKeys = calcSelectedKeys(props2.defaultSelectedKeys, props2);
        }
      }
      if (props2.checkable) {
        var checkedKeyEntity;
        if (needSync("checkedKeys")) {
          checkedKeyEntity = parseCheckedKeys(props2.checkedKeys) || {};
        } else if (!_prevProps && props2.defaultCheckedKeys) {
          checkedKeyEntity = parseCheckedKeys(props2.defaultCheckedKeys) || {};
        } else if (treeNode) {
          checkedKeyEntity = parseCheckedKeys(props2.checkedKeys) || {
            checkedKeys: prevState._checkedKeys,
            halfCheckedKeys: prevState._halfCheckedKeys
          };
        }
        if (checkedKeyEntity) {
          var _checkedKeyEntity = checkedKeyEntity, _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys, checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che, _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys, halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;
          if (!props2.checkStrictly) {
            var conductKeys = conductCheck$1(checkedKeys, true, keyEntities);
            checkedKeys = conductKeys.checkedKeys;
            halfCheckedKeys = conductKeys.halfCheckedKeys;
          }
          newState._checkedKeys = checkedKeys;
          newState._halfCheckedKeys = halfCheckedKeys;
        }
      }
      if (needSync("loadedKeys")) {
        newState._loadedKeys = props2.loadedKeys;
      }
      return newState;
    },
    onNodeDragStart: function onNodeDragStart(event, node) {
      var _expandedKeys = this.$data._expandedKeys;
      var eventKey = node.eventKey;
      var children = getSlot(node);
      this.dragNode = node;
      this.setState({
        _dragNodesKeys: getDragNodesKeys(typeof children === "function" ? children() : children, node),
        _expandedKeys: arrDel(_expandedKeys, eventKey)
      });
      this.__emit("dragstart", {
        event,
        node
      });
    },
    onNodeDragEnter: function onNodeDragEnter(event, node) {
      var _this = this;
      var expandedKeys2 = this.$data._expandedKeys;
      var pos = node.pos, eventKey = node.eventKey;
      if (!this.dragNode || !node.selectHandle)
        return;
      var dropPosition = calcDropPosition(event, node);
      if (this.dragNode.eventKey === eventKey && dropPosition === 0) {
        this.setState({
          _dragOverNodeKey: "",
          _dropPosition: null
        });
        return;
      }
      setTimeout(function() {
        _this.setState({
          _dragOverNodeKey: eventKey,
          _dropPosition: dropPosition
        });
        if (!_this.delayedDragEnterLogic) {
          _this.delayedDragEnterLogic = {};
        }
        Object.keys(_this.delayedDragEnterLogic).forEach(function(key2) {
          clearTimeout(_this.delayedDragEnterLogic[key2]);
        });
        _this.delayedDragEnterLogic[pos] = setTimeout(function() {
          var newExpandedKeys = arrAdd(expandedKeys2, eventKey);
          if (!hasProp(_this, "expandedKeys")) {
            _this.setState({
              _expandedKeys: newExpandedKeys
            });
          }
          _this.__emit("dragenter", {
            event,
            node,
            expandedKeys: newExpandedKeys
          });
        }, 400);
      }, 0);
    },
    onNodeDragOver: function onNodeDragOver(event, node) {
      var eventKey = node.eventKey;
      var _this$$data = this.$data, _dragOverNodeKey = _this$$data._dragOverNodeKey, _dropPosition = _this$$data._dropPosition;
      if (this.dragNode && eventKey === _dragOverNodeKey && node.selectHandle) {
        var dropPosition = calcDropPosition(event, node);
        if (dropPosition === _dropPosition)
          return;
        this.setState({
          _dropPosition: dropPosition
        });
      }
      this.__emit("dragover", {
        event,
        node
      });
    },
    onNodeDragLeave: function onNodeDragLeave(event, node) {
      this.setState({
        _dragOverNodeKey: ""
      });
      this.__emit("dragleave", {
        event,
        node
      });
    },
    onNodeDragEnd: function onNodeDragEnd(event, node) {
      this.setState({
        _dragOverNodeKey: ""
      });
      this.__emit("dragend", {
        event,
        node
      });
      this.dragNode = null;
    },
    onNodeDrop: function onNodeDrop(event, node) {
      var _this$$data2 = this.$data, _this$$data2$_dragNod = _this$$data2._dragNodesKeys, _dragNodesKeys = _this$$data2$_dragNod === void 0 ? [] : _this$$data2$_dragNod, _dropPosition = _this$$data2._dropPosition;
      var eventKey = node.eventKey, pos = node.pos;
      this.setState({
        _dragOverNodeKey: ""
      });
      if (_dragNodesKeys.indexOf(eventKey) !== -1) {
        return;
      }
      var posArr = posToArr(pos);
      var dropResult = {
        event,
        node,
        dragNode: this.dragNode,
        dragNodesKeys: _dragNodesKeys.slice(),
        dropPosition: _dropPosition + Number(posArr[posArr.length - 1]),
        dropToGap: false
      };
      if (_dropPosition !== 0) {
        dropResult.dropToGap = true;
      }
      this.__emit("drop", dropResult);
      this.dragNode = null;
    },
    onNodeClick: function onNodeClick(e2, treeNode) {
      this.__emit("click", e2, treeNode);
    },
    onNodeDoubleClick: function onNodeDoubleClick(e2, treeNode) {
      this.__emit("dblclick", e2, treeNode);
    },
    onNodeSelect: function onNodeSelect(e2, treeNode) {
      var selectedKeys3 = this.$data._selectedKeys;
      var keyEntities = this.$data._keyEntities;
      var multiple = this.$props.multiple;
      var _getOptionProps = getOptionProps(treeNode), selected = _getOptionProps.selected, eventKey = _getOptionProps.eventKey;
      var targetSelected = !selected;
      if (!targetSelected) {
        selectedKeys3 = arrDel(selectedKeys3, eventKey);
      } else if (!multiple) {
        selectedKeys3 = [eventKey];
      } else {
        selectedKeys3 = arrAdd(selectedKeys3, eventKey);
      }
      var selectedNodes = selectedKeys3.map(function(key2) {
        var entity = keyEntities.get(key2);
        if (!entity)
          return null;
        return entity.node;
      }).filter(function(node) {
        return node;
      });
      this.setUncontrolledState({
        _selectedKeys: selectedKeys3
      });
      var eventObj = {
        event: "select",
        selected: targetSelected,
        node: treeNode,
        selectedNodes,
        nativeEvent: e2
      };
      this.__emit("select", selectedKeys3, eventObj);
    },
    onNodeCheck: function onNodeCheck(e2, treeNode, checked2) {
      var _this$$data3 = this.$data, keyEntities = _this$$data3._keyEntities, oriCheckedKeys = _this$$data3._checkedKeys, oriHalfCheckedKeys = _this$$data3._halfCheckedKeys;
      var checkStrictly = this.$props.checkStrictly;
      var _getOptionProps2 = getOptionProps(treeNode), eventKey = _getOptionProps2.eventKey;
      var checkedObj;
      var eventObj = {
        event: "check",
        node: treeNode,
        checked: checked2,
        nativeEvent: e2
      };
      if (checkStrictly) {
        var checkedKeys = checked2 ? arrAdd(oriCheckedKeys, eventKey) : arrDel(oriCheckedKeys, eventKey);
        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, eventKey);
        checkedObj = {
          checked: checkedKeys,
          halfChecked: halfCheckedKeys
        };
        eventObj.checkedNodes = checkedKeys.map(function(key2) {
          return keyEntities.get(key2);
        }).filter(function(entity) {
          return entity;
        }).map(function(entity) {
          return entity.node;
        });
        this.setUncontrolledState({
          _checkedKeys: checkedKeys
        });
      } else {
        var _conductCheck = conductCheck$1([eventKey], checked2, keyEntities, {
          checkedKeys: oriCheckedKeys,
          halfCheckedKeys: oriHalfCheckedKeys
        }), _checkedKeys = _conductCheck.checkedKeys, _halfCheckedKeys = _conductCheck.halfCheckedKeys;
        checkedObj = _checkedKeys;
        eventObj.checkedNodes = [];
        eventObj.checkedNodesPositions = [];
        eventObj.halfCheckedKeys = _halfCheckedKeys;
        _checkedKeys.forEach(function(key2) {
          var entity = keyEntities.get(key2);
          if (!entity)
            return;
          var node = entity.node, pos = entity.pos;
          eventObj.checkedNodes.push(node);
          eventObj.checkedNodesPositions.push({
            node,
            pos
          });
        });
        this.setUncontrolledState({
          _checkedKeys,
          _halfCheckedKeys
        });
      }
      this.__emit("check", checkedObj, eventObj);
    },
    onNodeLoad: function onNodeLoad(treeNode) {
      var _this2 = this;
      return new Promise(function(resolve2) {
        _this2.setState(function(_ref) {
          var _ref$_loadedKeys = _ref._loadedKeys, loadedKeys = _ref$_loadedKeys === void 0 ? [] : _ref$_loadedKeys, _ref$_loadingKeys = _ref._loadingKeys, loadingKeys = _ref$_loadingKeys === void 0 ? [] : _ref$_loadingKeys;
          var loadData = _this2.$props.loadData;
          var _getOptionProps3 = getOptionProps(treeNode), eventKey = _getOptionProps3.eventKey;
          if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {
            return {};
          }
          var promise = loadData(treeNode);
          promise.then(function() {
            var _this2$$data = _this2.$data, currentLoadedKeys = _this2$$data._loadedKeys, currentLoadingKeys = _this2$$data._loadingKeys;
            var newLoadedKeys = arrAdd(currentLoadedKeys, eventKey);
            var newLoadingKeys = arrDel(currentLoadingKeys, eventKey);
            _this2.__emit("load", newLoadedKeys, {
              event: "load",
              node: treeNode
            });
            _this2.setUncontrolledState({
              _loadedKeys: newLoadedKeys
            });
            _this2.setState({
              _loadingKeys: newLoadingKeys
            });
            resolve2();
          });
          return {
            _loadingKeys: arrAdd(loadingKeys, eventKey)
          };
        });
      });
    },
    onNodeExpand: function onNodeExpand(e2, treeNode) {
      var _this3 = this;
      var expandedKeys2 = this.$data._expandedKeys;
      var loadData = this.$props.loadData;
      var _getOptionProps4 = getOptionProps(treeNode), eventKey = _getOptionProps4.eventKey, expanded = _getOptionProps4.expanded;
      expandedKeys2.indexOf(eventKey);
      var targetExpanded = !expanded;
      if (targetExpanded) {
        expandedKeys2 = arrAdd(expandedKeys2, eventKey);
      } else {
        expandedKeys2 = arrDel(expandedKeys2, eventKey);
      }
      this.setUncontrolledState({
        _expandedKeys: expandedKeys2
      });
      this.__emit("expand", expandedKeys2, {
        node: treeNode,
        expanded: targetExpanded,
        nativeEvent: e2
      });
      if (targetExpanded && loadData) {
        var loadPromise = this.onNodeLoad(treeNode);
        return loadPromise ? loadPromise.then(function() {
          _this3.setUncontrolledState({
            _expandedKeys: expandedKeys2
          });
        }) : null;
      }
      return null;
    },
    onNodeMouseEnter: function onNodeMouseEnter(event, node) {
      this.__emit("mouseenter", {
        event,
        node
      });
    },
    onNodeMouseLeave: function onNodeMouseLeave(event, node) {
      this.__emit("mouseleave", {
        event,
        node
      });
    },
    onNodeContextMenu: function onNodeContextMenu(event, node) {
      event.preventDefault();
      this.__emit("rightClick", {
        event,
        node
      });
    },
    setUncontrolledState: function setUncontrolledState(state2) {
      var needSync = false;
      var newState = {};
      var props2 = getOptionProps(this);
      Object.keys(state2).forEach(function(name2) {
        if (name2.replace("_", "") in props2)
          return;
        needSync = true;
        newState[name2] = state2[name2];
      });
      if (needSync) {
        this.setState(newState);
      }
    },
    registerTreeNode: function registerTreeNode(key2, node) {
      if (node) {
        this.domTreeNodes[key2] = node;
      } else {
        delete this.domTreeNodes[key2];
      }
    },
    isKeyChecked: function isKeyChecked(key2) {
      var _this$$data$_checkedK = this.$data._checkedKeys, checkedKeys = _this$$data$_checkedK === void 0 ? [] : _this$$data$_checkedK;
      return checkedKeys.indexOf(key2) !== -1;
    },
    renderTreeNode: function renderTreeNode(child, index2) {
      var level2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var _this$$data4 = this.$data, keyEntities = _this$$data4._keyEntities, _this$$data4$_expande = _this$$data4._expandedKeys, expandedKeys2 = _this$$data4$_expande === void 0 ? [] : _this$$data4$_expande, _this$$data4$_selecte = _this$$data4._selectedKeys, selectedKeys3 = _this$$data4$_selecte === void 0 ? [] : _this$$data4$_selecte, _this$$data4$_halfChe = _this$$data4._halfCheckedKeys, halfCheckedKeys = _this$$data4$_halfChe === void 0 ? [] : _this$$data4$_halfChe, _this$$data4$_loadedK = _this$$data4._loadedKeys, loadedKeys = _this$$data4$_loadedK === void 0 ? [] : _this$$data4$_loadedK, _this$$data4$_loading = _this$$data4._loadingKeys, loadingKeys = _this$$data4$_loading === void 0 ? [] : _this$$data4$_loading, dragOverNodeKey = _this$$data4._dragOverNodeKey, dropPosition = _this$$data4._dropPosition;
      var pos = getPosition(level2, index2);
      var key2 = child.key;
      if (!key2 && (key2 === void 0 || key2 === null)) {
        key2 = pos;
      }
      if (!keyEntities.get(key2)) {
        return null;
      }
      return cloneElement(child, {
        eventKey: key2,
        expanded: expandedKeys2.indexOf(key2) !== -1,
        selected: selectedKeys3.indexOf(key2) !== -1,
        loaded: loadedKeys.indexOf(key2) !== -1,
        loading: loadingKeys.indexOf(key2) !== -1,
        checked: this.isKeyChecked(key2),
        halfChecked: halfCheckedKeys.indexOf(key2) !== -1,
        pos,
        dragOver: dragOverNodeKey === key2 && dropPosition === 0,
        dragOverGapTop: dragOverNodeKey === key2 && dropPosition === -1,
        dragOverGapBottom: dragOverNodeKey === key2 && dropPosition === 1,
        key: key2
      });
    }
  },
  render: function render145() {
    var _this4 = this;
    var treeNode = this.$data._treeNode;
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, focusable = _this$$props.focusable, showLine = _this$$props.showLine, _this$$props$tabindex = _this$$props.tabindex, tabindex = _this$$props$tabindex === void 0 ? 0 : _this$$props$tabindex;
    var domProps = getDataAndAria(_extends$1(_extends$1({}, this.$props), this.$attrs));
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    return createVNode("ul", _objectSpread2$2(_objectSpread2$2({}, domProps), {}, {
      "class": classNames(prefixCls2, className, _defineProperty$U({}, "".concat(prefixCls2, "-show-line"), showLine)),
      "style": style3,
      "role": "tree",
      "unselectable": "on",
      "tabindex": focusable ? tabindex : null
    }), [mapChildren(treeNode, function(node, index2) {
      return _this4.renderTreeNode(node, index2);
    })]);
  }
});
var Tree$2 = Tree$1;
Tree$2.TreeNode = TreeNode$5;
var __rest$8 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var TreeNode$3 = Tree$2.TreeNode;
function TreeProps() {
  return {
    showLine: PropsTypes.looseBool,
    multiple: PropsTypes.looseBool,
    autoExpandParent: PropsTypes.looseBool,
    checkStrictly: PropsTypes.looseBool,
    checkable: PropsTypes.looseBool,
    disabled: PropsTypes.looseBool,
    defaultExpandAll: PropsTypes.looseBool,
    defaultExpandParent: PropsTypes.looseBool,
    defaultExpandedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    expandedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    checkedKeys: PropsTypes.oneOfType([PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])), PropsTypes.shape({
      checked: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
      halfChecked: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]))
    }).loose]),
    defaultCheckedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    selectedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    defaultSelectedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    selectable: PropsTypes.looseBool,
    filterAntTreeNode: PropsTypes.func,
    loadData: PropsTypes.func,
    loadedKeys: PropsTypes.arrayOf(PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number])),
    draggable: PropsTypes.looseBool,
    showIcon: PropsTypes.looseBool,
    icon: PropsTypes.func,
    switcherIcon: PropsTypes.any,
    prefixCls: PropsTypes.string,
    filterTreeNode: PropsTypes.func,
    openAnimation: PropsTypes.any,
    treeData: {
      type: Array
    },
    replaceFields: PropsTypes.object,
    blockNode: PropsTypes.looseBool,
    onExpand: PropsTypes.func,
    onCheck: PropsTypes.func,
    onSelect: PropsTypes.func,
    onClick: PropsTypes.func,
    onDoubleclick: PropsTypes.func,
    onDblclick: PropsTypes.func,
    "onUpdate:selectedKeys": PropsTypes.func,
    "onUpdate:checkedKeys": PropsTypes.func,
    "onUpdate:expandedKeys": PropsTypes.func
  };
}
var Tree = defineComponent({
  name: "ATree",
  inheritAttrs: false,
  props: initDefaultProps$1(TreeProps(), {
    checkable: false,
    showIcon: false,
    openAnimation: _extends$1(_extends$1({}, animation$2), {
      appear: null
    }),
    blockNode: false
  }),
  setup: function setup147() {
    return {
      tree: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  TreeNode: TreeNode$3,
  methods: {
    renderSwitcherIcon: function renderSwitcherIcon(prefixCls2, switcherIcon, _ref) {
      var isLeaf = _ref.isLeaf, loading = _ref.loading, expanded = _ref.expanded;
      var showLine = this.$props.showLine;
      if (loading) {
        return createVNode(LoadingOutlined$1, {
          "class": "".concat(prefixCls2, "-switcher-loading-icon")
        }, null);
      }
      if (isLeaf) {
        return showLine ? createVNode(FileTwoTone, {
          "class": "".concat(prefixCls2, "-switcher-line-icon")
        }, null) : null;
      }
      var switcherCls = "".concat(prefixCls2, "-switcher-icon");
      if (switcherIcon) {
        return cloneElement(switcherIcon, {
          class: switcherCls
        });
      }
      return showLine ? expanded ? createVNode(MinusSquareOutlined$1, {
        "class": "".concat(prefixCls2, "-switcher-line-icon")
      }, null) : createVNode(PlusSquareOutlined$1, {
        "class": "".concat(prefixCls2, "-switcher-line-icon")
      }, null) : createVNode(CaretDownFilled$1, {
        "class": switcherCls
      }, null);
    },
    updateTreeData: function updateTreeData(treeData) {
      var _this = this;
      var $slots = this.$slots;
      var defaultFields = {
        children: "children",
        title: "title",
        key: "key"
      };
      var replaceFields = _extends$1(_extends$1({}, defaultFields), this.$props.replaceFields);
      return treeData.map(function(item) {
        var key2 = item[replaceFields.key];
        var children = item[replaceFields.children];
        var _item$slots = item.slots, slots = _item$slots === void 0 ? {} : _item$slots, cls = item.class, style3 = item.style, restProps = __rest$8(item, ["slots", "class", "style"]);
        var treeNodeProps = _extends$1(_extends$1({}, restProps), {
          icon: $slots[slots.icon] || restProps.icon,
          switcherIcon: $slots[slots.switcherIcon] || restProps.switcherIcon,
          title: $slots[slots.title] || $slots.title || restProps[replaceFields.title],
          dataRef: item,
          key: key2,
          class: cls,
          style: style3
        });
        if (children) {
          return _extends$1(_extends$1({}, treeNodeProps), {
            children: _this.updateTreeData(children)
          });
        }
        return treeNodeProps;
      });
    },
    setTreeRef: function setTreeRef(node) {
      this.tree = node;
    },
    handleCheck: function handleCheck(checkedObj, eventObj) {
      this.$emit("update:checkedKeys", checkedObj);
      this.$emit("check", checkedObj, eventObj);
    },
    handleExpand: function handleExpand(expandedKeys2, eventObj) {
      this.$emit("update:expandedKeys", expandedKeys2);
      this.$emit("expand", expandedKeys2, eventObj);
    },
    handleSelect: function handleSelect3(selectedKeys3, eventObj) {
      this.$emit("update:selectedKeys", selectedKeys3);
      this.$emit("select", selectedKeys3, eventObj);
    }
  },
  render: function render146() {
    var _this2 = this, _classNames;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, showIcon = props2.showIcon, treeNodes = props2.treeNodes, blockNode = props2.blockNode;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("tree", customizePrefixCls);
    var _switcherIcon = getComponent(this, "switcherIcon");
    var checkable = props2.checkable;
    var treeData = props2.treeData || treeNodes;
    if (treeData) {
      treeData = this.updateTreeData(treeData);
    }
    var _a = this.$attrs, className = _a.class, restAttrs = __rest$8(_a, ["class"]);
    var vcTreeProps = _extends$1(_extends$1(_extends$1(_extends$1({}, props2), {
      prefixCls: prefixCls2,
      checkable: checkable ? createVNode("span", {
        "class": "".concat(prefixCls2, "-checkbox-inner")
      }, null) : checkable,
      children: getSlot(this),
      switcherIcon: function switcherIcon(nodeProps) {
        return _this2.renderSwitcherIcon(prefixCls2, _switcherIcon, nodeProps);
      },
      ref: this.setTreeRef
    }), restAttrs), {
      class: classNames(className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-icon-hide"), !showIcon), _defineProperty$U(_classNames, "".concat(prefixCls2, "-block-node"), blockNode), _classNames)),
      onCheck: this.handleCheck,
      onExpand: this.handleExpand,
      onSelect: this.handleSelect
    });
    if (treeData) {
      vcTreeProps.treeData = treeData;
    }
    return createVNode(Tree$2, _objectSpread2$2(_objectSpread2$2({}, vcTreeProps), {}, {
      "__propsSymbol__": []
    }), null);
  }
});
var FolderOpenOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 00-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zM136 256h188.5l119.6 114.4H748V444H238c-13 0-24.8 7.9-29.7 20L136 643.2V256zm635.3 512H159l103.3-256h612.4L771.3 768z" } }] }, "name": "folder-open", "theme": "outlined" };
var FolderOpenOutlinedSvg = FolderOpenOutlined$2;
function _objectSpread$9(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$a(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$a(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var FolderOpenOutlined = function FolderOpenOutlined2(props2, context2) {
  var p2 = _objectSpread$9({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": FolderOpenOutlinedSvg
  }), null);
};
FolderOpenOutlined.displayName = "FolderOpenOutlined";
FolderOpenOutlined.inheritAttrs = false;
var FolderOpenOutlined$1 = FolderOpenOutlined;
var FolderOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M880 298.4H521L403.7 186.2a8.15 8.15 0 00-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32zM840 768H184V256h188.5l119.6 114.4H840V768z" } }] }, "name": "folder", "theme": "outlined" };
var FolderOutlinedSvg = FolderOutlined$2;
function _objectSpread$8(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$9(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$9(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var FolderOutlined = function FolderOutlined2(props2, context2) {
  var p2 = _objectSpread$8({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": FolderOutlinedSvg
  }), null);
};
FolderOutlined.displayName = "FolderOutlined";
FolderOutlined.inheritAttrs = false;
var FolderOutlined$1 = FolderOutlined;
var Record;
(function(Record2) {
  Record2[Record2["None"] = 0] = "None";
  Record2[Record2["Start"] = 1] = "Start";
  Record2[Record2["End"] = 2] = "End";
})(Record || (Record = {}));
function traverseNodesKey(rootChildren, callback) {
  var nodeList = getNodeChildren(rootChildren) || [];
  function processNode(node) {
    var key2 = node.key;
    var children = getSlot(node);
    if (callback(key2, node) !== false) {
      traverseNodesKey(children, callback);
    }
  }
  nodeList.forEach(processNode);
}
function getFullKeyList(children) {
  var _convertTreeToEntitie = convertTreeToEntities$1(children), keyEntities = _convertTreeToEntitie.keyEntities;
  return _toConsumableArray(keyEntities.keys());
}
function calcRangeKeys(rootChildren, expandedKeys2, startKey, endKey) {
  var keys2 = [];
  var record = Record.None;
  if (startKey && startKey === endKey) {
    return [startKey];
  }
  if (!startKey || !endKey) {
    return [];
  }
  function matchKey(key2) {
    return key2 === startKey || key2 === endKey;
  }
  traverseNodesKey(rootChildren, function(key2) {
    if (record === Record.End) {
      return false;
    }
    if (matchKey(key2)) {
      keys2.push(key2);
      if (record === Record.None) {
        record = Record.Start;
      } else if (record === Record.Start) {
        record = Record.End;
        return false;
      }
    } else if (record === Record.Start) {
      keys2.push(key2);
    }
    if (expandedKeys2.indexOf(key2) === -1) {
      return false;
    }
    return true;
  });
  return keys2;
}
function convertDirectoryKeysToNodes(rootChildren, keys2) {
  var restKeys = _toConsumableArray(keys2);
  var nodes = [];
  traverseNodesKey(rootChildren, function(key2, node) {
    var index2 = restKeys.indexOf(key2);
    if (index2 !== -1) {
      nodes.push(node);
      restKeys.splice(index2, 1);
    }
    return !!restKeys.length;
  });
  return nodes;
}
function getFullKeyListByTreeData(treeData) {
  var replaceFields = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var keys2 = [];
  var _replaceFields$key = replaceFields.key, key2 = _replaceFields$key === void 0 ? "key" : _replaceFields$key, _replaceFields$childr = replaceFields.children, children = _replaceFields$childr === void 0 ? "children" : _replaceFields$childr;
  (treeData || []).forEach(function(item) {
    keys2.push(item[key2]);
    if (item[children]) {
      keys2 = [].concat(_toConsumableArray(keys2), _toConsumableArray(getFullKeyListByTreeData(item[children], replaceFields)));
    }
  });
  return keys2;
}
var __rest$7 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function getIcon(props2) {
  var isLeaf = props2.isLeaf, expanded = props2.expanded;
  if (isLeaf) {
    return createVNode(FileTwoTone, null, null);
  }
  return expanded ? createVNode(FolderOpenOutlined$1, null, null) : createVNode(FolderOutlined$1, null, null);
}
var DirectoryTree = defineComponent({
  name: "ADirectoryTree",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$1(_extends$1(_extends$1({}, TreeProps()), {
    expandAction: PropsTypes.oneOf([false, "click", "doubleclick", "dblclick"])
  }), {
    showIcon: true,
    expandAction: "click"
  }),
  setup: function setup148() {
    return {
      children: null,
      onDebounceExpand: null,
      tree: null,
      lastSelectedKey: "",
      cachedSelectedKeys: [],
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data72() {
    var props2 = getOptionProps(this);
    var defaultExpandAll = props2.defaultExpandAll, defaultExpandParent = props2.defaultExpandParent, expandedKeys2 = props2.expandedKeys, defaultExpandedKeys = props2.defaultExpandedKeys;
    var children = getSlot(this);
    var _convertTreeToEntitie = convertTreeToEntities$1(children), keyEntities = _convertTreeToEntitie.keyEntities;
    var state2 = {};
    state2._selectedKeys = props2.selectedKeys || props2.defaultSelectedKeys || [];
    if (defaultExpandAll) {
      if (props2.treeData) {
        state2._expandedKeys = getFullKeyListByTreeData(props2.treeData, props2.replaceFields);
      } else {
        state2._expandedKeys = getFullKeyList(children);
      }
    } else if (defaultExpandParent) {
      state2._expandedKeys = conductExpandParent(expandedKeys2 || defaultExpandedKeys, keyEntities);
    } else {
      state2._expandedKeys = expandedKeys2 || defaultExpandedKeys;
    }
    return _extends$1({
      _selectedKeys: [],
      _expandedKeys: []
    }, state2);
  },
  watch: {
    expandedKeys: function expandedKeys(val) {
      this.setState({
        _expandedKeys: val
      });
    },
    selectedKeys: function selectedKeys2(val) {
      this.setState({
        _selectedKeys: val
      });
    }
  },
  created: function created19() {
    this.onDebounceExpand = debounce$1(this.expandFolderNode, 200, {
      leading: true
    });
  },
  methods: {
    handleExpand: function handleExpand2(expandedKeys2, info3) {
      this.setUncontrolledState({
        _expandedKeys: expandedKeys2
      });
      this.$emit("update:expandedKeys", expandedKeys2);
      this.$emit("expand", expandedKeys2, info3);
      return void 0;
    },
    handleClick: function handleClick4(event, node) {
      var expandAction = this.$props.expandAction;
      if (expandAction === "click") {
        this.onDebounceExpand(event, node);
      }
      this.$emit("click", event, node);
    },
    handleDoubleClick: function handleDoubleClick(event, node) {
      var expandAction = this.$props.expandAction;
      if (expandAction === "dblclick" || expandAction === "doubleclick") {
        this.onDebounceExpand(event, node);
      }
      this.$emit("doubleclick", event, node);
      this.$emit("dblclick", event, node);
    },
    hanldeSelect: function hanldeSelect(keys2, event) {
      var multiple = this.$props.multiple;
      var children = this.children || [];
      var _this$$data$_expanded = this.$data._expandedKeys, expandedKeys2 = _this$$data$_expanded === void 0 ? [] : _this$$data$_expanded;
      var node = event.node, nativeEvent = event.nativeEvent;
      var _node$eventKey = node.eventKey, eventKey = _node$eventKey === void 0 ? "" : _node$eventKey;
      var newState = {};
      var newEvent = _extends$1(_extends$1({}, event), {
        selected: true
      });
      var ctrlPick = nativeEvent.ctrlKey || nativeEvent.metaKey;
      var shiftPick = nativeEvent.shiftKey;
      var newSelectedKeys;
      if (multiple && ctrlPick) {
        newSelectedKeys = keys2;
        this.lastSelectedKey = eventKey;
        this.cachedSelectedKeys = newSelectedKeys;
        newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);
      } else if (multiple && shiftPick) {
        newSelectedKeys = Array.from(new Set([].concat(_toConsumableArray(this.cachedSelectedKeys || []), _toConsumableArray(calcRangeKeys(children, expandedKeys2, eventKey, this.lastSelectedKey)))));
        newEvent.selectedNodes = convertDirectoryKeysToNodes(children, newSelectedKeys);
      } else {
        newSelectedKeys = [eventKey];
        this.lastSelectedKey = eventKey;
        this.cachedSelectedKeys = newSelectedKeys;
        newEvent.selectedNodes = [event.node];
      }
      newState._selectedKeys = newSelectedKeys;
      this.$emit("update:selectedKeys", newSelectedKeys);
      this.$emit("select", newSelectedKeys, newEvent);
      this.setUncontrolledState(newState);
    },
    setTreeRef: function setTreeRef2(node) {
      this.tree = node;
    },
    expandFolderNode: function expandFolderNode(event, node) {
      var isLeaf = node.isLeaf;
      if (isLeaf || event.shiftKey || event.metaKey || event.ctrlKey) {
        return;
      }
      if (this.tree.tree) {
        var internalTree = this.tree.tree;
        internalTree.onNodeExpand(event, node);
      }
    },
    setUncontrolledState: function setUncontrolledState2(state2) {
      var newState = omit$2(state2, Object.keys(getOptionProps(this)).map(function(p2) {
        return "_".concat(p2);
      }));
      if (Object.keys(newState).length) {
        this.setState(newState);
      }
    },
    handleCheck: function handleCheck2(checkedObj, eventObj) {
      this.$emit("update:checkedKeys", checkedObj);
      this.$emit("check", checkedObj, eventObj);
    }
  },
  render: function render147() {
    var _this = this;
    this.children = getSlot(this);
    var _a = getOptionProps(this), customizePrefixCls = _a.prefixCls, props2 = __rest$7(_a, ["prefixCls"]);
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("tree", customizePrefixCls);
    var _this$$data = this.$data, expandedKeys2 = _this$$data._expandedKeys, selectedKeys3 = _this$$data._selectedKeys;
    var _b = this.$attrs, className = _b.class, restAttrs = __rest$7(_b, ["class"]);
    var connectClassName = classNames("".concat(prefixCls2, "-directory"), className);
    var treeProps = _extends$1(_extends$1(_extends$1({
      icon: getIcon
    }, restAttrs), omit$2(props2, ["onUpdate:selectedKeys", "onUpdate:checkedKeys", "onUpdate:expandedKeys"])), {
      prefixCls: prefixCls2,
      expandedKeys: expandedKeys2,
      selectedKeys: selectedKeys3,
      switcherIcon: getComponent(this, "switcherIcon"),
      ref: this.setTreeRef,
      class: connectClassName,
      onSelect: this.hanldeSelect,
      onClick: this.handleClick,
      onDblclick: this.handleDoubleClick,
      onExpand: this.handleExpand,
      onCheck: this.handleCheck
    });
    return createVNode(Tree, treeProps, _objectSpread2$2({
      default: function _default8() {
        return [_this.children];
      }
    }, omit$2(this.$slots, ["default"])));
  }
});
Tree.TreeNode.name = "ATreeNode";
Tree.DirectoryTree = DirectoryTree;
Tree.install = function(app) {
  app.component(Tree.name, Tree);
  app.component(Tree.TreeNode.name, Tree.TreeNode);
  app.component(DirectoryTree.name, DirectoryTree);
  return app;
};
var TreeNode$2 = Tree.TreeNode;
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _defineProperty$8(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value: value26,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
function ownKeys(object3, enumerableOnly) {
  var keys2 = Object.keys(object3);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object3);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      });
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys(source2, true).forEach(function(key2) {
        _defineProperty$8(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys(source2).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
function getClientPosition(elem) {
  var box;
  var x2;
  var y2;
  var doc2 = elem.ownerDocument;
  var body = doc2.body;
  var docElem = doc2 && doc2.documentElement;
  box = elem.getBoundingClientRect();
  x2 = box.left;
  y2 = box.top;
  x2 -= docElem.clientLeft || body.clientLeft || 0;
  y2 -= docElem.clientTop || body.clientTop || 0;
  return {
    left: x2,
    top: y2
  };
}
function getScroll(w2, top) {
  var ret = w2["page".concat(top ? "Y" : "X", "Offset")];
  var method3 = "scroll".concat(top ? "Top" : "Left");
  if (typeof ret !== "number") {
    var d2 = w2.document;
    ret = d2.documentElement[method3];
    if (typeof ret !== "number") {
      ret = d2.body[method3];
    }
  }
  return ret;
}
function getScrollLeft(w2) {
  return getScroll(w2);
}
function getScrollTop(w2) {
  return getScroll(w2, true);
}
function getOffset(el) {
  var pos = getClientPosition(el);
  var doc2 = el.ownerDocument;
  var w2 = doc2.defaultView || doc2.parentWindow;
  pos.left += getScrollLeft(w2);
  pos.top += getScrollTop(w2);
  return pos;
}
function _getComputedStyle(elem, name2, computedStyle_) {
  var val = "";
  var d2 = elem.ownerDocument;
  var computedStyle = computedStyle_ || d2.defaultView.getComputedStyle(elem, null);
  if (computedStyle) {
    val = computedStyle.getPropertyValue(name2) || computedStyle[name2];
  }
  return val;
}
var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), "i");
var RE_POS = /^(top|right|bottom|left)$/;
var CURRENT_STYLE = "currentStyle";
var RUNTIME_STYLE = "runtimeStyle";
var LEFT = "left";
var PX = "px";
function _getComputedStyleIE(elem, name2) {
  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name2];
  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name2)) {
    var style3 = elem.style;
    var left = style3[LEFT];
    var rsLeft = elem[RUNTIME_STYLE][LEFT];
    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];
    style3[LEFT] = name2 === "fontSize" ? "1em" : ret || 0;
    ret = style3.pixelLeft + PX;
    style3[LEFT] = left;
    elem[RUNTIME_STYLE][LEFT] = rsLeft;
  }
  return ret === "" ? "auto" : ret;
}
var getComputedStyleX;
if (typeof window !== "undefined") {
  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
}
function each(arr, fn) {
  for (var i2 = 0; i2 < arr.length; i2++) {
    fn(arr[i2]);
  }
}
function isBorderBoxFn(elem) {
  return getComputedStyleX(elem, "boxSizing") === "border-box";
}
var BOX_MODELS = ["margin", "border", "padding"];
var CONTENT_INDEX = -1;
var PADDING_INDEX = 2;
var BORDER_INDEX = 1;
var MARGIN_INDEX = 0;
function swap(elem, options2, callback) {
  var old = {};
  var style3 = elem.style;
  var name2;
  for (name2 in options2) {
    if (options2.hasOwnProperty(name2)) {
      old[name2] = style3[name2];
      style3[name2] = options2[name2];
    }
  }
  callback.call(elem);
  for (name2 in options2) {
    if (options2.hasOwnProperty(name2)) {
      style3[name2] = old[name2];
    }
  }
}
function getPBMWidth(elem, props2, which) {
  var value26 = 0;
  var prop;
  var j2;
  var i2;
  for (j2 = 0; j2 < props2.length; j2++) {
    prop = props2[j2];
    if (prop) {
      for (i2 = 0; i2 < which.length; i2++) {
        var cssProp = void 0;
        if (prop === "border") {
          cssProp = "".concat(prop + which[i2], "Width");
        } else {
          cssProp = prop + which[i2];
        }
        value26 += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
      }
    }
  }
  return value26;
}
function isWindow(obj) {
  return obj != null && obj == obj.window;
}
var domUtils = {};
each(["Width", "Height"], function(name2) {
  domUtils["doc".concat(name2)] = function(refWin) {
    var d2 = refWin.document;
    return Math.max(d2.documentElement["scroll".concat(name2)], d2.body["scroll".concat(name2)], domUtils["viewport".concat(name2)](d2));
  };
  domUtils["viewport".concat(name2)] = function(win) {
    var prop = "client".concat(name2);
    var doc2 = win.document;
    var body = doc2.body;
    var documentElement = doc2.documentElement;
    var documentElementProp = documentElement[prop];
    return doc2.compatMode === "CSS1Compat" && documentElementProp || body && body[prop] || documentElementProp;
  };
});
function getWH(elem, name2, extra) {
  if (isWindow(elem)) {
    return name2 === "width" ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
  } else if (elem.nodeType === 9) {
    return name2 === "width" ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
  }
  var which = name2 === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
  var borderBoxValue = name2 === "width" ? elem.offsetWidth : elem.offsetHeight;
  getComputedStyleX(elem);
  var isBorderBox = isBorderBoxFn(elem);
  var cssBoxValue = 0;
  if (borderBoxValue == null || borderBoxValue <= 0) {
    borderBoxValue = void 0;
    cssBoxValue = getComputedStyleX(elem, name2);
    if (cssBoxValue == null || Number(cssBoxValue) < 0) {
      cssBoxValue = elem.style[name2] || 0;
    }
    cssBoxValue = parseFloat(cssBoxValue) || 0;
  }
  if (extra === void 0) {
    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
  }
  var borderBoxValueOrIsBorderBox = borderBoxValue !== void 0 || isBorderBox;
  var val = borderBoxValue || cssBoxValue;
  if (extra === CONTENT_INDEX) {
    if (borderBoxValueOrIsBorderBox) {
      return val - getPBMWidth(elem, ["border", "padding"], which);
    }
    return cssBoxValue;
  }
  if (borderBoxValueOrIsBorderBox) {
    var padding = extra === PADDING_INDEX ? -getPBMWidth(elem, ["border"], which) : getPBMWidth(elem, ["margin"], which);
    return val + (extra === BORDER_INDEX ? 0 : padding);
  }
  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
}
var cssShow = {
  position: "absolute",
  visibility: "hidden",
  display: "block"
};
function getWHIgnoreDisplay(elem) {
  var val;
  var args = arguments;
  if (elem.offsetWidth !== 0) {
    val = getWH.apply(void 0, args);
  } else {
    swap(elem, cssShow, function() {
      val = getWH.apply(void 0, args);
    });
  }
  return val;
}
function css(el, name2, v2) {
  var value26 = v2;
  if (_typeof(name2) === "object") {
    for (var i2 in name2) {
      if (name2.hasOwnProperty(i2)) {
        css(el, i2, name2[i2]);
      }
    }
    return void 0;
  }
  if (typeof value26 !== "undefined") {
    if (typeof value26 === "number") {
      value26 += "px";
    }
    el.style[name2] = value26;
    return void 0;
  }
  return getComputedStyleX(el, name2);
}
each(["width", "height"], function(name2) {
  var first = name2.charAt(0).toUpperCase() + name2.slice(1);
  domUtils["outer".concat(first)] = function(el, includeMargin) {
    return el && getWHIgnoreDisplay(el, name2, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
  };
  var which = name2 === "width" ? ["Left", "Right"] : ["Top", "Bottom"];
  domUtils[name2] = function(elem, val) {
    if (val !== void 0) {
      if (elem) {
        getComputedStyleX(elem);
        var isBorderBox = isBorderBoxFn(elem);
        if (isBorderBox) {
          val += getPBMWidth(elem, ["padding", "border"], which);
        }
        return css(elem, name2, val);
      }
      return void 0;
    }
    return elem && getWHIgnoreDisplay(elem, name2, CONTENT_INDEX);
  };
});
function setOffset(elem, offset4) {
  if (css(elem, "position") === "static") {
    elem.style.position = "relative";
  }
  var old = getOffset(elem);
  var ret = {};
  var current2;
  var key2;
  for (key2 in offset4) {
    if (offset4.hasOwnProperty(key2)) {
      current2 = parseFloat(css(elem, key2)) || 0;
      ret[key2] = current2 + offset4[key2] - old[key2];
    }
  }
  css(elem, ret);
}
var util = _objectSpread2({
  getWindow: function getWindow2(node) {
    var doc2 = node.ownerDocument || node;
    return doc2.defaultView || doc2.parentWindow;
  },
  offset: function offset3(el, value26) {
    if (typeof value26 !== "undefined") {
      setOffset(el, value26);
    } else {
      return getOffset(el);
    }
  },
  isWindow,
  each,
  css,
  clone: function clone3(obj) {
    var ret = {};
    for (var i2 in obj) {
      if (obj.hasOwnProperty(i2)) {
        ret[i2] = obj[i2];
      }
    }
    var overflow3 = obj.overflow;
    if (overflow3) {
      for (var _i in obj) {
        if (obj.hasOwnProperty(_i)) {
          ret.overflow[_i] = obj.overflow[_i];
        }
      }
    }
    return ret;
  },
  scrollLeft: function scrollLeft(w2, v2) {
    if (isWindow(w2)) {
      if (v2 === void 0) {
        return getScrollLeft(w2);
      }
      window.scrollTo(v2, getScrollTop(w2));
    } else {
      if (v2 === void 0) {
        return w2.scrollLeft;
      }
      w2.scrollLeft = v2;
    }
  },
  scrollTop: function scrollTop(w2, v2) {
    if (isWindow(w2)) {
      if (v2 === void 0) {
        return getScrollTop(w2);
      }
      window.scrollTo(getScrollLeft(w2), v2);
    } else {
      if (v2 === void 0) {
        return w2.scrollTop;
      }
      w2.scrollTop = v2;
    }
  },
  viewportWidth: 0,
  viewportHeight: 0
}, domUtils);
function scrollIntoView(elem, container, config2) {
  config2 = config2 || {};
  if (container.nodeType === 9) {
    container = util.getWindow(container);
  }
  var allowHorizontalScroll = config2.allowHorizontalScroll;
  var onlyScrollIfNeeded = config2.onlyScrollIfNeeded;
  var alignWithTop = config2.alignWithTop;
  var alignWithLeft = config2.alignWithLeft;
  var offsetTop = config2.offsetTop || 0;
  var offsetLeft = config2.offsetLeft || 0;
  var offsetBottom = config2.offsetBottom || 0;
  var offsetRight = config2.offsetRight || 0;
  allowHorizontalScroll = allowHorizontalScroll === void 0 ? true : allowHorizontalScroll;
  var isWin = util.isWindow(container);
  var elemOffset = util.offset(elem);
  var eh = util.outerHeight(elem);
  var ew = util.outerWidth(elem);
  var containerOffset;
  var ch;
  var cw;
  var containerScroll;
  var diffTop;
  var diffBottom;
  var win;
  var winScroll;
  var ww;
  var wh;
  if (isWin) {
    win = container;
    wh = util.height(win);
    ww = util.width(win);
    winScroll = {
      left: util.scrollLeft(win),
      top: util.scrollTop(win)
    };
    diffTop = {
      left: elemOffset.left - winScroll.left - offsetLeft,
      top: elemOffset.top - winScroll.top - offsetTop
    };
    diffBottom = {
      left: elemOffset.left + ew - (winScroll.left + ww) + offsetRight,
      top: elemOffset.top + eh - (winScroll.top + wh) + offsetBottom
    };
    containerScroll = winScroll;
  } else {
    containerOffset = util.offset(container);
    ch = container.clientHeight;
    cw = container.clientWidth;
    containerScroll = {
      left: container.scrollLeft,
      top: container.scrollTop
    };
    diffTop = {
      left: elemOffset.left - (containerOffset.left + (parseFloat(util.css(container, "borderLeftWidth")) || 0)) - offsetLeft,
      top: elemOffset.top - (containerOffset.top + (parseFloat(util.css(container, "borderTopWidth")) || 0)) - offsetTop
    };
    diffBottom = {
      left: elemOffset.left + ew - (containerOffset.left + cw + (parseFloat(util.css(container, "borderRightWidth")) || 0)) + offsetRight,
      top: elemOffset.top + eh - (containerOffset.top + ch + (parseFloat(util.css(container, "borderBottomWidth")) || 0)) + offsetBottom
    };
  }
  if (diffTop.top < 0 || diffBottom.top > 0) {
    if (alignWithTop === true) {
      util.scrollTop(container, containerScroll.top + diffTop.top);
    } else if (alignWithTop === false) {
      util.scrollTop(container, containerScroll.top + diffBottom.top);
    } else {
      if (diffTop.top < 0) {
        util.scrollTop(container, containerScroll.top + diffTop.top);
      } else {
        util.scrollTop(container, containerScroll.top + diffBottom.top);
      }
    }
  } else {
    if (!onlyScrollIfNeeded) {
      alignWithTop = alignWithTop === void 0 ? true : !!alignWithTop;
      if (alignWithTop) {
        util.scrollTop(container, containerScroll.top + diffTop.top);
      } else {
        util.scrollTop(container, containerScroll.top + diffBottom.top);
      }
    }
  }
  if (allowHorizontalScroll) {
    if (diffTop.left < 0 || diffBottom.left > 0) {
      if (alignWithLeft === true) {
        util.scrollLeft(container, containerScroll.left + diffTop.left);
      } else if (alignWithLeft === false) {
        util.scrollLeft(container, containerScroll.left + diffBottom.left);
      } else {
        if (diffTop.left < 0) {
          util.scrollLeft(container, containerScroll.left + diffTop.left);
        } else {
          util.scrollLeft(container, containerScroll.left + diffBottom.left);
        }
      }
    } else {
      if (!onlyScrollIfNeeded) {
        alignWithLeft = alignWithLeft === void 0 ? true : !!alignWithLeft;
        if (alignWithLeft) {
          util.scrollLeft(container, containerScroll.left + diffTop.left);
        } else {
          util.scrollLeft(container, containerScroll.left + diffBottom.left);
        }
      }
    }
  }
}
function hasClass(node, className) {
  if (node.classList) {
    return node.classList.contains(className);
  }
  var originClass = node.className;
  return " ".concat(originClass, " ").indexOf(" ".concat(className, " ")) > -1;
}
var SHOW_ALL = "SHOW_ALL";
var SHOW_PARENT = "SHOW_PARENT";
var SHOW_CHILD = "SHOW_CHILD";
function findPopupContainer(node, prefixClass) {
  var current2 = node;
  while (current2) {
    if (hasClass(current2, prefixClass)) {
      return current2;
    }
    current2 = current2.parentNode;
  }
  return null;
}
function toTitle(title2) {
  if (typeof title2 === "string") {
    return title2;
  }
  return null;
}
function toArray(data80) {
  if (data80 === void 0 || data80 === null)
    return [];
  return Array.isArray(data80) ? data80 : [data80];
}
function createRef() {
  var func = function setRef2(node) {
    func.current = node;
  };
  return func;
}
var UNSELECTABLE_STYLE = {
  userSelect: "none",
  WebkitUserSelect: "none"
};
var UNSELECTABLE_ATTRIBUTE = {
  unselectable: "unselectable"
};
function flatToHierarchy(positionList) {
  if (!positionList.length) {
    return [];
  }
  var entrances = {};
  var posMap = {};
  var parsedList = positionList.slice().map(function(entity) {
    var clone4 = _extends$1(_extends$1({}, entity), {
      fields: entity.pos.split("-")
    });
    delete clone4.children;
    return clone4;
  });
  parsedList.forEach(function(entity) {
    posMap[entity.pos] = entity;
  });
  parsedList.sort(function(a2, b2) {
    return a2.fields.length - b2.fields.length;
  });
  parsedList.forEach(function(entity) {
    var parentPos = entity.fields.slice(0, -1).join("-");
    var parentEntity = posMap[parentPos];
    if (!parentEntity) {
      entrances[entity.pos] = entity;
    } else {
      parentEntity.children = parentEntity.children || [];
      parentEntity.children.push(entity);
    }
    delete entity.key;
    delete entity.fields;
  });
  return Object.keys(entrances).map(function(key2) {
    return entrances[key2];
  });
}
var ariaId = 0;
function generateAriaId(prefix) {
  ariaId += 1;
  return "".concat(prefix, "_").concat(ariaId);
}
function isLabelInValue(props2) {
  var treeCheckable = props2.treeCheckable, treeCheckStrictly = props2.treeCheckStrictly, labelInValue = props2.labelInValue;
  if (treeCheckable && treeCheckStrictly) {
    return true;
  }
  return labelInValue || false;
}
function parseSimpleTreeData(treeData, _ref) {
  var id2 = _ref.id, pId = _ref.pId, rootPId = _ref.rootPId;
  var keyNodes = {};
  var rootNodeList = [];
  var nodeList = treeData.map(function(node) {
    var clone4 = _extends$1({}, node);
    var key2 = clone4[id2];
    keyNodes[key2] = clone4;
    clone4.key = clone4.key || key2;
    return clone4;
  });
  nodeList.forEach(function(node) {
    var parentKey = node[pId];
    var parent2 = keyNodes[parentKey];
    if (parent2) {
      parent2.children = parent2.children || [];
      parent2.children.push(node);
    }
    if (parentKey === rootPId || !parent2 && rootPId === null) {
      rootNodeList.push(node);
    }
  });
  return rootNodeList;
}
function isPosRelated(pos1, pos2) {
  var fields1 = pos1.split("-");
  var fields2 = pos2.split("-");
  var minLen = Math.min(fields1.length, fields2.length);
  for (var i2 = 0; i2 < minLen; i2 += 1) {
    if (fields1[i2] !== fields2[i2]) {
      return false;
    }
  }
  return true;
}
function cleanEntity(_ref2) {
  var node = _ref2.node, pos = _ref2.pos, children = _ref2.children;
  var instance = {
    node,
    pos
  };
  if (children) {
    instance.children = children.map(cleanEntity);
  }
  return instance;
}
function getFilterTree(treeNodes, searchValue2, filterFunc, valueEntities, Component) {
  if (!searchValue2) {
    return null;
  }
  function mapFilteredNodeToData(node) {
    if (!node || isEmptyElement(node))
      return null;
    var match5 = false;
    if (filterFunc(searchValue2, node)) {
      match5 = true;
    }
    var children = getSlot(node);
    children = ((typeof children === "function" ? children() : children) || []).map(mapFilteredNodeToData).filter(function(n2) {
      return n2;
    });
    if (children.length || match5) {
      return createVNode(Component, _objectSpread2$2(_objectSpread2$2({}, node.props), {}, {
        "key": valueEntities[getPropsData(node).value].key
      }), {
        default: function _default8() {
          return [children];
        }
      });
    }
    return null;
  }
  return treeNodes.map(mapFilteredNodeToData).filter(function(node) {
    return node;
  });
}
function formatInternalValue(value26, props2) {
  var valueList = toArray(value26);
  if (isLabelInValue(props2)) {
    return valueList.map(function(val) {
      if (_typeof$2(val) !== "object" || !val) {
        return {
          value: "",
          label: ""
        };
      }
      return val;
    });
  }
  return valueList.map(function(val) {
    return {
      value: val
    };
  });
}
function getLabel(wrappedValue, entity, treeNodeLabelProp) {
  if (wrappedValue.label) {
    return wrappedValue.label;
  }
  if (entity) {
    var props2 = getPropsData(entity.node);
    if (Object.keys(props2).length) {
      return props2[treeNodeLabelProp];
    }
  }
  return wrappedValue.value;
}
function formatSelectorValue(valueList, props2, valueEntities) {
  var treeNodeLabelProp = props2.treeNodeLabelProp, treeCheckable = props2.treeCheckable, treeCheckStrictly = props2.treeCheckStrictly, showCheckedStrategy = props2.showCheckedStrategy;
  if (treeCheckable && !treeCheckStrictly) {
    var values = {};
    valueList.forEach(function(wrappedValue) {
      values[wrappedValue.value] = wrappedValue;
    });
    var hierarchyList = flatToHierarchy(valueList.map(function(_ref3) {
      var value26 = _ref3.value;
      return valueEntities[value26];
    }));
    if (showCheckedStrategy === SHOW_PARENT) {
      return hierarchyList.map(function(_ref4) {
        var node = _ref4.node;
        var value26 = getPropsData(node).value;
        return {
          label: getLabel(values[value26], valueEntities[value26], treeNodeLabelProp),
          value: value26
        };
      });
    }
    if (showCheckedStrategy === SHOW_CHILD) {
      var targetValueList = [];
      var traverse2 = function traverse3(_ref5) {
        var node = _ref5.node, children = _ref5.children;
        var value26 = getPropsData(node).value;
        if (!children || children.length === 0) {
          targetValueList.push({
            label: getLabel(values[value26], valueEntities[value26], treeNodeLabelProp),
            value: value26
          });
          return;
        }
        children.forEach(function(entity) {
          traverse3(entity);
        });
      };
      hierarchyList.forEach(function(entity) {
        traverse2(entity);
      });
      return targetValueList;
    }
  }
  return valueList.map(function(wrappedValue) {
    return {
      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),
      value: wrappedValue.value
    };
  });
}
function processProps(props2) {
  var title2 = props2.title, label = props2.label, key2 = props2.key, value26 = props2.value;
  var cloneProps = _extends$1({}, props2);
  if (label && !title2) {
    cloneProps.title = label;
  }
  if (!key2 && (key2 === void 0 || key2 === null)) {
    cloneProps.key = value26;
  }
  return cloneProps;
}
function convertDataToTree(treeData) {
  return convertDataToTree$1(treeData, {
    processProps
  });
}
function initWrapper(wrapper) {
  return _extends$1(_extends$1({}, wrapper), {
    valueEntities: {}
  });
}
function processEntity(entity, wrapper) {
  var value26 = getPropsData(entity.node).value;
  entity.value = value26;
  var currentEntity = wrapper.valueEntities[value26];
  if (currentEntity) {
    warning_1(false, "Conflict! value of node '".concat(entity.key, "' (").concat(value26, ") has already used by node '").concat(currentEntity.key, "'."));
  }
  wrapper.valueEntities[value26] = entity;
}
function convertTreeToEntities(treeNodes) {
  return convertTreeToEntities$1(treeNodes, {
    initWrapper,
    processEntity
  });
}
function getHalfCheckedKeys(valueList, valueEntities) {
  var values = {};
  valueList.forEach(function(_ref6) {
    var value26 = _ref6.value;
    values[value26] = false;
  });
  valueList.forEach(function(_ref7) {
    var value26 = _ref7.value;
    var current2 = valueEntities[value26];
    while (current2 && current2.parent) {
      var parentValue = current2.parent.value;
      if (parentValue in values)
        break;
      values[parentValue] = true;
      current2 = current2.parent;
    }
  });
  return Object.keys(values).filter(function(value26) {
    return values[value26];
  }).map(function(value26) {
    return valueEntities[value26].key;
  });
}
var conductCheck = conductCheck$1;
var BUILT_IN_PLACEMENTS = {
  bottomLeft: {
    points: ["tl", "bl"],
    offset: [0, 4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    },
    ignoreShake: true
  },
  topLeft: {
    points: ["bl", "tl"],
    offset: [0, -4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    },
    ignoreShake: true
  }
};
var SelectTrigger = {
  name: "SelectTrigger",
  inheritAttrs: false,
  props: {
    disabled: PropsTypes.looseBool,
    showSearch: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    dropdownPopupAlign: PropsTypes.object,
    dropdownClassName: PropsTypes.string,
    dropdownStyle: PropsTypes.object,
    transitionName: PropsTypes.string,
    animation: PropsTypes.string,
    getPopupContainer: PropsTypes.func,
    dropdownMatchSelectWidth: PropsTypes.looseBool,
    isMultiple: PropsTypes.looseBool,
    dropdownPrefixCls: PropsTypes.string,
    dropdownVisibleChange: PropsTypes.func,
    popupElement: PropsTypes.any,
    open: PropsTypes.looseBool
  },
  created: function created20() {
    this.triggerRef = createRef();
  },
  methods: {
    getDropdownTransitionName: function getDropdownTransitionName() {
      var _this$$props = this.$props, transitionName2 = _this$$props.transitionName, animation2 = _this$$props.animation, dropdownPrefixCls = _this$$props.dropdownPrefixCls;
      if (!transitionName2 && animation2) {
        return "".concat(dropdownPrefixCls, "-").concat(animation2);
      }
      return transitionName2;
    },
    forcePopupAlign: function forcePopupAlign2() {
      var $trigger = this.triggerRef.current;
      if ($trigger) {
        $trigger.forcePopupAlign();
      }
    }
  },
  render: function render148() {
    var _classNames, _this = this;
    var _this$$props2 = this.$props, disabled = _this$$props2.disabled, isMultiple2 = _this$$props2.isMultiple, dropdownPopupAlign = _this$$props2.dropdownPopupAlign, dropdownMatchSelectWidth = _this$$props2.dropdownMatchSelectWidth, dropdownClassName = _this$$props2.dropdownClassName, dropdownStyle = _this$$props2.dropdownStyle, dropdownVisibleChange2 = _this$$props2.dropdownVisibleChange, getPopupContainer = _this$$props2.getPopupContainer, dropdownPrefixCls = _this$$props2.dropdownPrefixCls, popupElement = _this$$props2.popupElement, open6 = _this$$props2.open;
    var stretch;
    if (dropdownMatchSelectWidth !== false) {
      stretch = dropdownMatchSelectWidth ? "width" : "minWidth";
    }
    return createVNode(Trigger, {
      "ref": this.triggerRef,
      "action": disabled ? [] : ["click"],
      "popupPlacement": "bottomLeft",
      "builtinPlacements": BUILT_IN_PLACEMENTS,
      "popupAlign": dropdownPopupAlign,
      "prefixCls": dropdownPrefixCls,
      "popupTransitionName": this.getDropdownTransitionName(),
      "onPopupVisibleChange": dropdownVisibleChange2,
      "popup": popupElement,
      "popupVisible": open6,
      "getPopupContainer": getPopupContainer,
      "stretch": stretch,
      "popupClassName": classNames(dropdownClassName, (_classNames = {}, _defineProperty$U(_classNames, "".concat(dropdownPrefixCls, "--multiple"), isMultiple2), _defineProperty$U(_classNames, "".concat(dropdownPrefixCls, "--single"), !isMultiple2), _classNames)),
      "popupStyle": dropdownStyle
    }, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
};
var SelectTrigger$1 = SelectTrigger;
var selectorPropTypes = function selectorPropTypes2() {
  return {
    prefixCls: PropsTypes.string,
    open: PropsTypes.looseBool,
    selectorValueList: PropsTypes.array,
    allowClear: PropsTypes.looseBool,
    showArrow: PropsTypes.looseBool,
    removeSelected: PropsTypes.func,
    choiceTransitionName: PropsTypes.string,
    ariaId: PropsTypes.string,
    inputIcon: PropsTypes.any,
    clearIcon: PropsTypes.any,
    removeIcon: PropsTypes.any,
    placeholder: PropsTypes.any,
    disabled: PropsTypes.looseBool,
    focused: PropsTypes.looseBool,
    isMultiple: PropsTypes.looseBool,
    showSearch: PropsTypes.looseBool,
    searchValue: PropsTypes.string
  };
};
function noop$1() {
}
function generateSelector() {
  var BaseSelector = {
    name: "BaseSelector",
    inheritAttrs: false,
    mixins: [BaseMixin],
    props: initDefaultProps$2(_extends$1(_extends$1({}, selectorPropTypes()), {
      renderSelection: PropsTypes.func.isRequired,
      renderPlaceholder: PropsTypes.func,
      tabindex: PropsTypes.oneOfType([PropsTypes.number, PropsTypes.string])
    }), {
      tabindex: 0
    }),
    setup: function setup161() {
      return {
        vcTreeSelect: inject("vcTreeSelect", {})
      };
    },
    created: function created26() {
      this.domRef = createRef();
    },
    methods: {
      onFocus: function onFocus6(e2) {
        var focused = this.$props.focused;
        var onSelectorFocus2 = this.vcTreeSelect.onSelectorFocus;
        if (!focused) {
          onSelectorFocus2();
        }
        this.__emit("focus", e2);
      },
      onBlur: function onBlur7(e2) {
        var onSelectorBlur2 = this.vcTreeSelect.onSelectorBlur;
        onSelectorBlur2();
        this.__emit("blur", e2);
      },
      focus: function focus27() {
        this.domRef.current.focus();
      },
      blur: function blur24() {
        this.domRef.current.blur();
      },
      renderClear: function renderClear() {
        var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, allowClear = _this$$props.allowClear, selectorValueList = _this$$props.selectorValueList;
        var onSelectorClear2 = this.vcTreeSelect.onSelectorClear;
        if (!allowClear || !selectorValueList.length) {
          return null;
        }
        var clearIcon = getComponent(this, "clearIcon");
        return createVNode("span", {
          "key": "clear",
          "unselectable": "on",
          "aria-hidden": "true",
          "style": "user-select: none;",
          "class": "".concat(prefixCls2, "-clear"),
          "onClick": onSelectorClear2
        }, [clearIcon]);
      },
      renderArrow: function renderArrow() {
        var _this$$props2 = this.$props, prefixCls2 = _this$$props2.prefixCls, showArrow = _this$$props2.showArrow;
        if (!showArrow) {
          return null;
        }
        var inputIcon = getComponent(this, "inputIcon");
        return createVNode("span", {
          "key": "arrow",
          "class": "".concat(prefixCls2, "-arrow"),
          "style": {
            outline: "none",
            userSelect: "none"
          }
        }, [inputIcon]);
      }
    },
    render: function render166() {
      var _classNames;
      var _this$$props3 = this.$props, prefixCls2 = _this$$props3.prefixCls, open6 = _this$$props3.open, focused = _this$$props3.focused, disabled = _this$$props3.disabled, allowClear = _this$$props3.allowClear, ariaId2 = _this$$props3.ariaId, renderSelection3 = _this$$props3.renderSelection, renderPlaceholder = _this$$props3.renderPlaceholder, tabindex = _this$$props3.tabindex, isMultiple2 = _this$$props3.isMultiple, showArrow = _this$$props3.showArrow, showSearch = _this$$props3.showSearch;
      var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style, _this$$attrs$onClick = _this$$attrs.onClick, onClick7 = _this$$attrs$onClick === void 0 ? noop$1 : _this$$attrs$onClick;
      var onSelectorKeyDown = this.vcTreeSelect.onSelectorKeyDown;
      var myTabIndex = tabindex;
      if (disabled) {
        myTabIndex = null;
      }
      var mergedClassName = classNames(prefixCls2, className, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-focused"), open6 || focused), _defineProperty$U(_classNames, "".concat(prefixCls2, "-multiple"), isMultiple2), _defineProperty$U(_classNames, "".concat(prefixCls2, "-single"), !isMultiple2), _defineProperty$U(_classNames, "".concat(prefixCls2, "-allow-clear"), allowClear), _defineProperty$U(_classNames, "".concat(prefixCls2, "-show-arrow"), showArrow), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty$U(_classNames, "".concat(prefixCls2, "-open"), open6), _defineProperty$U(_classNames, "".concat(prefixCls2, "-show-search"), showSearch), _classNames));
      return createVNode("div", {
        "style": style3,
        "onClick": onClick7,
        "class": mergedClassName,
        "ref": this.domRef,
        "role": "combobox",
        "aria-expanded": open6,
        "aria-owns": open6 ? ariaId2 : void 0,
        "aria-controls": open6 ? ariaId2 : void 0,
        "aria-haspopup": "listbox",
        "aria-disabled": disabled,
        "tabindex": myTabIndex,
        "onFocus": this.onFocus,
        "onBlur": this.onBlur,
        "onKeydown": onSelectorKeyDown
      }, [createVNode("span", {
        "class": "".concat(prefixCls2, "-selector")
      }, [renderSelection3(), renderPlaceholder && renderPlaceholder()]), this.renderArrow(), this.renderClear()]);
    }
  };
  return BaseSelector;
}
var BaseInput = defineComponent({
  props: {
    value: PropsTypes.string.def("")
  },
  emits: ["change", "input"],
  setup: function setup149(_p, _ref) {
    var emit = _ref.emit;
    var inputRef = ref(null);
    var handleChange22 = function handleChange23(e2) {
      var composing = e2.target.composing;
      if (e2.isComposing || composing) {
        emit("input", e2);
      } else {
        emit("input", e2);
        emit("change", e2);
      }
    };
    return {
      inputRef,
      focus: function focus27() {
        if (inputRef.value) {
          inputRef.value.focus();
        }
      },
      blur: function blur24() {
        if (inputRef.value) {
          inputRef.value.blur();
        }
      },
      handleChange: handleChange22
    };
  },
  render: function render149() {
    return withDirectives(createVNode("input", _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, this.$props), this.$attrs), {}, {
      "onInput": this.handleChange,
      "onChange": this.handleChange,
      "ref": "inputRef"
    }), null), [[antInput$1]]);
  }
});
var BaseInput$1 = BaseInput;
var SearchInput = {
  name: "SearchInput",
  inheritAttrs: false,
  props: {
    open: PropsTypes.looseBool,
    searchValue: PropsTypes.string,
    prefixCls: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    renderPlaceholder: PropsTypes.func,
    needAlign: PropsTypes.looseBool,
    ariaId: PropsTypes.string,
    isMultiple: PropsTypes.looseBool.def(true),
    showSearch: PropsTypes.looseBool
  },
  emits: ["mirrorSearchValueChange"],
  setup: function setup150(props2, _ref) {
    var emit = _ref.emit;
    var measureRef = ref();
    var inputWidth = ref(0);
    var mirrorSearchValue = ref(props2.searchValue);
    watch(computed(function() {
      return props2.searchValue;
    }), function() {
      mirrorSearchValue.value = props2.searchValue;
    });
    watch(mirrorSearchValue, function() {
      emit("mirrorSearchValueChange", mirrorSearchValue.value);
    }, {
      immediate: true
    });
    onMounted(function() {
      if (props2.isMultiple) {
        watch(mirrorSearchValue, function() {
          inputWidth.value = measureRef.value.scrollWidth;
        }, {
          flush: "post",
          immediate: true
        });
      }
    });
    return {
      measureRef,
      inputWidth,
      vcTreeSelect: inject("vcTreeSelect", {}),
      mirrorSearchValue
    };
  },
  created: function created21() {
    this.inputRef = createRef();
    this.prevProps = _extends$1({}, this.$props);
  },
  mounted: function mounted40() {
    var _this = this;
    this.$nextTick(function() {
      var open6 = _this.$props.open;
      if (open6) {
        _this.focus(true);
      }
    });
  },
  updated: function updated25() {
    var _this2 = this;
    var open6 = this.$props.open;
    var prevProps = this.prevProps;
    this.$nextTick(function() {
      if (open6 && prevProps.open !== open6) {
        _this2.focus();
      }
      _this2.prevProps = _extends$1({}, _this2.$props);
    });
  },
  methods: {
    focus: function focus22(isDidMount) {
      var _this3 = this;
      if (this.inputRef.current) {
        if (isDidMount) {
          setTimeout(function() {
            _this3.inputRef.current.focus();
          }, 0);
        } else {
          this.inputRef.current.focus();
        }
      }
    },
    blur: function blur19() {
      if (this.inputRef.current) {
        this.inputRef.current.blur();
      }
    },
    handleInputChange: function handleInputChange2(e2) {
      var _e$target = e2.target, value26 = _e$target.value, composing = _e$target.composing;
      var _this$searchValue = this.searchValue, searchValue2 = _this$searchValue === void 0 ? "" : _this$searchValue;
      if (e2.isComposing || composing || searchValue2 === value26) {
        this.mirrorSearchValue = value26;
        return;
      }
      this.vcTreeSelect.onSearchInputChange(e2);
    }
  },
  render: function render150() {
    var _this$$props = this.$props, searchValue2 = _this$$props.searchValue, prefixCls2 = _this$$props.prefixCls, disabled = _this$$props.disabled, renderPlaceholder = _this$$props.renderPlaceholder, open6 = _this$$props.open, ariaId2 = _this$$props.ariaId, isMultiple2 = _this$$props.isMultiple, showSearch = _this$$props.showSearch;
    var onSearchInputKeyDown2 = this.vcTreeSelect.onSearchInputKeyDown, handleInputChange3 = this.handleInputChange, mirrorSearchValue = this.mirrorSearchValue, inputWidth = this.inputWidth;
    return createVNode(Fragment, null, [createVNode("span", {
      "class": "".concat(prefixCls2, "-selection-search"),
      "style": isMultiple2 ? {
        width: inputWidth + "px"
      } : {}
    }, [createVNode(BaseInput$1, {
      "type": "text",
      "ref": this.inputRef,
      "onChange": handleInputChange3,
      "onKeydown": onSearchInputKeyDown2,
      "value": searchValue2,
      "disabled": disabled,
      "readonly": !showSearch,
      "class": "".concat(prefixCls2, "-selection-search-input"),
      "aria-label": "filter select",
      "aria-autocomplete": "list",
      "aria-controls": open6 ? ariaId2 : void 0,
      "aria-multiline": "false"
    }, null), isMultiple2 ? createVNode("span", {
      "ref": "measureRef",
      "class": "".concat(prefixCls2, "-selection-search-mirror"),
      "aria-hidden": true
    }, [mirrorSearchValue, createTextVNode("\xA0")]) : null]), renderPlaceholder && !mirrorSearchValue ? renderPlaceholder() : null]);
  }
};
var SearchInput$1 = SearchInput;
var Selector$1 = generateSelector();
var SingleSelector = {
  name: "SingleSelector",
  inheritAttrs: false,
  props: selectorPropTypes(),
  created: function created22() {
    this.selectorRef = createRef();
    this.inputRef = createRef();
  },
  data: function data73() {
    return {
      mirrorSearchValue: this.searchValue
    };
  },
  watch: {
    searchValue: function searchValue(val) {
      this.mirrorSearchValue = val;
    }
  },
  methods: {
    onPlaceholderClick: function onPlaceholderClick() {
      this.inputRef.current.focus();
    },
    focus: function focus23() {
      this.selectorRef.current.focus();
    },
    blur: function blur20() {
      this.selectorRef.current.blur();
    },
    _renderPlaceholder: function _renderPlaceholder() {
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, placeholder = _this$$props.placeholder, searchPlaceholder = _this$$props.searchPlaceholder, selectorValueList = _this$$props.selectorValueList;
      var currentPlaceholder = placeholder || searchPlaceholder;
      if (!currentPlaceholder)
        return null;
      var hidden = this.mirrorSearchValue || selectorValueList.length;
      return createVNode("span", {
        "style": {
          display: hidden ? "none" : "block"
        },
        "onClick": this.onPlaceholderClick,
        "class": "".concat(prefixCls2, "-selection-placeholder")
      }, [currentPlaceholder]);
    },
    onMirrorSearchValueChange: function onMirrorSearchValueChange(value26) {
      this.mirrorSearchValue = value26;
    },
    renderSelection: function renderSelection() {
      var _this$$props2 = this.$props, selectorValueList = _this$$props2.selectorValueList, prefixCls2 = _this$$props2.prefixCls;
      var selectedValueNodes = [];
      if (selectorValueList.length && !this.mirrorSearchValue) {
        var _selectorValueList$ = selectorValueList[0], label = _selectorValueList$.label, value26 = _selectorValueList$.value;
        selectedValueNodes.push(createVNode("span", {
          "key": value26,
          "title": toTitle(label),
          "class": "".concat(prefixCls2, "-selection-item")
        }, [label || value26]));
      }
      selectedValueNodes.push(createVNode(SearchInput$1, _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, this.$props), this.$attrs), {}, {
        "ref": this.inputRef,
        "isMultiple": false,
        "onMirrorSearchValueChange": this.onMirrorSearchValueChange
      }), null));
      return selectedValueNodes;
    }
  },
  render: function render151() {
    var props2 = _extends$1(_extends$1(_extends$1({}, getOptionProps(this)), this.$attrs), {
      renderSelection: this.renderSelection,
      renderPlaceholder: this._renderPlaceholder,
      ref: this.selectorRef
    });
    return createVNode(Selector$1, props2, null);
  }
};
var SingleSelector$1 = SingleSelector;
var Selection = {
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: {
    prefixCls: PropsTypes.string,
    maxTagTextLength: PropsTypes.number,
    label: PropsTypes.any,
    value: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.number]),
    removeIcon: PropsTypes.any
  },
  methods: {
    onRemove: function onRemove(event) {
      var value26 = this.$props.value;
      this.__emit("remove", event, value26);
      event.stopPropagation();
    }
  },
  render: function render152() {
    var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, maxTagTextLength = _this$$props.maxTagTextLength, label = _this$$props.label, value26 = _this$$props.value;
    var content = label || value26;
    if (maxTagTextLength && typeof content === "string" && content.length > maxTagTextLength) {
      content = "".concat(content.slice(0, maxTagTextLength), "...");
    }
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style, onRemove2 = _this$$attrs.onRemove;
    return createVNode("span", _objectSpread2$2(_objectSpread2$2({
      "style": _extends$1(_extends$1({}, UNSELECTABLE_STYLE), style3)
    }, UNSELECTABLE_ATTRIBUTE), {}, {
      "role": "menuitem",
      "class": classNames("".concat(prefixCls2, "-selection-item"), className),
      "title": toTitle(label)
    }), [createVNode("span", {
      "class": "".concat(prefixCls2, "-selection-item-content")
    }, [content]), onRemove2 && createVNode("span", {
      "class": "".concat(prefixCls2, "-selection-item-remove"),
      "onClick": this.onRemove
    }, [getComponent(this, "removeIcon")])]);
  }
};
var Selection$1 = Selection;
var TREE_SELECT_EMPTY_VALUE_KEY = "RC_TREE_SELECT_EMPTY_VALUE_KEY";
var Selector = generateSelector();
var MultipleSelector = {
  name: "MultipleSelector",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: _extends$1(_extends$1(_extends$1({}, selectorPropTypes()), SearchInput$1.props), {
    selectorValueList: PropsTypes.array,
    disabled: PropsTypes.looseBool,
    labelInValue: PropsTypes.looseBool,
    maxTagCount: PropsTypes.number,
    maxTagPlaceholder: PropsTypes.any
  }),
  setup: function setup151() {
    return {
      vcTreeSelect: inject("vcTreeSelect", {})
    };
  },
  created: function created23() {
    this.inputRef = createRef();
  },
  methods: {
    onPlaceholderClick: function onPlaceholderClick2() {
      this.inputRef.current.focus();
    },
    focus: function focus24() {
      this.inputRef.current.focus();
    },
    blur: function blur21() {
      this.inputRef.current.blur();
    },
    _renderPlaceholder: function _renderPlaceholder2() {
      var _this$$props = this.$props, prefixCls2 = _this$$props.prefixCls, placeholder = _this$$props.placeholder, searchPlaceholder = _this$$props.searchPlaceholder, searchValue2 = _this$$props.searchValue, selectorValueList = _this$$props.selectorValueList;
      var currentPlaceholder = placeholder || searchPlaceholder;
      if (!currentPlaceholder)
        return null;
      var hidden = searchValue2 || selectorValueList.length;
      return createVNode("span", {
        "style": {
          display: hidden ? "none" : "block"
        },
        "onClick": this.onPlaceholderClick,
        "class": "".concat(prefixCls2, "-selection-placeholder")
      }, [currentPlaceholder]);
    },
    onChoiceAnimationLeave: function onChoiceAnimationLeave() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.__emit.apply(this, ["choiceAnimationLeave"].concat(args));
    },
    renderSelection: function renderSelection2() {
      var _this = this;
      var _this$$props2 = this.$props, selectorValueList = _this$$props2.selectorValueList, labelInValue = _this$$props2.labelInValue, maxTagCount = _this$$props2.maxTagCount;
      var children = getSlot(this);
      var onMultipleSelectorRemove2 = this.vcTreeSelect.onMultipleSelectorRemove;
      var myValueList = selectorValueList;
      if (maxTagCount >= 0) {
        myValueList = selectorValueList.slice(0, maxTagCount);
      }
      var selectedValueNodes = myValueList.map(function(_ref) {
        var label = _ref.label, value26 = _ref.value;
        return createVNode(Selection$1, _objectSpread2$2(_objectSpread2$2({}, _extends$1(_extends$1({}, _this.$props), {
          label,
          value: value26,
          onRemove: onMultipleSelectorRemove2
        })), {}, {
          "key": value26 || TREE_SELECT_EMPTY_VALUE_KEY
        }), {
          default: function _default8() {
            return [children];
          }
        });
      });
      if (maxTagCount >= 0 && maxTagCount < selectorValueList.length) {
        var content = "+ ".concat(selectorValueList.length - maxTagCount, " ...");
        var maxTagPlaceholder = getComponent(this, "maxTagPlaceholder", {}, false);
        if (typeof maxTagPlaceholder === "string") {
          content = maxTagPlaceholder;
        } else if (typeof maxTagPlaceholder === "function") {
          var restValueList = selectorValueList.slice(maxTagCount);
          content = maxTagPlaceholder(labelInValue ? restValueList : restValueList.map(function(_ref2) {
            var value26 = _ref2.value;
            return value26;
          }));
        }
        var restNodeSelect = createVNode(Selection$1, _objectSpread2$2(_objectSpread2$2({}, _extends$1(_extends$1({}, this.$props), {
          label: content,
          value: null
        })), {}, {
          "key": "rc-tree-select-internal-max-tag-counter"
        }), {
          default: function _default8() {
            return [children];
          }
        });
        selectedValueNodes.push(restNodeSelect);
      }
      selectedValueNodes.push(createVNode(SearchInput$1, _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({
        "key": "SearchInput"
      }, this.$props), this.$attrs), {}, {
        "ref": this.inputRef
      }), {
        default: function _default8() {
          return [children];
        }
      }));
      return selectedValueNodes;
    }
  },
  render: function render153() {
    var _this2 = this;
    return createVNode(Selector, _extends$1(_extends$1(_extends$1({}, this.$props), this.$attrs), {
      tabindex: -1,
      showArrow: false,
      renderSelection: this.renderSelection,
      renderPlaceholder: this._renderPlaceholder
    }), {
      default: function _default8() {
        return [getSlot(_this2)];
      }
    });
  }
};
var MultipleSelector$1 = MultipleSelector;
var TreeNode$1 = Tree$2.TreeNode;
function SelectNode(_2, _ref) {
  var attrs = _ref.attrs, slots = _ref.slots;
  return createVNode(TreeNode$1, attrs, slots);
}
SelectNode.isTreeNode = true;
SelectNode.inheritAttrs = false;
SelectNode.displayName = "ATreeSelectNode";
function getDerivedState(nextProps, prevState) {
  var _ref = prevState || {}, _ref$_prevProps = _ref._prevProps, prevProps = _ref$_prevProps === void 0 ? {} : _ref$_prevProps, loadedKeys = _ref._loadedKeys, expandedKeyList = _ref._expandedKeyList, cachedExpandedKeyList = _ref._cachedExpandedKeyList;
  var valueList = nextProps.valueList, valueEntities = nextProps.valueEntities, keyEntities = nextProps.keyEntities, treeExpandedKeys = nextProps.treeExpandedKeys, filteredTreeNodes = nextProps.filteredTreeNodes, upperSearchValue = nextProps.upperSearchValue;
  var newState = {
    _prevProps: _extends$1({}, nextProps)
  };
  if (valueList !== prevProps.valueList) {
    newState._keyList = valueList.map(function(_ref2) {
      var value26 = _ref2.value;
      return valueEntities[value26];
    }).filter(function(entity) {
      return entity;
    }).map(function(_ref3) {
      var key2 = _ref3.key;
      return key2;
    });
  }
  if (!treeExpandedKeys && filteredTreeNodes && filteredTreeNodes.length && filteredTreeNodes !== prevProps.filteredTreeNodes) {
    newState._expandedKeyList = _toConsumableArray(keyEntities.keys());
  }
  if (upperSearchValue && !prevProps.upperSearchValue) {
    newState._cachedExpandedKeyList = expandedKeyList;
  } else if (!upperSearchValue && prevProps.upperSearchValue && !treeExpandedKeys) {
    newState._expandedKeyList = cachedExpandedKeyList || [];
    newState._cachedExpandedKeyList = [];
  }
  if (prevProps.treeExpandedKeys !== treeExpandedKeys) {
    newState._expandedKeyList = treeExpandedKeys;
  }
  if (nextProps.loadData) {
    newState._loadedKeys = loadedKeys.filter(function(key2) {
      return keyEntities.has(key2);
    });
  }
  return newState;
}
var BasePopup = {
  mixins: [BaseMixin],
  inheritAttrs: false,
  name: "BasePopup",
  props: {
    prefixCls: PropsTypes.string,
    upperSearchValue: PropsTypes.string,
    valueList: PropsTypes.array,
    searchHalfCheckedKeys: PropsTypes.array,
    valueEntities: PropsTypes.object,
    keyEntities: Map,
    treeIcon: PropsTypes.looseBool,
    treeLine: PropsTypes.looseBool,
    treeNodeFilterProp: PropsTypes.string,
    treeCheckable: PropsTypes.any,
    treeCheckStrictly: PropsTypes.looseBool,
    treeDefaultExpandAll: PropsTypes.looseBool,
    treeDefaultExpandedKeys: PropsTypes.array,
    treeExpandedKeys: PropsTypes.array,
    loadData: PropsTypes.func,
    multiple: PropsTypes.looseBool,
    searchValue: PropsTypes.string,
    treeNodes: PropsTypes.any,
    filteredTreeNodes: PropsTypes.any,
    notFoundContent: PropsTypes.any,
    ariaId: PropsTypes.string,
    switcherIcon: PropsTypes.any,
    renderSearch: PropsTypes.func,
    __propsSymbol__: PropsTypes.any
  },
  setup: function setup152() {
    return {
      vcTreeSelect: inject("vcTreeSelect", {})
    };
  },
  watch: {
    __propsSymbol__: function __propsSymbol__3() {
      var state2 = getDerivedState(this.$props, this.$data);
      this.setState(state2);
    }
  },
  data: function data74() {
    this.treeRef = createRef();
    warning_1(this.$props.__propsSymbol__);
    var _this$$props = this.$props, treeDefaultExpandAll = _this$$props.treeDefaultExpandAll, treeDefaultExpandedKeys = _this$$props.treeDefaultExpandedKeys, keyEntities = _this$$props.keyEntities;
    var expandedKeyList = treeDefaultExpandedKeys;
    if (treeDefaultExpandAll) {
      expandedKeyList = _toConsumableArray(keyEntities.keys());
    }
    var state2 = {
      _keyList: [],
      _expandedKeyList: expandedKeyList,
      _cachedExpandedKeyList: [],
      _loadedKeys: [],
      _prevProps: {}
    };
    return _extends$1(_extends$1({}, state2), getDerivedState(this.$props, state2));
  },
  methods: {
    onTreeExpand: function onTreeExpand(expandedKeyList) {
      var _this = this;
      var treeExpandedKeys = this.$props.treeExpandedKeys;
      if (!treeExpandedKeys) {
        this.setState({
          _expandedKeyList: expandedKeyList
        }, function() {
          _this.__emit("treeExpanded");
        });
      }
      this.__emit("treeExpand", expandedKeyList);
    },
    onLoad: function onLoad(loadedKeys) {
      this.setState({
        _loadedKeys: loadedKeys
      });
    },
    getTree: function getTree() {
      return this.treeRef.current;
    },
    getLoadData: function getLoadData() {
      var _this$$props2 = this.$props, loadData = _this$$props2.loadData, upperSearchValue = _this$$props2.upperSearchValue;
      if (upperSearchValue)
        return null;
      return loadData;
    },
    filterTreeNode: function filterTreeNode(treeNode) {
      var _this$$props3 = this.$props, upperSearchValue = _this$$props3.upperSearchValue, treeNodeFilterProp = _this$$props3.treeNodeFilterProp;
      var filterVal = treeNode[treeNodeFilterProp];
      if (typeof filterVal === "string") {
        return upperSearchValue && filterVal.toUpperCase().indexOf(upperSearchValue) !== -1;
      }
      return false;
    },
    renderNotFound: function renderNotFound() {
      var _this$$props4 = this.$props, prefixCls2 = _this$$props4.prefixCls, notFoundContent = _this$$props4.notFoundContent;
      return createVNode("span", {
        "class": "".concat(prefixCls2, "-not-found")
      }, [notFoundContent]);
    }
  },
  render: function render154() {
    var _this$$data = this.$data, keyList = _this$$data._keyList, expandedKeyList = _this$$data._expandedKeyList, loadedKeys = _this$$data._loadedKeys;
    var _this$$props5 = this.$props, prefixCls2 = _this$$props5.prefixCls, treeNodes = _this$$props5.treeNodes, filteredTreeNodes = _this$$props5.filteredTreeNodes, treeIcon = _this$$props5.treeIcon, treeLine = _this$$props5.treeLine, treeCheckable = _this$$props5.treeCheckable, treeCheckStrictly = _this$$props5.treeCheckStrictly, multiple = _this$$props5.multiple, ariaId2 = _this$$props5.ariaId, renderSearch = _this$$props5.renderSearch, switcherIcon = _this$$props5.switcherIcon, searchHalfCheckedKeys = _this$$props5.searchHalfCheckedKeys;
    var _this$vcTreeSelect = this.vcTreeSelect, onPopupKeyDown = _this$vcTreeSelect.onPopupKeyDown, onTreeNodeSelect2 = _this$vcTreeSelect.onTreeNodeSelect, onTreeNodeCheck2 = _this$vcTreeSelect.onTreeNodeCheck;
    var loadData = this.getLoadData();
    var treeProps = {};
    if (treeCheckable) {
      treeProps.checkedKeys = keyList;
    } else {
      treeProps.selectedKeys = keyList;
    }
    var $notFound;
    var $treeNodes;
    if (filteredTreeNodes) {
      if (filteredTreeNodes.length) {
        treeProps.checkStrictly = true;
        $treeNodes = filteredTreeNodes;
        if (treeCheckable && !treeCheckStrictly) {
          treeProps.checkedKeys = {
            checked: keyList,
            halfChecked: searchHalfCheckedKeys
          };
        }
      } else {
        $notFound = this.renderNotFound();
      }
    } else if (!treeNodes || !treeNodes.length) {
      $notFound = this.renderNotFound();
    } else {
      $treeNodes = treeNodes;
    }
    var $tree;
    if ($notFound) {
      $tree = $notFound;
    } else {
      var treeAllProps = _extends$1(_extends$1({
        prefixCls: "".concat(prefixCls2, "-tree"),
        showIcon: treeIcon,
        showLine: treeLine,
        selectable: !treeCheckable,
        checkable: treeCheckable,
        checkStrictly: treeCheckStrictly,
        multiple,
        loadData,
        loadedKeys,
        expandedKeys: expandedKeyList,
        filterTreeNode: this.filterTreeNode,
        switcherIcon
      }, treeProps), {
        children: $treeNodes,
        onSelect: onTreeNodeSelect2,
        onCheck: onTreeNodeCheck2,
        onExpand: this.onTreeExpand,
        onLoad: this.onLoad
      });
      $tree = createVNode(Tree$2, _objectSpread2$2(_objectSpread2$2({}, treeAllProps), {}, {
        "ref": this.treeRef,
        "__propsSymbol__": []
      }), null);
    }
    return createVNode("div", {
      "role": "listbox",
      "id": ariaId2,
      "onKeydown": onPopupKeyDown,
      "tabindex": -1
    }, [renderSearch ? renderSearch() : null, $tree]);
  }
};
var BasePopup$1 = BasePopup;
function getWatch() {
  var keys2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var watch2 = {};
  keys2.forEach(function(k2) {
    watch2[k2] = function() {
      this.needSyncKeys[k2] = true;
    };
  });
  return watch2;
}
var Select = defineComponent({
  name: "Select",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2({
    prefixCls: PropsTypes.string,
    prefixAria: PropsTypes.string,
    multiple: PropsTypes.looseBool,
    showArrow: PropsTypes.looseBool,
    open: PropsTypes.looseBool,
    value: PropsTypes.any,
    autofocus: PropsTypes.looseBool,
    defaultOpen: PropsTypes.looseBool,
    defaultValue: PropsTypes.any,
    showSearch: PropsTypes.looseBool,
    placeholder: PropsTypes.any,
    inputValue: PropsTypes.string,
    searchValue: PropsTypes.string,
    autoClearSearchValue: PropsTypes.looseBool,
    searchPlaceholder: PropsTypes.any,
    disabled: PropsTypes.looseBool,
    children: PropsTypes.any,
    labelInValue: PropsTypes.looseBool,
    maxTagCount: PropsTypes.number,
    maxTagPlaceholder: PropsTypes.any,
    maxTagTextLength: PropsTypes.number,
    showCheckedStrategy: PropsTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),
    dropdownClassName: PropsTypes.string,
    dropdownStyle: PropsTypes.object,
    dropdownVisibleChange: PropsTypes.func,
    dropdownMatchSelectWidth: PropsTypes.looseBool,
    treeData: PropsTypes.array,
    treeDataSimpleMode: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object])),
    treeNodeFilterProp: PropsTypes.string,
    treeNodeLabelProp: PropsTypes.string,
    treeCheckable: PropsTypes.any,
    treeCheckStrictly: PropsTypes.looseBool,
    treeIcon: PropsTypes.looseBool,
    treeLine: PropsTypes.looseBool,
    treeDefaultExpandAll: PropsTypes.looseBool,
    treeDefaultExpandedKeys: PropsTypes.array,
    treeExpandedKeys: PropsTypes.array,
    loadData: PropsTypes.func,
    filterTreeNode: withUndefined(PropsTypes.oneOfType([PropsTypes.func, PropsTypes.looseBool])),
    notFoundContent: PropsTypes.any,
    getPopupContainer: PropsTypes.func,
    allowClear: PropsTypes.looseBool,
    transitionName: PropsTypes.string,
    animation: PropsTypes.string,
    choiceTransitionName: PropsTypes.string,
    inputIcon: PropsTypes.any,
    clearIcon: PropsTypes.any,
    removeIcon: PropsTypes.any,
    switcherIcon: PropsTypes.any,
    __propsSymbol__: PropsTypes.any
  }, {
    prefixCls: "rc-tree-select",
    prefixAria: "rc-tree-select",
    showArrow: true,
    showSearch: true,
    autoClearSearchValue: true,
    showCheckedStrategy: SHOW_CHILD,
    treeNodeFilterProp: "value",
    treeNodeLabelProp: "title",
    treeIcon: false,
    notFoundContent: "Not Found",
    dropdownStyle: {},
    dropdownVisibleChange: function dropdownVisibleChange() {
      return true;
    }
  }),
  data: function data75() {
    warning_1(this.$props.__propsSymbol__);
    var _this$$props = this.$props, prefixAria = _this$$props.prefixAria, defaultOpen = _this$$props.defaultOpen, open6 = _this$$props.open;
    this.needSyncKeys = {};
    this.selectorRef = createRef();
    this.selectTriggerRef = createRef();
    this.ariaId = generateAriaId("".concat(prefixAria, "-list"));
    var state2 = {
      _open: open6 || defaultOpen,
      _valueList: [],
      _searchHalfCheckedKeys: [],
      _missValueList: [],
      _selectorValueList: [],
      _valueEntities: {},
      _posEntities: new Map(),
      _keyEntities: new Map(),
      _searchValue: "",
      _prevProps: {},
      _init: true,
      _focused: void 0,
      _treeNodes: void 0,
      _filteredTreeNodes: void 0
    };
    var newState = this.getDerivedState(this.$props, state2);
    return _extends$1(_extends$1({}, state2), newState);
  },
  watch: _extends$1(_extends$1({}, getWatch(["treeData", "defaultValue", "value"])), {
    __propsSymbol__: function __propsSymbol__4() {
      var state2 = this.getDerivedState(this.$props, this.$data);
      this.setState(state2);
      this.needSyncKeys = {};
    },
    _valueList: function _valueList() {
      var _this = this;
      this.$nextTick(function() {
        _this.forcePopupAlign();
      });
    },
    _open: function _open2(open6) {
      var _this2 = this;
      this.$nextTick(function() {
        if (!open6 && !_this2.isSearchValueControlled()) {
          _this2.setState({
            _searchValue: ""
          });
        }
        if (open6 && !_this2.$data._searchValue) {
          _this2.setState({
            _filteredTreeNodes: null
          });
        }
        var prefixCls2 = _this2.$props.prefixCls;
        var _this2$$data = _this2.$data, selectorValueList = _this2$$data._selectorValueList, valueEntities = _this2$$data._valueEntities;
        var isMultiple2 = _this2.isMultiple();
        if (!isMultiple2 && selectorValueList.length && open6 && _this2.popup) {
          var value26 = selectorValueList[0].value;
          var _this2$popup$getTree = _this2.popup.getTree(), domTreeNodes = _this2$popup$getTree.domTreeNodes;
          var _ref = valueEntities[value26] || {}, key2 = _ref.key;
          var treeNode = domTreeNodes[key2];
          if (treeNode) {
            var domNode = findDOMNode(treeNode);
            requestAnimationFrame(function() {
              var popupNode = findDOMNode(_this2.popup);
              var triggerContainer = findPopupContainer(popupNode, "".concat(prefixCls2, "-dropdown"));
              if (domNode && triggerContainer) {
                scrollIntoView(domNode, triggerContainer, {
                  onlyScrollIfNeeded: true,
                  offsetTop: 0
                });
              }
            });
          }
        }
      });
    }
  }),
  created: function created24() {
    provide("vcTreeSelect", {
      onSelectorFocus: this.onSelectorFocus,
      onSelectorBlur: this.onSelectorBlur,
      onSelectorKeyDown: this.onComponentKeyDown,
      onSelectorClear: this.onSelectorClear,
      onMultipleSelectorRemove: this.onMultipleSelectorRemove,
      onTreeNodeSelect: this.onTreeNodeSelect,
      onTreeNodeCheck: this.onTreeNodeCheck,
      onPopupKeyDown: this.onComponentKeyDown,
      onSearchInputChange: this.onSearchInputChange,
      onSearchInputKeyDown: this.onSearchInputKeyDown
    });
  },
  mounted: function mounted41() {
    var _this3 = this;
    this.$nextTick(function() {
      var _this3$$props = _this3.$props, autofocus = _this3$$props.autofocus, disabled = _this3$$props.disabled;
      if (autofocus && !disabled) {
        _this3.focus();
      }
    });
  },
  methods: {
    getDerivedState: function getDerivedState3(nextProps, prevState) {
      var _prevState$_prevProps = prevState._prevProps, prevProps = _prevState$_prevProps === void 0 ? {} : _prevState$_prevProps;
      var treeCheckable = nextProps.treeCheckable, treeCheckStrictly = nextProps.treeCheckStrictly, filterTreeNode2 = nextProps.filterTreeNode, treeNodeFilterProp = nextProps.treeNodeFilterProp, treeDataSimpleMode = nextProps.treeDataSimpleMode;
      var newState = {
        _prevProps: _extends$1({}, nextProps),
        _init: false
      };
      var self2 = this;
      function processState(propName, updater) {
        if (prevProps[propName] !== nextProps[propName] || self2.needSyncKeys[propName]) {
          updater(nextProps[propName], prevProps[propName]);
          return true;
        }
        return false;
      }
      var valueRefresh = false;
      processState("open", function(propValue) {
        newState._open = propValue;
      });
      var treeNodes;
      var treeDataChanged = false;
      var treeDataModeChanged = false;
      processState("treeData", function(propValue) {
        treeNodes = convertDataToTree(propValue);
        treeDataChanged = true;
      });
      processState("treeDataSimpleMode", function(propValue, prevValue) {
        if (!propValue)
          return;
        var prev3 = !prevValue || prevValue === true ? {} : prevValue;
        if (!shallowEqual$1(propValue, prev3)) {
          treeDataModeChanged = true;
        }
      });
      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {
        var simpleMapper = _extends$1({
          id: "id",
          pId: "pId",
          rootPId: null
        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});
        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));
      }
      if (!nextProps.treeData) {
        treeNodes = this.children || [];
      }
      if (treeNodes) {
        var entitiesMap = convertTreeToEntities(treeNodes);
        newState._treeNodes = treeNodes;
        newState._posEntities = entitiesMap.posEntities;
        newState._valueEntities = entitiesMap.valueEntities;
        newState._keyEntities = entitiesMap.keyEntities;
        valueRefresh = true;
      }
      if (prevState._init) {
        processState("defaultValue", function(propValue) {
          newState._valueList = formatInternalValue(propValue, nextProps);
          valueRefresh = true;
        });
      }
      processState("value", function(propValue) {
        newState._valueList = formatInternalValue(propValue, nextProps);
        valueRefresh = true;
      });
      if (valueRefresh) {
        var missValueList = [];
        var filteredValueList = [];
        var keyList = [];
        var latestValueList = newState._valueList;
        if (!latestValueList) {
          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));
        }
        var valueLabels = {};
        latestValueList.forEach(function(wrapperValue) {
          var value26 = wrapperValue.value, label = wrapperValue.label;
          var entity = (newState._valueEntities || prevState._valueEntities)[value26];
          valueLabels[value26] = label;
          if (entity) {
            keyList.push(entity.key);
            filteredValueList.push(wrapperValue);
            return;
          }
          missValueList.push(wrapperValue);
        });
        if (treeCheckable && !treeCheckStrictly) {
          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities), checkedKeys = _conductCheck.checkedKeys;
          newState._valueList = checkedKeys.map(function(key2) {
            var val = (newState._keyEntities || prevState._keyEntities).get(key2).value;
            var wrappedValue = {
              value: val
            };
            if (valueLabels[val] !== void 0) {
              wrappedValue.label = valueLabels[val];
            }
            return wrappedValue;
          });
        } else {
          newState._valueList = filteredValueList;
        }
        newState._missValueList = missValueList;
        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);
      }
      processState("inputValue", function(propValue) {
        if (propValue !== null) {
          newState._searchValue = propValue;
        }
      });
      processState("searchValue", function(propValue) {
        newState._searchValue = propValue;
      });
      if (newState._searchValue !== void 0 || prevState._searchValue && treeNodes) {
        var searchValue2 = newState._searchValue !== void 0 ? newState._searchValue : prevState._searchValue;
        var upperSearchValue = String(searchValue2).toUpperCase();
        var filterTreeNodeFn = filterTreeNode2;
        if (filterTreeNode2 === false) {
          filterTreeNodeFn = function filterTreeNodeFn2() {
            return true;
          };
        } else if (typeof filterTreeNodeFn !== "function") {
          filterTreeNodeFn = function filterTreeNodeFn2(_2, node) {
            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();
            return nodeValue.indexOf(upperSearchValue) !== -1;
          };
        }
        newState._filteredTreeNodes = getFilterTree(newState._treeNodes || prevState._treeNodes, searchValue2, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);
      }
      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {
        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);
      }
      processState("showCheckedStrategy", function() {
        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);
      });
      return newState;
    },
    onSelectorFocus: function onSelectorFocus() {
      this.setState({
        _focused: true
      });
    },
    onSelectorBlur: function onSelectorBlur() {
      this.setState({
        _focused: false
      });
    },
    onComponentKeyDown: function onComponentKeyDown(event) {
      var open6 = this.$data._open;
      var keyCode = event.keyCode;
      if (!open6) {
        if ([KeyCode$2.ENTER, KeyCode$2.DOWN].indexOf(keyCode) !== -1) {
          this.setOpenState(true);
        }
      } else if (KeyCode$2.ESC === keyCode) {
        this.setOpenState(false);
      } else if ([KeyCode$2.UP, KeyCode$2.DOWN, KeyCode$2.LEFT, KeyCode$2.RIGHT].indexOf(keyCode) !== -1) {
        event.stopPropagation();
      }
    },
    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {
      this.__emit("deselect", wrappedValue, node, nodeEventInfo);
    },
    onSelectorClear: function onSelectorClear(event) {
      var disabled = this.$props.disabled;
      if (disabled)
        return;
      this.triggerChange([], []);
      if (!this.isSearchValueControlled()) {
        this.setUncontrolledState({
          _searchValue: "",
          _filteredTreeNodes: null
        });
      }
      event.stopPropagation();
    },
    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {
      event.stopPropagation();
      var _this$$data = this.$data, valueList = _this$$data._valueList, missValueList = _this$$data._missValueList, valueEntities = _this$$data._valueEntities;
      var _this$$props2 = this.$props, treeCheckable = _this$$props2.treeCheckable, treeCheckStrictly = _this$$props2.treeCheckStrictly, treeNodeLabelProp = _this$$props2.treeNodeLabelProp, disabled = _this$$props2.disabled;
      if (disabled)
        return;
      var triggerEntity = valueEntities[removeValue];
      var newValueList = valueList;
      if (triggerEntity) {
        if (treeCheckable && !treeCheckStrictly) {
          newValueList = valueList.filter(function(_ref2) {
            var value26 = _ref2.value;
            var entity = valueEntities[value26];
            return !isPosRelated(entity.pos, triggerEntity.pos);
          });
        } else {
          newValueList = valueList.filter(function(_ref3) {
            var value26 = _ref3.value;
            return value26 !== removeValue;
          });
        }
      }
      var triggerNode = triggerEntity ? triggerEntity.node : null;
      var extraInfo = {
        triggerValue: removeValue,
        triggerNode
      };
      var deselectInfo = {
        node: triggerNode
      };
      if (treeCheckable) {
        var filteredEntityList = newValueList.map(function(_ref4) {
          var value26 = _ref4.value;
          return valueEntities[value26];
        });
        deselectInfo.event = "check";
        deselectInfo.checked = false;
        deselectInfo.checkedNodes = filteredEntityList.map(function(_ref5) {
          var node = _ref5.node;
          return node;
        });
        deselectInfo.checkedNodesPositions = filteredEntityList.map(function(_ref6) {
          var node = _ref6.node, pos = _ref6.pos;
          return {
            node,
            pos
          };
        });
        if (treeCheckStrictly) {
          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;
        } else {
          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function(_ref7) {
            var node = _ref7.node;
            return node;
          });
        }
      } else {
        deselectInfo.event = "select";
        deselectInfo.selected = false;
        deselectInfo.selectedNodes = newValueList.map(function(_ref8) {
          var value26 = _ref8.value;
          return (valueEntities[value26] || {}).node;
        });
      }
      var newMissValueList = missValueList.filter(function(_ref9) {
        var value26 = _ref9.value;
        return value26 !== removeValue;
      });
      var wrappedValue;
      if (this.isLabelInValue()) {
        wrappedValue = {
          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,
          value: removeValue
        };
      } else {
        wrappedValue = removeValue;
      }
      this.onDeselect(wrappedValue, triggerNode, deselectInfo);
      this.triggerChange(newMissValueList, newValueList, extraInfo);
    },
    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {
      var node = nodeEventInfo.node;
      var value26 = node.$props.value;
      var _this$$data2 = this.$data, missValueList = _this$$data2._missValueList, valueEntities = _this$$data2._valueEntities, keyEntities = _this$$data2._keyEntities, searchValue2 = _this$$data2._searchValue;
      var _this$$props3 = this.$props, disabled = _this$$props3.disabled, inputValue = _this$$props3.inputValue, treeNodeLabelProp = _this$$props3.treeNodeLabelProp, treeCheckable = _this$$props3.treeCheckable, treeCheckStrictly = _this$$props3.treeCheckStrictly, autoClearSearchValue = _this$$props3.autoClearSearchValue;
      var label = node.$props[treeNodeLabelProp];
      if (disabled)
        return;
      var wrappedValue;
      if (this.isLabelInValue()) {
        wrappedValue = {
          value: value26,
          label
        };
      } else {
        wrappedValue = value26;
      }
      if (isAdd) {
        this.__emit("select", wrappedValue, node, nodeEventInfo);
      } else {
        this.__emit("deselect", wrappedValue, node, nodeEventInfo);
      }
      var newValueList = nodeList.map(function(node2) {
        var props2 = getPropsData(node2);
        return {
          value: props2.value,
          label: props2[treeNodeLabelProp]
        };
      });
      if (treeCheckable && !treeCheckStrictly) {
        var keyList = newValueList.map(function(_ref10) {
          var val = _ref10.value;
          return valueEntities[val].key;
        });
        if (isAdd) {
          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;
        } else {
          keyList = conductCheck([valueEntities[value26].key], false, keyEntities, {
            checkedKeys: keyList
          }).checkedKeys;
        }
        newValueList = keyList.map(function(key2) {
          var props2 = getPropsData(keyEntities.get(key2).node);
          return {
            value: props2.value,
            label: props2[treeNodeLabelProp]
          };
        });
      }
      if (autoClearSearchValue || inputValue === null) {
        if (!this.isSearchValueControlled()) {
          this.setUncontrolledState({
            _searchValue: "",
            _filteredTreeNodes: null
          });
        }
        if (searchValue2 && searchValue2.length) {
          this.__emit("search", "");
        }
      }
      var extraInfo = _extends$1(_extends$1({}, nodeExtraInfo), {
        triggerValue: value26,
        triggerNode: node
      });
      this.triggerChange(missValueList, newValueList, extraInfo);
    },
    onTreeNodeSelect: function onTreeNodeSelect(_2, nodeEventInfo) {
      var _this$$data3 = this.$data, valueList = _this$$data3._valueList, valueEntities = _this$$data3._valueEntities;
      var _this$$props4 = this.$props, treeCheckable = _this$$props4.treeCheckable, multiple = _this$$props4.multiple;
      if (treeCheckable)
        return;
      if (!multiple) {
        this.setOpenState(false);
      }
      var isAdd = nodeEventInfo.selected;
      var selectedValue6 = nodeEventInfo.node.$props.value;
      var newValueList;
      if (!multiple) {
        newValueList = [{
          value: selectedValue6
        }];
      } else {
        newValueList = valueList.filter(function(_ref11) {
          var value26 = _ref11.value;
          return value26 !== selectedValue6;
        });
        if (isAdd) {
          newValueList.push({
            value: selectedValue6
          });
        }
      }
      var selectedNodes = newValueList.map(function(_ref12) {
        var value26 = _ref12.value;
        return valueEntities[value26];
      }).filter(function(entity) {
        return entity;
      }).map(function(_ref13) {
        var node = _ref13.node;
        return node;
      });
      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {
        selected: isAdd
      });
    },
    onTreeNodeCheck: function onTreeNodeCheck(_2, nodeEventInfo) {
      var _this$$data4 = this.$data, searchValue2 = _this$$data4._searchValue, keyEntities = _this$$data4._keyEntities, valueEntities = _this$$data4._valueEntities, valueList = _this$$data4._valueList;
      var treeCheckStrictly = this.$props.treeCheckStrictly;
      var checkedNodes = nodeEventInfo.checkedNodes, checkedNodesPositions = nodeEventInfo.checkedNodesPositions;
      var isAdd = nodeEventInfo.checked;
      var extraInfo = {
        checked: isAdd
      };
      var checkedNodeList = checkedNodes;
      if (searchValue2) {
        var oriKeyList = valueList.map(function(_ref14) {
          var value26 = _ref14.value;
          return valueEntities[value26];
        }).filter(function(entity) {
          return entity;
        }).map(function(_ref15) {
          var key2 = _ref15.key;
          return key2;
        });
        var keyList;
        if (isAdd) {
          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function(node) {
            var _getPropsData = getPropsData(node), value26 = _getPropsData.value;
            return valueEntities[value26].key;
          })))));
        } else {
          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {
            checkedKeys: oriKeyList
          }).checkedKeys;
        }
        checkedNodeList = keyList.map(function(key2) {
          return keyEntities.get(key2).node;
        });
        extraInfo.allCheckedNodes = keyList.map(function(key2) {
          return cleanEntity(keyEntities.get(key2));
        });
      } else if (treeCheckStrictly) {
        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;
      } else {
        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);
      }
      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);
    },
    onDropdownVisibleChange: function onDropdownVisibleChange(open6) {
      var _this$$props5 = this.$props, multiple = _this$$props5.multiple, treeCheckable = _this$$props5.treeCheckable;
      var _searchValue = this.$data._searchValue;
      if (open6 && !multiple && !treeCheckable && _searchValue) {
        this.setUncontrolledState({
          _searchValue: "",
          _filteredTreeNodes: null
        });
      }
      this.setOpenState(open6, true);
    },
    onSearchInputChange: function onSearchInputChange(event) {
      var value26 = event.target.value;
      var _this$$data5 = this.$data, treeNodes = _this$$data5._treeNodes, valueEntities = _this$$data5._valueEntities;
      var _this$$props6 = this.$props, filterTreeNode2 = _this$$props6.filterTreeNode, treeNodeFilterProp = _this$$props6.treeNodeFilterProp;
      this.__emit("search", value26);
      var isSet2 = false;
      if (!this.isSearchValueControlled()) {
        isSet2 = this.setUncontrolledState({
          _searchValue: value26
        });
        this.setOpenState(true);
      }
      if (isSet2) {
        var upperSearchValue = String(value26).toUpperCase();
        var filterTreeNodeFn = filterTreeNode2;
        if (filterTreeNode2 === false) {
          filterTreeNodeFn = function filterTreeNodeFn2() {
            return true;
          };
        } else if (!filterTreeNodeFn) {
          filterTreeNodeFn = function filterTreeNodeFn2(_2, node) {
            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();
            return nodeValue.indexOf(upperSearchValue) !== -1;
          };
        }
        this.setState({
          _filteredTreeNodes: getFilterTree(treeNodes, value26, filterTreeNodeFn, valueEntities, SelectNode)
        });
      }
    },
    onSearchInputKeyDown: function onSearchInputKeyDown(event) {
      var _this$$data6 = this.$data, searchValue2 = _this$$data6._searchValue, valueList = _this$$data6._valueList, valueEntities = _this$$data6._valueEntities;
      var keyCode = event.keyCode;
      if (KeyCode$2.BACKSPACE === keyCode && this.isMultiple() && !searchValue2 && valueList.length) {
        var lastValue = valueList[valueList.length - 1].value;
        var treeCheckStrictly = this.$props.treeCheckStrictly;
        if (!treeCheckStrictly) {
          (function() {
            var cur = valueEntities[lastValue];
            while (cur) {
              if (valueList.some(function(j2) {
                return j2.value === cur.value;
              })) {
                lastValue = cur.value;
                cur = cur.parent;
              } else {
                cur = null;
              }
            }
          })();
        }
        this.onMultipleSelectorRemove(event, lastValue);
      }
    },
    onChoiceAnimationLeave: function onChoiceAnimationLeave2() {
      var _this4 = this;
      requestAnimationFrame(function() {
        _this4.forcePopupAlign();
      });
    },
    setPopupRef: function setPopupRef(popup) {
      this.popup = popup;
    },
    setUncontrolledState: function setUncontrolledState3(state2) {
      var needSync = false;
      var newState = {};
      var props2 = getOptionProps(this);
      Object.keys(state2).forEach(function(name2) {
        if (name2.slice(1) in props2)
          return;
        needSync = true;
        newState[name2] = state2[name2];
      });
      if (needSync) {
        this.setState(newState);
      }
      return needSync;
    },
    setOpenState: function setOpenState(open6) {
      var byTrigger = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var dropdownVisibleChange2 = this.$props.dropdownVisibleChange;
      if (dropdownVisibleChange2 && dropdownVisibleChange2(open6, {
        documentClickClose: !open6 && byTrigger
      }) === false) {
        return;
      }
      this.setUncontrolledState({
        _open: open6
      });
    },
    isMultiple: function isMultiple() {
      var _this$$props7 = this.$props, multiple = _this$$props7.multiple, treeCheckable = _this$$props7.treeCheckable;
      return !!(multiple || treeCheckable);
    },
    isLabelInValue: function isLabelInValue$1() {
      return isLabelInValue(this.$props);
    },
    isSearchValueControlled: function isSearchValueControlled() {
      var props2 = getOptionProps(this);
      var inputValue = props2.inputValue;
      if ("searchValue" in props2)
        return true;
      return "inputValue" in props2 && inputValue !== null;
    },
    forcePopupAlign: function forcePopupAlign3() {
      var $trigger = this.selectTriggerRef.current;
      if ($trigger) {
        $trigger.forcePopupAlign();
      }
    },
    delayForcePopupAlign: function delayForcePopupAlign() {
      var _this5 = this;
      requestAnimationFrame(function() {
        requestAnimationFrame(_this5.forcePopupAlign);
      });
    },
    triggerChange: function triggerChange4(missValueList, valueList) {
      var extraInfo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var _this$$data7 = this.$data, valueEntities = _this$$data7._valueEntities, searchValue2 = _this$$data7._searchValue, prevSelectorValueList = _this$$data7._selectorValueList;
      var props2 = getOptionProps(this);
      var disabled = props2.disabled, treeCheckable = props2.treeCheckable, treeCheckStrictly = props2.treeCheckStrictly;
      if (disabled)
        return;
      var extra = _extends$1({
        preValue: prevSelectorValueList.map(function(_ref16) {
          var label = _ref16.label, value26 = _ref16.value;
          return {
            label,
            value: value26
          };
        })
      }, extraInfo);
      var selectorValueList = formatSelectorValue(valueList, props2, valueEntities);
      if (!("value" in props2)) {
        var newState = {
          _missValueList: missValueList,
          _valueList: valueList,
          _selectorValueList: selectorValueList
        };
        if (searchValue2 && treeCheckable && !treeCheckStrictly) {
          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);
        }
        this.setState(newState);
      }
      if (this.$attrs.onChange) {
        var connectValueList;
        if (this.isMultiple()) {
          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));
        } else {
          connectValueList = selectorValueList.slice(0, 1);
        }
        var labelList = null;
        var returnValue;
        if (this.isLabelInValue()) {
          returnValue = connectValueList.map(function(_ref17) {
            var label = _ref17.label, value26 = _ref17.value;
            return {
              label,
              value: value26
            };
          });
        } else {
          labelList = [];
          returnValue = connectValueList.map(function(_ref18) {
            var label = _ref18.label, value26 = _ref18.value;
            labelList.push(label);
            return value26;
          });
        }
        if (!this.isMultiple()) {
          returnValue = returnValue[0];
        }
        this.__emit("change", returnValue, labelList, extra);
      }
    },
    focus: function focus25() {
      this.selectorRef.current.focus();
    },
    blur: function blur22() {
      this.selectorRef.current.blur();
    }
  },
  render: function render155() {
    var _this$$data8 = this.$data, valueList = _this$$data8._valueList, missValueList = _this$$data8._missValueList, selectorValueList = _this$$data8._selectorValueList, searchHalfCheckedKeys = _this$$data8._searchHalfCheckedKeys, valueEntities = _this$$data8._valueEntities, keyEntities = _this$$data8._keyEntities, searchValue2 = _this$$data8._searchValue, open6 = _this$$data8._open, focused = _this$$data8._focused, treeNodes = _this$$data8._treeNodes, filteredTreeNodes = _this$$data8._filteredTreeNodes;
    var props2 = getOptionProps(this);
    var prefixCls2 = props2.prefixCls, treeExpandedKeys = props2.treeExpandedKeys;
    var isMultiple2 = this.isMultiple();
    var passProps = _extends$1(_extends$1(_extends$1({}, props2), this.$attrs), {
      isMultiple: isMultiple2,
      valueList,
      searchHalfCheckedKeys,
      selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),
      valueEntities,
      keyEntities,
      searchValue: searchValue2,
      upperSearchValue: (searchValue2 || "").toUpperCase(),
      open: open6,
      focused,
      dropdownPrefixCls: "".concat(prefixCls2, "-dropdown"),
      ariaId: this.ariaId,
      onChoiceAnimationLeave: this.onChoiceAnimationLeave,
      vSlots: this.$slots
    });
    var popupProps = _extends$1(_extends$1({}, passProps), {
      treeNodes,
      filteredTreeNodes,
      treeExpandedKeys,
      onTreeExpanded: this.delayForcePopupAlign,
      ref: this.setPopupRef
    });
    var $popup = createVNode(BasePopup$1, _objectSpread2$2(_objectSpread2$2({}, popupProps), {}, {
      "__propsSymbol__": []
    }), null);
    var Selector2 = isMultiple2 ? MultipleSelector$1 : SingleSelector$1;
    var $selector = createVNode(Selector2, _objectSpread2$2(_objectSpread2$2({}, passProps), {}, {
      "isMultiple": isMultiple2,
      "ref": this.selectorRef
    }), null);
    var selectTriggerProps = _extends$1(_extends$1({}, passProps), {
      popupElement: $popup,
      dropdownVisibleChange: this.onDropdownVisibleChange,
      ref: this.selectTriggerRef
    });
    return createVNode(SelectTrigger$1, selectTriggerProps, {
      default: function _default8() {
        return [$selector];
      }
    });
  }
});
Select.TreeNode = SelectNode;
Select.SHOW_ALL = SHOW_ALL;
Select.SHOW_PARENT = SHOW_PARENT;
Select.SHOW_CHILD = SHOW_CHILD;
Select.name = "TreeSelect";
var Select$1 = Select;
var TreeNode = SelectNode;
PropsTypes.shape({
  key: PropsTypes.string,
  value: PropsTypes.string,
  label: PropsTypes.VNodeChild,
  slots: PropsTypes.object,
  children: PropsTypes.array
}).loose;
var TreeSelectProps = function TreeSelectProps2() {
  return _extends$1(_extends$1({}, SelectProps()), {
    autofocus: PropsTypes.looseBool,
    dropdownStyle: PropsTypes.object,
    filterTreeNode: withUndefined(PropsTypes.oneOfType([Function, Boolean])),
    getPopupContainer: PropsTypes.func,
    labelInValue: PropsTypes.looseBool,
    loadData: PropsTypes.func,
    maxTagCount: PropsTypes.number,
    maxTagPlaceholder: PropsTypes.VNodeChild,
    value: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object, PropsTypes.array, PropsTypes.number]),
    defaultValue: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.object, PropsTypes.array, PropsTypes.number]),
    multiple: PropsTypes.looseBool,
    notFoundContent: PropsTypes.VNodeChild,
    searchPlaceholder: PropsTypes.string,
    searchValue: PropsTypes.string,
    showCheckedStrategy: PropsTypes.oneOf(tuple("SHOW_ALL", "SHOW_PARENT", "SHOW_CHILD")),
    suffixIcon: PropsTypes.VNodeChild,
    treeCheckable: PropsTypes.looseBool,
    treeCheckStrictly: PropsTypes.looseBool,
    treeData: PropsTypes.arrayOf(Object),
    treeDataSimpleMode: withUndefined(PropsTypes.oneOfType([PropsTypes.looseBool, Object])),
    dropdownClassName: PropsTypes.string,
    dropdownMatchSelectWidth: PropsTypes.looseBool,
    treeDefaultExpandAll: PropsTypes.looseBool,
    treeExpandedKeys: PropsTypes.array,
    treeIcon: PropsTypes.looseBool,
    treeDefaultExpandedKeys: PropsTypes.array,
    treeNodeFilterProp: PropsTypes.string,
    treeNodeLabelProp: PropsTypes.string,
    replaceFields: PropsTypes.object.def({}),
    clearIcon: PropsTypes.VNodeChild,
    removeIcon: PropsTypes.VNodeChild,
    onSelect: PropsTypes.func,
    onChange: PropsTypes.func,
    onSearch: PropsTypes.func,
    onTreeExpand: PropsTypes.func,
    "onUpdate:treeExpandedKeys": PropsTypes.func,
    "onUpdate:searchValue": PropsTypes.func,
    "onUpdate:value": PropsTypes.func
  });
};
var CaretDownOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z" } }] }, "name": "caret-down", "theme": "outlined" };
var CaretDownOutlinedSvg = CaretDownOutlined$2;
function _objectSpread$7(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$7(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$7(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CaretDownOutlined = function CaretDownOutlined2(props2, context2) {
  var p2 = _objectSpread$7({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CaretDownOutlinedSvg
  }), null);
};
CaretDownOutlined.displayName = "CaretDownOutlined";
CaretDownOutlined.inheritAttrs = false;
var CaretDownOutlined$1 = CaretDownOutlined;
var __rest$6 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
function convertChildrenToData(nodes) {
  return flattenChildren(nodes).map(function(node) {
    if (!isValidElement(node) || !node.type) {
      return null;
    }
    var _a = node.children || {}, d2 = _a.default, restSlot = __rest$6(_a, ["default"]);
    var children = d2 ? d2() : [];
    var key2 = node.key, _b = node.props, value26 = _b.value, restProps = __rest$6(_b, ["value"]);
    var data80 = _extends$1({
      key: key2,
      value: value26
    }, restProps);
    Object.keys(restSlot).forEach(function(p2) {
      if (typeof restSlot[p2] === "function") {
        data80[p2] = createVNode(Fragment, null, [restSlot[p2]()]);
      }
    });
    var childData = convertChildrenToData(children);
    if (childData.length) {
      data80.children = childData;
    }
    return data80;
  }).filter(function(data80) {
    return data80;
  });
}
var __rest$5 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var TreeSelect = defineComponent({
  TreeNode,
  SHOW_ALL,
  SHOW_PARENT,
  SHOW_CHILD,
  name: "ATreeSelect",
  inheritAttrs: false,
  props: initDefaultProps$1(TreeSelectProps(), {
    transitionName: "slide-up",
    choiceTransitionName: ""
  }),
  setup: function setup153() {
    return {
      vcTreeSelect: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  created: function created25() {
    warning$4(this.multiple !== false || !this.treeCheckable, "TreeSelect", "`multiple` will alway be `true` when `treeCheckable` is true");
  },
  methods: {
    saveTreeSelect: function saveTreeSelect(node) {
      this.vcTreeSelect = node;
    },
    focus: function focus26() {
      this.vcTreeSelect.focus();
    },
    blur: function blur23() {
      this.vcTreeSelect.blur();
    },
    renderSwitcherIcon: function renderSwitcherIcon2(prefixCls2, _ref) {
      var isLeaf = _ref.isLeaf, loading = _ref.loading;
      if (loading) {
        return createVNode(LoadingOutlined$1, {
          "class": "".concat(prefixCls2, "-switcher-loading-icon")
        }, null);
      }
      if (isLeaf) {
        return null;
      }
      return createVNode(CaretDownOutlined$1, {
        "class": "".concat(prefixCls2, "-switcher-icon")
      }, null);
    },
    handleChange: function handleChange20() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      this.$emit("update:value", args[0]);
      this.$emit.apply(this, ["change"].concat(args));
    },
    handleTreeExpand: function handleTreeExpand() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      this.$emit("update:treeExpandedKeys", args[0]);
      this.$emit.apply(this, ["treeExpand"].concat(args));
    },
    handleSearch: function handleSearch2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      this.$emit("update:searchValue", args[0]);
      this.$emit.apply(this, ["search"].concat(args));
    },
    updateTreeData: function updateTreeData2(treeData) {
      var _this = this;
      var $slots = this.$slots;
      var defaultFields = {
        children: "children",
        title: "title",
        key: "key",
        label: "label",
        value: "value"
      };
      var replaceFields = _extends$1(_extends$1({}, defaultFields), this.$props.replaceFields);
      return treeData.map(function(item) {
        var _item$slots = item.slots, slots = _item$slots === void 0 ? {} : _item$slots;
        var label = item[replaceFields.label];
        var title2 = item[replaceFields.title];
        var value26 = item[replaceFields.value];
        var key2 = item[replaceFields.key];
        var children = item[replaceFields.children];
        var newLabel = typeof label === "function" ? label() : label;
        var newTitle = typeof title2 === "function" ? title2() : title2;
        if (!newLabel && slots.label && $slots[slots.label]) {
          newLabel = createVNode(Fragment, null, [$slots[slots.label](item)]);
        }
        if (!newTitle && slots.title && $slots[slots.title]) {
          newTitle = createVNode(Fragment, null, [$slots[slots.title](item)]);
        }
        var treeNodeProps = _extends$1(_extends$1({}, item), {
          title: newTitle || newLabel,
          value: value26,
          dataRef: item,
          key: key2
        });
        if (children) {
          return _extends$1(_extends$1({}, treeNodeProps), {
            children: _this.updateTreeData(children)
          });
        }
        return treeNodeProps;
      });
    }
  },
  render: function render156() {
    var _cls, _this2 = this;
    var props2 = getOptionProps(this);
    var customizePrefixCls = props2.prefixCls, size2 = props2.size, dropdownStyle = props2.dropdownStyle, dropdownClassName = props2.dropdownClassName, getPopupContainer = props2.getPopupContainer, restProps = __rest$5(props2, ["prefixCls", "size", "dropdownStyle", "dropdownClassName", "getPopupContainer"]);
    var className = this.$attrs.class;
    var _this$configProvider = this.configProvider, renderEmpty2 = _this$configProvider.renderEmpty, getPrefixCls2 = _this$configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("select", customizePrefixCls);
    var notFoundContent = getComponent(this, "notFoundContent");
    var removeIcon = getComponent(this, "removeIcon");
    var clearIcon = getComponent(this, "clearIcon");
    var getContextPopupContainer = this.configProvider.getPopupContainer;
    var rest = omit$2(restProps, ["inputIcon", "removeIcon", "clearIcon", "switcherIcon", "suffixIcon"]);
    var suffixIcon = getComponent(this, "suffixIcon");
    suffixIcon = Array.isArray(suffixIcon) ? suffixIcon[0] : suffixIcon;
    var treeData = props2.treeData;
    if (treeData) {
      treeData = this.updateTreeData(treeData);
    }
    var cls = (_cls = {}, _defineProperty$U(_cls, "".concat(prefixCls2, "-lg"), size2 === "large"), _defineProperty$U(_cls, "".concat(prefixCls2, "-sm"), size2 === "small"), _defineProperty$U(_cls, className, className), _cls);
    var showSearch = restProps.showSearch;
    if (!("showSearch" in restProps)) {
      showSearch = !!(restProps.multiple || restProps.treeCheckable);
    }
    var checkable = getComponent(this, "treeCheckable");
    if (checkable) {
      checkable = createVNode("span", {
        "class": "".concat(prefixCls2, "-tree-checkbox-inner")
      }, null);
    }
    var inputIcon = suffixIcon || createVNode(DownOutlined$1, {
      "class": "".concat(prefixCls2, "-arrow-icon")
    }, null);
    var finalRemoveIcon = removeIcon || createVNode(CloseOutlined$1, {
      "class": "".concat(prefixCls2, "-remove-icon")
    }, null);
    var finalClearIcon = clearIcon || createVNode(CloseCircleFilled$1, {
      "class": "".concat(prefixCls2, "-clear-icon")
    }, null);
    var VcTreeSelectProps = _extends$1(_extends$1(_extends$1(_extends$1({}, this.$attrs), {
      switcherIcon: function switcherIcon(nodeProps) {
        return _this2.renderSwitcherIcon(prefixCls2, nodeProps);
      },
      inputIcon,
      removeIcon: finalRemoveIcon,
      clearIcon: finalClearIcon
    }), rest), {
      showSearch,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      dropdownClassName: classNames(dropdownClassName, "".concat(prefixCls2, "-tree-dropdown")),
      prefixCls: prefixCls2,
      dropdownStyle: _extends$1({
        maxHeight: "100vh",
        overflow: "auto"
      }, dropdownStyle),
      treeCheckable: checkable,
      notFoundContent: notFoundContent || renderEmpty2("Select"),
      class: cls,
      onChange: this.handleChange,
      onSearch: this.handleSearch,
      onTreeExpand: this.handleTreeExpand,
      ref: this.saveTreeSelect,
      treeData: treeData ? treeData : convertChildrenToData(getSlot(this))
    });
    return createVNode(Select$1, _objectSpread2$2(_objectSpread2$2({}, VcTreeSelectProps), {}, {
      "__propsSymbol__": []
    }), omit$2(this.$slots, ["default"]));
  }
});
TreeSelect.install = function(app) {
  app.component(TreeSelect.name, TreeSelect);
  app.component(TreeSelect.TreeNode.displayName, TreeSelect.TreeNode);
  return app;
};
var TreeSelectNode = TreeSelect.TreeNode;
var TreeSelect$1 = TreeSelect;
var timelineItemProps = {
  prefixCls: PropsTypes.string,
  color: PropsTypes.string,
  dot: PropsTypes.any,
  pending: PropsTypes.looseBool,
  position: PropsTypes.oneOf(tuple("left", "right", "")).def("")
};
var TimelineItem = defineComponent({
  name: "ATimelineItem",
  props: initDefaultProps$1(timelineItemProps, {
    color: "blue",
    pending: false
  }),
  setup: function setup154() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render157() {
    var _classNames, _classNames2;
    var _a, _b;
    var _getOptionProps = getOptionProps(this), customizePrefixCls = _getOptionProps.prefixCls, _getOptionProps$color = _getOptionProps.color, color = _getOptionProps$color === void 0 ? "" : _getOptionProps$color, pending = _getOptionProps.pending;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("timeline", customizePrefixCls);
    var dot = getComponent(this, "dot");
    var itemClassName = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-item"), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-item-pending"), pending), _classNames));
    var dotClassName = classNames((_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(prefixCls2, "-item-head"), true), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-item-head-custom"), dot), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-item-head-").concat(color), true), _classNames2));
    return createVNode("li", {
      "class": itemClassName
    }, [createVNode("div", {
      "class": "".concat(prefixCls2, "-item-tail")
    }, null), createVNode("div", {
      "class": dotClassName,
      "style": {
        borderColor: /blue|red|green|gray/.test(color) ? void 0 : color
      }
    }, [dot]), createVNode("div", {
      "class": "".concat(prefixCls2, "-item-content")
    }, [(_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)])]);
  }
});
var timelineProps = {
  prefixCls: PropsTypes.string,
  pending: PropsTypes.any,
  pendingDot: PropsTypes.string,
  reverse: PropsTypes.looseBool,
  mode: PropsTypes.oneOf(tuple("left", "alternate", "right", ""))
};
var Timeline = defineComponent({
  name: "ATimeline",
  props: initDefaultProps$1(timelineProps, {
    reverse: false,
    mode: ""
  }),
  setup: function setup155() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  render: function render158() {
    var _classNames;
    var _a, _b;
    var _getOptionProps = getOptionProps(this), customizePrefixCls = _getOptionProps.prefixCls, reverse = _getOptionProps.reverse, mode4 = _getOptionProps.mode;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("timeline", customizePrefixCls);
    var pendingDot = getComponent(this, "pendingDot");
    var pending = getComponent(this, "pending");
    var pendingNode = typeof pending === "boolean" ? null : pending;
    var classString = classNames(prefixCls2, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-pending"), !!pending), _defineProperty$U(_classNames, "".concat(prefixCls2, "-reverse"), !!reverse), _defineProperty$U(_classNames, "".concat(prefixCls2, "-").concat(mode4), !!mode4), _classNames));
    var children = filterEmpty((_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a));
    var pendingItem = pending ? createVNode(TimelineItem, {
      "pending": !!pending,
      "dot": pendingDot || createVNode(LoadingOutlined$1, null, null)
    }, {
      default: function _default8() {
        return [pendingNode];
      }
    }) : null;
    var timeLineItems = reverse ? [pendingItem].concat(_toConsumableArray(children.reverse())) : [].concat(_toConsumableArray(children), [pendingItem]);
    var getPositionCls = function getPositionCls2(ele, idx) {
      var eleProps = getPropsData(ele);
      if (mode4 === "alternate") {
        if (eleProps.position === "right")
          return "".concat(prefixCls2, "-item-right");
        if (eleProps.position === "left")
          return "".concat(prefixCls2, "-item-left");
        return idx % 2 === 0 ? "".concat(prefixCls2, "-item-left") : "".concat(prefixCls2, "-item-right");
      }
      if (mode4 === "left")
        return "".concat(prefixCls2, "-item-left");
      if (mode4 === "right")
        return "".concat(prefixCls2, "-item-right");
      if (eleProps.position === "right")
        return "".concat(prefixCls2, "-item-right");
      return "";
    };
    var truthyItems = timeLineItems.filter(function(item) {
      return !!item;
    });
    var itemsCount = truthyItems.length;
    var lastCls = "".concat(prefixCls2, "-item-last");
    var items = truthyItems.map(function(ele, idx) {
      var pendingClass = idx === itemsCount - 2 ? lastCls : "";
      var readyClass = idx === itemsCount - 1 ? lastCls : "";
      return cloneVNode(ele, {
        class: classNames([!reverse && !!pending ? pendingClass : readyClass, getPositionCls(ele, idx)])
      });
    });
    return createVNode("ul", {
      "class": classString
    }, [items]);
  }
});
Timeline.Item = TimelineItem;
Timeline.install = function(app) {
  app.component(Timeline.name, Timeline);
  app.component(TimelineItem.name, TimelineItem);
  return app;
};
var EnterOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 000 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z" } }] }, "name": "enter", "theme": "outlined" };
var EnterOutlinedSvg = EnterOutlined$2;
function _objectSpread$6(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$6(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$6(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var EnterOutlined = function EnterOutlined2(props2, context2) {
  var p2 = _objectSpread$6({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": EnterOutlinedSvg
  }), null);
};
EnterOutlined.displayName = "EnterOutlined";
EnterOutlined.inheritAttrs = false;
var EnterOutlined$1 = EnterOutlined;
var Editable = defineComponent({
  name: "Editable",
  props: {
    prefixCls: PropsTypes.string,
    value: PropsTypes.string,
    maxlength: PropsTypes.number,
    autoSize: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]),
    onSave: PropsTypes.func,
    onCancel: PropsTypes.func,
    onEnd: PropsTypes.func,
    onChange: PropsTypes.func,
    originContent: PropsTypes.string
  },
  emits: ["save", "cancel", "end", "change"],
  setup: function setup156(props2, _ref) {
    var emit = _ref.emit;
    var state2 = reactive({
      current: props2.value || "",
      lastKeyCode: void 0,
      inComposition: false,
      cancelFlag: false
    });
    watch(function() {
      return props2.value;
    }, function(current2) {
      state2.current = current2;
    });
    var textArea = ref();
    onMounted(function() {
      var _a;
      if (textArea.value) {
        var resizableTextArea = (_a = textArea.value) === null || _a === void 0 ? void 0 : _a.resizableTextArea;
        var innerTextArea = resizableTextArea === null || resizableTextArea === void 0 ? void 0 : resizableTextArea.textArea;
        innerTextArea.focus();
        var length = innerTextArea.value.length;
        innerTextArea.setSelectionRange(length, length);
      }
    });
    function saveTextAreaRef(node) {
      textArea.value = node;
    }
    function onChange9(_ref2) {
      var value26 = _ref2.target.value;
      state2.current = value26.replace(/[\r\n]/g, "");
      emit("change", state2.current);
    }
    function onCompositionStart2() {
      state2.inComposition = true;
    }
    function onCompositionEnd2() {
      state2.inComposition = false;
    }
    function onKeyDown14(e2) {
      var keyCode = e2.keyCode;
      if (keyCode === KeyCode$2.ENTER) {
        e2.preventDefault();
      }
      if (state2.inComposition)
        return;
      state2.lastKeyCode = keyCode;
    }
    function onKeyUp3(e2) {
      var keyCode = e2.keyCode, ctrlKey = e2.ctrlKey, altKey = e2.altKey, metaKey = e2.metaKey, shiftKey = e2.shiftKey;
      if (state2.lastKeyCode === keyCode && !state2.inComposition && !ctrlKey && !altKey && !metaKey && !shiftKey) {
        if (keyCode === KeyCode$2.ENTER) {
          confirmChange();
          emit("end");
        } else if (keyCode === KeyCode$2.ESC) {
          state2.current = props2.originContent;
          emit("cancel");
        }
      }
    }
    function onBlur7() {
      confirmChange();
      emit("end");
    }
    function confirmChange() {
      emit("save", state2.current.trim());
    }
    return function() {
      return createVNode("div", {
        "class": "".concat(props2.prefixCls, " ").concat(props2.prefixCls, "-edit-content")
      }, [createVNode(__unplugin_components_10, {
        "ref": saveTextAreaRef,
        "maxlength": props2.maxlength,
        "value": state2.current,
        "onChange": onChange9,
        "onKeydown": onKeyDown14,
        "onKeyup": onKeyUp3,
        "onCompositionstart": onCompositionStart2,
        "onCompositionend": onCompositionEnd2,
        "onBlur": onBlur7,
        "autoSize": props2.autoSize === void 0 || props2.autoSize
      }, null), createVNode(EnterOutlined$1, {
        "class": "".concat(props2.prefixCls, "-edit-content-confirm")
      }, null)]);
    };
  }
});
var Editable$1 = Editable;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var ellipsisContainer;
var wrapperStyle = {
  padding: 0,
  margin: 0,
  display: "inline",
  lineHeight: "inherit"
};
function pxToNumber(value26) {
  if (!value26)
    return 0;
  var match5 = value26.match(/^\d*(\.\d*)?/);
  return match5 ? Number(match5[0]) : 0;
}
function styleToString(style3) {
  var styleNames = Array.prototype.slice.apply(style3);
  return styleNames.map(function(name2) {
    return "".concat(name2, ": ").concat(style3.getPropertyValue(name2), ";");
  }).join("");
}
var measure = function(originEle, option, content, fixedContent, ellipsisStr) {
  if (!ellipsisContainer) {
    ellipsisContainer = document.createElement("div");
    ellipsisContainer.setAttribute("aria-hidden", "true");
    document.body.appendChild(ellipsisContainer);
  }
  var rows = option.rows, _option$suffix = option.suffix, suffix = _option$suffix === void 0 ? "" : _option$suffix;
  var originStyle = window.getComputedStyle(originEle);
  var originCSS = styleToString(originStyle);
  var lineHeight = pxToNumber(originStyle.lineHeight);
  var maxHeight = Math.round(lineHeight * (rows + 1) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom));
  ellipsisContainer.setAttribute("style", originCSS);
  ellipsisContainer.style.position = "fixed";
  ellipsisContainer.style.left = "0";
  ellipsisContainer.style.height = "auto";
  ellipsisContainer.style.minHeight = "auto";
  ellipsisContainer.style.maxHeight = "auto";
  ellipsisContainer.style.top = "-999999px";
  ellipsisContainer.style.zIndex = "-1000";
  ellipsisContainer.style.textOverflow = "clip";
  ellipsisContainer.style.whiteSpace = "normal";
  ellipsisContainer.style.webkitLineClamp = "none";
  var vm = createApp({
    render: function render166() {
      return createVNode("div", {
        "style": wrapperStyle
      }, [createVNode("span", {
        "style": wrapperStyle
      }, [content, suffix]), createVNode("span", {
        "style": wrapperStyle
      }, [fixedContent])]);
    }
  });
  vm.mount(ellipsisContainer);
  function inRange() {
    return ellipsisContainer.offsetHeight < maxHeight;
  }
  if (inRange()) {
    vm.unmount();
    return {
      content,
      text: ellipsisContainer.innerHTML,
      ellipsis: false
    };
  }
  var childNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[0].cloneNode(true).childNodes).filter(function(_ref) {
    var nodeType = _ref.nodeType, data80 = _ref.data;
    return nodeType !== COMMENT_NODE && data80 !== "";
  });
  var fixedNodes = Array.prototype.slice.apply(ellipsisContainer.childNodes[0].childNodes[1].cloneNode(true).childNodes);
  vm.unmount();
  var ellipsisChildren = [];
  ellipsisContainer.innerHTML = "";
  var ellipsisContentHolder = document.createElement("span");
  ellipsisContainer.appendChild(ellipsisContentHolder);
  var ellipsisTextNode = document.createTextNode(ellipsisStr + suffix);
  ellipsisContentHolder.appendChild(ellipsisTextNode);
  fixedNodes.forEach(function(childNode) {
    ellipsisContainer.appendChild(childNode);
  });
  function appendChildNode(node) {
    ellipsisContentHolder.insertBefore(node, ellipsisTextNode);
  }
  function measureText(textNode, fullText) {
    var startLoc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var endLoc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : fullText.length;
    var lastSuccessLoc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    var midLoc = Math.floor((startLoc + endLoc) / 2);
    var currentText = fullText.slice(0, midLoc);
    textNode.textContent = currentText;
    if (startLoc >= endLoc - 1) {
      for (var step = endLoc; step >= startLoc; step -= 1) {
        var currentStepText = fullText.slice(0, step);
        textNode.textContent = currentStepText;
        if (inRange() || !currentStepText) {
          return step === fullText.length ? {
            finished: false,
            vNode: fullText
          } : {
            finished: true,
            vNode: currentStepText
          };
        }
      }
    }
    if (inRange()) {
      return measureText(textNode, fullText, midLoc, endLoc, midLoc);
    }
    return measureText(textNode, fullText, startLoc, midLoc, lastSuccessLoc);
  }
  function measureNode(childNode) {
    var type3 = childNode.nodeType;
    if (type3 === TEXT_NODE) {
      var fullText = childNode.textContent || "";
      var textNode = document.createTextNode(fullText);
      appendChildNode(textNode);
      return measureText(textNode, fullText);
    }
    return {
      finished: false,
      vNode: null
    };
  }
  childNodes.some(function(childNode) {
    var _measureNode = measureNode(childNode), finished = _measureNode.finished, vNode = _measureNode.vNode;
    if (vNode) {
      ellipsisChildren.push(vNode);
    }
    return finished;
  });
  return {
    content: ellipsisChildren,
    text: ellipsisContainer.innerHTML,
    ellipsis: true
  };
};
var __rest$4 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Typography = defineComponent({
  name: "ATypography",
  inheritAttrs: false,
  setup: function setup157(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs;
    var _useConfigInject = useConfigInject("typography", props2), prefixCls2 = _useConfigInject.prefixCls;
    return function() {
      var _a;
      var _b = _extends$1(_extends$1({}, props2), attrs);
      _b.prefixCls;
      _b.class;
      var _b$component = _b.component, Component = _b$component === void 0 ? "article" : _b$component, restProps = __rest$4(_b, ["prefixCls", "class", "component"]);
      return createVNode(Component, _objectSpread2$2({
        "class": classNames(prefixCls2.value, attrs.class)
      }, restProps), {
        default: function _default8() {
          return [(_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)];
        }
      });
    };
  }
});
Typography.props = {
  prefixCls: PropsTypes.string,
  component: PropsTypes.string
};
var Typography$1 = Typography;
var deselectCurrent = function deselectCurrent2() {
  var selection = document.getSelection();
  if (!selection.rangeCount) {
    return function() {
    };
  }
  var active = document.activeElement;
  var ranges = [];
  for (var i2 = 0; i2 < selection.rangeCount; i2++) {
    ranges.push(selection.getRangeAt(i2));
  }
  switch (active.tagName.toUpperCase()) {
    case "INPUT":
    case "TEXTAREA":
      active.blur();
      break;
    default:
      active = null;
      break;
  }
  selection.removeAllRanges();
  return function() {
    selection.type === "Caret" && selection.removeAllRanges();
    if (!selection.rangeCount) {
      ranges.forEach(function(range2) {
        selection.addRange(range2);
      });
    }
    active && active.focus();
  };
};
var deselectCurrent$1 = deselectCurrent;
var clipboardToIE11Formatting = {
  "text/plain": "Text",
  "text/html": "Url",
  default: "Text"
};
var defaultMessage = "Copy to clipboard: #{key}, Enter";
function format(message2) {
  var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
  return message2.replace(/#{\s*key\s*}/g, copyKey);
}
function copy(text, options2) {
  var message2, reselectPrevious, range2, selection, mark, success3 = false;
  if (!options2) {
    options2 = {};
  }
  var debug = options2.debug || false;
  try {
    reselectPrevious = deselectCurrent$1();
    range2 = document.createRange();
    selection = document.getSelection();
    mark = document.createElement("span");
    mark.textContent = text;
    mark.style.all = "unset";
    mark.style.position = "fixed";
    mark.style.top = 0;
    mark.style.clip = "rect(0, 0, 0, 0)";
    mark.style.whiteSpace = "pre";
    mark.style.webkitUserSelect = "text";
    mark.style.MozUserSelect = "text";
    mark.style.msUserSelect = "text";
    mark.style.userSelect = "text";
    mark.addEventListener("copy", function(e2) {
      e2.stopPropagation();
      if (options2.format) {
        e2.preventDefault();
        if (typeof e2.clipboardData === "undefined") {
          debug && console.warn("unable to use e.clipboardData");
          debug && console.warn("trying IE specific stuff");
          window.clipboardData.clearData();
          var _format = clipboardToIE11Formatting[options2.format] || clipboardToIE11Formatting["default"];
          window.clipboardData.setData(_format, text);
        } else {
          e2.clipboardData.clearData();
          e2.clipboardData.setData(options2.format, text);
        }
      }
      if (options2.onCopy) {
        e2.preventDefault();
        options2.onCopy(e2.clipboardData);
      }
    });
    document.body.appendChild(mark);
    range2.selectNodeContents(mark);
    selection.addRange(range2);
    var successful = document.execCommand("copy");
    if (!successful) {
      throw new Error("copy command was unsuccessful");
    }
    success3 = true;
  } catch (err) {
    debug && console.error("unable to copy using execCommand: ", err);
    debug && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(options2.format || "text", text);
      options2.onCopy && options2.onCopy(window.clipboardData);
      success3 = true;
    } catch (err2) {
      debug && console.error("unable to copy using clipboardData: ", err2);
      debug && console.error("falling back to prompt");
      message2 = format("message" in options2 ? options2.message : defaultMessage);
      window.prompt(message2, text);
    }
  } finally {
    if (selection) {
      if (typeof selection.removeRange == "function") {
        selection.removeRange(range2);
      } else {
        selection.removeAllRanges();
      }
    }
    if (mark) {
      document.body.removeChild(mark);
    }
    reselectPrevious();
  }
  return success3;
}
var CopyOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z" } }] }, "name": "copy", "theme": "outlined" };
var CopyOutlinedSvg = CopyOutlined$2;
function _objectSpread$5(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$5(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$5(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var CopyOutlined = function CopyOutlined2(props2, context2) {
  var p2 = _objectSpread$5({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": CopyOutlinedSvg
  }), null);
};
CopyOutlined.displayName = "CopyOutlined";
CopyOutlined.inheritAttrs = false;
var CopyOutlined$1 = CopyOutlined;
var EditOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z" } }] }, "name": "edit", "theme": "outlined" };
var EditOutlinedSvg = EditOutlined$2;
function _objectSpread$4(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$4(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$4(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var EditOutlined = function EditOutlined2(props2, context2) {
  var p2 = _objectSpread$4({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": EditOutlinedSvg
  }), null);
};
EditOutlined.displayName = "EditOutlined";
EditOutlined.inheritAttrs = false;
var EditOutlined$1 = EditOutlined;
var __rest$3 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var isLineClampSupport = isStyleSupport("webkitLineClamp");
var isTextOverflowSupport = isStyleSupport("textOverflow");
var ELLIPSIS_STR = "...";
var Base = defineComponent({
  name: "Base",
  inheritAttrs: false,
  emits: ["update:content"],
  setup: function setup158(props2, _ref) {
    var slots = _ref.slots, attrs = _ref.attrs, emit = _ref.emit;
    var _useConfigInject = useConfigInject("typography", props2), prefixCls2 = _useConfigInject.prefixCls;
    var state2 = reactive({
      edit: false,
      copied: false,
      ellipsisText: "",
      ellipsisContent: null,
      isEllipsis: false,
      expanded: false,
      clientRendered: false,
      expandStr: "",
      copyStr: "",
      copiedStr: "",
      editStr: "",
      copyId: void 0,
      rafId: void 0,
      prevProps: void 0,
      originContent: ""
    });
    var contentRef = ref();
    var editIcon = ref();
    var ellipsis = computed(function() {
      var ellipsis2 = props2.ellipsis;
      if (!ellipsis2)
        return {};
      return _extends$1({
        rows: 1,
        expandable: false
      }, _typeof$2(ellipsis2) === "object" ? ellipsis2 : null);
    });
    onMounted(function() {
      state2.clientRendered = true;
    });
    onBeforeUnmount(function() {
      window.clearTimeout(state2.copyId);
      wrapperRaf.cancel(state2.rafId);
    });
    watch([function() {
      return ellipsis.value.rows;
    }, function() {
      return props2.content;
    }], function() {
      nextTick(function() {
        resizeOnNextFrame2();
      });
    }, {
      flush: "post",
      deep: true,
      immediate: true
    });
    watchEffect(function() {
      if (props2.content === void 0) {
        warning$4(!props2.editable, "Typography", "When `editable` is enabled, please use `content` instead of children");
        warning$4(!props2.ellipsis, "Typography", "When `ellipsis` is enabled, please use `content` instead of children");
      }
    });
    function getChildrenText() {
      var _a, _b;
      return props2.ellipsis || props2.editable ? props2.content : (_b = (_a = contentRef.value) === null || _a === void 0 ? void 0 : _a.$el) === null || _b === void 0 ? void 0 : _b.innerText;
    }
    function onExpandClick(e2) {
      var onExpand3 = ellipsis.value.onExpand;
      state2.expanded = true;
      onExpand3 === null || onExpand3 === void 0 ? void 0 : onExpand3(e2);
    }
    function onEditClick(e2) {
      e2.preventDefault();
      state2.originContent = props2.content;
      triggerEdit(true);
    }
    function onEditChange(value26) {
      onContentChange(value26);
      triggerEdit(false);
    }
    function onContentChange(value26) {
      var onChange9 = editable.value.onChange;
      if (value26 !== props2.content) {
        emit("update:content", value26);
        onChange9 === null || onChange9 === void 0 ? void 0 : onChange9(value26);
      }
    }
    function onEditCancel() {
      var _a, _b;
      (_b = (_a = editable.value).onCancel) === null || _b === void 0 ? void 0 : _b.call(_a);
      triggerEdit(false);
    }
    function onCopyClick(e2) {
      e2.preventDefault();
      var copyable = props2.copyable;
      var copyConfig2 = _extends$1({}, _typeof$2(copyable) === "object" ? copyable : null);
      if (copyConfig2.text === void 0) {
        copyConfig2.text = getChildrenText();
      }
      copy(copyConfig2.text || "");
      state2.copied = true;
      nextTick(function() {
        if (copyConfig2.onCopy) {
          copyConfig2.onCopy();
        }
        state2.copyId = window.setTimeout(function() {
          state2.copied = false;
        }, 3e3);
      });
    }
    var editable = computed(function() {
      var editable2 = props2.editable;
      if (!editable2)
        return {
          editing: state2.edit
        };
      return _extends$1({
        editing: state2.edit
      }, _typeof$2(editable2) === "object" ? editable2 : null);
    });
    function triggerEdit(edit) {
      var onStart4 = editable.value.onStart;
      if (edit && onStart4) {
        onStart4();
      }
      state2.edit = edit;
      nextTick(function() {
        var _a;
        if (!edit) {
          (_a = editIcon.value) === null || _a === void 0 ? void 0 : _a.focus();
        }
      });
    }
    function resizeOnNextFrame2() {
      wrapperRaf.cancel(state2.rafId);
      state2.rafId = wrapperRaf(function() {
        syncEllipsis();
      });
    }
    var canUseCSSEllipsis = computed(function() {
      var _ellipsis$value = ellipsis.value, rows = _ellipsis$value.rows, expandable = _ellipsis$value.expandable, suffix = _ellipsis$value.suffix, onEllipsis = _ellipsis$value.onEllipsis, tooltip = _ellipsis$value.tooltip;
      if (suffix || tooltip)
        return false;
      if (props2.editable || props2.copyable || expandable || onEllipsis) {
        return false;
      }
      if (rows === 1) {
        return isTextOverflowSupport;
      }
      return isLineClampSupport;
    });
    var syncEllipsis = function syncEllipsis2() {
      var _a, _b;
      var ellipsisText = state2.ellipsisText, isEllipsis = state2.isEllipsis;
      var _ellipsis$value2 = ellipsis.value, rows = _ellipsis$value2.rows, suffix = _ellipsis$value2.suffix, onEllipsis = _ellipsis$value2.onEllipsis;
      if (!rows || rows < 0 || !((_a = contentRef.value) === null || _a === void 0 ? void 0 : _a.$el) || state2.expanded || props2.content === void 0)
        return;
      if (canUseCSSEllipsis.value)
        return;
      var _measure = measure((_b = contentRef.value) === null || _b === void 0 ? void 0 : _b.$el, {
        rows,
        suffix
      }, props2.content, renderOperations(true), ELLIPSIS_STR), content = _measure.content, text = _measure.text, ell = _measure.ellipsis;
      if (ellipsisText !== text || state2.isEllipsis !== ell) {
        state2.ellipsisText = text;
        state2.ellipsisContent = content;
        state2.isEllipsis = ell;
        if (isEllipsis !== ell && onEllipsis) {
          onEllipsis(ell);
        }
      }
    };
    function wrapperDecorations(_ref2, content) {
      var mark = _ref2.mark, code = _ref2.code, underline = _ref2.underline, del = _ref2.delete, strong = _ref2.strong, keyboard = _ref2.keyboard;
      var currentContent = content;
      function wrap(needed, Tag2) {
        if (!needed)
          return;
        var _currentContent = function() {
          return currentContent;
        }();
        currentContent = createVNode(Tag2, null, {
          default: function _default8() {
            return [_currentContent];
          }
        });
      }
      wrap(strong, "strong");
      wrap(underline, "u");
      wrap(del, "del");
      wrap(code, "code");
      wrap(mark, "mark");
      wrap(keyboard, "kbd");
      return currentContent;
    }
    function renderExpand(forceRender) {
      var _ellipsis$value3 = ellipsis.value, expandable = _ellipsis$value3.expandable, symbol = _ellipsis$value3.symbol;
      if (!expandable)
        return null;
      if (!forceRender && (state2.expanded || !state2.isEllipsis))
        return null;
      var expandContent = (slots.ellipsisSymbol ? slots.ellipsisSymbol() : symbol) || state2.expandStr;
      return createVNode("a", {
        "key": "expand",
        "class": "".concat(prefixCls2.value, "-expand"),
        "onClick": onExpandClick,
        "aria-label": state2.expandStr
      }, [expandContent]);
    }
    function renderEdit() {
      if (!props2.editable)
        return;
      var tooltip = props2.editable.tooltip;
      var icon = slots.editableIcon ? slots.editableIcon() : createVNode(EditOutlined$1, {
        "role": "button"
      }, null);
      var title2 = slots.editableTooltip ? slots.editableTooltip() : state2.editStr;
      var ariaLabel = typeof title2 === "string" ? title2 : "";
      return createVNode(Tooltip, {
        "key": "edit",
        "title": tooltip === false ? "" : title2
      }, {
        default: function _default8() {
          return [createVNode(TransButton$1, {
            "ref": editIcon,
            "class": "".concat(prefixCls2.value, "-edit"),
            "onClick": onEditClick,
            "aria-label": ariaLabel
          }, {
            default: function _default9() {
              return [icon];
            }
          })];
        }
      });
    }
    function renderCopy() {
      if (!props2.copyable)
        return;
      var tooltip = props2.copyable.tooltip;
      var defaultTitle2 = state2.copied ? state2.copiedStr : state2.copyStr;
      var title2 = slots.copyableTooltip ? slots.copyableTooltip({
        copied: state2.copied
      }) : defaultTitle2;
      var ariaLabel = typeof title2 === "string" ? title2 : "";
      var defaultIcon = state2.copied ? createVNode(CheckOutlined$1, null, null) : createVNode(CopyOutlined$1, null, null);
      var icon = slots.copyableIcon ? slots.copyableIcon({
        copied: !!state2.copied
      }) : defaultIcon;
      return createVNode(Tooltip, {
        "key": "copy",
        "title": tooltip === false ? "" : title2
      }, {
        default: function _default8() {
          return [createVNode(TransButton$1, {
            "class": ["".concat(prefixCls2.value, "-copy"), _defineProperty$U({}, "".concat(prefixCls2.value, "-copy-success"), state2.copied)],
            "onClick": onCopyClick,
            "aria-label": ariaLabel
          }, {
            default: function _default9() {
              return [icon];
            }
          })];
        }
      });
    }
    function renderEditInput() {
      var className = attrs.class, style3 = attrs.style;
      var _editable$value = editable.value, maxlength = _editable$value.maxlength, autoSize = _editable$value.autoSize, onEnd3 = _editable$value.onEnd;
      return createVNode(Editable$1, {
        "class": className,
        "style": style3,
        "prefixCls": prefixCls2.value,
        "value": props2.content,
        "originContent": state2.originContent,
        "maxlength": maxlength,
        "autoSize": autoSize,
        "onSave": onEditChange,
        "onChange": onContentChange,
        "onCancel": onEditCancel,
        "onEnd": onEnd3
      }, null);
    }
    function renderOperations(forceRenderExpanded) {
      return [renderExpand(forceRenderExpanded), renderEdit(), renderCopy()].filter(function(node) {
        return node;
      });
    }
    return function() {
      var _a;
      var editing = editable.value.editing;
      var _children = props2.ellipsis || props2.editable ? props2.content !== void 0 ? props2.content : (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots) : slots.default ? slots.default() : props2.content;
      if (editing) {
        return renderEditInput();
      }
      return createVNode(LocaleReceiver, {
        "componentName": "Text",
        "children": function children(locale2) {
          var _ref4;
          var _a2 = _extends$1(_extends$1({}, props2), attrs), type3 = _a2.type, disabled = _a2.disabled;
          _a2.content;
          var className = _a2.class, style3 = _a2.style, restProps = __rest$3(_a2, ["type", "disabled", "content", "class", "style"]);
          var _ellipsis$value4 = ellipsis.value, rows = _ellipsis$value4.rows, suffix = _ellipsis$value4.suffix, tooltip = _ellipsis$value4.tooltip;
          var edit = locale2.edit, copyStr = locale2.copy, copied = locale2.copied, expand = locale2.expand;
          state2.editStr = edit;
          state2.copyStr = copyStr;
          state2.copiedStr = copied;
          state2.expandStr = expand;
          var textProps = omit$2(restProps, ["prefixCls", "editable", "copyable", "ellipsis", "mark", "code", "delete", "underline", "strong", "keyboard"]);
          var cssEllipsis = canUseCSSEllipsis.value;
          var cssTextOverflow = rows === 1 && cssEllipsis;
          var cssLineClamp = rows && rows > 1 && cssEllipsis;
          var textNode = _children;
          var ariaLabel;
          if (rows && state2.isEllipsis && !state2.expanded && !cssEllipsis) {
            var _title = restProps.title;
            var restContent = _title || "";
            if (!_title && (typeof _children === "string" || typeof _children === "number")) {
              restContent = String(_children);
            }
            restContent = restContent === null || restContent === void 0 ? void 0 : restContent.slice(String(state2.ellipsisContent || "").length);
            textNode = createVNode(Fragment, null, [toRaw(state2.ellipsisContent), createVNode("span", {
              "title": restContent,
              "aria-hidden": "true"
            }, [ELLIPSIS_STR]), suffix]);
          } else {
            textNode = createVNode(Fragment, null, [_children, suffix]);
          }
          textNode = wrapperDecorations(props2, textNode);
          var showTooltip = tooltip && rows && state2.isEllipsis && !state2.expanded && !cssEllipsis;
          var title2 = slots.ellipsisTooltip ? slots.ellipsisTooltip() : tooltip;
          return createVNode(ResizeObserver, {
            "onResize": resizeOnNextFrame2,
            "disabled": !rows
          }, {
            default: function _default8() {
              return [createVNode(Typography$1, _objectSpread2$2({
                "ref": contentRef,
                "class": [(_ref4 = {}, _defineProperty$U(_ref4, "".concat(prefixCls2.value, "-").concat(type3), type3), _defineProperty$U(_ref4, "".concat(prefixCls2.value, "-disabled"), disabled), _defineProperty$U(_ref4, "".concat(prefixCls2.value, "-ellipsis"), rows), _defineProperty$U(_ref4, "".concat(prefixCls2.value, "-single-line"), rows === 1), _defineProperty$U(_ref4, "".concat(prefixCls2.value, "-ellipsis-single-line"), cssTextOverflow), _defineProperty$U(_ref4, "".concat(prefixCls2.value, "-ellipsis-multiple-line"), cssLineClamp), _ref4), className],
                "style": _extends$1(_extends$1({}, style3), {
                  WebkitLineClamp: cssLineClamp ? rows : void 0
                }),
                "aria-label": ariaLabel
              }, textProps), {
                default: function _default9() {
                  return [showTooltip ? createVNode(Tooltip, {
                    "title": tooltip === true ? _children : title2
                  }, {
                    default: function _default10() {
                      return [createVNode("span", null, [textNode])];
                    }
                  }) : textNode, renderOperations()];
                }
              })];
            }
          });
        }
      }, null);
    };
  }
});
var baseProps = function baseProps2() {
  return {
    editable: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]),
    copyable: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]),
    prefixCls: PropsTypes.string,
    component: PropsTypes.string,
    type: PropsTypes.oneOf(["secondary", "success", "danger", "warning"]),
    disabled: PropsTypes.looseBool,
    ellipsis: PropsTypes.oneOfType([PropsTypes.looseBool, PropsTypes.object]),
    code: PropsTypes.looseBool,
    mark: PropsTypes.looseBool,
    underline: PropsTypes.looseBool,
    delete: PropsTypes.looseBool,
    strong: PropsTypes.looseBool,
    keyboard: PropsTypes.looseBool,
    content: PropsTypes.string
  };
};
Base.props = baseProps();
var Base$1 = Base;
var __rest$2 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Link = function Link2(props2, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var _a = _extends$1(_extends$1({}, props2), attrs), ellipsis = _a.ellipsis, rel = _a.rel, restProps = __rest$2(_a, ["ellipsis", "rel"]);
  warning$4(_typeof$2(ellipsis) !== "object", "Typography.Link", "`ellipsis` only supports boolean value.");
  var mergedProps = _extends$1(_extends$1({}, restProps), {
    rel: rel === void 0 && restProps.target === "_blank" ? "noopener noreferrer" : rel,
    ellipsis: !!ellipsis,
    component: "a"
  });
  delete mergedProps.navigate;
  return createVNode(Base$1, mergedProps, slots);
};
Link.displayName = "ATypographyLink";
Link.inheritAttrs = false;
Link.props = omit$2(_extends$1(_extends$1({}, baseProps()), {
  ellipsis: PropsTypes.looseBool
}), ["component"]);
var Link$1 = Link;
var Paragraph = function Paragraph2(props2, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var paragraphProps = _extends$1(_extends$1(_extends$1({}, props2), {
    component: "div"
  }), attrs);
  return createVNode(Base$1, paragraphProps, slots);
};
Paragraph.displayName = "ATypographyParagraph";
Paragraph.inheritAttrs = false;
Paragraph.props = omit$2(baseProps(), ["component"]);
var Paragraph$1 = Paragraph;
var Text = function Text2(props2, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var ellipsis = props2.ellipsis;
  warning$4(_typeof$2(ellipsis) !== "object" || !ellipsis || !("expandable" in ellipsis) && !("rows" in ellipsis), "Typography.Text", "`ellipsis` do not support `expandable` or `rows` props.");
  var textProps = _extends$1(_extends$1(_extends$1({}, props2), {
    ellipsis: ellipsis && _typeof$2(ellipsis) === "object" ? omit$2(ellipsis, ["expandable", "rows"]) : ellipsis,
    component: "span"
  }), attrs);
  return createVNode(Base$1, textProps, slots);
};
Text.displayName = "ATypographyText";
Text.inheritAttrs = false;
Text.props = omit$2(baseProps(), ["component"]);
var Text$1 = Text;
var __rest$1 = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var TITLE_ELE_LIST = tupleNum(1, 2, 3, 4, 5);
var Title = function Title2(props2, _ref) {
  var slots = _ref.slots, attrs = _ref.attrs;
  var _props$level = props2.level, level2 = _props$level === void 0 ? 1 : _props$level, restProps = __rest$1(props2, ["level"]);
  var component;
  if (TITLE_ELE_LIST.indexOf(level2) !== -1) {
    component = "h".concat(level2);
  } else {
    warning$4(false, "Typography", "Title only accept `1 | 2 | 3 | 4 | 5` as `level` value.");
    component = "h1";
  }
  var titleProps = _extends$1(_extends$1(_extends$1({}, restProps), {
    component
  }), attrs);
  return createVNode(Base$1, titleProps, slots);
};
Title.displayName = "ATypographyTitle";
Title.inheritAttrs = false;
Title.props = omit$2(_extends$1(_extends$1({}, baseProps()), {
  level: PropsTypes.number
}), ["component", "strong"]);
var Title$1 = Title;
Typography$1.Text = Text$1;
Typography$1.Title = Title$1;
Typography$1.Paragraph = Paragraph$1;
Typography$1.Link = Link$1;
Typography$1.Base = Base$1;
Typography$1.install = function(app) {
  app.component(Typography$1.name, Typography$1);
  app.component(Typography$1.Text.displayName, Text$1);
  app.component(Typography$1.Title.displayName, Title$1);
  app.component(Typography$1.Paragraph.displayName, Paragraph$1);
  app.component(Typography$1.Link.displayName, Link$1);
  return app;
};
function uniqBy(array3, iteratee) {
  return array3 && array3.length ? baseUniq(array3, baseIteratee(iteratee)) : [];
}
function arrayAggregator(array3, setter, iteratee, accumulator) {
  var index2 = -1, length = array3 == null ? 0 : array3.length;
  while (++index2 < length) {
    var value26 = array3[index2];
    setter(accumulator, value26, iteratee(value26), array3);
  }
  return accumulator;
}
function baseForOwn(object3, iteratee) {
  return object3 && baseFor$1(object3, iteratee, keys);
}
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
    while (fromRight ? index2-- : ++index2 < length) {
      if (iteratee(iterable[index2], index2, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}
var baseEach = createBaseEach(baseForOwn);
var baseEach$1 = baseEach;
function baseAggregator(collection, setter, iteratee, accumulator) {
  baseEach$1(collection, function(value26, key2, collection2) {
    setter(accumulator, value26, iteratee(value26), collection2);
  });
  return accumulator;
}
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray$2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
    return func(collection, setter, baseIteratee(iteratee), accumulator);
  };
}
var partition = createAggregator(function(result, value26, key2) {
  result[key2 ? 0 : 1].push(value26);
}, function() {
  return [[], []];
});
var partition$1 = partition;
function getError(option, xhr2) {
  var msg = "cannot ".concat(option.method, " ").concat(option.action, " ").concat(xhr2.status, "'");
  var err = new Error(msg);
  err.status = xhr2.status;
  err.method = option.method;
  err.url = option.action;
  return err;
}
function getBody(xhr2) {
  var text = xhr2.responseText || xhr2.response;
  if (!text) {
    return text;
  }
  try {
    return JSON.parse(text);
  } catch (e2) {
    return text;
  }
}
function upload(option) {
  var xhr2 = new window.XMLHttpRequest();
  if (option.onProgress && xhr2.upload) {
    xhr2.upload.onprogress = function progress(e2) {
      if (e2.total > 0) {
        e2.percent = e2.loaded / e2.total * 100;
      }
      option.onProgress(e2);
    };
  }
  var formData = new window.FormData();
  if (option.data) {
    Object.keys(option.data).forEach(function(key2) {
      var value26 = option.data[key2];
      if (Array.isArray(value26)) {
        value26.forEach(function(item) {
          formData.append("".concat(key2, "[]"), item);
        });
        return;
      }
      formData.append(key2, option.data[key2]);
    });
  }
  formData.append(option.filename, option.file);
  xhr2.onerror = function error3(e2) {
    option.onError(e2);
  };
  xhr2.onload = function onload() {
    if (xhr2.status < 200 || xhr2.status >= 300) {
      return option.onError(getError(option, xhr2), getBody(xhr2));
    }
    option.onSuccess(getBody(xhr2), xhr2);
  };
  xhr2.open(option.method, option.action, true);
  if (option.withCredentials && "withCredentials" in xhr2) {
    xhr2.withCredentials = true;
  }
  var headers = option.headers || {};
  if (headers["X-Requested-With"] !== null) {
    xhr2.setRequestHeader("X-Requested-With", "XMLHttpRequest");
  }
  for (var h2 in headers) {
    if (headers.hasOwnProperty(h2) && headers[h2] !== null) {
      xhr2.setRequestHeader(h2, headers[h2]);
    }
  }
  xhr2.send(formData);
  return {
    abort: function abort4() {
      xhr2.abort();
    }
  };
}
var now = +new Date();
var index$k = 0;
function uid() {
  return "vc-upload-".concat(now, "-").concat(++index$k);
}
function endsWith(str, suffix) {
  return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
var attrAccept = function(file, acceptedFiles) {
  if (file && acceptedFiles) {
    var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
    var fileName = file.name || "";
    var mimeType = file.type || "";
    var baseMimeType = mimeType.replace(/\/.*$/, "");
    return acceptedFilesArray.some(function(type3) {
      var validType = type3.trim();
      if (validType.charAt(0) === ".") {
        return endsWith(fileName.toLowerCase(), validType.toLowerCase());
      } else if (/\/\*$/.test(validType)) {
        return baseMimeType === validType.replace(/\/.*$/, "");
      }
      return mimeType === validType;
    });
  }
  return true;
};
function loopFiles(item, callback) {
  var dirReader = item.createReader();
  var fileList2 = [];
  function sequence() {
    dirReader.readEntries(function(entries) {
      var entryList = Array.prototype.slice.apply(entries);
      fileList2 = fileList2.concat(entryList);
      var isFinished = !entryList.length;
      if (isFinished) {
        callback(fileList2);
      } else {
        sequence();
      }
    });
  }
  sequence();
}
var traverseFileTree = function traverseFileTree2(files2, callback, isAccepted) {
  var _traverseFileTree = function _traverseFileTree2(item, path2) {
    path2 = path2 || "";
    if (item.isFile) {
      item.file(function(file2) {
        if (isAccepted(file2)) {
          if (item.fullPath && !file2.webkitRelativePath) {
            Object.defineProperties(file2, {
              webkitRelativePath: {
                writable: true
              }
            });
            file2.webkitRelativePath = item.fullPath.replace(/^\//, "");
            Object.defineProperties(file2, {
              webkitRelativePath: {
                writable: false
              }
            });
          }
          callback([file2]);
        }
      });
    } else if (item.isDirectory) {
      loopFiles(item, function(entries) {
        entries.forEach(function(entryItem) {
          _traverseFileTree2(entryItem, "".concat(path2).concat(item.name, "/"));
        });
      });
    }
  };
  var _iterator = _createForOfIteratorHelper(files2), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var file = _step.value;
      _traverseFileTree(file.webkitGetAsEntry());
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};
var traverseFileTree$1 = traverseFileTree;
var upLoadPropTypes = {
  componentTag: PropsTypes.string,
  prefixCls: PropsTypes.string,
  name: PropsTypes.string,
  multiple: PropsTypes.looseBool,
  directory: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  accept: PropsTypes.string,
  data: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
  action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
  headers: PropsTypes.object,
  beforeUpload: PropsTypes.func,
  customRequest: PropsTypes.func,
  withCredentials: PropsTypes.looseBool,
  openFileDialogOnClick: PropsTypes.looseBool,
  transformFile: PropsTypes.func,
  method: PropsTypes.string
};
var AjaxUploader = {
  inheritAttrs: false,
  name: "ajaxUploader",
  mixins: [BaseMixin],
  props: upLoadPropTypes,
  data: function data76() {
    this.reqs = {};
    return {
      uid: uid()
    };
  },
  mounted: function mounted42() {
    this._isMounted = true;
  },
  beforeUnmount: function beforeUnmount30() {
    this._isMounted = false;
    this.abort();
  },
  methods: {
    onChange: function onChange7(e2) {
      var files2 = e2.target.files;
      this.uploadFiles(files2);
      this.reset();
    },
    onClick: function onClick6() {
      var el = this.$refs.fileInputRef;
      if (!el) {
        return;
      }
      el.click();
    },
    onKeyDown: function onKeyDown13(e2) {
      if (e2.key === "Enter") {
        this.onClick();
      }
    },
    onFileDrop: function onFileDrop(e2) {
      var _this = this;
      var multiple = this.$props.multiple;
      e2.preventDefault();
      if (e2.type === "dragover") {
        return;
      }
      if (this.directory) {
        traverseFileTree$1(e2.dataTransfer.items, this.uploadFiles, function(_file) {
          return attrAccept(_file, _this.accept);
        });
      } else {
        var files2 = partition$1(Array.prototype.slice.call(e2.dataTransfer.files), function(file) {
          return attrAccept(file, _this.accept);
        });
        var successFiles = files2[0];
        var errorFiles = files2[1];
        if (multiple === false) {
          successFiles = successFiles.slice(0, 1);
        }
        this.uploadFiles(successFiles);
        if (errorFiles.length) {
          this.__emit("reject", errorFiles);
        }
      }
    },
    uploadFiles: function uploadFiles(files2) {
      var _this2 = this;
      var postFiles = Array.prototype.slice.call(files2);
      postFiles.map(function(file) {
        file.uid = uid();
        return file;
      }).forEach(function(file) {
        _this2.upload(file, postFiles);
      });
    },
    upload: function upload2(file, fileList2) {
      var _this3 = this;
      if (!this.beforeUpload) {
        return setTimeout(function() {
          return _this3.post(file);
        }, 0);
      }
      var before = this.beforeUpload(file, fileList2);
      if (before && before.then) {
        before.then(function(processedFile) {
          var processedFileType = Object.prototype.toString.call(processedFile);
          if (processedFileType === "[object File]" || processedFileType === "[object Blob]") {
            return _this3.post(processedFile);
          }
          return _this3.post(file);
        }).catch(function(e2) {
          console && console.log(e2);
        });
      } else if (before !== false) {
        setTimeout(function() {
          return _this3.post(file);
        }, 0);
      }
    },
    post: function post(file) {
      var _this4 = this;
      if (!this._isMounted) {
        return;
      }
      var props2 = this.$props;
      var data80 = props2.data;
      var _props$transformFile = props2.transformFile, transformFile = _props$transformFile === void 0 ? function(originFile) {
        return originFile;
      } : _props$transformFile;
      new Promise(function(resolve2) {
        var action = _this4.action;
        if (typeof action === "function") {
          return resolve2(action(file));
        }
        resolve2(action);
      }).then(function(action) {
        var uid2 = file.uid;
        var request2 = _this4.customRequest || upload;
        var transform = Promise.resolve(transformFile(file)).catch(function(e2) {
          console.error(e2);
        });
        transform.then(function(transformedFile) {
          if (typeof data80 === "function") {
            data80 = data80(file);
          }
          var requestOption = {
            action,
            filename: _this4.name,
            data: data80,
            file: transformedFile,
            headers: _this4.headers,
            withCredentials: _this4.withCredentials,
            method: props2.method || "post",
            onProgress: function onProgress2(e2) {
              _this4.__emit("progress", e2, file);
            },
            onSuccess: function onSuccess2(ret, xhr2) {
              delete _this4.reqs[uid2];
              _this4.__emit("success", ret, file, xhr2);
            },
            onError: function onError2(err, ret) {
              delete _this4.reqs[uid2];
              _this4.__emit("error", err, ret, file);
            }
          };
          _this4.reqs[uid2] = request2(requestOption);
          _this4.__emit("start", file);
        });
      });
    },
    reset: function reset2() {
      this.setState({
        uid: uid()
      });
    },
    abort: function abort(file) {
      var reqs = this.reqs;
      if (file) {
        var uid2 = file;
        if (file && file.uid) {
          uid2 = file.uid;
        }
        if (reqs[uid2] && reqs[uid2].abort) {
          reqs[uid2].abort();
        }
        delete reqs[uid2];
      } else {
        Object.keys(reqs).forEach(function(uid3) {
          if (reqs[uid3] && reqs[uid3].abort) {
            reqs[uid3].abort();
          }
          delete reqs[uid3];
        });
      }
    }
  },
  render: function render159() {
    var _classNames, _this5 = this;
    var $props = this.$props, $attrs = this.$attrs;
    var Tag2 = $props.componentTag, prefixCls2 = $props.prefixCls, disabled = $props.disabled, multiple = $props.multiple, accept = $props.accept, directory = $props.directory, openFileDialogOnClick = $props.openFileDialogOnClick;
    var className = $attrs.class, style3 = $attrs.style, id2 = $attrs.id;
    var cls = classNames((_classNames = {}, _defineProperty$U(_classNames, prefixCls2, true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty$U(_classNames, className, className), _classNames));
    var events = disabled ? {} : {
      onClick: openFileDialogOnClick ? this.onClick : function() {
      },
      onKeydown: openFileDialogOnClick ? this.onKeyDown : function() {
      },
      onDrop: this.onFileDrop,
      onDragover: this.onFileDrop
    };
    var tagProps2 = _extends$1(_extends$1({}, events), {
      role: "button",
      tabindex: disabled ? null : "0",
      class: cls,
      style: style3
    });
    return createVNode(Tag2, tagProps2, {
      default: function _default8() {
        return [createVNode("input", {
          "id": id2,
          "type": "file",
          "ref": "fileInputRef",
          "onClick": function onClick7(e2) {
            return e2.stopPropagation();
          },
          "key": _this5.uid,
          "style": {
            display: "none"
          },
          "accept": accept,
          "directory": directory ? "directory" : null,
          "webkitdirectory": directory ? "webkitdirectory" : null,
          "multiple": multiple,
          "onChange": _this5.onChange
        }, null), getSlot(_this5)];
      }
    });
  }
};
var AjaxUpload = AjaxUploader;
var IFRAME_STYLE = {
  position: "absolute",
  top: 0,
  opacity: 0,
  filter: "alpha(opacity=0)",
  left: 0,
  zIndex: 9999
};
var IframeUploader = {
  name: "IframeUploader",
  mixins: [BaseMixin],
  props: {
    componentTag: PropsTypes.string,
    disabled: PropsTypes.looseBool,
    prefixCls: PropsTypes.string,
    accept: PropsTypes.string,
    multiple: PropsTypes.looseBool,
    data: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
    action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
    name: PropsTypes.string
  },
  data: function data77() {
    this.file = {};
    return {
      uploading: false
    };
  },
  methods: {
    onLoad: function onLoad2() {
      if (!this.uploading) {
        return;
      }
      var file = this.file;
      var response;
      try {
        var doc2 = this.getIframeDocument();
        var script = doc2.getElementsByTagName("script")[0];
        if (script && script.parentNode === doc2.body) {
          doc2.body.removeChild(script);
        }
        response = doc2.body.innerHTML;
        this.__emit("success", response, file);
      } catch (err) {
        warning$4(false, "cross domain error for Upload. Maybe server should return document.domain script. see Note from https://github.com/react-component/upload");
        response = "cross-domain";
        this.__emit("error", err, null, file);
      }
      this.endUpload();
    },
    onChange: function onChange8() {
      var _this = this;
      var target = this.getFormInputNode();
      var file = this.file = {
        uid: uid(),
        name: target.value && target.value.substring(target.value.lastIndexOf("\\") + 1, target.value.length)
      };
      this.startUpload();
      var props2 = this.$props;
      if (!props2.beforeUpload) {
        return this.post(file);
      }
      var before = props2.beforeUpload(file);
      if (before && before.then) {
        before.then(function() {
          _this.post(file);
        }, function() {
          _this.endUpload();
        });
      } else if (before !== false) {
        this.post(file);
      } else {
        this.endUpload();
      }
    },
    getIframeNode: function getIframeNode() {
      return this.$refs.iframeRef;
    },
    getIframeDocument: function getIframeDocument() {
      return this.getIframeNode().contentDocument;
    },
    getFormNode: function getFormNode() {
      return this.getIframeDocument().getElementById("form");
    },
    getFormInputNode: function getFormInputNode() {
      return this.getIframeDocument().getElementById("input");
    },
    getFormDataNode: function getFormDataNode() {
      return this.getIframeDocument().getElementById("data");
    },
    getFileForMultiple: function getFileForMultiple(file) {
      return this.multiple ? [file] : file;
    },
    getIframeHTML: function getIframeHTML(domain) {
      var domainScript = "";
      var domainInput = "";
      if (domain) {
        var script = "script";
        domainScript = "<".concat(script, '>document.domain="').concat(domain, '";</').concat(script, ">");
        domainInput = '<input name="_documentDomain" value="'.concat(domain, '" />');
      }
      return '\n      <!DOCTYPE html>\n      <html>\n      <head>\n      <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n      <style>\n      body,html {padding:0;margin:0;border:0;overflow:hidden;}\n      </style>\n      '.concat(domainScript, '\n      </head>\n      <body>\n      <form method="post"\n      encType="multipart/form-data"\n      action="" id="form"\n      style="display:block;height:9999px;position:relative;overflow:hidden;">\n      <input id="input" type="file"\n       name="').concat(this.name, '"\n       style="position:absolute;top:0;right:0;height:9999px;font-size:9999px;cursor:pointer;"/>\n      ').concat(domainInput, '\n      <span id="data"></span>\n      </form>\n      </body>\n      </html>\n      ');
    },
    initIframeSrc: function initIframeSrc() {
      if (this.domain) {
        this.getIframeNode().src = "javascript:void((function(){\n          var d = document;\n          d.open();\n          d.domain='".concat(this.domain, "';\n          d.write('');\n          d.close();\n        })())");
      }
    },
    initIframe: function initIframe() {
      var iframeNode = this.getIframeNode();
      var win = iframeNode.contentWindow;
      var doc2;
      this.domain = this.domain || "";
      this.initIframeSrc();
      try {
        doc2 = win.document;
      } catch (e2) {
        this.domain = document.domain;
        this.initIframeSrc();
        win = iframeNode.contentWindow;
        doc2 = win.document;
      }
      doc2.open("text/html", "replace");
      doc2.write(this.getIframeHTML(this.domain));
      doc2.close();
      this.getFormInputNode().onchange = this.onChange;
    },
    endUpload: function endUpload() {
      if (this.uploading) {
        this.file = {};
        this.uploading = false;
        this.setState({
          uploading: false
        });
        this.initIframe();
      }
    },
    startUpload: function startUpload() {
      if (!this.uploading) {
        this.uploading = true;
        this.setState({
          uploading: true
        });
      }
    },
    updateIframeWH: function updateIframeWH() {
      var rootNode = findDOMNode(this);
      var iframeNode = this.getIframeNode();
      iframeNode.style.height = "".concat(rootNode.offsetHeight, "px");
      iframeNode.style.width = "".concat(rootNode.offsetWidth, "px");
    },
    abort: function abort2(file) {
      if (file) {
        var uid2 = file;
        if (file && file.uid) {
          uid2 = file.uid;
        }
        if (uid2 === this.file.uid) {
          this.endUpload();
        }
      } else {
        this.endUpload();
      }
    },
    post: function post2(file) {
      var _this2 = this;
      var formNode = this.getFormNode();
      var dataSpan = this.getFormDataNode();
      var data80 = this.$props.data;
      if (typeof data80 === "function") {
        data80 = data80(file);
      }
      var inputs = document.createDocumentFragment();
      for (var key2 in data80) {
        if (data80.hasOwnProperty(key2)) {
          var input = document.createElement("input");
          input.setAttribute("name", key2);
          input.value = data80[key2];
          inputs.appendChild(input);
        }
      }
      dataSpan.appendChild(inputs);
      new Promise(function(resolve2) {
        var action = _this2.action;
        if (typeof action === "function") {
          return resolve2(action(file));
        }
        resolve2(action);
      }).then(function(action) {
        formNode.setAttribute("action", action);
        formNode.submit();
        dataSpan.innerHTML = "";
        _this2.__emit("start", file);
      });
    }
  },
  mounted: function mounted43() {
    var _this3 = this;
    this.$nextTick(function() {
      _this3.updateIframeWH();
      _this3.initIframe();
    });
  },
  updated: function updated26() {
    var _this4 = this;
    this.$nextTick(function() {
      _this4.updateIframeWH();
    });
  },
  render: function render160() {
    var _classNames, _this5 = this;
    var _this$$props = this.$props, Tag2 = _this$$props.componentTag, disabled = _this$$props.disabled, prefixCls2 = _this$$props.prefixCls;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    var iframeStyle = _extends$1(_extends$1({}, IFRAME_STYLE), {
      display: this.uploading || disabled ? "none" : ""
    });
    var cls = classNames((_classNames = {}, _defineProperty$U(_classNames, prefixCls2, true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _defineProperty$U(_classNames, className, className), _classNames));
    return createVNode(Tag2, {
      "class": cls,
      "style": _extends$1({
        position: "relative",
        zIndex: 0
      }, style3)
    }, {
      default: function _default8() {
        return [createVNode("iframe", {
          "ref": "iframeRef",
          "onLoad": _this5.onLoad,
          "style": iframeStyle
        }, null), getSlot(_this5)];
      }
    });
  }
};
var IframeUpload = IframeUploader;
function empty() {
}
var uploadProps = {
  componentTag: PropsTypes.string,
  prefixCls: PropsTypes.string,
  action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
  name: PropsTypes.string,
  multipart: PropsTypes.looseBool,
  directory: PropsTypes.looseBool,
  onError: PropsTypes.func,
  onSuccess: PropsTypes.func,
  onProgress: PropsTypes.func,
  onStart: PropsTypes.func,
  data: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
  headers: PropsTypes.object,
  accept: PropsTypes.string,
  multiple: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  beforeUpload: PropsTypes.func,
  customRequest: PropsTypes.func,
  onReady: PropsTypes.func,
  withCredentials: PropsTypes.looseBool,
  supportServerRender: PropsTypes.looseBool,
  openFileDialogOnClick: PropsTypes.looseBool,
  method: PropsTypes.string
};
var Upload$1 = defineComponent({
  name: "Upload",
  mixins: [BaseMixin],
  inheritAttrs: false,
  props: initDefaultProps$2(uploadProps, {
    componentTag: "span",
    prefixCls: "rc-upload",
    data: {},
    headers: {},
    name: "file",
    multipart: false,
    onReady: empty,
    onStart: empty,
    onError: empty,
    onSuccess: empty,
    supportServerRender: false,
    multiple: false,
    beforeUpload: empty,
    withCredentials: false,
    openFileDialogOnClick: true
  }),
  data: function data78() {
    this.Component = null;
    return {};
  },
  mounted: function mounted44() {
    var _this = this;
    this.$nextTick(function() {
      if (_this.supportServerRender) {
        _this.Component = _this.getComponent();
        _this.$forceUpdate();
        nextTick(function() {
          _this.__emit("ready");
        });
      }
    });
  },
  methods: {
    getComponent: function getComponent3() {
      return typeof File !== "undefined" ? AjaxUpload : IframeUpload;
    },
    abort: function abort3(file) {
      this.$refs.uploaderRef.abort(file);
    }
  },
  render: function render161() {
    var _this2 = this;
    var componentProps = _extends$1(_extends$1(_extends$1({}, this.$props), {
      ref: "uploaderRef"
    }), this.$attrs);
    if (this.supportServerRender) {
      var _ComponentUploader = this.Component;
      if (_ComponentUploader) {
        return createVNode(_ComponentUploader, componentProps, {
          default: function _default8() {
            return [getSlot(_this2)];
          }
        });
      }
      return null;
    }
    var ComponentUploader = this.getComponent();
    return createVNode(ComponentUploader, componentProps, {
      default: function _default8() {
        return [getSlot(_this2)];
      }
    });
  }
});
PropsTypes.oneOf(tuple("error", "success", "done", "uploading", "removed"));
function UploadFile(_ref) {
  var uid2 = _ref.uid, name2 = _ref.name;
  if (!uid2 && uid2 !== 0)
    return false;
  if (!["string", "number"].includes(_typeof$2(uid2)))
    return false;
  if (name2 === "" || typeof name2 !== "string")
    return false;
  return true;
}
({
  file: PropsTypes.custom(UploadFile),
  fileList: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  event: PropsTypes.object
});
var ShowUploadListInterface = PropsTypes.shape({
  showRemoveIcon: PropsTypes.looseBool,
  showPreviewIcon: PropsTypes.looseBool
}).loose;
var UploadLocale = PropsTypes.shape({
  uploading: PropsTypes.string,
  removeFile: PropsTypes.string,
  downloadFile: PropsTypes.string,
  uploadError: PropsTypes.string,
  previewFile: PropsTypes.string
}).loose;
var UploadProps = {
  type: PropsTypes.oneOf(tuple("drag", "select")),
  name: PropsTypes.string,
  defaultFileList: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  fileList: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  action: PropsTypes.oneOfType([PropsTypes.string, PropsTypes.func]),
  directory: PropsTypes.looseBool,
  data: PropsTypes.oneOfType([PropsTypes.object, PropsTypes.func]),
  method: PropsTypes.oneOf(tuple("POST", "PUT", "PATCH", "post", "put", "patch")),
  headers: PropsTypes.object,
  showUploadList: PropsTypes.oneOfType([PropsTypes.looseBool, ShowUploadListInterface]),
  multiple: PropsTypes.looseBool,
  accept: PropsTypes.string,
  beforeUpload: PropsTypes.func,
  listType: PropsTypes.oneOf(tuple("text", "picture", "picture-card")),
  remove: PropsTypes.func,
  supportServerRender: PropsTypes.looseBool,
  disabled: PropsTypes.looseBool,
  prefixCls: PropsTypes.string,
  customRequest: PropsTypes.func,
  withCredentials: PropsTypes.looseBool,
  openFileDialogOnClick: PropsTypes.looseBool,
  locale: UploadLocale,
  height: PropsTypes.number,
  id: PropsTypes.string,
  previewFile: PropsTypes.func,
  transformFile: PropsTypes.func,
  onChange: PropsTypes.func,
  onPreview: PropsTypes.func,
  onRemove: PropsTypes.func,
  onDownload: PropsTypes.func,
  "onUpdate:fileList": PropsTypes.func
};
({
  fileList: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  dragState: PropsTypes.string
});
var UploadListProps = {
  listType: PropsTypes.oneOf(tuple("text", "picture", "picture-card")),
  items: PropsTypes.arrayOf(PropsTypes.custom(UploadFile)),
  progressAttr: PropsTypes.object,
  prefixCls: PropsTypes.string,
  showRemoveIcon: PropsTypes.looseBool,
  showDownloadIcon: PropsTypes.looseBool,
  showPreviewIcon: PropsTypes.looseBool,
  locale: UploadLocale,
  previewFile: PropsTypes.func,
  onPreview: PropsTypes.func,
  onRemove: PropsTypes.func,
  onDownload: PropsTypes.func
};
var __rest = globalThis && globalThis.__rest || function(s2, e2) {
  var t2 = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var Dragger = defineComponent({
  name: "AUploadDragger",
  inheritAttrs: false,
  props: UploadProps,
  render: function render162() {
    var _this = this;
    var props2 = getOptionProps(this);
    var height = props2.height, restProps = __rest(props2, ["height"]);
    var _a = this.$attrs, style3 = _a.style, restAttrs = __rest(_a, ["style"]);
    var draggerProps = _extends$1(_extends$1(_extends$1({}, restProps), restAttrs), {
      type: "drag",
      style: _extends$1(_extends$1({}, style3), {
        height
      })
    });
    return createVNode(Upload, draggerProps, {
      default: function _default8() {
        return [getSlot(_this)];
      }
    });
  }
});
function T() {
  return true;
}
function fileToObject(file) {
  return _extends$1(_extends$1({}, file), {
    lastModified: file.lastModified,
    lastModifiedDate: file.lastModifiedDate,
    name: file.name,
    size: file.size,
    type: file.type,
    uid: file.uid,
    percent: 0,
    originFileObj: file
  });
}
function genPercentAdd() {
  var k2 = 0.1;
  var i2 = 0.01;
  var end = 0.98;
  return function(s2) {
    var start = s2;
    if (start >= end) {
      return start;
    }
    start += k2;
    k2 = k2 - i2;
    if (k2 < 1e-3) {
      k2 = 1e-3;
    }
    return start;
  };
}
function getFileItem(file, fileList2) {
  var matchKey = file.uid !== void 0 ? "uid" : "name";
  return fileList2.filter(function(item) {
    return item[matchKey] === file[matchKey];
  })[0];
}
function removeFileItem(file, fileList2) {
  var matchKey = file.uid !== void 0 ? "uid" : "name";
  var removed = fileList2.filter(function(item) {
    return item[matchKey] !== file[matchKey];
  });
  if (removed.length === fileList2.length) {
    return null;
  }
  return removed;
}
var extname = function extname2() {
  var url2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var temp = url2.split("/");
  var filename = temp[temp.length - 1];
  var filenameWithoutSuffix = filename.split(/#|\?/)[0];
  return (/\.[^./\\]*$/.exec(filenameWithoutSuffix) || [""])[0];
};
var isImageFileType = function isImageFileType2(type3) {
  return !!type3 && type3.indexOf("image/") === 0;
};
var isImageUrl = function isImageUrl2(file) {
  if (isImageFileType(file.type)) {
    return true;
  }
  var url2 = file.thumbUrl || file.url;
  var extension = extname(url2);
  if (/^data:image\//.test(url2) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico)$/i.test(extension)) {
    return true;
  }
  if (/^data:/.test(url2)) {
    return false;
  }
  if (extension) {
    return false;
  }
  return true;
};
var MEASURE_SIZE = 200;
function previewImage(file) {
  return new Promise(function(resolve2) {
    if (!isImageFileType(file.type)) {
      resolve2("");
      return;
    }
    var canvas = document.createElement("canvas");
    canvas.width = MEASURE_SIZE;
    canvas.height = MEASURE_SIZE;
    canvas.style.cssText = "position: fixed; left: 0; top: 0; width: ".concat(MEASURE_SIZE, "px; height: ").concat(MEASURE_SIZE, "px; z-index: 9999; display: none;");
    document.body.appendChild(canvas);
    var ctx = canvas.getContext("2d");
    var img = new Image();
    img.onload = function() {
      var width = img.width, height = img.height;
      var drawWidth = MEASURE_SIZE;
      var drawHeight = MEASURE_SIZE;
      var offsetX = 0;
      var offsetY = 0;
      if (width < height) {
        drawHeight = height * (MEASURE_SIZE / width);
        offsetY = -(drawHeight - drawWidth) / 2;
      } else {
        drawWidth = width * (MEASURE_SIZE / height);
        offsetX = -(drawWidth - drawHeight) / 2;
      }
      ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
      var dataURL = canvas.toDataURL();
      document.body.removeChild(canvas);
      resolve2(dataURL);
    };
    img.src = window.URL.createObjectURL(file);
  });
}
var PaperClipOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M779.3 196.6c-94.2-94.2-247.6-94.2-341.7 0l-261 260.8c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l261-260.8c32.4-32.4 75.5-50.2 121.3-50.2s88.9 17.8 121.2 50.2c32.4 32.4 50.2 75.5 50.2 121.2 0 45.8-17.8 88.8-50.2 121.2l-266 265.9-43.1 43.1c-40.3 40.3-105.8 40.3-146.1 0-19.5-19.5-30.2-45.4-30.2-73s10.7-53.5 30.2-73l263.9-263.8c6.7-6.6 15.5-10.3 24.9-10.3h.1c9.4 0 18.1 3.7 24.7 10.3 6.7 6.7 10.3 15.5 10.3 24.9 0 9.3-3.7 18.1-10.3 24.7L372.4 653c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l215.6-215.6c19.9-19.9 30.8-46.3 30.8-74.4s-11-54.6-30.8-74.4c-41.1-41.1-107.9-41-149 0L463 364 224.8 602.1A172.22 172.22 0 00174 724.8c0 46.3 18.1 89.8 50.8 122.5 33.9 33.8 78.3 50.7 122.7 50.7 44.4 0 88.8-16.9 122.6-50.7l309.2-309C824.8 492.7 850 432 850 367.5c.1-64.6-25.1-125.3-70.7-170.9z" } }] }, "name": "paper-clip", "theme": "outlined" };
var PaperClipOutlinedSvg = PaperClipOutlined$2;
function _objectSpread$3(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$3(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$3(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var PaperClipOutlined = function PaperClipOutlined2(props2, context2) {
  var p2 = _objectSpread$3({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": PaperClipOutlinedSvg
  }), null);
};
PaperClipOutlined.displayName = "PaperClipOutlined";
PaperClipOutlined.inheritAttrs = false;
var PaperClipOutlined$1 = PaperClipOutlined;
var PictureTwoTone$2 = { "icon": function render163(primaryColor, secondaryColor) {
  return { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2z", "fill": primaryColor } }, { "tag": "path", "attrs": { "d": "M424.6 765.8l-150.1-178L136 752.1V792h752v-30.4L658.1 489z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M136 652.7l132.4-157c3.2-3.8 9-3.8 12.2 0l144 170.7L652 396.8c3.2-3.8 9-3.8 12.2 0L888 662.2V232H136v420.7zM304 280a88 88 0 110 176 88 88 0 010-176z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M276 368a28 28 0 1056 0 28 28 0 10-56 0z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z", "fill": primaryColor } }] };
}, "name": "picture", "theme": "twotone" };
var PictureTwoToneSvg = PictureTwoTone$2;
function _objectSpread$2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$2(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$2(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var PictureTwoTone = function PictureTwoTone2(props2, context2) {
  var p2 = _objectSpread$2({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": PictureTwoToneSvg
  }), null);
};
PictureTwoTone.displayName = "PictureTwoTone";
PictureTwoTone.inheritAttrs = false;
var PictureTwoTone$1 = PictureTwoTone;
var DeleteOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z" } }] }, "name": "delete", "theme": "outlined" };
var DeleteOutlinedSvg = DeleteOutlined$2;
function _objectSpread$1(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$1(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty$1(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var DeleteOutlined = function DeleteOutlined2(props2, context2) {
  var p2 = _objectSpread$1({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": DeleteOutlinedSvg
  }), null);
};
DeleteOutlined.displayName = "DeleteOutlined";
DeleteOutlined.inheritAttrs = false;
var DeleteOutlined$1 = DeleteOutlined;
var DownloadOutlined$2 = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M505.7 661a8 8 0 0012.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z" } }] }, "name": "download", "theme": "outlined" };
var DownloadOutlinedSvg = DownloadOutlined$2;
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? Object(arguments[i2]) : {};
    var ownKeys2 = Object.keys(source2);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source2).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source2, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty(target, key2, source2[key2]);
    });
  }
  return target;
}
function _defineProperty(obj, key2, value26) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value26, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value26;
  }
  return obj;
}
var DownloadOutlined = function DownloadOutlined2(props2, context2) {
  var p2 = _objectSpread({}, props2, context2.attrs);
  return createVNode(AntdIcon, mergeProps$1(p2, {
    "icon": DownloadOutlinedSvg
  }), null);
};
DownloadOutlined.displayName = "DownloadOutlined";
DownloadOutlined.inheritAttrs = false;
var DownloadOutlined$1 = DownloadOutlined;
var UploadList = defineComponent({
  name: "AUploadList",
  mixins: [BaseMixin],
  props: initDefaultProps$2(UploadListProps, {
    listType: "text",
    progressAttr: {
      strokeWidth: 2,
      showInfo: false
    },
    showRemoveIcon: true,
    showDownloadIcon: false,
    showPreviewIcon: true,
    previewFile: previewImage
  }),
  setup: function setup159() {
    return {
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  updated: function updated27() {
    var _this = this;
    nextTick(function() {
      var _this$$props = _this.$props, listType = _this$$props.listType, items = _this$$props.items, previewFile = _this$$props.previewFile;
      if (listType !== "picture" && listType !== "picture-card") {
        return;
      }
      (items || []).forEach(function(file) {
        if (typeof document === "undefined" || typeof window === "undefined" || !window.FileReader || !window.File || !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) || file.thumbUrl !== void 0) {
          return;
        }
        file.thumbUrl = "";
        if (previewFile) {
          previewFile(file.originFileObj).then(function(previewDataUrl) {
            file.thumbUrl = previewDataUrl || "";
            _this.$forceUpdate();
          });
        }
      });
    });
  },
  methods: {
    handlePreview: function handlePreview(file, e2) {
      var onPreview = this.$props.onPreview;
      if (!onPreview) {
        return;
      }
      e2.preventDefault();
      return this.$emit("preview", file);
    },
    handleDownload: function handleDownload(file) {
      var onDownload = this.$props.onDownload;
      if (typeof onDownload === "function") {
        this.$emit("download", file);
      } else if (file.url) {
        window.open(file.url);
      }
    },
    handleClose: function handleClose(file) {
      this.$emit("remove", file);
    }
  },
  render: function render164() {
    var _this2 = this, _classNames4;
    var _getOptionProps = getOptionProps(this), customizePrefixCls = _getOptionProps.prefixCls, _getOptionProps$items = _getOptionProps.items, items = _getOptionProps$items === void 0 ? [] : _getOptionProps$items, listType = _getOptionProps.listType, showPreviewIcon = _getOptionProps.showPreviewIcon, showRemoveIcon = _getOptionProps.showRemoveIcon, showDownloadIcon = _getOptionProps.showDownloadIcon, locale2 = _getOptionProps.locale, progressAttr = _getOptionProps.progressAttr;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("upload", customizePrefixCls);
    var list = items.map(function(file) {
      var _classNames, _classNames2;
      var progress;
      var icon = file.status === "uploading" ? createVNode(LoadingOutlined$1, null, null) : createVNode(PaperClipOutlined$1, null, null);
      if (listType === "picture" || listType === "picture-card") {
        if (listType === "picture-card" && file.status === "uploading") {
          icon = createVNode("div", {
            "class": "".concat(prefixCls2, "-list-item-uploading-text")
          }, [locale2.uploading]);
        } else if (!file.thumbUrl && !file.url) {
          icon = createVNode(PictureTwoTone$1, {
            "class": "".concat(prefixCls2, "-list-item-thumbnail")
          }, null);
        } else {
          var thumbnail = isImageUrl(file) ? createVNode("img", {
            "src": file.thumbUrl || file.url,
            "alt": file.name,
            "class": "".concat(prefixCls2, "-list-item-image")
          }, null) : createVNode(FileTwoTone, {
            "class": "".concat(prefixCls2, "-list-item-icon")
          }, null);
          icon = createVNode("a", {
            "class": "".concat(prefixCls2, "-list-item-thumbnail"),
            "onClick": function onClick7(e2) {
              return _this2.handlePreview(file, e2);
            },
            "href": file.url || file.thumbUrl,
            "target": "_blank",
            "rel": "noopener noreferrer"
          }, [thumbnail]);
        }
      }
      if (file.status === "uploading") {
        var progressProps = _extends$1(_extends$1({}, progressAttr), {
          type: "line",
          percent: file.percent
        });
        var loadingProgress = "percent" in file ? createVNode(Progress, progressProps, null) : null;
        progress = createVNode("div", {
          "class": "".concat(prefixCls2, "-list-item-progress"),
          "key": "progress"
        }, [loadingProgress]);
      }
      var infoUploadingClass = classNames((_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-list-item"), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-list-item-").concat(file.status), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-list-item-list-type-").concat(listType), true), _classNames));
      var linkProps = typeof file.linkProps === "string" ? JSON.parse(file.linkProps) : file.linkProps;
      var removeIcon = showRemoveIcon ? createVNode(DeleteOutlined$1, {
        "title": locale2.removeFile,
        "onClick": function onClick7() {
          return _this2.handleClose(file);
        }
      }, null) : null;
      var downloadIcon = showDownloadIcon && file.status === "done" ? createVNode(DownloadOutlined$1, {
        "title": locale2.downloadFile,
        "onClick": function onClick7() {
          return _this2.handleDownload(file);
        }
      }, null) : null;
      var downloadOrDelete = listType !== "picture-card" && createVNode("span", {
        "key": "download-delete",
        "class": "".concat(prefixCls2, "-list-item-card-actions ").concat(listType === "picture" ? "picture" : "")
      }, [downloadIcon && createVNode("a", {
        "title": locale2.downloadFile
      }, [downloadIcon]), removeIcon && createVNode("a", {
        "title": locale2.removeFile
      }, [removeIcon])]);
      var listItemNameClass = classNames((_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(prefixCls2, "-list-item-name"), true), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-list-item-name-icon-count-").concat([downloadIcon, removeIcon].filter(function(x2) {
        return x2;
      }).length), true), _classNames2));
      var preview = file.url ? [createVNode("a", _objectSpread2$2(_objectSpread2$2({
        "target": "_blank",
        "rel": "noopener noreferrer",
        "class": listItemNameClass,
        "title": file.name
      }, linkProps), {}, {
        "href": file.url,
        "onClick": function onClick7(e2) {
          return _this2.handlePreview(file, e2);
        }
      }), [file.name]), downloadOrDelete] : [createVNode("span", {
        "key": "view",
        "class": "".concat(prefixCls2, "-list-item-name"),
        "onClick": function onClick7(e2) {
          return _this2.handlePreview(file, e2);
        },
        "title": file.name
      }, [file.name]), downloadOrDelete];
      var style3 = file.url || file.thumbUrl ? void 0 : {
        pointerEvents: "none",
        opacity: 0.5
      };
      var previewIcon = showPreviewIcon ? createVNode("a", {
        "href": file.url || file.thumbUrl,
        "target": "_blank",
        "rel": "noopener noreferrer",
        "style": style3,
        "onClick": function onClick7(e2) {
          return _this2.handlePreview(file, e2);
        },
        "title": locale2.previewFile
      }, [createVNode(EyeOutlined$1, null, null)]) : null;
      var actions = listType === "picture-card" && file.status !== "uploading" && createVNode("span", {
        "class": "".concat(prefixCls2, "-list-item-actions")
      }, [previewIcon, file.status === "done" && downloadIcon, removeIcon]);
      var message2;
      if (file.response && typeof file.response === "string") {
        message2 = file.response;
      } else {
        message2 = file.error && file.error.statusText || locale2.uploadError;
      }
      var iconAndPreview = createVNode("span", null, [icon, preview]);
      var transitionProps = getTransitionProps("fade");
      var dom = createVNode("div", {
        "class": infoUploadingClass,
        "key": file.uid
      }, [createVNode("div", {
        "class": "".concat(prefixCls2, "-list-item-info")
      }, [iconAndPreview]), actions, createVNode(Transition, transitionProps, {
        default: function _default8() {
          return [progress];
        }
      })]);
      var listContainerNameClass = classNames(_defineProperty$U({}, "".concat(prefixCls2, "-list-picture-card-container"), listType === "picture-card"));
      return createVNode("div", {
        "key": file.uid,
        "class": listContainerNameClass
      }, [file.status === "error" ? createVNode(Tooltip, {
        "title": message2
      }, {
        default: function _default8() {
          return [dom];
        }
      }) : createVNode("span", null, [dom])]);
    });
    var listClassNames = classNames((_classNames4 = {}, _defineProperty$U(_classNames4, "".concat(prefixCls2, "-list"), true), _defineProperty$U(_classNames4, "".concat(prefixCls2, "-list-").concat(listType), true), _classNames4));
    var animationDirection = listType === "picture-card" ? "animate-inline" : "animate";
    var transitionGroupProps = _extends$1(_extends$1({}, getTransitionGroupProps("".concat(prefixCls2, "-").concat(animationDirection))), {
      class: listClassNames
    });
    return createVNode(TransitionGroup, _objectSpread2$2(_objectSpread2$2({}, transitionGroupProps), {}, {
      "tag": "div"
    }), {
      default: function _default8() {
        return [list];
      }
    });
  }
});
var Upload = defineComponent({
  name: "AUpload",
  mixins: [BaseMixin],
  inheritAttrs: false,
  Dragger,
  props: initDefaultProps$1(UploadProps, {
    type: "select",
    multiple: false,
    action: "",
    data: {},
    accept: "",
    beforeUpload: T,
    showUploadList: true,
    listType: "text",
    disabled: false,
    supportServerRender: true
  }),
  setup: function setup160() {
    return {
      upload: null,
      progressTimer: null,
      configProvider: inject("configProvider", defaultConfigProvider)
    };
  },
  data: function data79() {
    return {
      sFileList: this.fileList || this.defaultFileList || [],
      dragState: "drop"
    };
  },
  watch: {
    fileList: function fileList(val) {
      this.sFileList = val || [];
    }
  },
  beforeUnmount: function beforeUnmount31() {
    this.clearProgressTimer();
  },
  methods: {
    onStart: function onStart3(file) {
      var targetItem = fileToObject(file);
      targetItem.status = "uploading";
      var nextFileList = this.sFileList.concat();
      var fileIndex = findIndex(nextFileList, function(_ref) {
        var uid2 = _ref.uid;
        return uid2 === targetItem.uid;
      });
      if (fileIndex === -1) {
        nextFileList.push(targetItem);
      } else {
        nextFileList[fileIndex] = targetItem;
      }
      this.handleChange({
        file: targetItem,
        fileList: nextFileList
      });
      if (!window.File || (typeof process === "undefined" ? "undefined" : _typeof$2(process)) === "object" && {}.TEST_IE) {
        this.autoUpdateProgress(0, targetItem);
      }
    },
    onSuccess: function onSuccess(response, file, xhr2) {
      this.clearProgressTimer();
      try {
        if (typeof response === "string") {
          response = JSON.parse(response);
        }
      } catch (e2) {
      }
      var fileList2 = this.sFileList;
      var targetItem = getFileItem(file, fileList2);
      if (!targetItem) {
        return;
      }
      targetItem.status = "done";
      targetItem.response = response;
      targetItem.xhr = xhr2;
      this.handleChange({
        file: _extends$1({}, targetItem),
        fileList: fileList2
      });
    },
    onProgress: function onProgress(e2, file) {
      var fileList2 = this.sFileList;
      var targetItem = getFileItem(file, fileList2);
      if (!targetItem) {
        return;
      }
      targetItem.percent = e2.percent;
      this.handleChange({
        event: e2,
        file: _extends$1({}, targetItem),
        fileList: this.sFileList
      });
    },
    onError: function onError(error3, response, file) {
      this.clearProgressTimer();
      var fileList2 = this.sFileList;
      var targetItem = getFileItem(file, fileList2);
      if (!targetItem) {
        return;
      }
      targetItem.error = error3;
      targetItem.response = response;
      targetItem.status = "error";
      this.handleChange({
        file: _extends$1({}, targetItem),
        fileList: fileList2
      });
    },
    onReject: function onReject(fileList2) {
      this.$emit("reject", fileList2);
    },
    handleRemove: function handleRemove(file) {
      var _this = this;
      var onRemove2 = this.remove;
      var fileList2 = this.$data.sFileList;
      Promise.resolve(typeof onRemove2 === "function" ? onRemove2(file) : onRemove2).then(function(ret) {
        if (ret === false) {
          return;
        }
        var removedFileList = removeFileItem(file, fileList2);
        if (removedFileList) {
          file.status = "removed";
          if (_this.upload) {
            _this.upload.abort(file);
          }
          _this.handleChange({
            file,
            fileList: removedFileList
          });
        }
      });
    },
    handleManualRemove: function handleManualRemove(file) {
      if (this.$refs.uploadRef) {
        this.$refs.uploadRef.abort(file);
      }
      this.handleRemove(file);
    },
    handleChange: function handleChange21(info3) {
      if (!hasProp(this, "fileList")) {
        this.setState({
          sFileList: info3.fileList
        });
      }
      this.$emit("update:fileList", info3.fileList);
      this.$emit("change", info3);
    },
    onFileDrop: function onFileDrop2(e2) {
      this.setState({
        dragState: e2.type
      });
    },
    reBeforeUpload: function reBeforeUpload(file, fileList2) {
      var beforeUpload = this.$props.beforeUpload;
      var stateFileList = this.$data.sFileList;
      if (!beforeUpload) {
        return true;
      }
      var result = beforeUpload(file, fileList2);
      if (result === false) {
        this.handleChange({
          file,
          fileList: uniqBy(stateFileList.concat(fileList2.map(fileToObject)), function(item) {
            return item.uid;
          })
        });
        return false;
      }
      if (result && result.then) {
        return result;
      }
      return true;
    },
    clearProgressTimer: function clearProgressTimer() {
      clearInterval(this.progressTimer);
    },
    autoUpdateProgress: function autoUpdateProgress(_2, file) {
      var _this2 = this;
      var getPercent = genPercentAdd();
      var curPercent = 0;
      this.clearProgressTimer();
      this.progressTimer = setInterval(function() {
        curPercent = getPercent(curPercent);
        _this2.onProgress({
          percent: curPercent * 100
        }, file);
      }, 200);
    },
    renderUploadList: function renderUploadList(locale2) {
      var _getOptionProps = getOptionProps(this), _getOptionProps$showU = _getOptionProps.showUploadList, showUploadList = _getOptionProps$showU === void 0 ? {} : _getOptionProps$showU, listType = _getOptionProps.listType, previewFile = _getOptionProps.previewFile, disabled = _getOptionProps.disabled, propLocale = _getOptionProps.locale;
      var showRemoveIcon = showUploadList.showRemoveIcon, showPreviewIcon = showUploadList.showPreviewIcon, showDownloadIcon = showUploadList.showDownloadIcon;
      var fileList2 = this.$data.sFileList;
      var _this$$props = this.$props, onDownload = _this$$props.onDownload, onPreview = _this$$props.onPreview;
      var uploadListProps = {
        listType,
        items: fileList2,
        previewFile,
        showRemoveIcon: !disabled && showRemoveIcon,
        showPreviewIcon,
        showDownloadIcon,
        locale: _extends$1(_extends$1({}, locale2), propLocale),
        onRemove: this.handleManualRemove,
        onDownload,
        onPreview
      };
      return createVNode(UploadList, uploadListProps, null);
    }
  },
  render: function render165() {
    var _classNames2;
    var _getOptionProps2 = getOptionProps(this), customizePrefixCls = _getOptionProps2.prefixCls, showUploadList = _getOptionProps2.showUploadList, listType = _getOptionProps2.listType, type3 = _getOptionProps2.type, disabled = _getOptionProps2.disabled;
    var _this$$data = this.$data, fileList2 = _this$$data.sFileList, dragState = _this$$data.dragState;
    var _this$$attrs = this.$attrs, className = _this$$attrs.class, style3 = _this$$attrs.style;
    var getPrefixCls2 = this.configProvider.getPrefixCls;
    var prefixCls2 = getPrefixCls2("upload", customizePrefixCls);
    var vcUploadProps = _extends$1(_extends$1({}, this.$props), {
      prefixCls: prefixCls2,
      beforeUpload: this.reBeforeUpload,
      onStart: this.onStart,
      onError: this.onError,
      onProgress: this.onProgress,
      onSuccess: this.onSuccess,
      onReject: this.onReject,
      ref: "uploadRef"
    });
    var uploadList = showUploadList ? createVNode(LocaleReceiver, {
      "componentName": "Upload",
      "defaultLocale": defaultLocale.Upload,
      "children": this.renderUploadList
    }, null) : null;
    var children = getSlot(this);
    if (type3 === "drag") {
      var _classNames;
      var dragCls = classNames(prefixCls2, (_classNames = {}, _defineProperty$U(_classNames, "".concat(prefixCls2, "-drag"), true), _defineProperty$U(_classNames, "".concat(prefixCls2, "-drag-uploading"), fileList2.some(function(file) {
        return file.status === "uploading";
      })), _defineProperty$U(_classNames, "".concat(prefixCls2, "-drag-hover"), dragState === "dragover"), _defineProperty$U(_classNames, "".concat(prefixCls2, "-disabled"), disabled), _classNames));
      return createVNode("span", _objectSpread2$2({
        "class": className
      }, getDataAndAria(this.$attrs)), [createVNode("div", {
        "class": dragCls,
        "onDrop": this.onFileDrop,
        "onDragover": this.onFileDrop,
        "onDragleave": this.onFileDrop,
        "style": style3
      }, [createVNode(Upload$1, _objectSpread2$2(_objectSpread2$2({}, vcUploadProps), {}, {
        "class": "".concat(prefixCls2, "-btn")
      }), {
        default: function _default8() {
          return [createVNode("div", {
            "class": "".concat(prefixCls2, "-drag-container")
          }, [children])];
        }
      })]), uploadList]);
    }
    var uploadButtonCls = classNames(prefixCls2, (_classNames2 = {}, _defineProperty$U(_classNames2, "".concat(prefixCls2, "-select"), true), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-select-").concat(listType), true), _defineProperty$U(_classNames2, "".concat(prefixCls2, "-disabled"), disabled), _classNames2));
    if (!children.length || disabled) {
      delete vcUploadProps.id;
    }
    var uploadButton = createVNode("div", {
      "class": uploadButtonCls,
      "style": children.length ? void 0 : {
        display: "none"
      }
    }, [createVNode(Upload$1, vcUploadProps, {
      default: function _default8() {
        return [children];
      }
    })]);
    if (listType === "picture-card") {
      return createVNode("span", {
        "class": classNames("".concat(prefixCls2, "-picture-card-wrapper"), className)
      }, [uploadList, uploadButton]);
    }
    return createVNode("span", {
      "class": className
    }, [uploadButton, uploadList]);
  }
});
Upload.Dragger = Dragger;
Upload.install = function(app) {
  app.component(Upload.name, Upload);
  app.component(Dragger.name, Dragger);
  return app;
};
var UploadDragger = Dragger;
var components = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  Affix: Affix$1,
  Anchor,
  AnchorLink,
  AutoComplete: AutoComplete$1,
  AutoCompleteOptGroup,
  AutoCompleteOption,
  Alert: index$B,
  Avatar: Avatar$1,
  AvatarGroup: Group$2,
  BackTop: index$A,
  Badge,
  BadgeRibbon: Ribbon,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbSeparator,
  Button,
  ButtonGroup: ButtonGroup$1,
  Calendar: index$z,
  Card: Card$1,
  CardGrid: Grid,
  CardMeta: Meta,
  Collapse,
  CollapsePanel: __unplugin_components_11,
  Carousel: index$x,
  Cascader: index$w,
  Checkbox,
  CheckboxGroup,
  Col,
  Comment: index$v,
  ConfigProvider: index$C,
  DatePicker: DatePicker$1,
  RangePicker: WrappedRangePicker,
  MonthPicker,
  WeekPicker: WrappedWeekPicker,
  Descriptions: __unplugin_components_3$1,
  DescriptionsItem,
  Divider: index$t,
  Dropdown: Dropdown$1,
  DropdownButton,
  Drawer: index$s,
  Empty: Empty$1,
  Form: Form$1,
  FormItem: __unplugin_components_6,
  Grid: index$y,
  Input,
  InputGroup: Group$3,
  InputPassword: __unplugin_components_9,
  InputSearch: Search$1,
  Textarea: __unplugin_components_10,
  Image: Image$2,
  ImagePreviewGroup: PreviewGroup,
  InputNumber: index$r,
  Layout: Layout$1,
  LayoutHeader,
  LayoutSider,
  LayoutFooter,
  LayoutContent,
  List: List$2,
  ListItem: Item,
  ListItemMeta: ItemMeta,
  message,
  Menu,
  MenuDivider: Divider$1,
  MenuItem,
  MenuItemGroup: ItemGroup,
  SubMenu,
  Mentions: Mentions$1,
  MentionsOption,
  Modal,
  Statistic,
  StatisticCountdown,
  notification: api$1,
  PageHeader: __unplugin_components_4,
  Pagination,
  Popconfirm: index$q,
  Popover: Popover$1,
  Progress,
  Radio,
  RadioButton: __unplugin_components_7,
  RadioGroup: __unplugin_components_8,
  Rate: index$p,
  Result: Result$1,
  Row: Row$2,
  Select: VcSelect,
  SelectOptGroup,
  SelectOption,
  Skeleton: Skeleton$1,
  SkeletonButton: SkeletonButton$1,
  SkeletonAvatar: SkeletonAvatar$1,
  SkeletonInput: SkeletonInput$1,
  SkeletonImage: SkeletonImage$1,
  Slider: index$o,
  Space: index$n,
  Spin,
  Steps: Steps$1,
  Step,
  Switch: index$m,
  Table: __unplugin_components_3,
  TableColumn,
  TableColumnGroup,
  Transfer: index$l,
  Tree,
  TreeNode: TreeNode$2,
  DirectoryTree,
  TreeSelect: TreeSelect$1,
  TreeSelectNode,
  Tabs,
  TabPane: TabPane$1,
  TabContent,
  Tag: Tag$1,
  CheckableTag: CheckableTag$1,
  TimePicker: index$u,
  Timeline,
  TimelineItem,
  Tooltip,
  Typography: Typography$1,
  TypographyLink: Link$1,
  TypographyParagraph: Paragraph$1,
  TypographyText: Text$1,
  TypographyTitle: Title$1,
  Upload,
  UploadDragger,
  LocaleProvider: LocaleProvider$1
});
const name = "ant-design-vue";
const version$2 = "2.2.8";
const title = "Ant Design Vue";
const description = "An enterprise-class UI design language and Vue-based implementation";
const keywords = [
  "vue",
  "vue3",
  "ant",
  "design",
  "antd",
  "vueComponent",
  "component",
  "components",
  "ui",
  "framework",
  "frontend"
];
const main = "lib/index.js";
const module$1 = "es/index.js";
const unpkg = "dist/antd.min.js";
const typings = "lib/index.d.ts";
const files = [
  "dist",
  "lib",
  "es",
  "scripts",
  "vetur"
];
const scripts = {
  dev: "webpack serve",
  test: "cross-env NODE_ENV=test WORKFLOW=true jest --config .jest.js",
  "test:dev": "cross-env NODE_ENV=test jest --config .jest.js",
  compile: "node antd-tools/cli/run.js compile",
  "generator-webtypes": "tsc -p antd-tools/generator-types/tsconfig.json && node antd-tools/generator-types/index.js",
  pub: "node --max_old_space_size=8192 antd-tools/cli/run.js pub",
  "pub-with-ci": "node antd-tools/cli/run.js pub-with-ci",
  prepublishOnly: "node antd-tools/cli/run.js guard",
  "pre-publish": "node ./scripts/prepub && npm run generator-webtypes",
  prettier: "prettier -c --write '**/*'",
  "pretty-quick": "pretty-quick",
  dist: "node --max_old_space_size=8192 antd-tools/cli/run.js dist",
  lint: "eslint -c ./.eslintrc --fix --ext .jsx,.js,.vue,.ts,.tsx ./components",
  "lint:style": 'stylelint "{site,components}/**/*.less" --syntax less',
  codecov: "codecov"
};
const repository = {
  type: "git",
  url: "git+https://github.com/vueComponent/ant-design-vue.git"
};
const license = "MIT";
const funding = {
  type: "opencollective",
  url: "https://opencollective.com/ant-design-vue"
};
const bugs = {
  url: "https://github.com/vueComponent/ant-design-vue/issues"
};
const homepage = "https://www.antdv.com/";
const peerDependencies = {
  "@vue/compiler-sfc": ">=3.1.0",
  vue: ">=3.1.0"
};
const devDependencies = {
  "@babel/cli": "^7.8.4",
  "@babel/core": "^7.10.5",
  "@babel/plugin-proposal-class-properties": "^7.8.3",
  "@babel/plugin-proposal-export-default-from": "^7.8.3",
  "@babel/plugin-proposal-export-namespace-from": "^7.12.1",
  "@babel/plugin-proposal-object-rest-spread": "^7.9.6",
  "@babel/plugin-proposal-optional-chaining": "^7.10.1",
  "@babel/plugin-syntax-dynamic-import": "^7.8.3",
  "@babel/plugin-transform-member-expression-literals": "^7.8.3",
  "@babel/plugin-transform-object-assign": "^7.8.3",
  "@babel/plugin-transform-property-literals": "^7.8.3",
  "@babel/plugin-transform-runtime": "^7.10.5",
  "@babel/plugin-transform-template-literals": "^7.8.3",
  "@babel/plugin-transform-typescript": "^7.12.1",
  "@babel/polyfill": "^7.8.7",
  "@babel/preset-env": "^7.9.6",
  "@babel/preset-typescript": "^7.10.4",
  "@commitlint/cli": "^12.0.0",
  "@commitlint/config-conventional": "^12.0.0",
  "@octokit/rest": "^18.0.0",
  "@types/fs-extra": "^9.0.8",
  "@types/lodash-es": "^4.17.3",
  "@types/raf": "^3.4.0",
  "@typescript-eslint/eslint-plugin": "^4.1.0",
  "@typescript-eslint/parser": "^4.1.0",
  "@vue/babel-plugin-jsx": "^1.0.0",
  "@vue/cli-plugin-eslint": "^5.0.0-0",
  "@vue/compiler-sfc": "^3.1.0",
  "@vue/eslint-config-prettier": "^6.0.0",
  "@vue/eslint-config-typescript": "^7.0.0",
  "@vue/test-utils": "^2.0.0-0",
  "@webpack-cli/serve": "^1.3.1",
  acorn: "^8.0.0",
  autoprefixer: "^10.2.0",
  axios: "^0.21.0",
  "babel-eslint": "^10.0.1",
  "babel-jest": "^26.1.0",
  "babel-loader": "^8.0.0",
  "babel-plugin-import": "^1.1.1",
  "babel-plugin-inline-import-data-uri": "^1.0.1",
  "babel-plugin-istanbul": "^6.0.0",
  "case-sensitive-paths-webpack-plugin": "^2.1.2",
  chalk: "^4.1.0",
  cheerio: "^1.0.0-rc.2",
  codecov: "^3.0.0",
  colorful: "^2.1.0",
  commander: "^7.2.0",
  "compare-versions": "^3.3.0",
  "cross-env": "^7.0.0",
  "css-loader": "^5.0.0",
  "css-minimizer-webpack-plugin": "^3.0.0",
  "deep-assign": "^3.0.0",
  "docsearch.js": "^2.6.3",
  "enquire-js": "^0.2.1",
  eslint: "^7.25.0",
  "eslint-config-prettier": "^8.0.0",
  "eslint-plugin-html": "^6.0.0",
  "eslint-plugin-jest": "^24.3.6",
  "eslint-plugin-markdown": "^2.0.0-alpha.0",
  "eslint-plugin-prettier": "^3.1.4",
  "eslint-plugin-vue": "^7.1.0",
  "fetch-jsonp": "^1.1.3",
  "fs-extra": "^10.0.0",
  glob: "^7.1.2",
  gulp: "^4.0.1",
  "gulp-babel": "^8.0.0",
  "gulp-strip-code": "^0.1.4",
  "gulp-typescript": "^6.0.0-alpha.1",
  "html-webpack-plugin": "^5.3.1",
  husky: "^4.0.0",
  "ignore-emit-webpack-plugin": "^2.0.6",
  jest: "^26.0.0",
  "jest-environment-jsdom-fifteen": "^1.0.2",
  "jest-serializer-vue": "^2.0.0",
  "jest-transform-stub": "^2.0.0",
  "js-base64": "^3.0.0",
  "json-templater": "^1.2.0",
  jsonp: "^0.2.1",
  less: "^4.0.0",
  "less-loader": "^10.0.0",
  "less-plugin-npm-import": "^2.1.0",
  "less-vars-to-js": "^1.3.0",
  "lint-staged": "^11.0.0",
  marked: "0.3.18",
  merge2: "^1.2.1",
  "mini-css-extract-plugin": "^1.5.0",
  minimist: "^1.2.0",
  mkdirp: "^0.5.1",
  mockdate: "^2.0.2",
  nprogress: "^0.2.0",
  "object-assign": "^4.1.1",
  postcss: "^8.2.12",
  "postcss-loader": "^6.0.0",
  prettier: "^2.2.0",
  "pretty-quick": "^3.0.0",
  prismjs: "^1.20.0",
  querystring: "^0.2.0",
  "raw-loader": "^4.0.2",
  reqwest: "^2.0.5",
  rimraf: "^3.0.0",
  "rucksack-css": "^1.0.2",
  "selenium-server": "^3.0.1",
  semver: "^7.0.0",
  "style-loader": "^3.0.0",
  stylelint: "^13.0.0",
  "stylelint-config-prettier": "^8.0.0",
  "stylelint-config-rational-order": "^0.1.2",
  "stylelint-config-standard": "^22.0.0",
  "stylelint-declaration-block-no-ignored-properties": "^2.1.0",
  "stylelint-order": "^4.0.0",
  "terser-webpack-plugin": "^5.1.1",
  through2: "^3.0.0",
  "ts-jest": "^26.4.1",
  "ts-loader": "^9.1.0",
  typescript: "~4.3.5",
  "umi-mock-middleware": "^1.0.0",
  "umi-request": "^1.3.5",
  "url-loader": "^3.0.0",
  vue: "^3.1.0",
  "vue-antd-md-loader": "^1.2.1-beta.1",
  "vue-clipboard2": "0.3.1",
  "vue-draggable-resizable": "^2.1.0",
  "vue-eslint-parser": "^7.0.0",
  "vue-i18n": "^9.1.7",
  "vue-infinite-scroll": "^2.0.2",
  "vue-jest": "^5.0.0-alpha.3",
  "vue-loader": "^16.1.1",
  "vue-request": "^1.0.2",
  "vue-router": "^4.0.0",
  "vue-server-renderer": "^2.6.11",
  "vue-style-loader": "^4.1.2",
  vuex: "^4.0.0-beta.2",
  webpack: "^5.0.0",
  "webpack-bundle-analyzer": "^4.0.0",
  "webpack-cli": "^4.6.0",
  "webpack-dev-server": "^4.0.0",
  "webpack-merge": "^5.0.0",
  webpackbar: "^5.0.0-3",
  "xhr-mock": "^2.5.1"
};
const dependencies = {
  "@ant-design/icons-vue": "^6.0.0",
  "@babel/runtime": "^7.10.5",
  "@simonwep/pickr": "~1.8.0",
  "array-tree-filter": "^2.1.0",
  "async-validator": "^3.3.0",
  "dom-align": "^1.12.1",
  "dom-scroll-into-view": "^2.0.0",
  lodash: "^4.17.21",
  "lodash-es": "^4.17.15",
  moment: "^2.27.0",
  "omit.js": "^2.0.0",
  "resize-observer-polyfill": "^1.5.1",
  "scroll-into-view-if-needed": "^2.2.25",
  "shallow-equal": "^1.0.0",
  "vue-types": "^3.0.0",
  warning: "^4.0.0"
};
const sideEffects = [
  "site/*",
  "components/style.ts",
  "components/**/style/*",
  "*.vue",
  "*.md",
  "dist/*",
  "es/**/style/*",
  "lib/**/style/*",
  "*.less"
];
const vetur = {
  tags: "vetur/tags.json",
  attributes: "vetur/attributes.json"
};
var pkg = {
  name,
  version: version$2,
  title,
  description,
  keywords,
  main,
  module: module$1,
  unpkg,
  typings,
  files,
  scripts,
  repository,
  license,
  funding,
  bugs,
  homepage,
  peerDependencies,
  devDependencies,
  dependencies,
  sideEffects,
  vetur,
  "web-types": "vetur/web-types.json"
};
var version = pkg.version;
var version$1 = version;
var install = function install2(app) {
  Object.keys(components).forEach(function(key2) {
    var component = components[key2];
    if (component.install) {
      app.use(component);
    }
  });
  app.config.globalProperties.$message = message;
  app.config.globalProperties.$notification = api$1;
  app.config.globalProperties.$info = Modal.info;
  app.config.globalProperties.$success = Modal.success;
  app.config.globalProperties.$error = Modal.error;
  app.config.globalProperties.$warning = Modal.warning;
  app.config.globalProperties.$confirm = Modal.confirm;
  app.config.globalProperties.$destroyAll = Modal.destroyAll;
  return app;
};
var AntDesignVue = {
  version: version$1,
  install
};
/*!
  * vue-router v4.0.11
  * (c) 2021 Eduardo San Martin Morote
  * @license MIT
  */
const hasSymbol = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
const PolySymbol = (name2) => hasSymbol ? Symbol(name2) : "_vr_" + name2;
const matchedRouteKey = /* @__PURE__ */ PolySymbol("rvlm");
const viewDepthKey = /* @__PURE__ */ PolySymbol("rvd");
const routerKey = /* @__PURE__ */ PolySymbol("r");
const routeLocationKey = /* @__PURE__ */ PolySymbol("rl");
const routerViewLocationKey = /* @__PURE__ */ PolySymbol("rvl");
const isBrowser = typeof window !== "undefined";
function isESModule(obj) {
  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === "Module";
}
const assign = Object.assign;
function applyToParams(fn, params) {
  const newParams = {};
  for (const key2 in params) {
    const value26 = params[key2];
    newParams[key2] = Array.isArray(value26) ? value26.map(fn) : fn(value26);
  }
  return newParams;
}
const noop = () => {
};
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path2) => path2.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path2, query = {}, searchString = "", hash = "";
  const searchPos = location2.indexOf("?");
  const hashPos = location2.indexOf("#", searchPos > -1 ? searchPos : 0);
  if (searchPos > -1) {
    path2 = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path2 = path2 || location2.slice(0, hashPos);
    hash = location2.slice(hashPos, location2.length);
  }
  path2 = resolveRelativePath(path2 != null ? path2 : location2, currentLocation);
  return {
    fullPath: path2 + (searchString && "?") + searchString + hash,
    path: path2,
    query,
    hash
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a2, b2) {
  const aLastIndex = a2.matched.length - 1;
  const bLastIndex = b2.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a2.matched[aLastIndex], b2.matched[bLastIndex]) && isSameRouteLocationParams(a2.params, b2.params) && stringifyQuery2(a2.query) === stringifyQuery2(b2.query) && a2.hash === b2.hash;
}
function isSameRouteRecord(a2, b2) {
  return (a2.aliasOf || a2) === (b2.aliasOf || b2);
}
function isSameRouteLocationParams(a2, b2) {
  if (Object.keys(a2).length !== Object.keys(b2).length)
    return false;
  for (const key2 in a2) {
    if (!isSameRouteLocationParamsValue(a2[key2], b2[key2]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a2, b2) {
  return Array.isArray(a2) ? isEquivalentArray(a2, b2) : Array.isArray(b2) ? isEquivalentArray(b2, a2) : a2 === b2;
}
function isEquivalentArray(a2, b2) {
  return Array.isArray(b2) ? a2.length === b2.length && a2.every((value26, i2) => value26 === b2[i2]) : a2.length === 1 && a2[0] === b2;
}
function resolveRelativePath(to2, from2) {
  if (to2.startsWith("/"))
    return to2;
  if (!to2)
    return from2;
  const fromSegments = from2.split("/");
  const toSegments = to2.split("/");
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (position === 1 || segment === ".")
      continue;
    if (segment === "..")
      position--;
    else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
function normalizeBase(base) {
  if (!base) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash(base);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location2) {
  return base.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el, offset4) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el.getBoundingClientRect();
  return {
    behavior: offset4.behavior,
    left: elRect.left - docRect.left - (offset4.left || 0),
    top: elRect.top - docRect.top - (offset4.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    const el = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el) {
      return;
    }
    scrollToOptions = getElementPosition(el, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey(path2, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path2;
}
const scrollPositions = new Map();
function saveScrollPosition(key2, scrollPosition) {
  scrollPositions.set(key2, scrollPosition);
}
function getSavedScrollPosition(key2) {
  const scroll = scrollPositions.get(key2);
  scrollPositions.delete(key2);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base, location2) {
  const { pathname, search, hash } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path2 = stripBase(pathname, base);
  return path2 + search + hash;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state: state2 }) => {
    const to2 = createCurrentLocation(base, location);
    const from2 = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state2) {
      currentLocation.value = to2;
      historyState.value = state2;
      if (pauseState && pauseState === from2) {
        pauseState = null;
        return;
      }
      delta = fromState ? state2.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from2, {
        delta,
        type: NavigationType.pop,
        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index2 = listeners.indexOf(callback);
      if (index2 > -1)
        listeners.splice(index2, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy3() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener);
  return {
    pauseListeners,
    listen,
    destroy: destroy3
  };
}
function buildState(back, current2, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current: current2,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      position: history2.length - 1,
      replaced: true,
      scroll: null
    }, true);
  }
  function changeLocation(to2, state2, replace2) {
    const hashIndex = base.indexOf("#");
    const url2 = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state2, "", url2);
      historyState.value = state2;
    } catch (err) {
      {
        console.error(err);
      }
      location2[replace2 ? "replace" : "assign"](url2);
    }
  }
  function replace(to2, data80) {
    const state2 = assign({}, history2.state, buildState(historyState.value.back, to2, historyState.value.forward, true), data80, { position: historyState.value.position });
    changeLocation(to2, state2, true);
    currentLocation.value = to2;
  }
  function push2(to2, data80) {
    const currentState = assign({}, historyState.value, history2.state, {
      forward: to2,
      scroll: computeScrollPosition()
    });
    changeLocation(currentState.current, currentState, true);
    const state2 = assign({}, buildState(currentLocation.value, to2, null), { position: currentState.position + 1 }, data80);
    changeLocation(to2, state2, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push: push2,
    replace
  };
}
function createWebHistory(base) {
  base = normalizeBase(base);
  const historyNavigation = useHistoryStateNavigation(base);
  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go2(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign({
    location: "",
    base,
    go: go2,
    createHref: createHref.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function createWebHashHistory(base) {
  base = location.host ? base || location.pathname + location.search : "";
  if (!base.includes("#"))
    base += "#";
  return createWebHistory(base);
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name2) {
  return typeof name2 === "string" || typeof name2 === "symbol";
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol = /* @__PURE__ */ PolySymbol("nf");
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
function createRouterError(type3, params) {
  {
    return assign(new Error(), {
      type: type3,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error3, type3) {
  return error3 instanceof Error && NavigationFailureSymbol in error3 && (type3 == null || !!(error3.type & type3));
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options2 = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern2 = options2.start ? "^" : "";
  const keys2 = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [90];
    if (options2.strict && !segment.length)
      pattern2 += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token2 = segment[tokenIndex];
      let subSegmentScore = 40 + (options2.sensitive ? 0.25 : 0);
      if (token2.type === 0) {
        if (!tokenIndex)
          pattern2 += "/";
        pattern2 += token2.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token2.type === 1) {
        const { value: value26, repeatable, optional, regexp: regexp3 } = token2;
        keys2.push({
          name: value26,
          repeatable,
          optional
        });
        const re3 = regexp3 ? regexp3 : BASE_PARAM_PATTERN;
        if (re3 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re3})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value26}" (${re3}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re3})(?:/(?:${re3}))*)` : `(${re3})`;
        if (!tokenIndex)
          subPattern = optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern2 += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re3 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options2.strict && options2.end) {
    const i2 = score.length - 1;
    score[i2][score[i2].length - 1] += 0.7000000000000001;
  }
  if (!options2.strict)
    pattern2 += "/?";
  if (options2.end)
    pattern2 += "$";
  else if (options2.strict)
    pattern2 += "(?:/|$)";
  const re2 = new RegExp(pattern2, options2.sensitive ? "" : "i");
  function parse(path2) {
    const match5 = path2.match(re2);
    const params = {};
    if (!match5)
      return null;
    for (let i2 = 1; i2 < match5.length; i2++) {
      const value26 = match5[i2] || "";
      const key2 = keys2[i2 - 1];
      params[key2.name] = value26 && key2.repeatable ? value26.split("/") : value26;
    }
    return params;
  }
  function stringify(params) {
    let path2 = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path2.endsWith("/"))
        path2 += "/";
      avoidDuplicatedSlash = false;
      for (const token2 of segment) {
        if (token2.type === 0) {
          path2 += token2.value;
        } else if (token2.type === 1) {
          const { value: value26, repeatable, optional } = token2;
          const param = value26 in params ? params[value26] : "";
          if (Array.isArray(param) && !repeatable)
            throw new Error(`Provided param "${value26}" is an array but it is not repeatable (* or + modifiers)`);
          const text = Array.isArray(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path2.endsWith("/"))
                  path2 = path2.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value26}"`);
          }
          path2 += text;
        }
      }
    }
    return path2;
  }
  return {
    re: re2,
    score,
    keys: keys2,
    parse,
    stringify
  };
}
function compareScoreArray(a2, b2) {
  let i2 = 0;
  while (i2 < a2.length && i2 < b2.length) {
    const diff2 = b2[i2] - a2[i2];
    if (diff2)
      return diff2;
    i2++;
  }
  if (a2.length < b2.length) {
    return a2.length === 1 && a2[0] === 40 + 40 ? -1 : 1;
  } else if (a2.length > b2.length) {
    return b2.length === 1 && b2[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a2, b2) {
  let i2 = 0;
  const aScore = a2.score;
  const bScore = b2.score;
  while (i2 < aScore.length && i2 < bScore.length) {
    const comp = compareScoreArray(aScore[i2], bScore[i2]);
    if (comp)
      return comp;
    i2++;
  }
  return bScore.length - aScore.length;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path2) {
  if (!path2)
    return [[]];
  if (path2 === "/")
    return [[ROOT_TOKEN]];
  if (!path2.startsWith("/")) {
    throw new Error(`Invalid path "${path2}"`);
  }
  function crash(message2) {
    throw new Error(`ERR (${state2})/"${buffer}": ${message2}`);
  }
  let state2 = 0;
  let previousState = state2;
  const tokens2 = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens2.push(segment);
    segment = [];
  }
  let i2 = 0;
  let char;
  let buffer = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer)
      return;
    if (state2 === 0) {
      segment.push({
        type: 0,
        value: buffer
      });
    } else if (state2 === 1 || state2 === 2 || state2 === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer = "";
  }
  function addCharToBuffer() {
    buffer += char;
  }
  while (i2 < path2.length) {
    char = path2[i2++];
    if (char === "\\" && state2 !== 2) {
      previousState = state2;
      state2 = 4;
      continue;
    }
    switch (state2) {
      case 0:
        if (char === "/") {
          if (buffer) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state2 = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state2 = previousState;
        break;
      case 1:
        if (char === "(") {
          state2 = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state2 = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i2--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state2 = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state2 = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i2--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state2 === 2)
    crash(`Unfinished custom RegExp for param "${buffer}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens2;
}
function createRouteRecordMatcher(record, parent2, options2) {
  const parser = tokensToParser(tokenizePath(record.path), options2);
  const matcher = assign(parser, {
    record,
    parent: parent2,
    children: [],
    alias: []
  });
  if (parent2) {
    if (!matcher.record.aliasOf === !parent2.record.aliasOf)
      parent2.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes2, globalOptions) {
  const matchers2 = [];
  const matcherMap = new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name2) {
    return matcherMap.get(name2);
  }
  function addRoute(record, parent2, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options2 = mergeOptions(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases2 = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases2) {
        normalizedRecords.push(assign({}, mainNormalizedRecord, {
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path: path2 } = normalizedRecord;
      if (parent2 && path2[0] !== "/") {
        const parentPath = parent2.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent2.record.path + (path2 && connectingSlash + path2);
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent2, options2);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher))
          removeRoute(record.name);
      }
      if ("children" in mainNormalizedRecord) {
        const children = mainNormalizedRecord.children;
        for (let i2 = 0; i2 < children.length; i2++) {
          addRoute(children[i2], matcher, originalRecord && originalRecord.children[i2]);
        }
      }
      originalRecord = originalRecord || matcher;
      insertMatcher(matcher);
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers2.splice(matchers2.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index2 = matchers2.indexOf(matcherRef);
      if (index2 > -1) {
        matchers2.splice(index2, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers2;
  }
  function insertMatcher(matcher) {
    let i2 = 0;
    while (i2 < matchers2.length && comparePathParserScore(matcher, matchers2[i2]) >= 0)
      i2++;
    matchers2.splice(i2, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path2;
    let name2;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      name2 = matcher.record.name;
      params = assign(paramsFromLocation(currentLocation.params, matcher.keys.filter((k2) => !k2.optional).map((k2) => k2.name)), location2.params);
      path2 = matcher.stringify(params);
    } else if ("path" in location2) {
      path2 = location2.path;
      matcher = matchers2.find((m2) => m2.re.test(path2));
      if (matcher) {
        params = matcher.parse(path2);
        name2 = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers2.find((m2) => m2.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name2 = matcher.record.name;
      params = assign({}, currentLocation.params, location2.params);
      path2 = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name: name2,
      path: path2,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes2.forEach((route) => addRoute(route));
  return { addRoute, resolve: resolve2, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation(params, keys2) {
  const newParams = {};
  for (const key2 of keys2) {
    if (key2 in params)
      newParams[key2] = params[key2];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: new Set(),
    updateGuards: new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || {} : { default: record.component }
  };
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props2 = record.props || false;
  if ("component" in record) {
    propsObject.default = props2;
  } else {
    for (const name2 in record.components)
      propsObject[name2] = typeof props2 === "boolean" ? props2 : props2[name2];
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign(meta, record.meta), {});
}
function mergeOptions(defaults2, partialOptions) {
  const options2 = {};
  for (const key2 in defaults2) {
    options2[key2] = key2 in partialOptions ? partialOptions[key2] : defaults2[key2];
  }
  return options2;
}
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text) {
  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text) {
  return commonEncode(text).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text) {
  return text == null ? "" : encodePath(text).replace(SLASH_RE, "%2F");
}
function decode(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
  }
  return "" + text;
}
function parseQuery(search) {
  const query = {};
  if (search === "" || search === "?")
    return query;
  const hasLeadingIM = search[0] === "?";
  const searchParams = (hasLeadingIM ? search.slice(1) : search).split("&");
  for (let i2 = 0; i2 < searchParams.length; ++i2) {
    const searchParam = searchParams[i2].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key2 = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value26 = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key2 in query) {
      let currentValue = query[key2];
      if (!Array.isArray(currentValue)) {
        currentValue = query[key2] = [currentValue];
      }
      currentValue.push(value26);
    } else {
      query[key2] = value26;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search = "";
  for (let key2 in query) {
    const value26 = query[key2];
    key2 = encodeQueryKey(key2);
    if (value26 == null) {
      if (value26 !== void 0) {
        search += (search.length ? "&" : "") + key2;
      }
      continue;
    }
    const values = Array.isArray(value26) ? value26.map((v2) => v2 && encodeQueryValue(v2)) : [value26 && encodeQueryValue(value26)];
    values.forEach((value27) => {
      if (value27 !== void 0) {
        search += (search.length ? "&" : "") + key2;
        if (value27 != null)
          search += "=" + value27;
      }
    });
  }
  return search;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key2 in query) {
    const value26 = query[key2];
    if (value26 !== void 0) {
      normalizedQuery[key2] = Array.isArray(value26) ? value26.map((v2) => v2 == null ? null : "" + v2) : value26 == null ? value26 : "" + value26;
    }
  }
  return normalizedQuery;
}
function useCallbacks() {
  let handlers = [];
  function add3(handler8) {
    handlers.push(handler8);
    return () => {
      const i2 = handlers.indexOf(handler8);
      if (i2 > -1)
        handlers.splice(i2, 1);
    };
  }
  function reset3() {
    handlers = [];
  }
  return {
    add: add3,
    list: () => handlers,
    reset: reset3
  };
}
function guardToPromiseFn(guard, to2, from2, record, name2) {
  const enterCallbackArray = record && (record.enterCallbacks[name2] = record.enterCallbacks[name2] || []);
  return () => new Promise((resolve2, reject) => {
    const next3 = (valid) => {
      if (valid === false)
        reject(createRouterError(4, {
          from: from2,
          to: to2
        }));
      else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && record.enterCallbacks[name2] === enterCallbackArray && typeof valid === "function")
          enterCallbackArray.push(valid);
        resolve2();
      }
    };
    const guardReturn = guard.call(record && record.instances[name2], to2, from2, next3);
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next3);
    guardCall.catch((err) => reject(err));
  });
}
function extractComponentsGuards(matched, guardType, to2, from2) {
  const guards = [];
  for (const record of matched) {
    for (const name2 in record.components) {
      let rawComponent = record.components[name2];
      if (guardType !== "beforeRouteEnter" && !record.instances[name2])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options2 = rawComponent.__vccOpts || rawComponent;
        const guard = options2[guardType];
        guard && guards.push(guardToPromiseFn(guard, to2, from2, record, name2));
      } else {
        let componentPromise = rawComponent();
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name2}" at "${record.path}"`));
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.components[name2] = resolvedComponent;
          const options2 = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options2[guardType];
          return guard && guardToPromiseFn(guard, to2, from2, record, name2)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink(props2) {
  const router2 = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() => router2.resolve(unref(props2.to)));
  const activeRecordIndex = computed(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index2 = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index2 > -1)
      return index2;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return length > 1 && getOriginalPath(routeMatched) === parentRecordPath && currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index2;
  });
  const isActive = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e2 = {}) {
    if (guardEvent(e2)) {
      return router2[unref(props2.replace) ? "replace" : "push"](unref(props2.to)).catch(noop);
    }
    return Promise.resolve();
  }
  return {
    route,
    href: computed(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent({
  name: "RouterLink",
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink,
  setup(props2, { slots }) {
    const link = reactive(useLink(props2));
    const { options: options2 } = inject(routerKey);
    const elClass = computed(() => ({
      [getLinkClass(props2.activeClass, options2.linkActiveClass, "router-link-active")]: link.isActive,
      [getLinkClass(props2.exactActiveClass, options2.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props2.custom ? children : h$2("a", {
        "aria-current": link.isExactActive ? props2.ariaCurrentValue : null,
        href: link.href,
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e2) {
  if (e2.metaKey || e2.altKey || e2.ctrlKey || e2.shiftKey)
    return;
  if (e2.defaultPrevented)
    return;
  if (e2.button !== void 0 && e2.button !== 0)
    return;
  if (e2.currentTarget && e2.currentTarget.getAttribute) {
    const target = e2.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e2.preventDefault)
    e2.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key2 in inner) {
    const innerValue = inner[key2];
    const outerValue = outer[key2];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!Array.isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value26, i2) => value26 !== outerValue[i2]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent({
  name: "RouterView",
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  setup(props2, { attrs, slots }) {
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() => props2.route || injectedRoute.value);
    const depth = inject(viewDepthKey, 0);
    const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth]);
    provide(viewDepthKey, depth + 1);
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    watch(() => [viewRef.value, matchedRouteRef.value, props2.name], ([instance, to2, name2], [oldInstance, from2, oldName]) => {
      if (to2) {
        to2.instances[name2] = instance;
        if (from2 && from2 !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from2.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from2.updateGuards;
          }
        }
      }
      if (instance && to2 && (!from2 || !isSameRouteRecord(to2, from2) || !oldInstance)) {
        (to2.enterCallbacks[name2] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[props2.name];
      const currentName = props2.name;
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[props2.name];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h$2(ViewComponent, assign({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      return normalizeSlot(slots.default, { Component: component, route }) || component;
    };
  }
});
function normalizeSlot(slot, data80) {
  if (!slot)
    return null;
  const slotContent = slot(data80);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function createRouter(options2) {
  const matcher = createRouterMatcher(options2.routes, options2);
  const parseQuery$1 = options2.parseQuery || parseQuery;
  const stringifyQuery$1 = options2.stringifyQuery || stringifyQuery;
  const routerHistory = options2.history;
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options2.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = applyToParams.bind(null, decode);
  function addRoute(parentOrRoute, route) {
    let parent2;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent2 = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent2);
  }
  function removeRoute(name2) {
    const recordMatcher = matcher.getRecordMatcher(name2);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name2) {
    return !!matcher.getRecordMatcher(name2);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      return assign(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      matcherLocation = assign({}, rawLocation, {
        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign({}, rawLocation.params);
      for (const key2 in targetParams) {
        if (targetParams[key2] == null) {
          delete targetParams[key2];
        }
      }
      matcherLocation = assign({}, rawLocation, {
        params: encodeParams(rawLocation.params)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash = rawLocation.hash || "";
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {
      hash: encodeHash(hash),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    return assign({
      fullPath,
      hash,
      query: stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL(parseQuery$1, to2, currentRoute.value.path) : assign({}, to2);
  }
  function checkCanceledNavigation(to2, from2) {
    if (pendingLocation !== to2) {
      return createRouterError(8, {
        from: from2,
        to: to2
      });
    }
  }
  function push2(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push2(assign(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : { path: newTargetLocation };
        newTargetLocation.params = {};
      }
      return assign({
        query: to2.query,
        hash: to2.hash,
        params: to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from2 = currentRoute.value;
    const data80 = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(assign(locationAsObject(shouldRedirect), {
        state: data80,
        force,
        replace: replace2
      }), redirectedFrom || targetLocation);
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$1, from2, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from: from2 });
      handleScroll4(from2, from2, true, false);
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from2)).catch((error3) => isNavigationFailure(error3) ? error3 : triggerError(error3, toLocation, from2)).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(failure2, 2)) {
          return pushWithRedirect(assign(locationAsObject(failure2.to), {
            state: data80,
            force,
            replace: replace2
          }), redirectedFrom || toLocation);
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from2, true, replace2, data80);
      }
      triggerAfterEach(toLocation, from2, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from2) {
    const error3 = checkCanceledNavigation(to2, from2);
    return error3 ? Promise.reject(error3) : Promise.resolve();
  }
  function navigate(to2, from2) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to2, from2);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to2, from2);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to2, from2));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from2);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from2));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to2, from2);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to2, from2));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of to2.matched) {
        if (record.beforeEnter && !from2.matched.includes(record)) {
          if (Array.isArray(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to2, from2));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to2, from2));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to2, from2);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from2));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure(err, 8) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from2, failure) {
    for (const guard of afterGuards.list())
      guard(to2, from2, failure);
  }
  function finalizeNavigation(toLocation, from2, isPush, replace2, data80) {
    const error3 = checkCanceledNavigation(toLocation, from2);
    if (error3)
      return error3;
    const isFirstNavigation = from2 === START_LOCATION_NORMALIZED;
    const state2 = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign({
          scroll: isFirstNavigation && state2 && state2.scroll
        }, data80));
      else
        routerHistory.push(toLocation.fullPath, data80);
    }
    currentRoute.value = toLocation;
    handleScroll4(toLocation, from2, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    removeHistoryListener = routerHistory.listen((to2, _from, info3) => {
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop);
        return;
      }
      pendingLocation = toLocation;
      const from2 = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from2.fullPath, info3.delta), computeScrollPosition());
      }
      navigate(toLocation, from2).catch((error3) => {
        if (isNavigationFailure(error3, 4 | 8)) {
          return error3;
        }
        if (isNavigationFailure(error3, 2)) {
          pushWithRedirect(error3.to, toLocation).then((failure) => {
            if (isNavigationFailure(failure, 4 | 16) && !info3.delta && info3.type === NavigationType.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop);
          return Promise.reject();
        }
        if (info3.delta)
          routerHistory.go(-info3.delta, false);
        return triggerError(error3, toLocation, from2);
      }).then((failure) => {
        failure = failure || finalizeNavigation(toLocation, from2, false);
        if (failure) {
          if (info3.delta) {
            routerHistory.go(-info3.delta, false);
          } else if (info3.type === NavigationType.pop && isNavigationFailure(failure, 4 | 16)) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from2, failure);
      }).catch(noop);
    });
  }
  let readyHandlers = useCallbacks();
  let errorHandlers = useCallbacks();
  let ready;
  function triggerError(error3, to2, from2) {
    markAsReady(error3);
    const list = errorHandlers.list();
    if (list.length) {
      list.forEach((handler8) => handler8(error3, to2, from2));
    } else {
      console.error(error3);
    }
    return Promise.reject(error3);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve3, reject) => {
      readyHandlers.add([resolve3, reject]);
    });
  }
  function markAsReady(err) {
    if (ready)
      return;
    ready = true;
    setupListeners();
    readyHandlers.list().forEach(([resolve3, reject]) => err ? reject(err) : resolve3());
    readyHandlers.reset();
  }
  function handleScroll4(to2, from2, isPush, isFirstNavigation) {
    const { scrollBehavior } = options2;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick().then(() => scrollBehavior(to2, from2, scrollPosition)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to2, from2));
  }
  const go2 = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = new Set();
  const router2 = {
    currentRoute,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options: options2,
    push: push2,
    replace,
    go: go2,
    back: () => go2(-1),
    forward: () => go2(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorHandlers.add,
    isReady,
    install(app) {
      const router3 = this;
      app.component("RouterLink", RouterLink);
      app.component("RouterView", RouterView);
      app.config.globalProperties.$router = router3;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref(currentRoute)
      });
      if (isBrowser && !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push2(routerHistory.location).catch((err) => {
        });
      }
      const reactiveRoute = {};
      for (const key2 in START_LOCATION_NORMALIZED) {
        reactiveRoute[key2] = computed(() => currentRoute.value[key2]);
      }
      app.provide(routerKey, router3);
      app.provide(routeLocationKey, reactive(reactiveRoute));
      app.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
    }
  };
  return router2;
}
function runGuardQueue(guards) {
  return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());
}
function extractChangingRecords(to2, from2) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from2.matched.length, to2.matched.length);
  for (let i2 = 0; i2 < len; i2++) {
    const recordFrom = from2.matched[i2];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i2];
    if (recordTo) {
      if (!from2.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
function useRoute() {
  return inject(routeLocationKey);
}
var index$j = "";
var index$i = "";
var index$h = "";
var index$g = "";
var index$f = "";
var index$e = "";
var index$d = "";
var index$c = "";
var index$b = "";
var index$a = "";
var index$9 = "";
var index$8 = "";
var index$7 = "";
var index$6 = "";
var index$5 = "";
var axios$2 = { exports: {} };
var bind$2 = function bind2(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i2 = 0; i2 < args.length; i2++) {
      args[i2] = arguments[i2];
    }
    return fn.apply(thisArg, args);
  };
};
var bind$1 = bind$2;
var toString$1 = Object.prototype.toString;
function isArray(val) {
  return toString$1.call(val) === "[object Array]";
}
function isUndefined(val) {
  return typeof val === "undefined";
}
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
function isArrayBuffer(val) {
  return toString$1.call(val) === "[object ArrayBuffer]";
}
function isFormData(val) {
  return typeof FormData !== "undefined" && val instanceof FormData;
}
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}
function isString(val) {
  return typeof val === "string";
}
function isNumber(val) {
  return typeof val === "number";
}
function isObject(val) {
  return val !== null && typeof val === "object";
}
function isPlainObject(val) {
  if (toString$1.call(val) !== "[object Object]") {
    return false;
  }
  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
function isDate(val) {
  return toString$1.call(val) === "[object Date]";
}
function isFile(val) {
  return toString$1.call(val) === "[object File]";
}
function isBlob(val) {
  return toString$1.call(val) === "[object Blob]";
}
function isFunction(val) {
  return toString$1.call(val) === "[object Function]";
}
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
function isURLSearchParams(val) {
  return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
}
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
function isStandardBrowserEnv() {
  if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function forEach(obj, fn) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
      fn.call(null, obj[i2], i2, obj);
    }
  } else {
    for (var key2 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key2)) {
        fn.call(null, obj[key2], key2, obj);
      }
    }
  }
}
function merge() {
  var result = {};
  function assignValue2(val, key2) {
    if (isPlainObject(result[key2]) && isPlainObject(val)) {
      result[key2] = merge(result[key2], val);
    } else if (isPlainObject(val)) {
      result[key2] = merge({}, val);
    } else if (isArray(val)) {
      result[key2] = val.slice();
    } else {
      result[key2] = val;
    }
  }
  for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
    forEach(arguments[i2], assignValue2);
  }
  return result;
}
function extend(a2, b2, thisArg) {
  forEach(b2, function assignValue2(val, key2) {
    if (thisArg && typeof val === "function") {
      a2[key2] = bind$1(val, thisArg);
    } else {
      a2[key2] = val;
    }
  });
  return a2;
}
function stripBOM(content) {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
}
var utils$d = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isFunction,
  isStream,
  isURLSearchParams,
  isStandardBrowserEnv,
  forEach,
  merge,
  extend,
  trim,
  stripBOM
};
var utils$c = utils$d;
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL$2 = function buildURL2(url2, params, paramsSerializer) {
  if (!params) {
    return url2;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$c.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils$c.forEach(params, function serialize(val, key2) {
      if (val === null || typeof val === "undefined") {
        return;
      }
      if (utils$c.isArray(val)) {
        key2 = key2 + "[]";
      } else {
        val = [val];
      }
      utils$c.forEach(val, function parseValue(v2) {
        if (utils$c.isDate(v2)) {
          v2 = v2.toISOString();
        } else if (utils$c.isObject(v2)) {
          v2 = JSON.stringify(v2);
        }
        parts.push(encode(key2) + "=" + encode(v2));
      });
    });
    serializedParams = parts.join("&");
  }
  if (serializedParams) {
    var hashmarkIndex = url2.indexOf("#");
    if (hashmarkIndex !== -1) {
      url2 = url2.slice(0, hashmarkIndex);
    }
    url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url2;
};
var utils$b = utils$d;
function InterceptorManager$1() {
  this.handlers = [];
}
InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options2) {
  this.handlers.push({
    fulfilled,
    rejected,
    synchronous: options2 ? options2.synchronous : false,
    runWhen: options2 ? options2.runWhen : null
  });
  return this.handlers.length - 1;
};
InterceptorManager$1.prototype.eject = function eject(id2) {
  if (this.handlers[id2]) {
    this.handlers[id2] = null;
  }
};
InterceptorManager$1.prototype.forEach = function forEach2(fn) {
  utils$b.forEach(this.handlers, function forEachHandler(h2) {
    if (h2 !== null) {
      fn(h2);
    }
  });
};
var InterceptorManager_1 = InterceptorManager$1;
var utils$a = utils$d;
var normalizeHeaderName$1 = function normalizeHeaderName2(headers, normalizedName) {
  utils$a.forEach(headers, function processHeader(value26, name2) {
    if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value26;
      delete headers[name2];
    }
  });
};
var enhanceError$2 = function enhanceError2(error3, config2, code, request2, response) {
  error3.config = config2;
  if (code) {
    error3.code = code;
  }
  error3.request = request2;
  error3.response = response;
  error3.isAxiosError = true;
  error3.toJSON = function toJSON2() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error3;
};
var enhanceError$1 = enhanceError$2;
var createError$2 = function createError2(message2, config2, code, request2, response) {
  var error3 = new Error(message2);
  return enhanceError$1(error3, config2, code, request2, response);
};
var createError$1 = createError$2;
var settle$1 = function settle2(resolve2, reject, response) {
  var validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve2(response);
  } else {
    reject(createError$1("Request failed with status code " + response.status, response.config, null, response.request, response));
  }
};
var utils$9 = utils$d;
var cookies$1 = utils$9.isStandardBrowserEnv() ? function standardBrowserEnv() {
  return {
    write: function write(name2, value26, expires, path2, domain, secure) {
      var cookie = [];
      cookie.push(name2 + "=" + encodeURIComponent(value26));
      if (utils$9.isNumber(expires)) {
        cookie.push("expires=" + new Date(expires).toGMTString());
      }
      if (utils$9.isString(path2)) {
        cookie.push("path=" + path2);
      }
      if (utils$9.isString(domain)) {
        cookie.push("domain=" + domain);
      }
      if (secure === true) {
        cookie.push("secure");
      }
      document.cookie = cookie.join("; ");
    },
    read: function read(name2) {
      var match5 = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
      return match5 ? decodeURIComponent(match5[3]) : null;
    },
    remove: function remove3(name2) {
      this.write(name2, "", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove3() {
    }
  };
}();
var isAbsoluteURL$1 = function isAbsoluteURL2(url2) {
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url2);
};
var combineURLs$1 = function combineURLs2(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};
var isAbsoluteURL = isAbsoluteURL$1;
var combineURLs = combineURLs$1;
var buildFullPath$1 = function buildFullPath2(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};
var utils$8 = utils$d;
var ignoreDuplicateOf = [
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
];
var parseHeaders$1 = function parseHeaders2(headers) {
  var parsed = {};
  var key2;
  var val;
  var i2;
  if (!headers) {
    return parsed;
  }
  utils$8.forEach(headers.split("\n"), function parser(line) {
    i2 = line.indexOf(":");
    key2 = utils$8.trim(line.substr(0, i2)).toLowerCase();
    val = utils$8.trim(line.substr(i2 + 1));
    if (key2) {
      if (parsed[key2] && ignoreDuplicateOf.indexOf(key2) >= 0) {
        return;
      }
      if (key2 === "set-cookie") {
        parsed[key2] = (parsed[key2] ? parsed[key2] : []).concat([val]);
      } else {
        parsed[key2] = parsed[key2] ? parsed[key2] + ", " + val : val;
      }
    }
  });
  return parsed;
};
var utils$7 = utils$d;
var isURLSameOrigin$1 = utils$7.isStandardBrowserEnv() ? function standardBrowserEnv2() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement("a");
  var originURL;
  function resolveURL(url2) {
    var href = url2;
    if (msie) {
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute("href", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin2(requestURL) {
    var parsed = utils$7.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin2() {
    return true;
  };
}();
function Cancel$3(message2) {
  this.message = message2;
}
Cancel$3.prototype.toString = function toString2() {
  return "Cancel" + (this.message ? ": " + this.message : "");
};
Cancel$3.prototype.__CANCEL__ = true;
var Cancel_1 = Cancel$3;
var utils$6 = utils$d;
var settle = settle$1;
var cookies = cookies$1;
var buildURL$1 = buildURL$2;
var buildFullPath = buildFullPath$1;
var parseHeaders = parseHeaders$1;
var isURLSameOrigin = isURLSameOrigin$1;
var createError = createError$2;
var defaults$4 = defaults_1;
var Cancel$2 = Cancel_1;
var xhr = function xhrAdapter(config2) {
  return new Promise(function dispatchXhrRequest(resolve2, reject) {
    var requestData = config2.data;
    var requestHeaders = config2.headers;
    var responseType = config2.responseType;
    var onCanceled;
    function done() {
      if (config2.cancelToken) {
        config2.cancelToken.unsubscribe(onCanceled);
      }
      if (config2.signal) {
        config2.signal.removeEventListener("abort", onCanceled);
      }
    }
    if (utils$6.isFormData(requestData)) {
      delete requestHeaders["Content-Type"];
    }
    var request2 = new XMLHttpRequest();
    if (config2.auth) {
      var username = config2.auth.username || "";
      var password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
      requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
    }
    var fullPath = buildFullPath(config2.baseURL, config2.url);
    request2.open(config2.method.toUpperCase(), buildURL$1(fullPath, config2.params, config2.paramsSerializer), true);
    request2.timeout = config2.timeout;
    function onloadend() {
      if (!request2) {
        return;
      }
      var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders(request2.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
      var response = {
        data: responseData,
        status: request2.status,
        statusText: request2.statusText,
        headers: responseHeaders,
        config: config2,
        request: request2
      };
      settle(function _resolve(value26) {
        resolve2(value26);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request2 = null;
    }
    if ("onloadend" in request2) {
      request2.onloadend = onloadend;
    } else {
      request2.onreadystatechange = function handleLoad() {
        if (!request2 || request2.readyState !== 4) {
          return;
        }
        if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request2.onabort = function handleAbort() {
      if (!request2) {
        return;
      }
      reject(createError("Request aborted", config2, "ECONNABORTED", request2));
      request2 = null;
    };
    request2.onerror = function handleError2() {
      reject(createError("Network Error", config2, null, request2));
      request2 = null;
    };
    request2.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
      var transitional2 = config2.transitional || defaults$4.transitional;
      if (config2.timeoutErrorMessage) {
        timeoutErrorMessage = config2.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config2, transitional2.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request2));
      request2 = null;
    };
    if (utils$6.isStandardBrowserEnv()) {
      var xsrfValue = (config2.withCredentials || isURLSameOrigin(fullPath)) && config2.xsrfCookieName ? cookies.read(config2.xsrfCookieName) : void 0;
      if (xsrfValue) {
        requestHeaders[config2.xsrfHeaderName] = xsrfValue;
      }
    }
    if ("setRequestHeader" in request2) {
      utils$6.forEach(requestHeaders, function setRequestHeader(val, key2) {
        if (typeof requestData === "undefined" && key2.toLowerCase() === "content-type") {
          delete requestHeaders[key2];
        } else {
          request2.setRequestHeader(key2, val);
        }
      });
    }
    if (!utils$6.isUndefined(config2.withCredentials)) {
      request2.withCredentials = !!config2.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request2.responseType = config2.responseType;
    }
    if (typeof config2.onDownloadProgress === "function") {
      request2.addEventListener("progress", config2.onDownloadProgress);
    }
    if (typeof config2.onUploadProgress === "function" && request2.upload) {
      request2.upload.addEventListener("progress", config2.onUploadProgress);
    }
    if (config2.cancelToken || config2.signal) {
      onCanceled = function(cancel2) {
        if (!request2) {
          return;
        }
        reject(!cancel2 || cancel2 && cancel2.type ? new Cancel$2("canceled") : cancel2);
        request2.abort();
        request2 = null;
      };
      config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
      if (config2.signal) {
        config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
      }
    }
    if (!requestData) {
      requestData = null;
    }
    request2.send(requestData);
  });
};
var utils$5 = utils$d;
var normalizeHeaderName = normalizeHeaderName$1;
var enhanceError = enhanceError$2;
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value26) {
  if (!utils$5.isUndefined(headers) && utils$5.isUndefined(headers["Content-Type"])) {
    headers["Content-Type"] = value26;
  }
}
function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== "undefined") {
    adapter = xhr;
  } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
    adapter = xhr;
  }
  return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
  if (utils$5.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$5.trim(rawValue);
    } catch (e2) {
      if (e2.name !== "SyntaxError") {
        throw e2;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults$3 = {
  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data80, headers) {
    normalizeHeaderName(headers, "Accept");
    normalizeHeaderName(headers, "Content-Type");
    if (utils$5.isFormData(data80) || utils$5.isArrayBuffer(data80) || utils$5.isBuffer(data80) || utils$5.isStream(data80) || utils$5.isFile(data80) || utils$5.isBlob(data80)) {
      return data80;
    }
    if (utils$5.isArrayBufferView(data80)) {
      return data80.buffer;
    }
    if (utils$5.isURLSearchParams(data80)) {
      setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
      return data80.toString();
    }
    if (utils$5.isObject(data80) || headers && headers["Content-Type"] === "application/json") {
      setContentTypeIfUnset(headers, "application/json");
      return stringifySafely(data80);
    }
    return data80;
  }],
  transformResponse: [function transformResponse(data80) {
    var transitional2 = this.transitional || defaults$3.transitional;
    var silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
    var forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
    if (strictJSONParsing || forcedJSONParsing && utils$5.isString(data80) && data80.length) {
      try {
        return JSON.parse(data80);
      } catch (e2) {
        if (strictJSONParsing) {
          if (e2.name === "SyntaxError") {
            throw enhanceError(e2, this, "E_JSON_PARSE");
          }
          throw e2;
        }
      }
    }
    return data80;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils$5.forEach(["delete", "get", "head"], function forEachMethodNoData(method3) {
  defaults$3.headers[method3] = {};
});
utils$5.forEach(["post", "put", "patch"], function forEachMethodWithData(method3) {
  defaults$3.headers[method3] = utils$5.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_1 = defaults$3;
var utils$4 = utils$d;
var defaults$2 = defaults_1;
var transformData$1 = function transformData2(data80, headers, fns) {
  var context2 = this || defaults$2;
  utils$4.forEach(fns, function transform(fn) {
    data80 = fn.call(context2, data80, headers);
  });
  return data80;
};
var isCancel$1 = function isCancel2(value26) {
  return !!(value26 && value26.__CANCEL__);
};
var utils$3 = utils$d;
var transformData = transformData$1;
var isCancel = isCancel$1;
var defaults$1 = defaults_1;
var Cancel$1 = Cancel_1;
function throwIfCancellationRequested(config2) {
  if (config2.cancelToken) {
    config2.cancelToken.throwIfRequested();
  }
  if (config2.signal && config2.signal.aborted) {
    throw new Cancel$1("canceled");
  }
}
var dispatchRequest$1 = function dispatchRequest2(config2) {
  throwIfCancellationRequested(config2);
  config2.headers = config2.headers || {};
  config2.data = transformData.call(config2, config2.data, config2.headers, config2.transformRequest);
  config2.headers = utils$3.merge(config2.headers.common || {}, config2.headers[config2.method] || {}, config2.headers);
  utils$3.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method3) {
    delete config2.headers[method3];
  });
  var adapter = config2.adapter || defaults$1.adapter;
  return adapter(config2).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config2);
    response.data = transformData.call(config2, response.data, response.headers, config2.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config2);
      if (reason && reason.response) {
        reason.response.data = transformData.call(config2, reason.response.data, reason.response.headers, config2.transformResponse);
      }
    }
    return Promise.reject(reason);
  });
};
var utils$2 = utils$d;
var mergeConfig$2 = function mergeConfig2(config1, config2) {
  config2 = config2 || {};
  var config3 = {};
  function getMergedValue(target, source2) {
    if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source2)) {
      return utils$2.merge(target, source2);
    } else if (utils$2.isPlainObject(source2)) {
      return utils$2.merge({}, source2);
    } else if (utils$2.isArray(source2)) {
      return source2.slice();
    }
    return source2;
  }
  function mergeDeepProperties(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils$2.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function valueFromConfig2(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    }
  }
  function defaultToConfig2(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    } else if (!utils$2.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  var mergeMap = {
    "url": valueFromConfig2,
    "method": valueFromConfig2,
    "data": valueFromConfig2,
    "baseURL": defaultToConfig2,
    "transformRequest": defaultToConfig2,
    "transformResponse": defaultToConfig2,
    "paramsSerializer": defaultToConfig2,
    "timeout": defaultToConfig2,
    "timeoutMessage": defaultToConfig2,
    "withCredentials": defaultToConfig2,
    "adapter": defaultToConfig2,
    "responseType": defaultToConfig2,
    "xsrfCookieName": defaultToConfig2,
    "xsrfHeaderName": defaultToConfig2,
    "onUploadProgress": defaultToConfig2,
    "onDownloadProgress": defaultToConfig2,
    "decompress": defaultToConfig2,
    "maxContentLength": defaultToConfig2,
    "maxBodyLength": defaultToConfig2,
    "transport": defaultToConfig2,
    "httpAgent": defaultToConfig2,
    "httpsAgent": defaultToConfig2,
    "cancelToken": defaultToConfig2,
    "socketPath": defaultToConfig2,
    "responseEncoding": defaultToConfig2,
    "validateStatus": mergeDirectKeys
  };
  utils$2.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge3 = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge3(prop);
    utils$2.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config3[prop] = configValue);
  });
  return config3;
};
var data = {
  "version": "0.24.0"
};
var VERSION = data.version;
var validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type3, i2) {
  validators$1[type3] = function validator5(thing) {
    return typeof thing === type3 || "a" + (i2 < 1 ? "n " : " ") + type3;
  };
});
var deprecatedWarnings = {};
validators$1.transitional = function transitional(validator5, version2, message2) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message2 ? ". " + message2 : "");
  }
  return function(value26, opt, opts2) {
    if (validator5 === false) {
      throw new Error(formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")));
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(formatMessage(opt, " has been deprecated since v" + version2 + " and will be removed in the near future"));
    }
    return validator5 ? validator5(value26, opt, opts2) : true;
  };
};
function assertOptions(options2, schema, allowUnknown) {
  if (typeof options2 !== "object") {
    throw new TypeError("options must be an object");
  }
  var keys2 = Object.keys(options2);
  var i2 = keys2.length;
  while (i2-- > 0) {
    var opt = keys2[i2];
    var validator5 = schema[opt];
    if (validator5) {
      var value26 = options2[opt];
      var result = value26 === void 0 || validator5(value26, opt, options2);
      if (result !== true) {
        throw new TypeError("option " + opt + " must be " + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error("Unknown option " + opt);
    }
  }
}
var validator$1 = {
  assertOptions,
  validators: validators$1
};
var utils$1 = utils$d;
var buildURL = buildURL$2;
var InterceptorManager = InterceptorManager_1;
var dispatchRequest = dispatchRequest$1;
var mergeConfig$1 = mergeConfig$2;
var validator = validator$1;
var validators = validator.validators;
function Axios$1(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
Axios$1.prototype.request = function request(config2) {
  if (typeof config2 === "string") {
    config2 = arguments[1] || {};
    config2.url = arguments[0];
  } else {
    config2 = config2 || {};
  }
  config2 = mergeConfig$1(this.defaults, config2);
  if (config2.method) {
    config2.method = config2.method.toLowerCase();
  } else if (this.defaults.method) {
    config2.method = this.defaults.method.toLowerCase();
  } else {
    config2.method = "get";
  }
  var transitional2 = config2.transitional;
  if (transitional2 !== void 0) {
    validator.assertOptions(transitional2, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
      return;
    }
    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;
  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, void 0];
    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);
    promise = Promise.resolve(config2);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }
    return promise;
  }
  var newConfig = config2;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error3) {
      onRejected(error3);
      break;
    }
  }
  try {
    promise = dispatchRequest(newConfig);
  } catch (error3) {
    return Promise.reject(error3);
  }
  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }
  return promise;
};
Axios$1.prototype.getUri = function getUri(config2) {
  config2 = mergeConfig$1(this.defaults, config2);
  return buildURL(config2.url, config2.params, config2.paramsSerializer).replace(/^\?/, "");
};
utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method3) {
  Axios$1.prototype[method3] = function(url2, config2) {
    return this.request(mergeConfig$1(config2 || {}, {
      method: method3,
      url: url2,
      data: (config2 || {}).data
    }));
  };
});
utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData2(method3) {
  Axios$1.prototype[method3] = function(url2, data80, config2) {
    return this.request(mergeConfig$1(config2 || {}, {
      method: method3,
      url: url2,
      data: data80
    }));
  };
});
var Axios_1 = Axios$1;
var Cancel = Cancel_1;
function CancelToken(executor) {
  if (typeof executor !== "function") {
    throw new TypeError("executor must be a function.");
  }
  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve2) {
    resolvePromise = resolve2;
  });
  var token2 = this;
  this.promise.then(function(cancel2) {
    if (!token2._listeners)
      return;
    var i2;
    var l2 = token2._listeners.length;
    for (i2 = 0; i2 < l2; i2++) {
      token2._listeners[i2](cancel2);
    }
    token2._listeners = null;
  });
  this.promise.then = function(onfulfilled) {
    var _resolve;
    var promise = new Promise(function(resolve2) {
      token2.subscribe(resolve2);
      _resolve = resolve2;
    }).then(onfulfilled);
    promise.cancel = function reject() {
      token2.unsubscribe(_resolve);
    };
    return promise;
  };
  executor(function cancel2(message2) {
    if (token2.reason) {
      return;
    }
    token2.reason = new Cancel(message2);
    resolvePromise(token2.reason);
  });
}
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
CancelToken.prototype.subscribe = function subscribe2(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }
  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};
CancelToken.prototype.unsubscribe = function unsubscribe2(listener) {
  if (!this._listeners) {
    return;
  }
  var index2 = this._listeners.indexOf(listener);
  if (index2 !== -1) {
    this._listeners.splice(index2, 1);
  }
};
CancelToken.source = function source() {
  var cancel2;
  var token2 = new CancelToken(function executor(c2) {
    cancel2 = c2;
  });
  return {
    token: token2,
    cancel: cancel2
  };
};
var CancelToken_1 = CancelToken;
var spread = function spread2(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};
var isAxiosError = function isAxiosError2(payload) {
  return typeof payload === "object" && payload.isAxiosError === true;
};
var utils = utils$d;
var bind = bind$2;
var Axios = Axios_1;
var mergeConfig = mergeConfig$2;
var defaults = defaults_1;
function createInstance(defaultConfig) {
  var context2 = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context2);
  utils.extend(instance, Axios.prototype, context2);
  utils.extend(instance, context2);
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios$1 = createInstance(defaults);
axios$1.Axios = Axios;
axios$1.Cancel = Cancel_1;
axios$1.CancelToken = CancelToken_1;
axios$1.isCancel = isCancel$1;
axios$1.VERSION = data.version;
axios$1.all = function all(promises) {
  return Promise.all(promises);
};
axios$1.spread = spread;
axios$1.isAxiosError = isAxiosError;
axios$2.exports = axios$1;
axios$2.exports.default = axios$1;
var axios = axios$2.exports;
function isNull(value26) {
  return value26 === null;
}
var isNull_1 = isNull;
const state$3 = reactive({ token: null });
const setToken = (token2) => {
  state$3.token = token2;
};
const token = computed(() => state$3.token);
const useIdentityToken = () => ({
  setToken,
  token
});
const state$2 = reactive({ coreApiUrl: {}.VITE_CORE_API_URL_FALLBACK });
const setCoreApiUrl = (url2) => {
  console.log("Updated Core API URL to:", url2);
  state$2.coreApiUrl = url2;
};
const coreUrl = computed(() => state$2.coreApiUrl);
const useCoreApiUrl = () => ({
  coreUrl,
  setCoreApiUrl
});
const createApiInstance = (baseURL) => {
  const apiInstance = axios.create({ baseURL });
  const tokenChannel = index_umd.exports.openCommunicationChannel("Token");
  const { token: identityToken } = useIdentityToken();
  const { coreUrl: CORE_API_URL } = useCoreApiUrl();
  tokenChannel.on("set", (token2) => {
    isRefreshing = false;
    onRefreshed(token2);
    subscribers2 = [];
  });
  let isRefreshing = false;
  let subscribers2 = [];
  const subscribeTokenRefresh = (cb) => {
    subscribers2.push(cb);
  };
  const onRefreshed = (tokens2) => {
    subscribers2.map((cb) => cb(tokens2));
  };
  apiInstance.interceptors.request.use((config2) => {
    config2.headers = __spreadValues({}, config2.headers);
    const token2 = identityToken.value;
    if (!isNull_1(token2)) {
      config2.headers.Authorization = `Bearer ${token2}`;
    }
    config2.headers["X-Core-Url"] = CORE_API_URL.value === "http://localhost" ? "http://host.docker.internal:80" : CORE_API_URL.value;
    return config2;
  });
  apiInstance.interceptors.response.use(void 0, async (error3) => {
    var _a, _b;
    const originalRequest = error3.config;
    if (((_a = error3.response) == null ? void 0 : _a.status) === 403)
      ;
    if (((_b = error3.response) == null ? void 0 : _b.status) === 401 && !originalRequest._retried) {
      originalRequest._retried = true;
      if (!isRefreshing) {
        isRefreshing = true;
        tokenChannel.emit("refresh");
      }
      return new Promise((resolve2) => {
        subscribeTokenRefresh((refreshedToken) => {
          if (!refreshedToken) {
            throw error3;
          }
          originalRequest.headers = __spreadProps(__spreadValues({}, originalRequest.headers), {
            Authorization: `Bearer ${refreshedToken}`
          });
          resolve2(apiInstance.request(originalRequest));
        });
      });
    }
    throw error3;
  });
  return apiInstance;
};
const state$1 = reactive({ serviceUrl: {}.VITE_SERVICE_API_URL });
const setServiceUrl = (url2) => {
  console.log("Updated Service URL to:", url2);
  state$1.serviceUrl = url2;
};
const serviceUrl = computed(() => state$1.serviceUrl);
const useServiceUrl = () => ({
  serviceUrl,
  setServiceUrl
});
const FALLBACK_SERVICE_API_URL = {}.VITE_SERVICE_API_URL;
const useApi = () => {
  const store = useServiceUrl();
  const url2 = computed(() => store.serviceUrl.value && !store.serviceUrl.value.includes("localhost") ? store.serviceUrl.value : FALLBACK_SERVICE_API_URL);
  if (!url2.value)
    console.error("[Microfront] Service API URL is not defined!");
  return computed(() => createApiInstance(url2.value));
};
var _export_sfc = (sfc, props2) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key2, val] of props2) {
    target[key2] = val;
  }
  return target;
};
const _sfc_main$2 = defineComponent({
  name: "Index",
  setup() {
    const feeds = ref([]);
    const isLoading = ref(false);
    const api2 = useApi();
    const page = ref(1);
    const pagination = reactive({
      value: page,
      pageSize: 24,
      total: 0,
      onChange: (current2) => {
        page.value = current2;
      }
    });
    const getFeeds = async () => {
      isLoading.value = true;
      try {
        const { data: data80 } = await api2.value.get(`/feeds`);
        feeds.value = data80.data;
        pagination.total = data80.meta.total;
      } catch (error3) {
        console.error(error3);
        if (axios.isAxiosError(error3)) {
          message.error(`Error: ${error3.response.data.error.message}`);
        } else {
          message.error(`Unexpected Error`);
        }
      }
      isLoading.value = false;
    };
    const newFeed = async () => {
      try {
        const { data: data80 } = await api2.value.post(`/feeds`, {
          name: "New feed",
          format: "csv",
          auth: "no",
          query: "/products",
          fields: { id: "$id" }
        });
        message.success("Created");
        await router.push({ name: "Feed", params: { id: data80.data.id } });
      } catch (error3) {
        console.error(error3);
        if (axios.isAxiosError(error3)) {
          message.error(`Error: ${error3.response.data.error.message}`);
        } else {
          message.error(`Unexpected Error`);
        }
      }
    };
    watch(page, () => getFeeds(), { immediate: true });
    return {
      newFeed,
      feeds,
      isLoading,
      pagination
    };
  }
});
const _hoisted_1$2 = /* @__PURE__ */ createTextVNode("New feed");
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_a_button = Button;
  const _component_a_page_header = __unplugin_components_4;
  const _component_router_link = resolveComponent("router-link");
  const _component_a_table_column = TableColumn;
  const _component_a_table = __unplugin_components_3;
  return openBlock(), createElementBlock(Fragment, null, [
    createVNode(_component_a_page_header, { title: "Feeds" }, {
      extra: withCtx(() => [
        createVNode(_component_a_button, { onClick: _ctx.newFeed }, {
          default: withCtx(() => [
            _hoisted_1$2
          ]),
          _: 1
        }, 8, ["onClick"])
      ]),
      _: 1
    }),
    createVNode(_component_a_table, {
      dataSource: _ctx.feeds,
      rowKey: "id",
      pagination: _ctx.pagination,
      loading: _ctx.isLoading,
      locale: { emptyText: "No feeds to show" }
    }, {
      default: withCtx(() => [
        createVNode(_component_a_table_column, {
          key: "name",
          title: "Name",
          "data-index": "name"
        }, {
          default: withCtx(({ record }) => [
            createVNode(_component_router_link, {
              to: { name: "Feed", params: { id: record.id } }
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(record.name), 1)
              ]),
              _: 2
            }, 1032, ["to"])
          ]),
          _: 1
        }),
        createVNode(_component_a_table_column, {
          key: "auth",
          title: "Auth",
          "data-index": "auth"
        }, {
          default: withCtx(({ record }) => [
            createTextVNode(toDisplayString(record.auth === "no" ? "no auth" : "basic"), 1)
          ]),
          _: 1
        }),
        createVNode(_component_a_table_column, {
          key: "refreshed_at",
          title: "Last refresh",
          "data-index": "refreshed_at"
        }, {
          default: withCtx(({ record }) => [
            createTextVNode(toDisplayString(record.refreshed_at ? new Date(record.refreshed_at).toLocaleString() : "not generated yet"), 1)
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["dataSource", "pagination", "loading"])
  ], 64);
}
var Index = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2]]);
var index$4 = "";
var index$3 = "";
var index$2 = "";
var index$1 = "";
var index = "";
var Feed_vue_vue_type_style_index_0_scoped_true_lang = "";
const _sfc_main$1 = defineComponent({
  name: "Feed",
  setup() {
    const route = useRoute();
    const feed = ref(null);
    const isLoading = ref(true);
    const feedId = computed(() => route.params.id);
    const api2 = useApi();
    const getFeed = async () => {
      try {
        const { data: data80 } = await api2.value.get(`/feeds/${feedId.value}`);
        feed.value = data80.data;
        feed.value.fields = JSON.stringify(feed.value.fields, null, 4);
      } catch (error3) {
        console.error(error3);
        if (axios.isAxiosError(error3)) {
          message.error(`Error: ${error3.response.data.error.message}`);
        } else {
          message.error("Unexpected error");
        }
      }
      isLoading.value = false;
    };
    const copy2 = (url2) => {
      navigator.clipboard.writeText(url2);
      message.success("Copied");
    };
    const submit = async (feed2) => {
      try {
        const json = JSON.parse(feed2.fields);
        let data80 = {
          name: feed2.name,
          format: feed2.format,
          query: feed2.query,
          auth: feed2.auth,
          fields: json
        };
        if (feed2.auth === "basic") {
          data80 = __spreadProps(__spreadValues({}, data80), {
            username: feed2.username,
            password: feed2.password
          });
        }
        await api2.value.patch(`/feeds/${feed2.id}`, data80);
        message.success("Saved");
      } catch (error3) {
        console.error(error3);
        if (axios.isAxiosError(error3)) {
          message.error(`Error: ${error3.response.data.error.message}`);
        } else {
          message.error("JSON is not valid");
        }
      }
    };
    const deleteFeed = (id2) => {
      Modal.confirm({
        title: "Do you want to delete this feed?",
        async onOk() {
          try {
            await api2.value.delete(`/feeds/${id2}`);
            message.success("Feed deleted");
            await router.push({ name: "Index" });
          } catch (error3) {
            console.error(error3);
            if (axios.isAxiosError(error3)) {
              message.error(`Error: ${error3.response.data.error.message}`);
            } else {
              message.error(`Unexpected Error`);
            }
          }
        }
      });
    };
    onBeforeMount(async () => await getFeed());
    return {
      copy: copy2,
      submit,
      deleteFeed,
      isLoading,
      feed
    };
  }
});
const _withScopeId = (n2) => (pushScopeId("data-v-3bb8dbed"), n2 = n2(), popScopeId(), n2);
const _hoisted_1$1 = {
  key: 0,
  class: "loading"
};
const _hoisted_2 = { key: 1 };
const _hoisted_3 = /* @__PURE__ */ createTextVNode("Copy url");
const _hoisted_4 = /* @__PURE__ */ createTextVNode("Delete");
const _hoisted_5 = /* @__PURE__ */ createTextVNode("CSV");
const _hoisted_6 = /* @__PURE__ */ createTextVNode("XML");
const _hoisted_7 = /* @__PURE__ */ createTextVNode("No auth");
const _hoisted_8 = /* @__PURE__ */ createTextVNode("Basic auth");
const _hoisted_9 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("h3", null, "Local", -1));
const _hoisted_10 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("ul", null, [
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#cover"),
    /* @__PURE__ */ createTextVNode(" - url to first photo")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#additional_image"),
    /* @__PURE__ */ createTextVNode(" - url to second photo")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#availability"),
    /* @__PURE__ */ createTextVNode(" - in stock | out of stock")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#avail"),
    /* @__PURE__ */ createTextVNode(" - availability in Ceneo format")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#price {currency}"),
    /* @__PURE__ */ createTextVNode(" - price with currency")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#sale_price {currency}"),
    /* @__PURE__ */ createTextVNode(" - sale price with currency")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#ean"),
    /* @__PURE__ */ createTextVNode(" - ean from attributes")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#product_url {url}"),
    /* @__PURE__ */ createTextVNode(" - full url to product")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#category"),
    /* @__PURE__ */ createTextVNode(" - full product category name")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#attrs"),
    /* @__PURE__ */ createTextVNode(" - full attributes list in xml format")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#imgs"),
    /* @__PURE__ */ createTextVNode(" - full images list in xml format")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#wp_id"),
    /* @__PURE__ */ createTextVNode(" - id from wp_id private metadata or product id")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#attribute {slug}"),
    /* @__PURE__ */ createTextVNode(" - value from attributes")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#metadata {key}"),
    /* @__PURE__ */ createTextVNode(" - value from public metadata")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "#metadata_private {key}"),
    /* @__PURE__ */ createTextVNode(" - value from private metadata")
  ])
], -1));
const _hoisted_11 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("h3", null, "Global", -1));
const _hoisted_12 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("ul", null, [
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "@shipping_price {currency}"),
    /* @__PURE__ */ createTextVNode(" - lowest shipping price in Google format")
  ]),
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "@file_created_at"),
    /* @__PURE__ */ createTextVNode(" - file creation date")
  ])
], -1));
const _hoisted_13 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("h3", null, "Response", -1));
const _hoisted_14 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("ul", null, [
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "$string"),
    /* @__PURE__ */ createTextVNode(" - raw data from response")
  ])
], -1));
const _hoisted_15 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("h3", null, "Raw", -1));
const _hoisted_16 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createBaseVNode("ul", null, [
  /* @__PURE__ */ createBaseVNode("li", null, [
    /* @__PURE__ */ createBaseVNode("b", null, "string"),
    /* @__PURE__ */ createTextVNode(" - raw string from input")
  ])
], -1));
const _hoisted_17 = /* @__PURE__ */ createTextVNode("Save");
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_a_spin = Spin;
  const _component_a_button = Button;
  const _component_a_descriptions_item = DescriptionsItem;
  const _component_a_descriptions = __unplugin_components_3$1;
  const _component_a_page_header = __unplugin_components_4;
  const _component_a_input = Input;
  const _component_a_form_item = __unplugin_components_6;
  const _component_a_radio_button = __unplugin_components_7;
  const _component_a_radio_group = __unplugin_components_8;
  const _component_a_input_password = __unplugin_components_9;
  const _component_a_textarea = __unplugin_components_10;
  const _component_a_collapse_panel = __unplugin_components_11;
  const _component_a_collapse = Collapse;
  const _component_a_form = Form$1;
  return openBlock(), createElementBlock(Fragment, null, [
    _ctx.isLoading ? (openBlock(), createElementBlock("div", _hoisted_1$1, [
      createVNode(_component_a_spin)
    ])) : createCommentVNode("", true),
    !_ctx.isLoading ? (openBlock(), createElementBlock("div", _hoisted_2, [
      createVNode(_component_a_page_header, {
        title: _ctx.feed.name,
        onBack: _cache[2] || (_cache[2] = () => _ctx.$router.push({ name: "Index" })),
        class: "feed-header"
      }, {
        extra: withCtx(() => [
          _ctx.feed.url ? (openBlock(), createBlock(_component_a_button, {
            key: 0,
            onClick: _cache[0] || (_cache[0] = ($event) => _ctx.copy(_ctx.feed.url))
          }, {
            default: withCtx(() => [
              _hoisted_3
            ]),
            _: 1
          })) : createCommentVNode("", true),
          _ctx.feed.id ? (openBlock(), createBlock(_component_a_button, {
            key: 1,
            onClick: _cache[1] || (_cache[1] = ($event) => _ctx.deleteFeed(_ctx.feed.id)),
            type: "danger"
          }, {
            default: withCtx(() => [
              _hoisted_4
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ]),
        default: withCtx(() => [
          createVNode(_component_a_descriptions, {
            size: "small",
            column: 3
          }, {
            default: withCtx(() => [
              createVNode(_component_a_descriptions_item, { label: "last refreshed" }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(_ctx.feed.refreshed_at ? new Date(_ctx.feed.refreshed_at).toLocaleString() : "not generated yet"), 1)
                ]),
                _: 1
              }),
              createVNode(_component_a_descriptions_item, { label: "processed rows" }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(_ctx.feed.processed_rows ? _ctx.feed.processed_rows : "not generated yet"), 1)
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["title"]),
      createVNode(_component_a_form, {
        model: _ctx.feed,
        "label-col": { span: 3 },
        "wrapper-col": { span: 21 }
      }, {
        default: withCtx(() => [
          createVNode(_component_a_form_item, { label: "Name" }, {
            default: withCtx(() => [
              createVNode(_component_a_input, {
                value: _ctx.feed.name,
                "onUpdate:value": _cache[3] || (_cache[3] = ($event) => _ctx.feed.name = $event),
                rules: [{ required: true }]
              }, null, 8, ["value"])
            ]),
            _: 1
          }),
          createVNode(_component_a_form_item, { label: "Format" }, {
            default: withCtx(() => [
              createVNode(_component_a_radio_group, {
                value: _ctx.feed.format,
                "onUpdate:value": _cache[4] || (_cache[4] = ($event) => _ctx.feed.format = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_a_radio_button, { value: "csv" }, {
                    default: withCtx(() => [
                      _hoisted_5
                    ]),
                    _: 1
                  }),
                  createVNode(_component_a_radio_button, { value: "xml" }, {
                    default: withCtx(() => [
                      _hoisted_6
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["value"])
            ]),
            _: 1
          }),
          createVNode(_component_a_form_item, { label: "Auth" }, {
            default: withCtx(() => [
              createVNode(_component_a_radio_group, {
                value: _ctx.feed.auth,
                "onUpdate:value": _cache[5] || (_cache[5] = ($event) => _ctx.feed.auth = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_a_radio_button, { value: "no" }, {
                    default: withCtx(() => [
                      _hoisted_7
                    ]),
                    _: 1
                  }),
                  createVNode(_component_a_radio_button, { value: "basic" }, {
                    default: withCtx(() => [
                      _hoisted_8
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["value"])
            ]),
            _: 1
          }),
          _ctx.feed.auth === "basic" ? (openBlock(), createBlock(_component_a_form_item, {
            key: 0,
            label: "Username"
          }, {
            default: withCtx(() => [
              createVNode(_component_a_input_password, {
                value: _ctx.feed.username,
                "onUpdate:value": _cache[6] || (_cache[6] = ($event) => _ctx.feed.username = $event),
                password: ""
              }, null, 8, ["value"])
            ]),
            _: 1
          })) : createCommentVNode("", true),
          _ctx.feed.auth === "basic" ? (openBlock(), createBlock(_component_a_form_item, {
            key: 1,
            label: "Password"
          }, {
            default: withCtx(() => [
              createVNode(_component_a_input_password, {
                value: _ctx.feed.password,
                "onUpdate:value": _cache[7] || (_cache[7] = ($event) => _ctx.feed.password = $event),
                password: ""
              }, null, 8, ["value"])
            ]),
            _: 1
          })) : createCommentVNode("", true),
          createVNode(_component_a_form_item, { label: "Query" }, {
            default: withCtx(() => [
              createVNode(_component_a_input, {
                value: _ctx.feed.query,
                "onUpdate:value": _cache[8] || (_cache[8] = ($event) => _ctx.feed.query = $event),
                rules: [{ required: true }]
              }, null, 8, ["value"])
            ]),
            _: 1
          }),
          createVNode(_component_a_form_item, { label: "Fields" }, {
            default: withCtx(() => [
              createVNode(_component_a_textarea, {
                value: _ctx.feed.fields,
                "onUpdate:value": _cache[9] || (_cache[9] = ($event) => _ctx.feed.fields = $event),
                "auto-size": { minRows: 16 },
                rules: [{ required: true }]
              }, null, 8, ["value"])
            ]),
            _: 1
          }),
          createVNode(_component_a_form_item, { label: "Help" }, {
            default: withCtx(() => [
              createVNode(_component_a_collapse, { ghost: "" }, {
                default: withCtx(() => [
                  createVNode(_component_a_collapse_panel, { header: "Available fields" }, {
                    default: withCtx(() => [
                      _hoisted_9,
                      _hoisted_10,
                      _hoisted_11,
                      _hoisted_12,
                      _hoisted_13,
                      _hoisted_14,
                      _hoisted_15,
                      _hoisted_16
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ]),
            _: 1
          }),
          createVNode(_component_a_form_item, { label: "Save" }, {
            default: withCtx(() => [
              createVNode(_component_a_button, {
                type: "primary",
                onClick: _cache[10] || (_cache[10] = ($event) => _ctx.submit(_ctx.feed))
              }, {
                default: withCtx(() => [
                  _hoisted_17
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["model"])
    ])) : createCommentVNode("", true)
  ], 64);
}
var Feed = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1], ["__scopeId", "data-v-3bb8dbed"]]);
const routes = [
  {
    path: "/",
    name: "Index",
    component: Index
  },
  {
    path: "/feed/:id",
    name: "Feed",
    component: Feed
  }
];
const router = createRouter({
  history: createWebHashHistory(),
  routes
});
const state = reactive({ user: null });
const setUser = (user2) => {
  state.user = user2;
};
const user = computed(() => state.user);
function checkPermission(permission) {
  var _a;
  const isInnerPermission = permission.includes("exporter");
  const escapedPermission = permission.replaceAll(".", "\\.");
  const regex = isInnerPermission ? new RegExp(`app..+.${escapedPermission}`) : escapedPermission;
  return (_a = user.value) == null ? void 0 : _a.permissions.some((p2) => p2.match(regex));
}
const useUser = () => ({
  user,
  checkPermission,
  setUser
});
var App_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "App",
  setup() {
    const { setUser: setUser2 } = useUser();
    const { setToken: setToken2 } = useIdentityToken();
    const { setCoreApiUrl: setCoreApiUrl2 } = useCoreApiUrl();
    const { setServiceUrl: setServiceUrl2 } = useServiceUrl();
    const mainChannel = index_umd.exports.openCommunicationChannel("Main");
    const tokenChannel = index_umd.exports.openCommunicationChannel("Token");
    mainChannel.on("init", ({ coreUrl: coreUrl2, serviceUrl: serviceUrl2, token: token2, user: user2 }) => {
      setCoreApiUrl2(coreUrl2);
      setServiceUrl2(serviceUrl2);
      setToken2(token2);
      setUser2(user2);
    });
    tokenChannel.on("set", (newToken) => {
      setToken2(newToken);
    });
  }
});
const _hoisted_1 = { id: "micro-app" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_view = resolveComponent("router-view");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_router_view)
  ]);
}
var App = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var antd = "";
const APP_NAME = "Exporter";
const appFactory = () => {
  return createApp(App).use(router).use(AntDesignVue);
};
const microApp = index_umd.exports.createVue3MicroApp(APP_NAME, appFactory);
index_umd.exports.registerMicroApp(microApp);
if (!index_umd.exports.isParentApp()) {
  const app = appFactory();
  app.mount("#app");
}
